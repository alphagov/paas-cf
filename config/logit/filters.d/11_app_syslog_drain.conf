# If the syslog program is a GUID then the log comes from an application
if [syslog_program] =~ /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/ {
  grok {
    match => [ "syslog_procid", "\[%{GREEDYDATA:app_log_type}\/\d+\]" ]
    tag_on_failure => [ "app/log/type/fail" ]
  }

  mutate {
    add_field => { "[@source][app_id]" => "%{[syslog_program]}" }
  }

  mutate {
    update => { "syslog_program" => "app" }
    update => { "@type" => "LogMessage" }
    # This is an ugly hack to set the correct @source.component if the @type is "LogMessage"
    rename => { "app_log_type" => "[parsed_json_field][source_type]" }
  }

  # When a CF app is syslog drained the @source.host is org.space.app
  # e.g. admin.public.paas-admin
  # e.g. admin.monitoring.paas-metrics
  #
  # We want to index these as
  # @source.org_name
  # @source.space_name
  # @source.app_name
  #
  # to match @source.app_id above
  #
  # We want to split out the values in @source.host without modifying it
  mutate {
    copy => {
      "[@source][host]" => "splithost"
    }
  }

  # We split values and then index them
  mutate {
    split => {
      "splithost" => "."
    }

    add_field => {
      "[@source][org_name]" => "%{splithost[0]}"
      "[@source][space_name]" => "%{splithost[1]}"
      "[@source][app_name]" => "%{splithost[2]}"
    }
  }

  # Now we have indexed the split values we should remove the temporary field
  # so that it is not indexed as an array
  mutate {
    remove_field => ["splithost"]
  }
}
