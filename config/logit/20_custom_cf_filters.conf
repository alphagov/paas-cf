# Drop debug logs
if [@level] == "DEBUG" {
    drop { }
}

# Drop potentially sensitive log lines from the Cloud Controller job queue
if [@source][component] =~ "cloud_controller" {
  if [@message] =~ "about to run job" {
    drop { }
  }
}

if [garden][data][spec] == "" {
  mutate {
    remove_field => [ "[garden][data][spec]" ]
  }
}
if [@source][component] == "gorouter" {
  mutate { replace => { "type" => "gorouter" } }
  grok {
    match => {
      "@message" =>
        '%{HOSTNAME:[gorouter][host]} - \[%{TIMESTAMP_ISO8601:[gorouter][timestamp]}\] "%{WORD:[gorouter][method]} %{URIPATHPARAM:[gorouter][request]} %{NOTSPACE:[gorouter][httpversion]}" %{BASE10NUM:[gorouter][status]} %{BASE10NUM:[gorouter][bytesreceived]} %{BASE10NUM:[gorouter][bytessent]} %{QUOTEDSTRING:[gorouter][referer]} %{QUOTEDSTRING:[gorouter][useragent]} %{QUOTEDSTRING:[gorouter][clientaddr]} %{QUOTEDSTRING:[gorouter][upstreamaddr]} %{GREEDYDATA:routerkeys}'
      }
    add_tag => ["gorouter", "gorouter_access_log"]
  }
  kv {
    source => "routerkeys"
    target => "[gorouter][header]"
    value_split => ":"
    remove_field => "routerkeys"
  }
}
date {
  match => [ "[gorouter][timestamp]", "ISO8601" ]
  target => "@timestamp"
}
mutate {
  remove_field => [ "[gorouter][timestamp]" ]
}
if [@source][component] == "vcap_nginx_access" {
  grok {
    match => {
      "@message" =>
      '%{IPORHOST:[nginx][clientip]} - \[%{HTTPDATE:[nginx][timestamp]}\] "%{WORD:[nginx][verb]} %{URIPATHPARAM:[nginx][request]} HTTP/%{NUMBER:[nginx][httpversion]}" %{NUMBER:[nginx][response]} (?:%{NUMBER:[nginx][bytes]}|-) (?:"(?:%{URI:[nginx][referrer]}|-)"|%{QS:[nginx][referrer]}) %{QS:[nginx][agent]} %{DATA:[nginx][x_forwarded_for]} vcap_request_id:%{UUID:[nginx][external_vcap_request_id]}(::%{UUID:[nginx][internal_vcap_request_id]})? response_time:%{NUMBER:[nginx][response_time]}'
      }
  }

  if ([nginx][internal_vcap_request_id]) {
    mutate {
      add_field => {
        "[nginx][vcap_request_id]" => "%{[nginx][external_vcap_request_id}::%{[nginx][internal_vcap_request_id]}"
      }
    }
  } else {
    mutate {
      copy => { "[nginx][external_vcap_request_id]" => "[nginx][vcap_request_id]" }
    }
  }
}
if [@source][component] == "cloud_controller_ng" {
  grok {
    match => {
      "@message" =>
      'Started %{WORD:[cloud_controller_ng][method]} "%{URIPATHPARAM:[cloud_controller_ng][uri]}" for user: (%{UUID:[cloud_controller_ng][user]})?, ip: %{IP:[cloud_controller_ng][source_ip]}'
      }
  }
}
date {
  match => [ "[nginx][timestamp]", "dd/MMMM/yyyy:HH:mm:ss Z", "dd/MMM/yyyy:HH:mm:ss Z", "ISO8601" ]
  target => "@timestamp"
}
mutate {
  remove_field => [ "[nginx][timestamp]" ]
}

# If the JSON message was succesfully parsed and @message is still in JSON, then we can remove it
if [@source][component] == "app" and !("unknown_msg_format" in [tags]) and [@message] =~ /^\s*{".*}\s*$/ {
  mutate {
    remove_field => "@message"
  }
}

# Remove unnecessary or empty fields
mutate {
  remove_field => [
    "syslog5424_ver",
    "syslog6587_msglen",
    "syslog_msgid",
    "syslog_procid",
    "syslog_sd_id"
  ]
}

# Some gorouter fields are numbers
mutate {
  convert => {
    "[gorouter][header][response_time]" => "float"
    "[gorouter][header][gorouter_time]" => "float"
    "[gorouter][header][app_time]" => "float"
    "[gorouter][bytessent]" => "integer"
    "[gorouter][bytesreceived]" => "integer"
  }
}
