mutate {
  add_field => [ "type", "syslog" ]
}

#
# rewrite our defined globals
#

if [type] == 'redis' or [type] == 'redis-input' {
    mutate {
        remove_field => [ 'type' ]
    }
}

if [type] != '' {
    mutate {
        rename => [ "type", "@type" ]
    }
}

if [message] != '' {
    mutate {
        rename => [ "message", "@message" ]
    }
} else if [message] == '' and [@message] !~ /^.+$/ {
    drop { }
}

#
# avoid bad interpolations, like `%{type}` when its missing
#

if [@type] == "" {
    mutate {
        add_field => [ "@type", "unknown" ]
    }
}

#
# ignore particularly useless lines
#

if [@message] =~ /^\s*$/ or [@message] =~ /^#.*$/ {
    drop { }
}

#
# trim excess whitespace
#

mutate {
    strip => [ "@message" ]
}

#
# Additional filter types from deployment manifest
#
if [@message] =~ "AWS_ACCESS_KEY_ID" {
  mutate {
    add_tag => ["_redacted"]
    gsub => [
      "@message", "AWS_ACCESS_KEY_ID=(.{3}).{17}", "AWS_ACCESS_KEY_ID=\1******"
    ]
  }
}

if [@message] =~ "AWS_SECRET_ACCESS_KEY" {
  mutate {
    add_tag => ["_redacted"]
    gsub => [
      "@message", "AWS_SECRET_ACCESS_KEY=(.{3}).{37}", "AWS_SECRET_ACCESS_KEY=\1******"
    ]
  }
}

if "_redacted" in [tags] {
  mutate {
    remove_tag => [ "_redacted" ]
    add_tag => ["redacted"]
  }
}


if [@type] in ["syslog", "relp"] {
    # syslog/relp

  grok {
      match => { "@message" => "(?:%{INT:syslog6587_msglen} )?<%{POSINT:syslog_pri}>(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?(:)? %{GREEDYDATA:syslog_message}" }
      match => { "@message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}\[%{POSINT:syslog_pid}\]: %{GREEDYDATA:syslog_message}" }
      add_tag => [ "syslog_standard" ]
      add_field => { "@raw" => "%{@message}"}
      tag_on_failure => ["fail/syslog_standard/_grokparsefailure"]
  }

  if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
      syslog_pri { }

      date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
          timezone => "UTC"
          remove_field => "syslog_timestamp"
      }

      # Populate @source.host
      mutate {
          add_field => [ "[@source][host]", "%{syslog_hostname}" ]
      }

      mutate {
          convert => [ "syslog5424_ver", "integer" ]
          convert => [ "syslog6587_msglen", "integer" ]
      }

      if [syslog5424_ver] == 1 {
          grok {
              # I don't think this is rfc5424-legal because it says SD *must* exist and message *may* exist.
              # However, this makes parsing compatible with common syslog implementations.
              match => [ "syslog_message", "(?:%{DATA:syslog_procid}|\-) (?:%{DATA:syslog_msgid}|\-)(?: %{SYSLOG5424SD:syslog_sd}| \-)? %{GREEDYDATA:syslog_message}" ]
              overwrite => [
                  "syslog_message"
              ]
              tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424" ]
          }

          # structured-data
          if [syslog_sd] {
              grok {
                  match => [ "syslog_sd", "\[%{DATA:syslog_sd_id} (?<syslog_sd_params_raw]>[^\]]+)\]" ]
                  remove_field => [
                      "syslog_sd"
                  ]
                  tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sds" ]
              }

              if !("fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sd" in [tags]) {
                  # convert the the key-value pairs
                  kv {
                      source => "syslog_sd_params_raw"
                      target => "syslog_sd_params"
                      remove_field => [
                          "syslog_sd_params_raw"
                      ]
                  }
                  # When an additional host is specified in the sd_params, promote syslog_hostname to @shipper.host
                  # and replace @source.host with sd_params.host
                  if [syslog_sd_params][host] {
                    mutate {
                      add_field => { "[@shipper][host]" => "%{[syslog_hostname]}" }
                      replace => { "[@source][host]" => "%{[syslog_sd_params][host]}" }
                    }
                  }

                  if [syslog_sd_params][type] {
                     # when the syslog params include a type, prepare the message for parsing by additional downstream parsing rules:
                     #  - Change the @type - this triggers downstream parsing rules
                     #  - @message_body = 'unparsed' message body that will be parsed by downstream @type rules
                     mutate {
                         replace => { "@type" => "%{syslog_sd_params[type]}" }
                     }

                  }
              }
          }
      }

      # @message should contain the remaining unparsed text
      mutate {
        rename => { "syslog_message" => "@message" }
      }

  }

}
