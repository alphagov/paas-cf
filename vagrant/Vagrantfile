# -*- mode: ruby -*-
# vi: set ft=ruby :

def secretFromPass(path, default)
  secret = `paas-pass 2>/dev/null #{path}`
  return default if secret == ""
  secret.strip
end

Vagrant.require_version ">= 1.8.0"

AWS_ACCOUNT = ENV.fetch("AWS_ACCOUNT", "dev")
AWS_ACCOUNT_DATA = {
  "dev" => {
    subnet_id: secretFromPass('paas-cf/dev-subnet-id', 'subnet-d55defe8'), # us-east-1e in default VPC, 172.31.32.0/20 range
    security_group: secretFromPass('paas-cf/dev-security-group', 'sg-99e0c0e0'), # "Bootstrap Concourse" security group
  },
  "ci" => {
    subnet_id: secretFromPass('paas-cf/ci-subnet-id', 'subnet-68bb7e30'), # us-east-1a in default VPC, 172.31.16.0/20 range
    security_group: secretFromPass('paas-cf/ci-security-group', 'sg-23e1c15a'), # "Bootstrap Concourse" security group
  },
  "staging" => {
    subnet_id: secretFromPass('paas-cf/staging-subnet-id', 'subnet-9034fbc8'), # us-east-1c in default VPC, 172.31.16.0/20 range
    security_group: secretFromPass('paas-cf/staging-security-group', 'sg-87e1c1fe'), # "Bootstrap Concourse" security group
  },
  "prod" => {
    subnet_id: secretFromPass('paas-cf/prod-subnet-id', 'subnet-bc34fbe4'), # us-east-1a in default VPC, 172.31.16.0/20 range
    security_group: secretFromPass('paas-cf/prod-security-group', 'sg-14e2c26d'), # "Bootstrap Concourse" security group
  },
}.freeze
AWS_ACCOUNT_VARIABLES = AWS_ACCOUNT_DATA.fetch(AWS_ACCOUNT)

Vagrant.configure(2) do |config|
  config.vm.box = ENV['VAGRANT_BOX_NAME'] || 'aws_vagrant_box'

  Dir.glob("./post-deploy.d/*").sort.each do |post_deploy_file|
    config.vm.provision "shell" do |s|
      s.privileged = true
      s.env = ENV.select { |key|
        %w(CONCOURSE_ATC_PASSWORD CONCOURSE_ATC_USER).include? key
      }
      s.name = post_deploy_file
      s.path = post_deploy_file
    end
  end

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.associate_public_ip = true
    aws.tags = { 'Name' => (ENV['DEPLOY_ENV'] || ENV['USER']) + " concourse" }

    # The Concourse AMI is currently only available in us-east-1, this is v. 0.70
    aws.ami = 'ami-5c104436'
    aws.region = 'us-east-1'

    # Only HVM instances with ephemeral disks can be used
    aws.instance_type = 'm3.large'

    aws.subnet_id = AWS_ACCOUNT_VARIABLES.fetch(:subnet_id)
    aws.security_groups = [AWS_ACCOUNT_VARIABLES.fetch(:security_group)]

    # Add IAM role to allow access to necessary AWS APIs
    aws.iam_instance_profile_name = 'bootstrap-concourse'

    # We will rely on vagrant generating a ssh key, but this must be the ubuntu user, as the vagrant user does not exist on the vm
    override.ssh.username = "ubuntu"

    # Fix issue on osx: https://github.com/mitchellh/vagrant/issues/5401#issuecomment-115240904
    override.nfs.functional = false
  end
end
