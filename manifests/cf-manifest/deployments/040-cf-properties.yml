meta:
  environment: ~
  default_quota_definitions:
    default:
       memory_limit: 2048
       total_services: 10
       non_basic_services_allowed: false
       total_routes: 1000
  secrets:
    consul_ca_cert: (( grab secrets.bosh_ca_cert ))
    bbs_ca_cert: (( grab secrets.bosh_ca_cert ))

properties:
  app_ssh: ~

  loggregator:
    maxRetainedLogMessages: 100
    debug: false
    blacklisted_syslog_ranges: ~
    outgoing_dropsonde_port: 8081
    dropsonde_incoming_port: 3457
    traffic_controller_url: (( concat "wss://doppler." properties.system_domain ":443" ))
    tls:
      ca: ~

  doppler:
    maxRetainedLogMessages: 100
    debug: false
    blacklisted_syslog_ranges: ~
    unmarshaller_count: 5
    port: 443
    enable_tls_transport: ~
    tls_server:
      cert: ~
      port: ~
      key: ~

  metron_agent:
    deployment: (( grab meta.environment ))
    preferred_protocol: ~
    enable_buffer: ~
    buffer_size: ~
    dropsonde_incoming_port: (( grab properties.loggregator.dropsonde_incoming_port ))
    tls_client:
      cert: ~
      key: ~

  traffic_controller:
    outgoing_port: 8080

  cc:
    jobs:
      global:
        timeout_in_seconds: 14400 # 4 hours
      app_bits_packer:
        timeout_in_seconds: ~
      app_events_cleanup:
        timeout_in_seconds: ~
      app_usage_events_cleanup:
        timeout_in_seconds: ~
      blobstore_delete:
        timeout_in_seconds: ~
      blobstore_upload:
        timeout_in_seconds: ~
      droplet_deletion:
        timeout_in_seconds: ~
      droplet_upload:
        timeout_in_seconds: ~
      model_deletion:
        timeout_in_seconds: ~
      generic:
        number_of_workers: ~

    app_events:
      cutoff_age_in_days: 31
    app_usage_events:
      cutoff_age_in_days: 31
    service_usage_events:
      cutoff_age_in_days: 31
    audit_events:
      cutoff_age_in_days: 31

    users_can_select_backend: false
    default_to_diego_backend: true
    allow_app_ssh_access: true
    default_app_memory: 1024
    default_app_disk_in_mb: 1024
    maximum_app_disk_in_mb: 2048
    client_max_body_size: 15M

    default_health_check_timeout: 60
    maximum_health_check_timeout: 180

    min_cli_version: ~
    min_recommended_cli_version: ~

    external_host: api
    external_port: 9022
    srv_api_uri: (( concat "https://" properties.cc.external_host "." properties.domain ))

    internal_api_user: "internal_user"
    internal_api_password: (( grab properties.cc.bulk_api_password ))

    logging_level: info
    db_logging_level: debug

    directories: ~

    disable_custom_buildpacks: false

    broker_client_timeout_seconds: 70
    broker_client_default_async_poll_interval_seconds: ~
    broker_client_max_async_poll_duration_minutes: ~

    resource_pool:
      resource_directory_key: (( concat meta.environment "-cf-resources" ))
      fog_connection: ~
      cdn: ~

    packages:
      app_package_directory_key: (( concat meta.environment "-cf-packages" ))
      fog_connection: ~
      cdn: ~
      max_package_size: 1073741824
      max_valid_packages_stored: ~

    droplets:
      droplet_directory_key: (( concat meta.environment "-cf-droplets" ))
      fog_connection: ~
      cdn: ~
      max_staged_droplets_stored: ~

    development_mode: false

    newrelic:
      license_key: ~
      environment_name: (( grab meta.environment ))
      developer_mode: (( grab properties.cc.development_mode ))
      monitor_mode: false
      capture_params: false
      transaction_tracer:
        enabled: true
        record_sql: "obfuscated"

    buildpacks:
      buildpack_directory_key: (( concat meta.environment "-cf-buildpacks" ))
      fog_connection: ~
      cdn: ~
    quota_definitions: (( grab meta.default_quota_definitions ))
    default_quota_definition: default

    user_buildpacks: []
    system_buildpacks: (( grab properties.cc.default_buildpacks ))
    default_buildpacks:
      - name: staticfile_buildpack
        package: buildpack_staticfile
      - name: java_buildpack
        package: buildpack_java
      - name: ruby_buildpack
        package: buildpack_ruby
      - name: nodejs_buildpack
        package: buildpack_nodejs
      - name: go_buildpack
        package: buildpack_go
      - name: python_buildpack
        package: buildpack_python
      - name: php_buildpack
        package: buildpack_php
      - name: binary_buildpack
        package: buildpack_binary

    install_buildpacks: (( grab properties.cc.system_buildpacks properties.cc.user_buildpacks ))

    stacks: ~

    allowed_cors_domains: []
    thresholds:
      api:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
      worker:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
    external_protocol: ~

  login:
    enabled: true
    analytics:
      code: ~
      domain: ~
    url: ~
    catalina_opts: ~
    protocol: ~
    brand: oss
    asset_base_url: ~
    uaa_base: ~
    self_service_links_enabled: ~
    signups_enabled: ~
    invitations_enabled: ~
    spring_profiles: ~
    messages: ~

    notifications:
      url: ~

    smtp:
      host: ~
      port: ~
      user: ~
      password: ~

    links:
      passwd: (( concat "https://console." properties.domain "/password_resets/new" ))
      signup: (( concat "https://console." properties.domain "/register" ))

    logout: ~

    tiles: ~

    saml: ~

    restricted_ips_regex: ~

  uaa:
    url: (( concat "https://uaa." properties.domain ))
    issuer: (( grab properties.uaa.url ))
    ssh_proxy_client_secret: (( grab secrets.uaa_admin_client_secret ))
    token_url: (( concat properties.uaa.url "/oauth/token" ))

    no_ssl: ~
    require_https: false

    scim:
      userids_enabled: true
      external_groups: ~
      groups: ~

    ssl:
      port: -1

    authentication:
      policy:
        lockoutAfterFailures: ~
        countFailuresWithinSeconds: ~
        lockoutPeriodSeconds: ~

    login: ~

    ldap: ~

    newrelic: ~
    port: 8080
    spring_profiles: ~

    user: ~

    clients:
      login:
        override: true
        scope: openid,oauth.approvals
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        redirect-uri: (( concat "https://login." properties.domain ))
      cf:
        id: cf
        override: true
        authorized-grant-types: implicit,password,refresh_token
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read
        authorities: uaa.none
        access-token-validity: 600
        refresh-token-validity: 2592000
      notifications:
        authorities: cloud_controller.admin,scim.read
        authorized-grant-types: client_credentials
      doppler:
        override: true
        authorities: uaa.resource
      cloud_controller_username_lookup:
        authorities: scim.userids
        authorized-grant-types: client_credentials
      cc_routing:
        authorities: routing.router_groups.read
        authorized-grant-types: client_credentials
      gorouter:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
      tcp_emitter:
        authorities: routing.routes.write,routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
      tcp_router:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: /login
        scope: openid,cloud_controller.read,cloud_controller.write
        secret: ssh-proxy-secret
      graphite-nozzle:
        access-token-validity: 1209600
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        secret: (( grab secrets.uaa_clients_firehose_password ))
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose

    database: ~

    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}

    zones:

  diego:
    ssl:
      skip_cert_verify: true
    auctioneer:
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert  ))
        client_key: (( grab secrets.bbs_client_key  ))
        require_ssl: true
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))

    bbs:
      active_key_label: keylabel1
      encryption_keys:
        - label: keylabel1
          passphrase: "a secure passphrase"
      ca_cert: (( grab meta.secrets.bbs_ca_cert ))
      server_cert: (( grab secrets.bbs_server_cert ))
      server_key: (( grab secrets.bbs_server_key ))
      auctioneer:
        api_url: http://auctioneer.service.cf.internal:9016
      etcd:
        machines: (( grab meta.etcd_consul_service ))
        ca_cert: (( grab meta.secrets.consul_ca_cert ))
        client_cert: (( grab secrets.consul_agent_cert ))
        client_key: (( grab secrets.consul_agent_key ))
        require_ssl: false
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      require_ssl: true

    converger:
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.consul_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert  ))
        client_key: (( grab secrets.bbs_client_key  ))
        require_ssl: true
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))

    file_server:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))

    cc_uploader:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      cc:
        base_url: (( grab properties.cc.srv_api_uri ))
        basic_auth_password: (( grab properties.cc.internal_api_password ))
        staging_upload_user: (( grab properties.cc.staging_upload_user ))
        staging_upload_password: (( grab properties.cc.staging_upload_password ))

    nsync:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert  ))
        client_key: (( grab secrets.bbs_client_key  ))
        require_ssl: true

      cc:
        base_url:  (( grab properties.cc.srv_api_uri ))
        basic_auth_password: (( grab properties.cc.internal_api_password ))
        staging_upload_user: (( grab properties.cc.staging_upload_user ))
        staging_upload_password: (( grab properties.cc.staging_upload_password ))

    rep:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert ))
        client_key: (( grab secrets.bbs_client_key ))
        require_ssl: true

    route_emitter:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert ))
        client_key: (( grab secrets.bbs_client_key ))
        require_ssl: true
      nats:
        machines: (( grab properties.nats.machines ))
        user: (( grab properties.nats.user ))
        password: (( grab properties.nats.password ))
        port: (( grab properties.nats.port ))

    ssh_proxy:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert ))
        client_key: (( grab secrets.bbs_client_key ))
        require_ssl: true
      host_key: (( grab secrets.consul_server_key ))

      uaa_secret: (( grab properties.uaa.ssh_proxy_client_secret ))
      uaa_token_url: (( grab properties.uaa.token_url ))

    stager:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert ))
        client_key: (( grab secrets.bbs_client_key ))
        require_ssl: true
      cc:
        base_url: (( grab properties.cc.srv_api_uri ))
        basic_auth_password: (( grab properties.cc.internal_api_password ))
        staging_upload_user: (( grab properties.cc.staging_upload_user ))
        staging_upload_password: (( grab properties.cc.staging_upload_password ))

    tps:
      dropsonde_port: (( grab properties.metron_agent.dropsonde_incoming_port ))
      cc:
        base_url: (( grab properties.cc.srv_api_uri ))
        basic_auth_password: (( grab properties.cc.internal_api_password ))
        staging_upload_user: (( grab properties.cc.staging_upload_user ))
        staging_upload_password: (( grab properties.cc.staging_upload_password ))
      bbs:
        api_location: bbs.service.cf.internal:8889
        ca_cert: (( grab meta.secrets.bbs_ca_cert ))
        client_cert: (( grab secrets.bbs_client_cert ))
        client_key: (( grab secrets.bbs_client_key ))
        require_ssl: true
      traffic_controller_url: (( grab properties.loggregator.traffic_controller_url ))
      # Override because this is wrong in diego version 0.1441.0
      watcher:
        debug_addr: 0.0.0.0:17015

base_job_templates:
  brain:
    - name: consul_agent
      release: cf
    - name: auctioneer
      release: diego
    - name: converger
      release: diego
    - name: metron_agent
      release: cf
  cell:
    - name: rep
      release: diego
    - name: consul_agent
      release: cf
    - name: garden
      release: garden-linux
    - name: rootfses
      release: diego
    - name: metron_agent
      release: cf
  cc_bridge:
    - name: stager
      release: diego
    - name: nsync
      release: diego
    - name: tps
      release: diego
    - name: cc_uploader
      release: diego
    - name: consul_agent
      release: cf
    - name: metron_agent
      release: cf
  route_emitter:
    - name: route_emitter
      release: diego
    - name: consul_agent
      release: cf
    - name: metron_agent
      release: cf
  access:
    - name: ssh_proxy
      release: diego
    - name: consul_agent
      release: cf
    - name: metron_agent
      release: cf
    - name: file_server
      release: diego
  database:
    - name: bbs
      release: diego
    - name: consul_agent
      release: cf
    - name: metron_agent
      release: cf
  colocated:
    - name: auctioneer
      release: diego
    - name: bbs
      release: diego
    - name: cc_uploader
      release: diego
    - name: converger
      release: diego
    - name: consul_agent
      release: cf
    - name: file_server
      release: diego
    - name: metron_agent
      release: cf
    - name: nsync
      release: diego
    - name: route_emitter
      release: diego
    - name: ssh_proxy
      release: diego
    - name: stager
      release: diego
    - name: tps
      release: diego
