// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
	"github.com/aws/aws-sdk-go/service/elasticache/elasticacheiface"
)

type FakeElastiCacheAPI struct {
	AddTagsToResourceStub        func(*elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)
	addTagsToResourceMutex       sync.RWMutex
	addTagsToResourceArgsForCall []struct {
		arg1 *elasticache.AddTagsToResourceInput
	}
	addTagsToResourceReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	addTagsToResourceReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	AddTagsToResourceRequestStub        func(*elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage)
	addTagsToResourceRequestMutex       sync.RWMutex
	addTagsToResourceRequestArgsForCall []struct {
		arg1 *elasticache.AddTagsToResourceInput
	}
	addTagsToResourceRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	addTagsToResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	AddTagsToResourceWithContextStub        func(context.Context, *elasticache.AddTagsToResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	addTagsToResourceWithContextMutex       sync.RWMutex
	addTagsToResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.AddTagsToResourceInput
		arg3 []request.Option
	}
	addTagsToResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	addTagsToResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	AuthorizeCacheSecurityGroupIngressStub        func(*elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	authorizeCacheSecurityGroupIngressMutex       sync.RWMutex
	authorizeCacheSecurityGroupIngressArgsForCall []struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	authorizeCacheSecurityGroupIngressReturns struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	authorizeCacheSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	AuthorizeCacheSecurityGroupIngressRequestStub        func(*elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput)
	authorizeCacheSecurityGroupIngressRequestMutex       sync.RWMutex
	authorizeCacheSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	authorizeCacheSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}
	authorizeCacheSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}
	AuthorizeCacheSecurityGroupIngressWithContextStub        func(context.Context, *elasticache.AuthorizeCacheSecurityGroupIngressInput, ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	authorizeCacheSecurityGroupIngressWithContextMutex       sync.RWMutex
	authorizeCacheSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}
	authorizeCacheSecurityGroupIngressWithContextReturns struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	authorizeCacheSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	BatchApplyUpdateActionStub        func(*elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error)
	batchApplyUpdateActionMutex       sync.RWMutex
	batchApplyUpdateActionArgsForCall []struct {
		arg1 *elasticache.BatchApplyUpdateActionInput
	}
	batchApplyUpdateActionReturns struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}
	batchApplyUpdateActionReturnsOnCall map[int]struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}
	BatchApplyUpdateActionRequestStub        func(*elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput)
	batchApplyUpdateActionRequestMutex       sync.RWMutex
	batchApplyUpdateActionRequestArgsForCall []struct {
		arg1 *elasticache.BatchApplyUpdateActionInput
	}
	batchApplyUpdateActionRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.BatchApplyUpdateActionOutput
	}
	batchApplyUpdateActionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.BatchApplyUpdateActionOutput
	}
	BatchApplyUpdateActionWithContextStub        func(context.Context, *elasticache.BatchApplyUpdateActionInput, ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error)
	batchApplyUpdateActionWithContextMutex       sync.RWMutex
	batchApplyUpdateActionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.BatchApplyUpdateActionInput
		arg3 []request.Option
	}
	batchApplyUpdateActionWithContextReturns struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}
	batchApplyUpdateActionWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}
	BatchStopUpdateActionStub        func(*elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error)
	batchStopUpdateActionMutex       sync.RWMutex
	batchStopUpdateActionArgsForCall []struct {
		arg1 *elasticache.BatchStopUpdateActionInput
	}
	batchStopUpdateActionReturns struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}
	batchStopUpdateActionReturnsOnCall map[int]struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}
	BatchStopUpdateActionRequestStub        func(*elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput)
	batchStopUpdateActionRequestMutex       sync.RWMutex
	batchStopUpdateActionRequestArgsForCall []struct {
		arg1 *elasticache.BatchStopUpdateActionInput
	}
	batchStopUpdateActionRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.BatchStopUpdateActionOutput
	}
	batchStopUpdateActionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.BatchStopUpdateActionOutput
	}
	BatchStopUpdateActionWithContextStub        func(context.Context, *elasticache.BatchStopUpdateActionInput, ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error)
	batchStopUpdateActionWithContextMutex       sync.RWMutex
	batchStopUpdateActionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.BatchStopUpdateActionInput
		arg3 []request.Option
	}
	batchStopUpdateActionWithContextReturns struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}
	batchStopUpdateActionWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}
	CompleteMigrationStub        func(*elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error)
	completeMigrationMutex       sync.RWMutex
	completeMigrationArgsForCall []struct {
		arg1 *elasticache.CompleteMigrationInput
	}
	completeMigrationReturns struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}
	completeMigrationReturnsOnCall map[int]struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}
	CompleteMigrationRequestStub        func(*elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput)
	completeMigrationRequestMutex       sync.RWMutex
	completeMigrationRequestArgsForCall []struct {
		arg1 *elasticache.CompleteMigrationInput
	}
	completeMigrationRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CompleteMigrationOutput
	}
	completeMigrationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CompleteMigrationOutput
	}
	CompleteMigrationWithContextStub        func(context.Context, *elasticache.CompleteMigrationInput, ...request.Option) (*elasticache.CompleteMigrationOutput, error)
	completeMigrationWithContextMutex       sync.RWMutex
	completeMigrationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CompleteMigrationInput
		arg3 []request.Option
	}
	completeMigrationWithContextReturns struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}
	completeMigrationWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}
	CopySnapshotStub        func(*elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)
	copySnapshotMutex       sync.RWMutex
	copySnapshotArgsForCall []struct {
		arg1 *elasticache.CopySnapshotInput
	}
	copySnapshotReturns struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	copySnapshotReturnsOnCall map[int]struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	CopySnapshotRequestStub        func(*elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput)
	copySnapshotRequestMutex       sync.RWMutex
	copySnapshotRequestArgsForCall []struct {
		arg1 *elasticache.CopySnapshotInput
	}
	copySnapshotRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}
	copySnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}
	CopySnapshotWithContextStub        func(context.Context, *elasticache.CopySnapshotInput, ...request.Option) (*elasticache.CopySnapshotOutput, error)
	copySnapshotWithContextMutex       sync.RWMutex
	copySnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CopySnapshotInput
		arg3 []request.Option
	}
	copySnapshotWithContextReturns struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	copySnapshotWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	CreateCacheClusterStub        func(*elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)
	createCacheClusterMutex       sync.RWMutex
	createCacheClusterArgsForCall []struct {
		arg1 *elasticache.CreateCacheClusterInput
	}
	createCacheClusterReturns struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	createCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	CreateCacheClusterRequestStub        func(*elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput)
	createCacheClusterRequestMutex       sync.RWMutex
	createCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheClusterInput
	}
	createCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}
	createCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}
	CreateCacheClusterWithContextStub        func(context.Context, *elasticache.CreateCacheClusterInput, ...request.Option) (*elasticache.CreateCacheClusterOutput, error)
	createCacheClusterWithContextMutex       sync.RWMutex
	createCacheClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheClusterInput
		arg3 []request.Option
	}
	createCacheClusterWithContextReturns struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	createCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	CreateCacheParameterGroupStub        func(*elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)
	createCacheParameterGroupMutex       sync.RWMutex
	createCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}
	createCacheParameterGroupReturns struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	createCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	CreateCacheParameterGroupRequestStub        func(*elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput)
	createCacheParameterGroupRequestMutex       sync.RWMutex
	createCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}
	createCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}
	createCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}
	CreateCacheParameterGroupWithContextStub        func(context.Context, *elasticache.CreateCacheParameterGroupInput, ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)
	createCacheParameterGroupWithContextMutex       sync.RWMutex
	createCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheParameterGroupInput
		arg3 []request.Option
	}
	createCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	createCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	CreateCacheSecurityGroupStub        func(*elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)
	createCacheSecurityGroupMutex       sync.RWMutex
	createCacheSecurityGroupArgsForCall []struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}
	createCacheSecurityGroupReturns struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	createCacheSecurityGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	CreateCacheSecurityGroupRequestStub        func(*elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput)
	createCacheSecurityGroupRequestMutex       sync.RWMutex
	createCacheSecurityGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}
	createCacheSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}
	createCacheSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}
	CreateCacheSecurityGroupWithContextStub        func(context.Context, *elasticache.CreateCacheSecurityGroupInput, ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error)
	createCacheSecurityGroupWithContextMutex       sync.RWMutex
	createCacheSecurityGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheSecurityGroupInput
		arg3 []request.Option
	}
	createCacheSecurityGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	createCacheSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	CreateCacheSubnetGroupStub        func(*elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)
	createCacheSubnetGroupMutex       sync.RWMutex
	createCacheSubnetGroupArgsForCall []struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}
	createCacheSubnetGroupReturns struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	createCacheSubnetGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	CreateCacheSubnetGroupRequestStub        func(*elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput)
	createCacheSubnetGroupRequestMutex       sync.RWMutex
	createCacheSubnetGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}
	createCacheSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}
	createCacheSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}
	CreateCacheSubnetGroupWithContextStub        func(context.Context, *elasticache.CreateCacheSubnetGroupInput, ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error)
	createCacheSubnetGroupWithContextMutex       sync.RWMutex
	createCacheSubnetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheSubnetGroupInput
		arg3 []request.Option
	}
	createCacheSubnetGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	createCacheSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	CreateGlobalReplicationGroupStub        func(*elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error)
	createGlobalReplicationGroupMutex       sync.RWMutex
	createGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.CreateGlobalReplicationGroupInput
	}
	createGlobalReplicationGroupReturns struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}
	createGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}
	CreateGlobalReplicationGroupRequestStub        func(*elasticache.CreateGlobalReplicationGroupInput) (*request.Request, *elasticache.CreateGlobalReplicationGroupOutput)
	createGlobalReplicationGroupRequestMutex       sync.RWMutex
	createGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateGlobalReplicationGroupInput
	}
	createGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateGlobalReplicationGroupOutput
	}
	createGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateGlobalReplicationGroupOutput
	}
	CreateGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.CreateGlobalReplicationGroupInput, ...request.Option) (*elasticache.CreateGlobalReplicationGroupOutput, error)
	createGlobalReplicationGroupWithContextMutex       sync.RWMutex
	createGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateGlobalReplicationGroupInput
		arg3 []request.Option
	}
	createGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}
	createGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}
	CreateReplicationGroupStub        func(*elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)
	createReplicationGroupMutex       sync.RWMutex
	createReplicationGroupArgsForCall []struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}
	createReplicationGroupReturns struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	createReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	CreateReplicationGroupRequestStub        func(*elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput)
	createReplicationGroupRequestMutex       sync.RWMutex
	createReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}
	createReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}
	createReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}
	CreateReplicationGroupWithContextStub        func(context.Context, *elasticache.CreateReplicationGroupInput, ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)
	createReplicationGroupWithContextMutex       sync.RWMutex
	createReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateReplicationGroupInput
		arg3 []request.Option
	}
	createReplicationGroupWithContextReturns struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	createReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	CreateSnapshotStub        func(*elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		arg1 *elasticache.CreateSnapshotInput
	}
	createSnapshotReturns struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	createSnapshotReturnsOnCall map[int]struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	CreateSnapshotRequestStub        func(*elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput)
	createSnapshotRequestMutex       sync.RWMutex
	createSnapshotRequestArgsForCall []struct {
		arg1 *elasticache.CreateSnapshotInput
	}
	createSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}
	createSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}
	CreateSnapshotWithContextStub        func(context.Context, *elasticache.CreateSnapshotInput, ...request.Option) (*elasticache.CreateSnapshotOutput, error)
	createSnapshotWithContextMutex       sync.RWMutex
	createSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateSnapshotInput
		arg3 []request.Option
	}
	createSnapshotWithContextReturns struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	createSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	DecreaseNodeGroupsInGlobalReplicationGroupStub        func(*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	decreaseNodeGroupsInGlobalReplicationGroupMutex       sync.RWMutex
	decreaseNodeGroupsInGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}
	decreaseNodeGroupsInGlobalReplicationGroupReturns struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	decreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	DecreaseNodeGroupsInGlobalReplicationGroupRequestStub        func(*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput)
	decreaseNodeGroupsInGlobalReplicationGroupRequestMutex       sync.RWMutex
	decreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}
	decreaseNodeGroupsInGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	}
	decreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	}
	DecreaseNodeGroupsInGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, ...request.Option) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex       sync.RWMutex
	decreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
		arg3 []request.Option
	}
	decreaseNodeGroupsInGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	decreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	DecreaseReplicaCountStub        func(*elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error)
	decreaseReplicaCountMutex       sync.RWMutex
	decreaseReplicaCountArgsForCall []struct {
		arg1 *elasticache.DecreaseReplicaCountInput
	}
	decreaseReplicaCountReturns struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}
	decreaseReplicaCountReturnsOnCall map[int]struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}
	DecreaseReplicaCountRequestStub        func(*elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput)
	decreaseReplicaCountRequestMutex       sync.RWMutex
	decreaseReplicaCountRequestArgsForCall []struct {
		arg1 *elasticache.DecreaseReplicaCountInput
	}
	decreaseReplicaCountRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DecreaseReplicaCountOutput
	}
	decreaseReplicaCountRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DecreaseReplicaCountOutput
	}
	DecreaseReplicaCountWithContextStub        func(context.Context, *elasticache.DecreaseReplicaCountInput, ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error)
	decreaseReplicaCountWithContextMutex       sync.RWMutex
	decreaseReplicaCountWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DecreaseReplicaCountInput
		arg3 []request.Option
	}
	decreaseReplicaCountWithContextReturns struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}
	decreaseReplicaCountWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}
	DeleteCacheClusterStub        func(*elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)
	deleteCacheClusterMutex       sync.RWMutex
	deleteCacheClusterArgsForCall []struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}
	deleteCacheClusterReturns struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	deleteCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	DeleteCacheClusterRequestStub        func(*elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput)
	deleteCacheClusterRequestMutex       sync.RWMutex
	deleteCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}
	deleteCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}
	deleteCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}
	DeleteCacheClusterWithContextStub        func(context.Context, *elasticache.DeleteCacheClusterInput, ...request.Option) (*elasticache.DeleteCacheClusterOutput, error)
	deleteCacheClusterWithContextMutex       sync.RWMutex
	deleteCacheClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheClusterInput
		arg3 []request.Option
	}
	deleteCacheClusterWithContextReturns struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	deleteCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	DeleteCacheParameterGroupStub        func(*elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)
	deleteCacheParameterGroupMutex       sync.RWMutex
	deleteCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}
	deleteCacheParameterGroupReturns struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	deleteCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	DeleteCacheParameterGroupRequestStub        func(*elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput)
	deleteCacheParameterGroupRequestMutex       sync.RWMutex
	deleteCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}
	deleteCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}
	deleteCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}
	DeleteCacheParameterGroupWithContextStub        func(context.Context, *elasticache.DeleteCacheParameterGroupInput, ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)
	deleteCacheParameterGroupWithContextMutex       sync.RWMutex
	deleteCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheParameterGroupInput
		arg3 []request.Option
	}
	deleteCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	deleteCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	DeleteCacheSecurityGroupStub        func(*elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	deleteCacheSecurityGroupMutex       sync.RWMutex
	deleteCacheSecurityGroupArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}
	deleteCacheSecurityGroupReturns struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	deleteCacheSecurityGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	DeleteCacheSecurityGroupRequestStub        func(*elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput)
	deleteCacheSecurityGroupRequestMutex       sync.RWMutex
	deleteCacheSecurityGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}
	deleteCacheSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}
	deleteCacheSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}
	DeleteCacheSecurityGroupWithContextStub        func(context.Context, *elasticache.DeleteCacheSecurityGroupInput, ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	deleteCacheSecurityGroupWithContextMutex       sync.RWMutex
	deleteCacheSecurityGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheSecurityGroupInput
		arg3 []request.Option
	}
	deleteCacheSecurityGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	deleteCacheSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	DeleteCacheSubnetGroupStub        func(*elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	deleteCacheSubnetGroupMutex       sync.RWMutex
	deleteCacheSubnetGroupArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}
	deleteCacheSubnetGroupReturns struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	deleteCacheSubnetGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	DeleteCacheSubnetGroupRequestStub        func(*elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput)
	deleteCacheSubnetGroupRequestMutex       sync.RWMutex
	deleteCacheSubnetGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}
	deleteCacheSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}
	deleteCacheSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}
	DeleteCacheSubnetGroupWithContextStub        func(context.Context, *elasticache.DeleteCacheSubnetGroupInput, ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	deleteCacheSubnetGroupWithContextMutex       sync.RWMutex
	deleteCacheSubnetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheSubnetGroupInput
		arg3 []request.Option
	}
	deleteCacheSubnetGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	deleteCacheSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	DeleteGlobalReplicationGroupStub        func(*elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error)
	deleteGlobalReplicationGroupMutex       sync.RWMutex
	deleteGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.DeleteGlobalReplicationGroupInput
	}
	deleteGlobalReplicationGroupReturns struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}
	deleteGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}
	DeleteGlobalReplicationGroupRequestStub        func(*elasticache.DeleteGlobalReplicationGroupInput) (*request.Request, *elasticache.DeleteGlobalReplicationGroupOutput)
	deleteGlobalReplicationGroupRequestMutex       sync.RWMutex
	deleteGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteGlobalReplicationGroupInput
	}
	deleteGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteGlobalReplicationGroupOutput
	}
	deleteGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteGlobalReplicationGroupOutput
	}
	DeleteGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.DeleteGlobalReplicationGroupInput, ...request.Option) (*elasticache.DeleteGlobalReplicationGroupOutput, error)
	deleteGlobalReplicationGroupWithContextMutex       sync.RWMutex
	deleteGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteGlobalReplicationGroupInput
		arg3 []request.Option
	}
	deleteGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}
	deleteGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}
	DeleteReplicationGroupStub        func(*elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)
	deleteReplicationGroupMutex       sync.RWMutex
	deleteReplicationGroupArgsForCall []struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}
	deleteReplicationGroupReturns struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	deleteReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	DeleteReplicationGroupRequestStub        func(*elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput)
	deleteReplicationGroupRequestMutex       sync.RWMutex
	deleteReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}
	deleteReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}
	deleteReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}
	DeleteReplicationGroupWithContextStub        func(context.Context, *elasticache.DeleteReplicationGroupInput, ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)
	deleteReplicationGroupWithContextMutex       sync.RWMutex
	deleteReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteReplicationGroupInput
		arg3 []request.Option
	}
	deleteReplicationGroupWithContextReturns struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	deleteReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	DeleteSnapshotStub        func(*elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		arg1 *elasticache.DeleteSnapshotInput
	}
	deleteSnapshotReturns struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	deleteSnapshotReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	DeleteSnapshotRequestStub        func(*elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput)
	deleteSnapshotRequestMutex       sync.RWMutex
	deleteSnapshotRequestArgsForCall []struct {
		arg1 *elasticache.DeleteSnapshotInput
	}
	deleteSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}
	deleteSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}
	DeleteSnapshotWithContextStub        func(context.Context, *elasticache.DeleteSnapshotInput, ...request.Option) (*elasticache.DeleteSnapshotOutput, error)
	deleteSnapshotWithContextMutex       sync.RWMutex
	deleteSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteSnapshotInput
		arg3 []request.Option
	}
	deleteSnapshotWithContextReturns struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	deleteSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	DescribeCacheClustersStub        func(*elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)
	describeCacheClustersMutex       sync.RWMutex
	describeCacheClustersArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	describeCacheClustersReturns struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	describeCacheClustersReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	DescribeCacheClustersPagesStub        func(*elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool) error
	describeCacheClustersPagesMutex       sync.RWMutex
	describeCacheClustersPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
		arg2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}
	describeCacheClustersPagesReturns struct {
		result1 error
	}
	describeCacheClustersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheClustersPagesWithContextStub        func(context.Context, *elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool, ...request.Option) error
	describeCacheClustersPagesWithContextMutex       sync.RWMutex
	describeCacheClustersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheClustersPagesWithContextReturns struct {
		result1 error
	}
	describeCacheClustersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheClustersRequestStub        func(*elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput)
	describeCacheClustersRequestMutex       sync.RWMutex
	describeCacheClustersRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	describeCacheClustersRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}
	describeCacheClustersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}
	DescribeCacheClustersWithContextStub        func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)
	describeCacheClustersWithContextMutex       sync.RWMutex
	describeCacheClustersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.Option
	}
	describeCacheClustersWithContextReturns struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	describeCacheClustersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	DescribeCacheEngineVersionsStub        func(*elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	describeCacheEngineVersionsMutex       sync.RWMutex
	describeCacheEngineVersionsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}
	describeCacheEngineVersionsReturns struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	describeCacheEngineVersionsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	DescribeCacheEngineVersionsPagesStub        func(*elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error
	describeCacheEngineVersionsPagesMutex       sync.RWMutex
	describeCacheEngineVersionsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
		arg2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}
	describeCacheEngineVersionsPagesReturns struct {
		result1 error
	}
	describeCacheEngineVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheEngineVersionsPagesWithContextStub        func(context.Context, *elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, ...request.Option) error
	describeCacheEngineVersionsPagesWithContextMutex       sync.RWMutex
	describeCacheEngineVersionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheEngineVersionsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheEngineVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheEngineVersionsRequestStub        func(*elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput)
	describeCacheEngineVersionsRequestMutex       sync.RWMutex
	describeCacheEngineVersionsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}
	describeCacheEngineVersionsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}
	describeCacheEngineVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}
	DescribeCacheEngineVersionsWithContextStub        func(context.Context, *elasticache.DescribeCacheEngineVersionsInput, ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	describeCacheEngineVersionsWithContextMutex       sync.RWMutex
	describeCacheEngineVersionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 []request.Option
	}
	describeCacheEngineVersionsWithContextReturns struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	describeCacheEngineVersionsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	DescribeCacheParameterGroupsStub        func(*elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	describeCacheParameterGroupsMutex       sync.RWMutex
	describeCacheParameterGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}
	describeCacheParameterGroupsReturns struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	describeCacheParameterGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	DescribeCacheParameterGroupsPagesStub        func(*elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error
	describeCacheParameterGroupsPagesMutex       sync.RWMutex
	describeCacheParameterGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
		arg2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}
	describeCacheParameterGroupsPagesReturns struct {
		result1 error
	}
	describeCacheParameterGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParameterGroupsPagesWithContextStub        func(context.Context, *elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, ...request.Option) error
	describeCacheParameterGroupsPagesWithContextMutex       sync.RWMutex
	describeCacheParameterGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheParameterGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheParameterGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParameterGroupsRequestStub        func(*elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput)
	describeCacheParameterGroupsRequestMutex       sync.RWMutex
	describeCacheParameterGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}
	describeCacheParameterGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}
	describeCacheParameterGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}
	DescribeCacheParameterGroupsWithContextStub        func(context.Context, *elasticache.DescribeCacheParameterGroupsInput, ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	describeCacheParameterGroupsWithContextMutex       sync.RWMutex
	describeCacheParameterGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 []request.Option
	}
	describeCacheParameterGroupsWithContextReturns struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	describeCacheParameterGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	DescribeCacheParametersStub        func(*elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)
	describeCacheParametersMutex       sync.RWMutex
	describeCacheParametersArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}
	describeCacheParametersReturns struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	describeCacheParametersReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	DescribeCacheParametersPagesStub        func(*elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool) error
	describeCacheParametersPagesMutex       sync.RWMutex
	describeCacheParametersPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParametersInput
		arg2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}
	describeCacheParametersPagesReturns struct {
		result1 error
	}
	describeCacheParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParametersPagesWithContextStub        func(context.Context, *elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool, ...request.Option) error
	describeCacheParametersPagesWithContextMutex       sync.RWMutex
	describeCacheParametersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheParametersPagesWithContextReturns struct {
		result1 error
	}
	describeCacheParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParametersRequestStub        func(*elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput)
	describeCacheParametersRequestMutex       sync.RWMutex
	describeCacheParametersRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}
	describeCacheParametersRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}
	describeCacheParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}
	DescribeCacheParametersWithContextStub        func(context.Context, *elasticache.DescribeCacheParametersInput, ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)
	describeCacheParametersWithContextMutex       sync.RWMutex
	describeCacheParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 []request.Option
	}
	describeCacheParametersWithContextReturns struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	describeCacheParametersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	DescribeCacheSecurityGroupsStub        func(*elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	describeCacheSecurityGroupsMutex       sync.RWMutex
	describeCacheSecurityGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}
	describeCacheSecurityGroupsReturns struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	describeCacheSecurityGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	DescribeCacheSecurityGroupsPagesStub        func(*elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error
	describeCacheSecurityGroupsPagesMutex       sync.RWMutex
	describeCacheSecurityGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
		arg2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}
	describeCacheSecurityGroupsPagesReturns struct {
		result1 error
	}
	describeCacheSecurityGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSecurityGroupsPagesWithContextStub        func(context.Context, *elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, ...request.Option) error
	describeCacheSecurityGroupsPagesWithContextMutex       sync.RWMutex
	describeCacheSecurityGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheSecurityGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheSecurityGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSecurityGroupsRequestStub        func(*elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput)
	describeCacheSecurityGroupsRequestMutex       sync.RWMutex
	describeCacheSecurityGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}
	describeCacheSecurityGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}
	describeCacheSecurityGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}
	DescribeCacheSecurityGroupsWithContextStub        func(context.Context, *elasticache.DescribeCacheSecurityGroupsInput, ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	describeCacheSecurityGroupsWithContextMutex       sync.RWMutex
	describeCacheSecurityGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 []request.Option
	}
	describeCacheSecurityGroupsWithContextReturns struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	describeCacheSecurityGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	DescribeCacheSubnetGroupsStub        func(*elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	describeCacheSubnetGroupsMutex       sync.RWMutex
	describeCacheSubnetGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}
	describeCacheSubnetGroupsReturns struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	describeCacheSubnetGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	DescribeCacheSubnetGroupsPagesStub        func(*elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error
	describeCacheSubnetGroupsPagesMutex       sync.RWMutex
	describeCacheSubnetGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
		arg2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}
	describeCacheSubnetGroupsPagesReturns struct {
		result1 error
	}
	describeCacheSubnetGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSubnetGroupsPagesWithContextStub        func(context.Context, *elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, ...request.Option) error
	describeCacheSubnetGroupsPagesWithContextMutex       sync.RWMutex
	describeCacheSubnetGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheSubnetGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheSubnetGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSubnetGroupsRequestStub        func(*elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput)
	describeCacheSubnetGroupsRequestMutex       sync.RWMutex
	describeCacheSubnetGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}
	describeCacheSubnetGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}
	describeCacheSubnetGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}
	DescribeCacheSubnetGroupsWithContextStub        func(context.Context, *elasticache.DescribeCacheSubnetGroupsInput, ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	describeCacheSubnetGroupsWithContextMutex       sync.RWMutex
	describeCacheSubnetGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 []request.Option
	}
	describeCacheSubnetGroupsWithContextReturns struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	describeCacheSubnetGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	DescribeEngineDefaultParametersStub        func(*elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	describeEngineDefaultParametersMutex       sync.RWMutex
	describeEngineDefaultParametersArgsForCall []struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}
	describeEngineDefaultParametersReturns struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	describeEngineDefaultParametersReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	DescribeEngineDefaultParametersPagesStub        func(*elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error
	describeEngineDefaultParametersPagesMutex       sync.RWMutex
	describeEngineDefaultParametersPagesArgsForCall []struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
		arg2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}
	describeEngineDefaultParametersPagesReturns struct {
		result1 error
	}
	describeEngineDefaultParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEngineDefaultParametersPagesWithContextStub        func(context.Context, *elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, ...request.Option) error
	describeEngineDefaultParametersPagesWithContextMutex       sync.RWMutex
	describeEngineDefaultParametersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeEngineDefaultParametersPagesWithContextReturns struct {
		result1 error
	}
	describeEngineDefaultParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEngineDefaultParametersRequestStub        func(*elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput)
	describeEngineDefaultParametersRequestMutex       sync.RWMutex
	describeEngineDefaultParametersRequestArgsForCall []struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}
	describeEngineDefaultParametersRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}
	describeEngineDefaultParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}
	DescribeEngineDefaultParametersWithContextStub        func(context.Context, *elasticache.DescribeEngineDefaultParametersInput, ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	describeEngineDefaultParametersWithContextMutex       sync.RWMutex
	describeEngineDefaultParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 []request.Option
	}
	describeEngineDefaultParametersWithContextReturns struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	describeEngineDefaultParametersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	DescribeEventsStub        func(*elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)
	describeEventsMutex       sync.RWMutex
	describeEventsArgsForCall []struct {
		arg1 *elasticache.DescribeEventsInput
	}
	describeEventsReturns struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	describeEventsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	DescribeEventsPagesStub        func(*elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool) error
	describeEventsPagesMutex       sync.RWMutex
	describeEventsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeEventsInput
		arg2 func(*elasticache.DescribeEventsOutput, bool) bool
	}
	describeEventsPagesReturns struct {
		result1 error
	}
	describeEventsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsPagesWithContextStub        func(context.Context, *elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool, ...request.Option) error
	describeEventsPagesWithContextMutex       sync.RWMutex
	describeEventsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 func(*elasticache.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}
	describeEventsPagesWithContextReturns struct {
		result1 error
	}
	describeEventsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsRequestStub        func(*elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput)
	describeEventsRequestMutex       sync.RWMutex
	describeEventsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeEventsInput
	}
	describeEventsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}
	describeEventsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}
	DescribeEventsWithContextStub        func(context.Context, *elasticache.DescribeEventsInput, ...request.Option) (*elasticache.DescribeEventsOutput, error)
	describeEventsWithContextMutex       sync.RWMutex
	describeEventsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 []request.Option
	}
	describeEventsWithContextReturns struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	describeEventsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	DescribeGlobalReplicationGroupsStub        func(*elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)
	describeGlobalReplicationGroupsMutex       sync.RWMutex
	describeGlobalReplicationGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeGlobalReplicationGroupsInput
	}
	describeGlobalReplicationGroupsReturns struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}
	describeGlobalReplicationGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}
	DescribeGlobalReplicationGroupsPagesStub        func(*elasticache.DescribeGlobalReplicationGroupsInput, func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) error
	describeGlobalReplicationGroupsPagesMutex       sync.RWMutex
	describeGlobalReplicationGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeGlobalReplicationGroupsInput
		arg2 func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
	}
	describeGlobalReplicationGroupsPagesReturns struct {
		result1 error
	}
	describeGlobalReplicationGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeGlobalReplicationGroupsPagesWithContextStub        func(context.Context, *elasticache.DescribeGlobalReplicationGroupsInput, func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, ...request.Option) error
	describeGlobalReplicationGroupsPagesWithContextMutex       sync.RWMutex
	describeGlobalReplicationGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeGlobalReplicationGroupsInput
		arg3 func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeGlobalReplicationGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeGlobalReplicationGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeGlobalReplicationGroupsRequestStub        func(*elasticache.DescribeGlobalReplicationGroupsInput) (*request.Request, *elasticache.DescribeGlobalReplicationGroupsOutput)
	describeGlobalReplicationGroupsRequestMutex       sync.RWMutex
	describeGlobalReplicationGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeGlobalReplicationGroupsInput
	}
	describeGlobalReplicationGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeGlobalReplicationGroupsOutput
	}
	describeGlobalReplicationGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeGlobalReplicationGroupsOutput
	}
	DescribeGlobalReplicationGroupsWithContextStub        func(context.Context, *elasticache.DescribeGlobalReplicationGroupsInput, ...request.Option) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)
	describeGlobalReplicationGroupsWithContextMutex       sync.RWMutex
	describeGlobalReplicationGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeGlobalReplicationGroupsInput
		arg3 []request.Option
	}
	describeGlobalReplicationGroupsWithContextReturns struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}
	describeGlobalReplicationGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}
	DescribeReplicationGroupsStub        func(*elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)
	describeReplicationGroupsMutex       sync.RWMutex
	describeReplicationGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	describeReplicationGroupsReturns struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	describeReplicationGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	DescribeReplicationGroupsPagesStub        func(*elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error
	describeReplicationGroupsPagesMutex       sync.RWMutex
	describeReplicationGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
		arg2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}
	describeReplicationGroupsPagesReturns struct {
		result1 error
	}
	describeReplicationGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReplicationGroupsPagesWithContextStub        func(context.Context, *elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, ...request.Option) error
	describeReplicationGroupsPagesWithContextMutex       sync.RWMutex
	describeReplicationGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeReplicationGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeReplicationGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReplicationGroupsRequestStub        func(*elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput)
	describeReplicationGroupsRequestMutex       sync.RWMutex
	describeReplicationGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	describeReplicationGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}
	describeReplicationGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}
	DescribeReplicationGroupsWithContextStub        func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)
	describeReplicationGroupsWithContextMutex       sync.RWMutex
	describeReplicationGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.Option
	}
	describeReplicationGroupsWithContextReturns struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	describeReplicationGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	DescribeReservedCacheNodesStub        func(*elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)
	describeReservedCacheNodesMutex       sync.RWMutex
	describeReservedCacheNodesArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}
	describeReservedCacheNodesReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	describeReservedCacheNodesReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	DescribeReservedCacheNodesOfferingsStub        func(*elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	describeReservedCacheNodesOfferingsMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	describeReservedCacheNodesOfferingsReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	describeReservedCacheNodesOfferingsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	DescribeReservedCacheNodesOfferingsPagesStub        func(*elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error
	describeReservedCacheNodesOfferingsPagesMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}
	describeReservedCacheNodesOfferingsPagesReturns struct {
		result1 error
	}
	describeReservedCacheNodesOfferingsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesOfferingsPagesWithContextStub        func(context.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, ...request.Option) error
	describeReservedCacheNodesOfferingsPagesWithContextMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedCacheNodesOfferingsPagesWithContextReturns struct {
		result1 error
	}
	describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesOfferingsRequestStub        func(*elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput)
	describeReservedCacheNodesOfferingsRequestMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	describeReservedCacheNodesOfferingsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}
	describeReservedCacheNodesOfferingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}
	DescribeReservedCacheNodesOfferingsWithContextStub        func(context.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	describeReservedCacheNodesOfferingsWithContextMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 []request.Option
	}
	describeReservedCacheNodesOfferingsWithContextReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	describeReservedCacheNodesOfferingsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	DescribeReservedCacheNodesPagesStub        func(*elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error
	describeReservedCacheNodesPagesMutex       sync.RWMutex
	describeReservedCacheNodesPagesArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}
	describeReservedCacheNodesPagesReturns struct {
		result1 error
	}
	describeReservedCacheNodesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesPagesWithContextStub        func(context.Context, *elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, ...request.Option) error
	describeReservedCacheNodesPagesWithContextMutex       sync.RWMutex
	describeReservedCacheNodesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedCacheNodesPagesWithContextReturns struct {
		result1 error
	}
	describeReservedCacheNodesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesRequestStub        func(*elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput)
	describeReservedCacheNodesRequestMutex       sync.RWMutex
	describeReservedCacheNodesRequestArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}
	describeReservedCacheNodesRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}
	describeReservedCacheNodesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}
	DescribeReservedCacheNodesWithContextStub        func(context.Context, *elasticache.DescribeReservedCacheNodesInput, ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error)
	describeReservedCacheNodesWithContextMutex       sync.RWMutex
	describeReservedCacheNodesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 []request.Option
	}
	describeReservedCacheNodesWithContextReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	describeReservedCacheNodesWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	DescribeServiceUpdatesStub        func(*elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error)
	describeServiceUpdatesMutex       sync.RWMutex
	describeServiceUpdatesArgsForCall []struct {
		arg1 *elasticache.DescribeServiceUpdatesInput
	}
	describeServiceUpdatesReturns struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}
	describeServiceUpdatesReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}
	DescribeServiceUpdatesPagesStub        func(*elasticache.DescribeServiceUpdatesInput, func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error
	describeServiceUpdatesPagesMutex       sync.RWMutex
	describeServiceUpdatesPagesArgsForCall []struct {
		arg1 *elasticache.DescribeServiceUpdatesInput
		arg2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	}
	describeServiceUpdatesPagesReturns struct {
		result1 error
	}
	describeServiceUpdatesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeServiceUpdatesPagesWithContextStub        func(context.Context, *elasticache.DescribeServiceUpdatesInput, func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, ...request.Option) error
	describeServiceUpdatesPagesWithContextMutex       sync.RWMutex
	describeServiceUpdatesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeServiceUpdatesInput
		arg3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		arg4 []request.Option
	}
	describeServiceUpdatesPagesWithContextReturns struct {
		result1 error
	}
	describeServiceUpdatesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeServiceUpdatesRequestStub        func(*elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput)
	describeServiceUpdatesRequestMutex       sync.RWMutex
	describeServiceUpdatesRequestArgsForCall []struct {
		arg1 *elasticache.DescribeServiceUpdatesInput
	}
	describeServiceUpdatesRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeServiceUpdatesOutput
	}
	describeServiceUpdatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeServiceUpdatesOutput
	}
	DescribeServiceUpdatesWithContextStub        func(context.Context, *elasticache.DescribeServiceUpdatesInput, ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error)
	describeServiceUpdatesWithContextMutex       sync.RWMutex
	describeServiceUpdatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeServiceUpdatesInput
		arg3 []request.Option
	}
	describeServiceUpdatesWithContextReturns struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}
	describeServiceUpdatesWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}
	DescribeSnapshotsStub        func(*elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)
	describeSnapshotsMutex       sync.RWMutex
	describeSnapshotsArgsForCall []struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}
	describeSnapshotsReturns struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	describeSnapshotsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	DescribeSnapshotsPagesStub        func(*elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool) error
	describeSnapshotsPagesMutex       sync.RWMutex
	describeSnapshotsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeSnapshotsInput
		arg2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}
	describeSnapshotsPagesReturns struct {
		result1 error
	}
	describeSnapshotsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSnapshotsPagesWithContextStub        func(context.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, ...request.Option) error
	describeSnapshotsPagesWithContextMutex       sync.RWMutex
	describeSnapshotsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}
	describeSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSnapshotsRequestStub        func(*elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput)
	describeSnapshotsRequestMutex       sync.RWMutex
	describeSnapshotsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}
	describeSnapshotsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}
	describeSnapshotsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}
	DescribeSnapshotsWithContextStub        func(context.Context, *elasticache.DescribeSnapshotsInput, ...request.Option) (*elasticache.DescribeSnapshotsOutput, error)
	describeSnapshotsWithContextMutex       sync.RWMutex
	describeSnapshotsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 []request.Option
	}
	describeSnapshotsWithContextReturns struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	describeSnapshotsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	DescribeUpdateActionsStub        func(*elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error)
	describeUpdateActionsMutex       sync.RWMutex
	describeUpdateActionsArgsForCall []struct {
		arg1 *elasticache.DescribeUpdateActionsInput
	}
	describeUpdateActionsReturns struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}
	describeUpdateActionsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}
	DescribeUpdateActionsPagesStub        func(*elasticache.DescribeUpdateActionsInput, func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error
	describeUpdateActionsPagesMutex       sync.RWMutex
	describeUpdateActionsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeUpdateActionsInput
		arg2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	}
	describeUpdateActionsPagesReturns struct {
		result1 error
	}
	describeUpdateActionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeUpdateActionsPagesWithContextStub        func(context.Context, *elasticache.DescribeUpdateActionsInput, func(*elasticache.DescribeUpdateActionsOutput, bool) bool, ...request.Option) error
	describeUpdateActionsPagesWithContextMutex       sync.RWMutex
	describeUpdateActionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeUpdateActionsInput
		arg3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		arg4 []request.Option
	}
	describeUpdateActionsPagesWithContextReturns struct {
		result1 error
	}
	describeUpdateActionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeUpdateActionsRequestStub        func(*elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput)
	describeUpdateActionsRequestMutex       sync.RWMutex
	describeUpdateActionsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeUpdateActionsInput
	}
	describeUpdateActionsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeUpdateActionsOutput
	}
	describeUpdateActionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeUpdateActionsOutput
	}
	DescribeUpdateActionsWithContextStub        func(context.Context, *elasticache.DescribeUpdateActionsInput, ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error)
	describeUpdateActionsWithContextMutex       sync.RWMutex
	describeUpdateActionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeUpdateActionsInput
		arg3 []request.Option
	}
	describeUpdateActionsWithContextReturns struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}
	describeUpdateActionsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}
	DisassociateGlobalReplicationGroupStub        func(*elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)
	disassociateGlobalReplicationGroupMutex       sync.RWMutex
	disassociateGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.DisassociateGlobalReplicationGroupInput
	}
	disassociateGlobalReplicationGroupReturns struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}
	disassociateGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}
	DisassociateGlobalReplicationGroupRequestStub        func(*elasticache.DisassociateGlobalReplicationGroupInput) (*request.Request, *elasticache.DisassociateGlobalReplicationGroupOutput)
	disassociateGlobalReplicationGroupRequestMutex       sync.RWMutex
	disassociateGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.DisassociateGlobalReplicationGroupInput
	}
	disassociateGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DisassociateGlobalReplicationGroupOutput
	}
	disassociateGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DisassociateGlobalReplicationGroupOutput
	}
	DisassociateGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.DisassociateGlobalReplicationGroupInput, ...request.Option) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)
	disassociateGlobalReplicationGroupWithContextMutex       sync.RWMutex
	disassociateGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DisassociateGlobalReplicationGroupInput
		arg3 []request.Option
	}
	disassociateGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}
	disassociateGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}
	FailoverGlobalReplicationGroupStub        func(*elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error)
	failoverGlobalReplicationGroupMutex       sync.RWMutex
	failoverGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.FailoverGlobalReplicationGroupInput
	}
	failoverGlobalReplicationGroupReturns struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}
	failoverGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}
	FailoverGlobalReplicationGroupRequestStub        func(*elasticache.FailoverGlobalReplicationGroupInput) (*request.Request, *elasticache.FailoverGlobalReplicationGroupOutput)
	failoverGlobalReplicationGroupRequestMutex       sync.RWMutex
	failoverGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.FailoverGlobalReplicationGroupInput
	}
	failoverGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.FailoverGlobalReplicationGroupOutput
	}
	failoverGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.FailoverGlobalReplicationGroupOutput
	}
	FailoverGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.FailoverGlobalReplicationGroupInput, ...request.Option) (*elasticache.FailoverGlobalReplicationGroupOutput, error)
	failoverGlobalReplicationGroupWithContextMutex       sync.RWMutex
	failoverGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.FailoverGlobalReplicationGroupInput
		arg3 []request.Option
	}
	failoverGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}
	failoverGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}
	IncreaseNodeGroupsInGlobalReplicationGroupStub        func(*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	increaseNodeGroupsInGlobalReplicationGroupMutex       sync.RWMutex
	increaseNodeGroupsInGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}
	increaseNodeGroupsInGlobalReplicationGroupReturns struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	increaseNodeGroupsInGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	IncreaseNodeGroupsInGlobalReplicationGroupRequestStub        func(*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput)
	increaseNodeGroupsInGlobalReplicationGroupRequestMutex       sync.RWMutex
	increaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}
	increaseNodeGroupsInGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	}
	increaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	}
	IncreaseNodeGroupsInGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, ...request.Option) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)
	increaseNodeGroupsInGlobalReplicationGroupWithContextMutex       sync.RWMutex
	increaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
		arg3 []request.Option
	}
	increaseNodeGroupsInGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	increaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}
	IncreaseReplicaCountStub        func(*elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error)
	increaseReplicaCountMutex       sync.RWMutex
	increaseReplicaCountArgsForCall []struct {
		arg1 *elasticache.IncreaseReplicaCountInput
	}
	increaseReplicaCountReturns struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}
	increaseReplicaCountReturnsOnCall map[int]struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}
	IncreaseReplicaCountRequestStub        func(*elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput)
	increaseReplicaCountRequestMutex       sync.RWMutex
	increaseReplicaCountRequestArgsForCall []struct {
		arg1 *elasticache.IncreaseReplicaCountInput
	}
	increaseReplicaCountRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.IncreaseReplicaCountOutput
	}
	increaseReplicaCountRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.IncreaseReplicaCountOutput
	}
	IncreaseReplicaCountWithContextStub        func(context.Context, *elasticache.IncreaseReplicaCountInput, ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error)
	increaseReplicaCountWithContextMutex       sync.RWMutex
	increaseReplicaCountWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.IncreaseReplicaCountInput
		arg3 []request.Option
	}
	increaseReplicaCountWithContextReturns struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}
	increaseReplicaCountWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}
	ListAllowedNodeTypeModificationsStub        func(*elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	listAllowedNodeTypeModificationsMutex       sync.RWMutex
	listAllowedNodeTypeModificationsArgsForCall []struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}
	listAllowedNodeTypeModificationsReturns struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	listAllowedNodeTypeModificationsReturnsOnCall map[int]struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	ListAllowedNodeTypeModificationsRequestStub        func(*elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput)
	listAllowedNodeTypeModificationsRequestMutex       sync.RWMutex
	listAllowedNodeTypeModificationsRequestArgsForCall []struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}
	listAllowedNodeTypeModificationsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}
	listAllowedNodeTypeModificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}
	ListAllowedNodeTypeModificationsWithContextStub        func(context.Context, *elasticache.ListAllowedNodeTypeModificationsInput, ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	listAllowedNodeTypeModificationsWithContextMutex       sync.RWMutex
	listAllowedNodeTypeModificationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ListAllowedNodeTypeModificationsInput
		arg3 []request.Option
	}
	listAllowedNodeTypeModificationsWithContextReturns struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	listAllowedNodeTypeModificationsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	ListTagsForResourceStub        func(*elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *elasticache.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	ListTagsForResourceRequestStub        func(*elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *elasticache.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	ListTagsForResourceWithContextStub        func(context.Context, *elasticache.ListTagsForResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	ModifyCacheClusterStub        func(*elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)
	modifyCacheClusterMutex       sync.RWMutex
	modifyCacheClusterArgsForCall []struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}
	modifyCacheClusterReturns struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	modifyCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	ModifyCacheClusterRequestStub        func(*elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput)
	modifyCacheClusterRequestMutex       sync.RWMutex
	modifyCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}
	modifyCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}
	modifyCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}
	ModifyCacheClusterWithContextStub        func(context.Context, *elasticache.ModifyCacheClusterInput, ...request.Option) (*elasticache.ModifyCacheClusterOutput, error)
	modifyCacheClusterWithContextMutex       sync.RWMutex
	modifyCacheClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheClusterInput
		arg3 []request.Option
	}
	modifyCacheClusterWithContextReturns struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	modifyCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	ModifyCacheParameterGroupStub        func(*elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	modifyCacheParameterGroupMutex       sync.RWMutex
	modifyCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}
	modifyCacheParameterGroupReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	modifyCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ModifyCacheParameterGroupRequestStub        func(*elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)
	modifyCacheParameterGroupRequestMutex       sync.RWMutex
	modifyCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}
	modifyCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	modifyCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	ModifyCacheParameterGroupWithContextStub        func(context.Context, *elasticache.ModifyCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	modifyCacheParameterGroupWithContextMutex       sync.RWMutex
	modifyCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheParameterGroupInput
		arg3 []request.Option
	}
	modifyCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	modifyCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ModifyCacheSubnetGroupStub        func(*elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	modifyCacheSubnetGroupMutex       sync.RWMutex
	modifyCacheSubnetGroupArgsForCall []struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}
	modifyCacheSubnetGroupReturns struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	modifyCacheSubnetGroupReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	ModifyCacheSubnetGroupRequestStub        func(*elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput)
	modifyCacheSubnetGroupRequestMutex       sync.RWMutex
	modifyCacheSubnetGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}
	modifyCacheSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}
	modifyCacheSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}
	ModifyCacheSubnetGroupWithContextStub        func(context.Context, *elasticache.ModifyCacheSubnetGroupInput, ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	modifyCacheSubnetGroupWithContextMutex       sync.RWMutex
	modifyCacheSubnetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheSubnetGroupInput
		arg3 []request.Option
	}
	modifyCacheSubnetGroupWithContextReturns struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	modifyCacheSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	ModifyGlobalReplicationGroupStub        func(*elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error)
	modifyGlobalReplicationGroupMutex       sync.RWMutex
	modifyGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.ModifyGlobalReplicationGroupInput
	}
	modifyGlobalReplicationGroupReturns struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}
	modifyGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}
	ModifyGlobalReplicationGroupRequestStub        func(*elasticache.ModifyGlobalReplicationGroupInput) (*request.Request, *elasticache.ModifyGlobalReplicationGroupOutput)
	modifyGlobalReplicationGroupRequestMutex       sync.RWMutex
	modifyGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyGlobalReplicationGroupInput
	}
	modifyGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyGlobalReplicationGroupOutput
	}
	modifyGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyGlobalReplicationGroupOutput
	}
	ModifyGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.ModifyGlobalReplicationGroupInput, ...request.Option) (*elasticache.ModifyGlobalReplicationGroupOutput, error)
	modifyGlobalReplicationGroupWithContextMutex       sync.RWMutex
	modifyGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyGlobalReplicationGroupInput
		arg3 []request.Option
	}
	modifyGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}
	modifyGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}
	ModifyReplicationGroupStub        func(*elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)
	modifyReplicationGroupMutex       sync.RWMutex
	modifyReplicationGroupArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}
	modifyReplicationGroupReturns struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	modifyReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	ModifyReplicationGroupRequestStub        func(*elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput)
	modifyReplicationGroupRequestMutex       sync.RWMutex
	modifyReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}
	modifyReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}
	modifyReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}
	ModifyReplicationGroupShardConfigurationStub        func(*elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	modifyReplicationGroupShardConfigurationMutex       sync.RWMutex
	modifyReplicationGroupShardConfigurationArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	modifyReplicationGroupShardConfigurationReturns struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	modifyReplicationGroupShardConfigurationReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	ModifyReplicationGroupShardConfigurationRequestStub        func(*elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput)
	modifyReplicationGroupShardConfigurationRequestMutex       sync.RWMutex
	modifyReplicationGroupShardConfigurationRequestArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	modifyReplicationGroupShardConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}
	modifyReplicationGroupShardConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}
	ModifyReplicationGroupShardConfigurationWithContextStub        func(context.Context, *elasticache.ModifyReplicationGroupShardConfigurationInput, ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	modifyReplicationGroupShardConfigurationWithContextMutex       sync.RWMutex
	modifyReplicationGroupShardConfigurationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyReplicationGroupShardConfigurationInput
		arg3 []request.Option
	}
	modifyReplicationGroupShardConfigurationWithContextReturns struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	modifyReplicationGroupShardConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	ModifyReplicationGroupWithContextStub        func(context.Context, *elasticache.ModifyReplicationGroupInput, ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)
	modifyReplicationGroupWithContextMutex       sync.RWMutex
	modifyReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyReplicationGroupInput
		arg3 []request.Option
	}
	modifyReplicationGroupWithContextReturns struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	modifyReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	PurchaseReservedCacheNodesOfferingStub        func(*elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	purchaseReservedCacheNodesOfferingMutex       sync.RWMutex
	purchaseReservedCacheNodesOfferingArgsForCall []struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	purchaseReservedCacheNodesOfferingReturns struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	purchaseReservedCacheNodesOfferingReturnsOnCall map[int]struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	PurchaseReservedCacheNodesOfferingRequestStub        func(*elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput)
	purchaseReservedCacheNodesOfferingRequestMutex       sync.RWMutex
	purchaseReservedCacheNodesOfferingRequestArgsForCall []struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	purchaseReservedCacheNodesOfferingRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}
	purchaseReservedCacheNodesOfferingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}
	PurchaseReservedCacheNodesOfferingWithContextStub        func(context.Context, *elasticache.PurchaseReservedCacheNodesOfferingInput, ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	purchaseReservedCacheNodesOfferingWithContextMutex       sync.RWMutex
	purchaseReservedCacheNodesOfferingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.PurchaseReservedCacheNodesOfferingInput
		arg3 []request.Option
	}
	purchaseReservedCacheNodesOfferingWithContextReturns struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	purchaseReservedCacheNodesOfferingWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	RebalanceSlotsInGlobalReplicationGroupStub        func(*elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)
	rebalanceSlotsInGlobalReplicationGroupMutex       sync.RWMutex
	rebalanceSlotsInGlobalReplicationGroupArgsForCall []struct {
		arg1 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}
	rebalanceSlotsInGlobalReplicationGroupReturns struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}
	rebalanceSlotsInGlobalReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}
	RebalanceSlotsInGlobalReplicationGroupRequestStub        func(*elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*request.Request, *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput)
	rebalanceSlotsInGlobalReplicationGroupRequestMutex       sync.RWMutex
	rebalanceSlotsInGlobalReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}
	rebalanceSlotsInGlobalReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	}
	rebalanceSlotsInGlobalReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	}
	RebalanceSlotsInGlobalReplicationGroupWithContextStub        func(context.Context, *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, ...request.Option) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)
	rebalanceSlotsInGlobalReplicationGroupWithContextMutex       sync.RWMutex
	rebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
		arg3 []request.Option
	}
	rebalanceSlotsInGlobalReplicationGroupWithContextReturns struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}
	rebalanceSlotsInGlobalReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}
	RebootCacheClusterStub        func(*elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)
	rebootCacheClusterMutex       sync.RWMutex
	rebootCacheClusterArgsForCall []struct {
		arg1 *elasticache.RebootCacheClusterInput
	}
	rebootCacheClusterReturns struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	rebootCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	RebootCacheClusterRequestStub        func(*elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput)
	rebootCacheClusterRequestMutex       sync.RWMutex
	rebootCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.RebootCacheClusterInput
	}
	rebootCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}
	rebootCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}
	RebootCacheClusterWithContextStub        func(context.Context, *elasticache.RebootCacheClusterInput, ...request.Option) (*elasticache.RebootCacheClusterOutput, error)
	rebootCacheClusterWithContextMutex       sync.RWMutex
	rebootCacheClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.RebootCacheClusterInput
		arg3 []request.Option
	}
	rebootCacheClusterWithContextReturns struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	rebootCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	RemoveTagsFromResourceStub        func(*elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)
	removeTagsFromResourceMutex       sync.RWMutex
	removeTagsFromResourceArgsForCall []struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	removeTagsFromResourceReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	RemoveTagsFromResourceRequestStub        func(*elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage)
	removeTagsFromResourceRequestMutex       sync.RWMutex
	removeTagsFromResourceRequestArgsForCall []struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	removeTagsFromResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	RemoveTagsFromResourceWithContextStub        func(context.Context, *elasticache.RemoveTagsFromResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	removeTagsFromResourceWithContextMutex       sync.RWMutex
	removeTagsFromResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.RemoveTagsFromResourceInput
		arg3 []request.Option
	}
	removeTagsFromResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	removeTagsFromResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	ResetCacheParameterGroupStub        func(*elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	resetCacheParameterGroupMutex       sync.RWMutex
	resetCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}
	resetCacheParameterGroupReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	resetCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ResetCacheParameterGroupRequestStub        func(*elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)
	resetCacheParameterGroupRequestMutex       sync.RWMutex
	resetCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}
	resetCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	resetCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	ResetCacheParameterGroupWithContextStub        func(context.Context, *elasticache.ResetCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	resetCacheParameterGroupWithContextMutex       sync.RWMutex
	resetCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ResetCacheParameterGroupInput
		arg3 []request.Option
	}
	resetCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	resetCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	RevokeCacheSecurityGroupIngressStub        func(*elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	revokeCacheSecurityGroupIngressMutex       sync.RWMutex
	revokeCacheSecurityGroupIngressArgsForCall []struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	revokeCacheSecurityGroupIngressReturns struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	revokeCacheSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	RevokeCacheSecurityGroupIngressRequestStub        func(*elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput)
	revokeCacheSecurityGroupIngressRequestMutex       sync.RWMutex
	revokeCacheSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	revokeCacheSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}
	revokeCacheSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}
	RevokeCacheSecurityGroupIngressWithContextStub        func(context.Context, *elasticache.RevokeCacheSecurityGroupIngressInput, ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	revokeCacheSecurityGroupIngressWithContextMutex       sync.RWMutex
	revokeCacheSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.RevokeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}
	revokeCacheSecurityGroupIngressWithContextReturns struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	revokeCacheSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	StartMigrationStub        func(*elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error)
	startMigrationMutex       sync.RWMutex
	startMigrationArgsForCall []struct {
		arg1 *elasticache.StartMigrationInput
	}
	startMigrationReturns struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}
	startMigrationReturnsOnCall map[int]struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}
	StartMigrationRequestStub        func(*elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput)
	startMigrationRequestMutex       sync.RWMutex
	startMigrationRequestArgsForCall []struct {
		arg1 *elasticache.StartMigrationInput
	}
	startMigrationRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.StartMigrationOutput
	}
	startMigrationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.StartMigrationOutput
	}
	StartMigrationWithContextStub        func(context.Context, *elasticache.StartMigrationInput, ...request.Option) (*elasticache.StartMigrationOutput, error)
	startMigrationWithContextMutex       sync.RWMutex
	startMigrationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.StartMigrationInput
		arg3 []request.Option
	}
	startMigrationWithContextReturns struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}
	startMigrationWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}
	TestFailoverStub        func(*elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)
	testFailoverMutex       sync.RWMutex
	testFailoverArgsForCall []struct {
		arg1 *elasticache.TestFailoverInput
	}
	testFailoverReturns struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	testFailoverReturnsOnCall map[int]struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	TestFailoverRequestStub        func(*elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput)
	testFailoverRequestMutex       sync.RWMutex
	testFailoverRequestArgsForCall []struct {
		arg1 *elasticache.TestFailoverInput
	}
	testFailoverRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}
	testFailoverRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}
	TestFailoverWithContextStub        func(context.Context, *elasticache.TestFailoverInput, ...request.Option) (*elasticache.TestFailoverOutput, error)
	testFailoverWithContextMutex       sync.RWMutex
	testFailoverWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.TestFailoverInput
		arg3 []request.Option
	}
	testFailoverWithContextReturns struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	testFailoverWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	WaitUntilCacheClusterAvailableStub        func(*elasticache.DescribeCacheClustersInput) error
	waitUntilCacheClusterAvailableMutex       sync.RWMutex
	waitUntilCacheClusterAvailableArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	waitUntilCacheClusterAvailableReturns struct {
		result1 error
	}
	waitUntilCacheClusterAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCacheClusterAvailableWithContextStub        func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.WaiterOption) error
	waitUntilCacheClusterAvailableWithContextMutex       sync.RWMutex
	waitUntilCacheClusterAvailableWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}
	waitUntilCacheClusterAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilCacheClusterAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCacheClusterDeletedStub        func(*elasticache.DescribeCacheClustersInput) error
	waitUntilCacheClusterDeletedMutex       sync.RWMutex
	waitUntilCacheClusterDeletedArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	waitUntilCacheClusterDeletedReturns struct {
		result1 error
	}
	waitUntilCacheClusterDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCacheClusterDeletedWithContextStub        func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.WaiterOption) error
	waitUntilCacheClusterDeletedWithContextMutex       sync.RWMutex
	waitUntilCacheClusterDeletedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}
	waitUntilCacheClusterDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilCacheClusterDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupAvailableStub        func(*elasticache.DescribeReplicationGroupsInput) error
	waitUntilReplicationGroupAvailableMutex       sync.RWMutex
	waitUntilReplicationGroupAvailableArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	waitUntilReplicationGroupAvailableReturns struct {
		result1 error
	}
	waitUntilReplicationGroupAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupAvailableWithContextStub        func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.WaiterOption) error
	waitUntilReplicationGroupAvailableWithContextMutex       sync.RWMutex
	waitUntilReplicationGroupAvailableWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}
	waitUntilReplicationGroupAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilReplicationGroupAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupDeletedStub        func(*elasticache.DescribeReplicationGroupsInput) error
	waitUntilReplicationGroupDeletedMutex       sync.RWMutex
	waitUntilReplicationGroupDeletedArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	waitUntilReplicationGroupDeletedReturns struct {
		result1 error
	}
	waitUntilReplicationGroupDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupDeletedWithContextStub        func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.WaiterOption) error
	waitUntilReplicationGroupDeletedWithContextMutex       sync.RWMutex
	waitUntilReplicationGroupDeletedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}
	waitUntilReplicationGroupDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilReplicationGroupDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeElastiCacheAPI) AddTagsToResource(arg1 *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	fake.addTagsToResourceMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceReturnsOnCall[len(fake.addTagsToResourceArgsForCall)]
	fake.addTagsToResourceArgsForCall = append(fake.addTagsToResourceArgsForCall, struct {
		arg1 *elasticache.AddTagsToResourceInput
	}{arg1})
	stub := fake.AddTagsToResourceStub
	fakeReturns := fake.addTagsToResourceReturns
	fake.recordInvocation("AddTagsToResource", []interface{}{arg1})
	fake.addTagsToResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceCallCount() int {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	return len(fake.addTagsToResourceArgsForCall)
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceCalls(stub func(*elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = stub
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceArgsForCall(i int) *elasticache.AddTagsToResourceInput {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	argsForCall := fake.addTagsToResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = nil
	fake.addTagsToResourceReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = nil
	if fake.addTagsToResourceReturnsOnCall == nil {
		fake.addTagsToResourceReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.addTagsToResourceReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequest(arg1 *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage) {
	fake.addTagsToResourceRequestMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceRequestReturnsOnCall[len(fake.addTagsToResourceRequestArgsForCall)]
	fake.addTagsToResourceRequestArgsForCall = append(fake.addTagsToResourceRequestArgsForCall, struct {
		arg1 *elasticache.AddTagsToResourceInput
	}{arg1})
	stub := fake.AddTagsToResourceRequestStub
	fakeReturns := fake.addTagsToResourceRequestReturns
	fake.recordInvocation("AddTagsToResourceRequest", []interface{}{arg1})
	fake.addTagsToResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestCallCount() int {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	return len(fake.addTagsToResourceRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestCalls(stub func(*elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage)) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = stub
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestArgsForCall(i int) *elasticache.AddTagsToResourceInput {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	argsForCall := fake.addTagsToResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestReturns(result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = nil
	fake.addTagsToResourceRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = nil
	if fake.addTagsToResourceRequestReturnsOnCall == nil {
		fake.addTagsToResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TagListMessage
		})
	}
	fake.addTagsToResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContext(arg1 context.Context, arg2 *elasticache.AddTagsToResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceWithContextReturnsOnCall[len(fake.addTagsToResourceWithContextArgsForCall)]
	fake.addTagsToResourceWithContextArgsForCall = append(fake.addTagsToResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.AddTagsToResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddTagsToResourceWithContextStub
	fakeReturns := fake.addTagsToResourceWithContextReturns
	fake.recordInvocation("AddTagsToResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.addTagsToResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextCallCount() int {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	return len(fake.addTagsToResourceWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextCalls(stub func(context.Context, *elasticache.AddTagsToResourceInput, ...request.Option) (*elasticache.TagListMessage, error)) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextArgsForCall(i int) (context.Context, *elasticache.AddTagsToResourceInput, []request.Option) {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	argsForCall := fake.addTagsToResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	fake.addTagsToResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	if fake.addTagsToResourceWithContextReturnsOnCall == nil {
		fake.addTagsToResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.addTagsToResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngress(arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	fake.authorizeCacheSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.authorizeCacheSecurityGroupIngressReturnsOnCall[len(fake.authorizeCacheSecurityGroupIngressArgsForCall)]
	fake.authorizeCacheSecurityGroupIngressArgsForCall = append(fake.authorizeCacheSecurityGroupIngressArgsForCall, struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{arg1})
	stub := fake.AuthorizeCacheSecurityGroupIngressStub
	fakeReturns := fake.authorizeCacheSecurityGroupIngressReturns
	fake.recordInvocation("AuthorizeCacheSecurityGroupIngress", []interface{}{arg1})
	fake.authorizeCacheSecurityGroupIngressMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressCallCount() int {
	fake.authorizeCacheSecurityGroupIngressMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.RUnlock()
	return len(fake.authorizeCacheSecurityGroupIngressArgsForCall)
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressCalls(stub func(*elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)) {
	fake.authorizeCacheSecurityGroupIngressMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressStub = stub
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressArgsForCall(i int) *elasticache.AuthorizeCacheSecurityGroupIngressInput {
	fake.authorizeCacheSecurityGroupIngressMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.RUnlock()
	argsForCall := fake.authorizeCacheSecurityGroupIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressReturns(result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.authorizeCacheSecurityGroupIngressMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressStub = nil
	fake.authorizeCacheSecurityGroupIngressReturns = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressReturnsOnCall(i int, result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.authorizeCacheSecurityGroupIngressMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressStub = nil
	if fake.authorizeCacheSecurityGroupIngressReturnsOnCall == nil {
		fake.authorizeCacheSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeCacheSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequest(arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall[len(fake.authorizeCacheSecurityGroupIngressRequestArgsForCall)]
	fake.authorizeCacheSecurityGroupIngressRequestArgsForCall = append(fake.authorizeCacheSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{arg1})
	stub := fake.AuthorizeCacheSecurityGroupIngressRequestStub
	fakeReturns := fake.authorizeCacheSecurityGroupIngressRequestReturns
	fake.recordInvocation("AuthorizeCacheSecurityGroupIngressRequest", []interface{}{arg1})
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestCallCount() int {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.authorizeCacheSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestCalls(stub func(*elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput)) {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressRequestStub = stub
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestArgsForCall(i int) *elasticache.AuthorizeCacheSecurityGroupIngressInput {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.RUnlock()
	argsForCall := fake.authorizeCacheSecurityGroupIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressRequestStub = nil
	fake.authorizeCacheSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressRequestStub = nil
	if fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		})
	}
	fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContext(arg1 context.Context, arg2 *elasticache.AuthorizeCacheSecurityGroupIngressInput, arg3 ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall[len(fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall)]
	fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall = append(fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AuthorizeCacheSecurityGroupIngressWithContextStub
	fakeReturns := fake.authorizeCacheSecurityGroupIngressWithContextReturns
	fake.recordInvocation("AuthorizeCacheSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextCallCount() int {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextCalls(stub func(context.Context, *elasticache.AuthorizeCacheSecurityGroupIngressInput, ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextArgsForCall(i int) (context.Context, *elasticache.AuthorizeCacheSecurityGroupIngressInput, []request.Option) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextReturns(result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressWithContextStub = nil
	fake.authorizeCacheSecurityGroupIngressWithContextReturns = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeCacheSecurityGroupIngressWithContextStub = nil
	if fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateAction(arg1 *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
	fake.batchApplyUpdateActionMutex.Lock()
	ret, specificReturn := fake.batchApplyUpdateActionReturnsOnCall[len(fake.batchApplyUpdateActionArgsForCall)]
	fake.batchApplyUpdateActionArgsForCall = append(fake.batchApplyUpdateActionArgsForCall, struct {
		arg1 *elasticache.BatchApplyUpdateActionInput
	}{arg1})
	stub := fake.BatchApplyUpdateActionStub
	fakeReturns := fake.batchApplyUpdateActionReturns
	fake.recordInvocation("BatchApplyUpdateAction", []interface{}{arg1})
	fake.batchApplyUpdateActionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionCallCount() int {
	fake.batchApplyUpdateActionMutex.RLock()
	defer fake.batchApplyUpdateActionMutex.RUnlock()
	return len(fake.batchApplyUpdateActionArgsForCall)
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionCalls(stub func(*elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error)) {
	fake.batchApplyUpdateActionMutex.Lock()
	defer fake.batchApplyUpdateActionMutex.Unlock()
	fake.BatchApplyUpdateActionStub = stub
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionArgsForCall(i int) *elasticache.BatchApplyUpdateActionInput {
	fake.batchApplyUpdateActionMutex.RLock()
	defer fake.batchApplyUpdateActionMutex.RUnlock()
	argsForCall := fake.batchApplyUpdateActionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionReturns(result1 *elasticache.BatchApplyUpdateActionOutput, result2 error) {
	fake.batchApplyUpdateActionMutex.Lock()
	defer fake.batchApplyUpdateActionMutex.Unlock()
	fake.BatchApplyUpdateActionStub = nil
	fake.batchApplyUpdateActionReturns = struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionReturnsOnCall(i int, result1 *elasticache.BatchApplyUpdateActionOutput, result2 error) {
	fake.batchApplyUpdateActionMutex.Lock()
	defer fake.batchApplyUpdateActionMutex.Unlock()
	fake.BatchApplyUpdateActionStub = nil
	if fake.batchApplyUpdateActionReturnsOnCall == nil {
		fake.batchApplyUpdateActionReturnsOnCall = make(map[int]struct {
			result1 *elasticache.BatchApplyUpdateActionOutput
			result2 error
		})
	}
	fake.batchApplyUpdateActionReturnsOnCall[i] = struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionRequest(arg1 *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput) {
	fake.batchApplyUpdateActionRequestMutex.Lock()
	ret, specificReturn := fake.batchApplyUpdateActionRequestReturnsOnCall[len(fake.batchApplyUpdateActionRequestArgsForCall)]
	fake.batchApplyUpdateActionRequestArgsForCall = append(fake.batchApplyUpdateActionRequestArgsForCall, struct {
		arg1 *elasticache.BatchApplyUpdateActionInput
	}{arg1})
	stub := fake.BatchApplyUpdateActionRequestStub
	fakeReturns := fake.batchApplyUpdateActionRequestReturns
	fake.recordInvocation("BatchApplyUpdateActionRequest", []interface{}{arg1})
	fake.batchApplyUpdateActionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionRequestCallCount() int {
	fake.batchApplyUpdateActionRequestMutex.RLock()
	defer fake.batchApplyUpdateActionRequestMutex.RUnlock()
	return len(fake.batchApplyUpdateActionRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionRequestCalls(stub func(*elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput)) {
	fake.batchApplyUpdateActionRequestMutex.Lock()
	defer fake.batchApplyUpdateActionRequestMutex.Unlock()
	fake.BatchApplyUpdateActionRequestStub = stub
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionRequestArgsForCall(i int) *elasticache.BatchApplyUpdateActionInput {
	fake.batchApplyUpdateActionRequestMutex.RLock()
	defer fake.batchApplyUpdateActionRequestMutex.RUnlock()
	argsForCall := fake.batchApplyUpdateActionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionRequestReturns(result1 *request.Request, result2 *elasticache.BatchApplyUpdateActionOutput) {
	fake.batchApplyUpdateActionRequestMutex.Lock()
	defer fake.batchApplyUpdateActionRequestMutex.Unlock()
	fake.BatchApplyUpdateActionRequestStub = nil
	fake.batchApplyUpdateActionRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.BatchApplyUpdateActionOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.BatchApplyUpdateActionOutput) {
	fake.batchApplyUpdateActionRequestMutex.Lock()
	defer fake.batchApplyUpdateActionRequestMutex.Unlock()
	fake.BatchApplyUpdateActionRequestStub = nil
	if fake.batchApplyUpdateActionRequestReturnsOnCall == nil {
		fake.batchApplyUpdateActionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.BatchApplyUpdateActionOutput
		})
	}
	fake.batchApplyUpdateActionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.BatchApplyUpdateActionOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionWithContext(arg1 context.Context, arg2 *elasticache.BatchApplyUpdateActionInput, arg3 ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {
	fake.batchApplyUpdateActionWithContextMutex.Lock()
	ret, specificReturn := fake.batchApplyUpdateActionWithContextReturnsOnCall[len(fake.batchApplyUpdateActionWithContextArgsForCall)]
	fake.batchApplyUpdateActionWithContextArgsForCall = append(fake.batchApplyUpdateActionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.BatchApplyUpdateActionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.BatchApplyUpdateActionWithContextStub
	fakeReturns := fake.batchApplyUpdateActionWithContextReturns
	fake.recordInvocation("BatchApplyUpdateActionWithContext", []interface{}{arg1, arg2, arg3})
	fake.batchApplyUpdateActionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionWithContextCallCount() int {
	fake.batchApplyUpdateActionWithContextMutex.RLock()
	defer fake.batchApplyUpdateActionWithContextMutex.RUnlock()
	return len(fake.batchApplyUpdateActionWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionWithContextCalls(stub func(context.Context, *elasticache.BatchApplyUpdateActionInput, ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error)) {
	fake.batchApplyUpdateActionWithContextMutex.Lock()
	defer fake.batchApplyUpdateActionWithContextMutex.Unlock()
	fake.BatchApplyUpdateActionWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionWithContextArgsForCall(i int) (context.Context, *elasticache.BatchApplyUpdateActionInput, []request.Option) {
	fake.batchApplyUpdateActionWithContextMutex.RLock()
	defer fake.batchApplyUpdateActionWithContextMutex.RUnlock()
	argsForCall := fake.batchApplyUpdateActionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionWithContextReturns(result1 *elasticache.BatchApplyUpdateActionOutput, result2 error) {
	fake.batchApplyUpdateActionWithContextMutex.Lock()
	defer fake.batchApplyUpdateActionWithContextMutex.Unlock()
	fake.BatchApplyUpdateActionWithContextStub = nil
	fake.batchApplyUpdateActionWithContextReturns = struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchApplyUpdateActionWithContextReturnsOnCall(i int, result1 *elasticache.BatchApplyUpdateActionOutput, result2 error) {
	fake.batchApplyUpdateActionWithContextMutex.Lock()
	defer fake.batchApplyUpdateActionWithContextMutex.Unlock()
	fake.BatchApplyUpdateActionWithContextStub = nil
	if fake.batchApplyUpdateActionWithContextReturnsOnCall == nil {
		fake.batchApplyUpdateActionWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.BatchApplyUpdateActionOutput
			result2 error
		})
	}
	fake.batchApplyUpdateActionWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.BatchApplyUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateAction(arg1 *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
	fake.batchStopUpdateActionMutex.Lock()
	ret, specificReturn := fake.batchStopUpdateActionReturnsOnCall[len(fake.batchStopUpdateActionArgsForCall)]
	fake.batchStopUpdateActionArgsForCall = append(fake.batchStopUpdateActionArgsForCall, struct {
		arg1 *elasticache.BatchStopUpdateActionInput
	}{arg1})
	stub := fake.BatchStopUpdateActionStub
	fakeReturns := fake.batchStopUpdateActionReturns
	fake.recordInvocation("BatchStopUpdateAction", []interface{}{arg1})
	fake.batchStopUpdateActionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionCallCount() int {
	fake.batchStopUpdateActionMutex.RLock()
	defer fake.batchStopUpdateActionMutex.RUnlock()
	return len(fake.batchStopUpdateActionArgsForCall)
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionCalls(stub func(*elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error)) {
	fake.batchStopUpdateActionMutex.Lock()
	defer fake.batchStopUpdateActionMutex.Unlock()
	fake.BatchStopUpdateActionStub = stub
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionArgsForCall(i int) *elasticache.BatchStopUpdateActionInput {
	fake.batchStopUpdateActionMutex.RLock()
	defer fake.batchStopUpdateActionMutex.RUnlock()
	argsForCall := fake.batchStopUpdateActionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionReturns(result1 *elasticache.BatchStopUpdateActionOutput, result2 error) {
	fake.batchStopUpdateActionMutex.Lock()
	defer fake.batchStopUpdateActionMutex.Unlock()
	fake.BatchStopUpdateActionStub = nil
	fake.batchStopUpdateActionReturns = struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionReturnsOnCall(i int, result1 *elasticache.BatchStopUpdateActionOutput, result2 error) {
	fake.batchStopUpdateActionMutex.Lock()
	defer fake.batchStopUpdateActionMutex.Unlock()
	fake.BatchStopUpdateActionStub = nil
	if fake.batchStopUpdateActionReturnsOnCall == nil {
		fake.batchStopUpdateActionReturnsOnCall = make(map[int]struct {
			result1 *elasticache.BatchStopUpdateActionOutput
			result2 error
		})
	}
	fake.batchStopUpdateActionReturnsOnCall[i] = struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionRequest(arg1 *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput) {
	fake.batchStopUpdateActionRequestMutex.Lock()
	ret, specificReturn := fake.batchStopUpdateActionRequestReturnsOnCall[len(fake.batchStopUpdateActionRequestArgsForCall)]
	fake.batchStopUpdateActionRequestArgsForCall = append(fake.batchStopUpdateActionRequestArgsForCall, struct {
		arg1 *elasticache.BatchStopUpdateActionInput
	}{arg1})
	stub := fake.BatchStopUpdateActionRequestStub
	fakeReturns := fake.batchStopUpdateActionRequestReturns
	fake.recordInvocation("BatchStopUpdateActionRequest", []interface{}{arg1})
	fake.batchStopUpdateActionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionRequestCallCount() int {
	fake.batchStopUpdateActionRequestMutex.RLock()
	defer fake.batchStopUpdateActionRequestMutex.RUnlock()
	return len(fake.batchStopUpdateActionRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionRequestCalls(stub func(*elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput)) {
	fake.batchStopUpdateActionRequestMutex.Lock()
	defer fake.batchStopUpdateActionRequestMutex.Unlock()
	fake.BatchStopUpdateActionRequestStub = stub
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionRequestArgsForCall(i int) *elasticache.BatchStopUpdateActionInput {
	fake.batchStopUpdateActionRequestMutex.RLock()
	defer fake.batchStopUpdateActionRequestMutex.RUnlock()
	argsForCall := fake.batchStopUpdateActionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionRequestReturns(result1 *request.Request, result2 *elasticache.BatchStopUpdateActionOutput) {
	fake.batchStopUpdateActionRequestMutex.Lock()
	defer fake.batchStopUpdateActionRequestMutex.Unlock()
	fake.BatchStopUpdateActionRequestStub = nil
	fake.batchStopUpdateActionRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.BatchStopUpdateActionOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.BatchStopUpdateActionOutput) {
	fake.batchStopUpdateActionRequestMutex.Lock()
	defer fake.batchStopUpdateActionRequestMutex.Unlock()
	fake.BatchStopUpdateActionRequestStub = nil
	if fake.batchStopUpdateActionRequestReturnsOnCall == nil {
		fake.batchStopUpdateActionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.BatchStopUpdateActionOutput
		})
	}
	fake.batchStopUpdateActionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.BatchStopUpdateActionOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionWithContext(arg1 context.Context, arg2 *elasticache.BatchStopUpdateActionInput, arg3 ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {
	fake.batchStopUpdateActionWithContextMutex.Lock()
	ret, specificReturn := fake.batchStopUpdateActionWithContextReturnsOnCall[len(fake.batchStopUpdateActionWithContextArgsForCall)]
	fake.batchStopUpdateActionWithContextArgsForCall = append(fake.batchStopUpdateActionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.BatchStopUpdateActionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.BatchStopUpdateActionWithContextStub
	fakeReturns := fake.batchStopUpdateActionWithContextReturns
	fake.recordInvocation("BatchStopUpdateActionWithContext", []interface{}{arg1, arg2, arg3})
	fake.batchStopUpdateActionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionWithContextCallCount() int {
	fake.batchStopUpdateActionWithContextMutex.RLock()
	defer fake.batchStopUpdateActionWithContextMutex.RUnlock()
	return len(fake.batchStopUpdateActionWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionWithContextCalls(stub func(context.Context, *elasticache.BatchStopUpdateActionInput, ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error)) {
	fake.batchStopUpdateActionWithContextMutex.Lock()
	defer fake.batchStopUpdateActionWithContextMutex.Unlock()
	fake.BatchStopUpdateActionWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionWithContextArgsForCall(i int) (context.Context, *elasticache.BatchStopUpdateActionInput, []request.Option) {
	fake.batchStopUpdateActionWithContextMutex.RLock()
	defer fake.batchStopUpdateActionWithContextMutex.RUnlock()
	argsForCall := fake.batchStopUpdateActionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionWithContextReturns(result1 *elasticache.BatchStopUpdateActionOutput, result2 error) {
	fake.batchStopUpdateActionWithContextMutex.Lock()
	defer fake.batchStopUpdateActionWithContextMutex.Unlock()
	fake.BatchStopUpdateActionWithContextStub = nil
	fake.batchStopUpdateActionWithContextReturns = struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) BatchStopUpdateActionWithContextReturnsOnCall(i int, result1 *elasticache.BatchStopUpdateActionOutput, result2 error) {
	fake.batchStopUpdateActionWithContextMutex.Lock()
	defer fake.batchStopUpdateActionWithContextMutex.Unlock()
	fake.BatchStopUpdateActionWithContextStub = nil
	if fake.batchStopUpdateActionWithContextReturnsOnCall == nil {
		fake.batchStopUpdateActionWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.BatchStopUpdateActionOutput
			result2 error
		})
	}
	fake.batchStopUpdateActionWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.BatchStopUpdateActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CompleteMigration(arg1 *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
	fake.completeMigrationMutex.Lock()
	ret, specificReturn := fake.completeMigrationReturnsOnCall[len(fake.completeMigrationArgsForCall)]
	fake.completeMigrationArgsForCall = append(fake.completeMigrationArgsForCall, struct {
		arg1 *elasticache.CompleteMigrationInput
	}{arg1})
	stub := fake.CompleteMigrationStub
	fakeReturns := fake.completeMigrationReturns
	fake.recordInvocation("CompleteMigration", []interface{}{arg1})
	fake.completeMigrationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CompleteMigrationCallCount() int {
	fake.completeMigrationMutex.RLock()
	defer fake.completeMigrationMutex.RUnlock()
	return len(fake.completeMigrationArgsForCall)
}

func (fake *FakeElastiCacheAPI) CompleteMigrationCalls(stub func(*elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error)) {
	fake.completeMigrationMutex.Lock()
	defer fake.completeMigrationMutex.Unlock()
	fake.CompleteMigrationStub = stub
}

func (fake *FakeElastiCacheAPI) CompleteMigrationArgsForCall(i int) *elasticache.CompleteMigrationInput {
	fake.completeMigrationMutex.RLock()
	defer fake.completeMigrationMutex.RUnlock()
	argsForCall := fake.completeMigrationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CompleteMigrationReturns(result1 *elasticache.CompleteMigrationOutput, result2 error) {
	fake.completeMigrationMutex.Lock()
	defer fake.completeMigrationMutex.Unlock()
	fake.CompleteMigrationStub = nil
	fake.completeMigrationReturns = struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CompleteMigrationReturnsOnCall(i int, result1 *elasticache.CompleteMigrationOutput, result2 error) {
	fake.completeMigrationMutex.Lock()
	defer fake.completeMigrationMutex.Unlock()
	fake.CompleteMigrationStub = nil
	if fake.completeMigrationReturnsOnCall == nil {
		fake.completeMigrationReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CompleteMigrationOutput
			result2 error
		})
	}
	fake.completeMigrationReturnsOnCall[i] = struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CompleteMigrationRequest(arg1 *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput) {
	fake.completeMigrationRequestMutex.Lock()
	ret, specificReturn := fake.completeMigrationRequestReturnsOnCall[len(fake.completeMigrationRequestArgsForCall)]
	fake.completeMigrationRequestArgsForCall = append(fake.completeMigrationRequestArgsForCall, struct {
		arg1 *elasticache.CompleteMigrationInput
	}{arg1})
	stub := fake.CompleteMigrationRequestStub
	fakeReturns := fake.completeMigrationRequestReturns
	fake.recordInvocation("CompleteMigrationRequest", []interface{}{arg1})
	fake.completeMigrationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CompleteMigrationRequestCallCount() int {
	fake.completeMigrationRequestMutex.RLock()
	defer fake.completeMigrationRequestMutex.RUnlock()
	return len(fake.completeMigrationRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CompleteMigrationRequestCalls(stub func(*elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput)) {
	fake.completeMigrationRequestMutex.Lock()
	defer fake.completeMigrationRequestMutex.Unlock()
	fake.CompleteMigrationRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CompleteMigrationRequestArgsForCall(i int) *elasticache.CompleteMigrationInput {
	fake.completeMigrationRequestMutex.RLock()
	defer fake.completeMigrationRequestMutex.RUnlock()
	argsForCall := fake.completeMigrationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CompleteMigrationRequestReturns(result1 *request.Request, result2 *elasticache.CompleteMigrationOutput) {
	fake.completeMigrationRequestMutex.Lock()
	defer fake.completeMigrationRequestMutex.Unlock()
	fake.CompleteMigrationRequestStub = nil
	fake.completeMigrationRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CompleteMigrationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CompleteMigrationRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CompleteMigrationOutput) {
	fake.completeMigrationRequestMutex.Lock()
	defer fake.completeMigrationRequestMutex.Unlock()
	fake.CompleteMigrationRequestStub = nil
	if fake.completeMigrationRequestReturnsOnCall == nil {
		fake.completeMigrationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CompleteMigrationOutput
		})
	}
	fake.completeMigrationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CompleteMigrationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CompleteMigrationWithContext(arg1 context.Context, arg2 *elasticache.CompleteMigrationInput, arg3 ...request.Option) (*elasticache.CompleteMigrationOutput, error) {
	fake.completeMigrationWithContextMutex.Lock()
	ret, specificReturn := fake.completeMigrationWithContextReturnsOnCall[len(fake.completeMigrationWithContextArgsForCall)]
	fake.completeMigrationWithContextArgsForCall = append(fake.completeMigrationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CompleteMigrationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CompleteMigrationWithContextStub
	fakeReturns := fake.completeMigrationWithContextReturns
	fake.recordInvocation("CompleteMigrationWithContext", []interface{}{arg1, arg2, arg3})
	fake.completeMigrationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CompleteMigrationWithContextCallCount() int {
	fake.completeMigrationWithContextMutex.RLock()
	defer fake.completeMigrationWithContextMutex.RUnlock()
	return len(fake.completeMigrationWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CompleteMigrationWithContextCalls(stub func(context.Context, *elasticache.CompleteMigrationInput, ...request.Option) (*elasticache.CompleteMigrationOutput, error)) {
	fake.completeMigrationWithContextMutex.Lock()
	defer fake.completeMigrationWithContextMutex.Unlock()
	fake.CompleteMigrationWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CompleteMigrationWithContextArgsForCall(i int) (context.Context, *elasticache.CompleteMigrationInput, []request.Option) {
	fake.completeMigrationWithContextMutex.RLock()
	defer fake.completeMigrationWithContextMutex.RUnlock()
	argsForCall := fake.completeMigrationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CompleteMigrationWithContextReturns(result1 *elasticache.CompleteMigrationOutput, result2 error) {
	fake.completeMigrationWithContextMutex.Lock()
	defer fake.completeMigrationWithContextMutex.Unlock()
	fake.CompleteMigrationWithContextStub = nil
	fake.completeMigrationWithContextReturns = struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CompleteMigrationWithContextReturnsOnCall(i int, result1 *elasticache.CompleteMigrationOutput, result2 error) {
	fake.completeMigrationWithContextMutex.Lock()
	defer fake.completeMigrationWithContextMutex.Unlock()
	fake.CompleteMigrationWithContextStub = nil
	if fake.completeMigrationWithContextReturnsOnCall == nil {
		fake.completeMigrationWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CompleteMigrationOutput
			result2 error
		})
	}
	fake.completeMigrationWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CompleteMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshot(arg1 *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	fake.copySnapshotMutex.Lock()
	ret, specificReturn := fake.copySnapshotReturnsOnCall[len(fake.copySnapshotArgsForCall)]
	fake.copySnapshotArgsForCall = append(fake.copySnapshotArgsForCall, struct {
		arg1 *elasticache.CopySnapshotInput
	}{arg1})
	stub := fake.CopySnapshotStub
	fakeReturns := fake.copySnapshotReturns
	fake.recordInvocation("CopySnapshot", []interface{}{arg1})
	fake.copySnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CopySnapshotCallCount() int {
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	return len(fake.copySnapshotArgsForCall)
}

func (fake *FakeElastiCacheAPI) CopySnapshotCalls(stub func(*elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)) {
	fake.copySnapshotMutex.Lock()
	defer fake.copySnapshotMutex.Unlock()
	fake.CopySnapshotStub = stub
}

func (fake *FakeElastiCacheAPI) CopySnapshotArgsForCall(i int) *elasticache.CopySnapshotInput {
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	argsForCall := fake.copySnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CopySnapshotReturns(result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.copySnapshotMutex.Lock()
	defer fake.copySnapshotMutex.Unlock()
	fake.CopySnapshotStub = nil
	fake.copySnapshotReturns = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotReturnsOnCall(i int, result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.copySnapshotMutex.Lock()
	defer fake.copySnapshotMutex.Unlock()
	fake.CopySnapshotStub = nil
	if fake.copySnapshotReturnsOnCall == nil {
		fake.copySnapshotReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CopySnapshotOutput
			result2 error
		})
	}
	fake.copySnapshotReturnsOnCall[i] = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequest(arg1 *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	ret, specificReturn := fake.copySnapshotRequestReturnsOnCall[len(fake.copySnapshotRequestArgsForCall)]
	fake.copySnapshotRequestArgsForCall = append(fake.copySnapshotRequestArgsForCall, struct {
		arg1 *elasticache.CopySnapshotInput
	}{arg1})
	stub := fake.CopySnapshotRequestStub
	fakeReturns := fake.copySnapshotRequestReturns
	fake.recordInvocation("CopySnapshotRequest", []interface{}{arg1})
	fake.copySnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestCallCount() int {
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	return len(fake.copySnapshotRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestCalls(stub func(*elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput)) {
	fake.copySnapshotRequestMutex.Lock()
	defer fake.copySnapshotRequestMutex.Unlock()
	fake.CopySnapshotRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestArgsForCall(i int) *elasticache.CopySnapshotInput {
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	argsForCall := fake.copySnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestReturns(result1 *request.Request, result2 *elasticache.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	defer fake.copySnapshotRequestMutex.Unlock()
	fake.CopySnapshotRequestStub = nil
	fake.copySnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	defer fake.copySnapshotRequestMutex.Unlock()
	fake.CopySnapshotRequestStub = nil
	if fake.copySnapshotRequestReturnsOnCall == nil {
		fake.copySnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CopySnapshotOutput
		})
	}
	fake.copySnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContext(arg1 context.Context, arg2 *elasticache.CopySnapshotInput, arg3 ...request.Option) (*elasticache.CopySnapshotOutput, error) {
	fake.copySnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.copySnapshotWithContextReturnsOnCall[len(fake.copySnapshotWithContextArgsForCall)]
	fake.copySnapshotWithContextArgsForCall = append(fake.copySnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CopySnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CopySnapshotWithContextStub
	fakeReturns := fake.copySnapshotWithContextReturns
	fake.recordInvocation("CopySnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.copySnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextCallCount() int {
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	return len(fake.copySnapshotWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextCalls(stub func(context.Context, *elasticache.CopySnapshotInput, ...request.Option) (*elasticache.CopySnapshotOutput, error)) {
	fake.copySnapshotWithContextMutex.Lock()
	defer fake.copySnapshotWithContextMutex.Unlock()
	fake.CopySnapshotWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextArgsForCall(i int) (context.Context, *elasticache.CopySnapshotInput, []request.Option) {
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	argsForCall := fake.copySnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextReturns(result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.copySnapshotWithContextMutex.Lock()
	defer fake.copySnapshotWithContextMutex.Unlock()
	fake.CopySnapshotWithContextStub = nil
	fake.copySnapshotWithContextReturns = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextReturnsOnCall(i int, result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.copySnapshotWithContextMutex.Lock()
	defer fake.copySnapshotWithContextMutex.Unlock()
	fake.CopySnapshotWithContextStub = nil
	if fake.copySnapshotWithContextReturnsOnCall == nil {
		fake.copySnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CopySnapshotOutput
			result2 error
		})
	}
	fake.copySnapshotWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheCluster(arg1 *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	fake.createCacheClusterMutex.Lock()
	ret, specificReturn := fake.createCacheClusterReturnsOnCall[len(fake.createCacheClusterArgsForCall)]
	fake.createCacheClusterArgsForCall = append(fake.createCacheClusterArgsForCall, struct {
		arg1 *elasticache.CreateCacheClusterInput
	}{arg1})
	stub := fake.CreateCacheClusterStub
	fakeReturns := fake.createCacheClusterReturns
	fake.recordInvocation("CreateCacheCluster", []interface{}{arg1})
	fake.createCacheClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterCallCount() int {
	fake.createCacheClusterMutex.RLock()
	defer fake.createCacheClusterMutex.RUnlock()
	return len(fake.createCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterCalls(stub func(*elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)) {
	fake.createCacheClusterMutex.Lock()
	defer fake.createCacheClusterMutex.Unlock()
	fake.CreateCacheClusterStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterArgsForCall(i int) *elasticache.CreateCacheClusterInput {
	fake.createCacheClusterMutex.RLock()
	defer fake.createCacheClusterMutex.RUnlock()
	argsForCall := fake.createCacheClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterReturns(result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.createCacheClusterMutex.Lock()
	defer fake.createCacheClusterMutex.Unlock()
	fake.CreateCacheClusterStub = nil
	fake.createCacheClusterReturns = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterReturnsOnCall(i int, result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.createCacheClusterMutex.Lock()
	defer fake.createCacheClusterMutex.Unlock()
	fake.CreateCacheClusterStub = nil
	if fake.createCacheClusterReturnsOnCall == nil {
		fake.createCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheClusterOutput
			result2 error
		})
	}
	fake.createCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequest(arg1 *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput) {
	fake.createCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.createCacheClusterRequestReturnsOnCall[len(fake.createCacheClusterRequestArgsForCall)]
	fake.createCacheClusterRequestArgsForCall = append(fake.createCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheClusterInput
	}{arg1})
	stub := fake.CreateCacheClusterRequestStub
	fakeReturns := fake.createCacheClusterRequestReturns
	fake.recordInvocation("CreateCacheClusterRequest", []interface{}{arg1})
	fake.createCacheClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestCallCount() int {
	fake.createCacheClusterRequestMutex.RLock()
	defer fake.createCacheClusterRequestMutex.RUnlock()
	return len(fake.createCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestCalls(stub func(*elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput)) {
	fake.createCacheClusterRequestMutex.Lock()
	defer fake.createCacheClusterRequestMutex.Unlock()
	fake.CreateCacheClusterRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestArgsForCall(i int) *elasticache.CreateCacheClusterInput {
	fake.createCacheClusterRequestMutex.RLock()
	defer fake.createCacheClusterRequestMutex.RUnlock()
	argsForCall := fake.createCacheClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheClusterOutput) {
	fake.createCacheClusterRequestMutex.Lock()
	defer fake.createCacheClusterRequestMutex.Unlock()
	fake.CreateCacheClusterRequestStub = nil
	fake.createCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheClusterOutput) {
	fake.createCacheClusterRequestMutex.Lock()
	defer fake.createCacheClusterRequestMutex.Unlock()
	fake.CreateCacheClusterRequestStub = nil
	if fake.createCacheClusterRequestReturnsOnCall == nil {
		fake.createCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheClusterOutput
		})
	}
	fake.createCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContext(arg1 context.Context, arg2 *elasticache.CreateCacheClusterInput, arg3 ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
	fake.createCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheClusterWithContextReturnsOnCall[len(fake.createCacheClusterWithContextArgsForCall)]
	fake.createCacheClusterWithContextArgsForCall = append(fake.createCacheClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCacheClusterWithContextStub
	fakeReturns := fake.createCacheClusterWithContextReturns
	fake.recordInvocation("CreateCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextCallCount() int {
	fake.createCacheClusterWithContextMutex.RLock()
	defer fake.createCacheClusterWithContextMutex.RUnlock()
	return len(fake.createCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextCalls(stub func(context.Context, *elasticache.CreateCacheClusterInput, ...request.Option) (*elasticache.CreateCacheClusterOutput, error)) {
	fake.createCacheClusterWithContextMutex.Lock()
	defer fake.createCacheClusterWithContextMutex.Unlock()
	fake.CreateCacheClusterWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextArgsForCall(i int) (context.Context, *elasticache.CreateCacheClusterInput, []request.Option) {
	fake.createCacheClusterWithContextMutex.RLock()
	defer fake.createCacheClusterWithContextMutex.RUnlock()
	argsForCall := fake.createCacheClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextReturns(result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.createCacheClusterWithContextMutex.Lock()
	defer fake.createCacheClusterWithContextMutex.Unlock()
	fake.CreateCacheClusterWithContextStub = nil
	fake.createCacheClusterWithContextReturns = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.createCacheClusterWithContextMutex.Lock()
	defer fake.createCacheClusterWithContextMutex.Unlock()
	fake.CreateCacheClusterWithContextStub = nil
	if fake.createCacheClusterWithContextReturnsOnCall == nil {
		fake.createCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheClusterOutput
			result2 error
		})
	}
	fake.createCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroup(arg1 *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	fake.createCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupReturnsOnCall[len(fake.createCacheParameterGroupArgsForCall)]
	fake.createCacheParameterGroupArgsForCall = append(fake.createCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}{arg1})
	stub := fake.CreateCacheParameterGroupStub
	fakeReturns := fake.createCacheParameterGroupReturns
	fake.recordInvocation("CreateCacheParameterGroup", []interface{}{arg1})
	fake.createCacheParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupCallCount() int {
	fake.createCacheParameterGroupMutex.RLock()
	defer fake.createCacheParameterGroupMutex.RUnlock()
	return len(fake.createCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupCalls(stub func(*elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)) {
	fake.createCacheParameterGroupMutex.Lock()
	defer fake.createCacheParameterGroupMutex.Unlock()
	fake.CreateCacheParameterGroupStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupArgsForCall(i int) *elasticache.CreateCacheParameterGroupInput {
	fake.createCacheParameterGroupMutex.RLock()
	defer fake.createCacheParameterGroupMutex.RUnlock()
	argsForCall := fake.createCacheParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupReturns(result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.createCacheParameterGroupMutex.Lock()
	defer fake.createCacheParameterGroupMutex.Unlock()
	fake.CreateCacheParameterGroupStub = nil
	fake.createCacheParameterGroupReturns = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.createCacheParameterGroupMutex.Lock()
	defer fake.createCacheParameterGroupMutex.Unlock()
	fake.CreateCacheParameterGroupStub = nil
	if fake.createCacheParameterGroupReturnsOnCall == nil {
		fake.createCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheParameterGroupOutput
			result2 error
		})
	}
	fake.createCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequest(arg1 *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput) {
	fake.createCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupRequestReturnsOnCall[len(fake.createCacheParameterGroupRequestArgsForCall)]
	fake.createCacheParameterGroupRequestArgsForCall = append(fake.createCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}{arg1})
	stub := fake.CreateCacheParameterGroupRequestStub
	fakeReturns := fake.createCacheParameterGroupRequestReturns
	fake.recordInvocation("CreateCacheParameterGroupRequest", []interface{}{arg1})
	fake.createCacheParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestCallCount() int {
	fake.createCacheParameterGroupRequestMutex.RLock()
	defer fake.createCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.createCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestCalls(stub func(*elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput)) {
	fake.createCacheParameterGroupRequestMutex.Lock()
	defer fake.createCacheParameterGroupRequestMutex.Unlock()
	fake.CreateCacheParameterGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestArgsForCall(i int) *elasticache.CreateCacheParameterGroupInput {
	fake.createCacheParameterGroupRequestMutex.RLock()
	defer fake.createCacheParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.createCacheParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheParameterGroupOutput) {
	fake.createCacheParameterGroupRequestMutex.Lock()
	defer fake.createCacheParameterGroupRequestMutex.Unlock()
	fake.CreateCacheParameterGroupRequestStub = nil
	fake.createCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheParameterGroupOutput) {
	fake.createCacheParameterGroupRequestMutex.Lock()
	defer fake.createCacheParameterGroupRequestMutex.Unlock()
	fake.CreateCacheParameterGroupRequestStub = nil
	if fake.createCacheParameterGroupRequestReturnsOnCall == nil {
		fake.createCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheParameterGroupOutput
		})
	}
	fake.createCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupWithContextReturnsOnCall[len(fake.createCacheParameterGroupWithContextArgsForCall)]
	fake.createCacheParameterGroupWithContextArgsForCall = append(fake.createCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCacheParameterGroupWithContextStub
	fakeReturns := fake.createCacheParameterGroupWithContextReturns
	fake.recordInvocation("CreateCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextCallCount() int {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.createCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.CreateCacheParameterGroupInput, ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	defer fake.createCacheParameterGroupWithContextMutex.Unlock()
	fake.CreateCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateCacheParameterGroupInput, []request.Option) {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.createCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextReturns(result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	defer fake.createCacheParameterGroupWithContextMutex.Unlock()
	fake.CreateCacheParameterGroupWithContextStub = nil
	fake.createCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	defer fake.createCacheParameterGroupWithContextMutex.Unlock()
	fake.CreateCacheParameterGroupWithContextStub = nil
	if fake.createCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.createCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheParameterGroupOutput
			result2 error
		})
	}
	fake.createCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroup(arg1 *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	fake.createCacheSecurityGroupMutex.Lock()
	ret, specificReturn := fake.createCacheSecurityGroupReturnsOnCall[len(fake.createCacheSecurityGroupArgsForCall)]
	fake.createCacheSecurityGroupArgsForCall = append(fake.createCacheSecurityGroupArgsForCall, struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}{arg1})
	stub := fake.CreateCacheSecurityGroupStub
	fakeReturns := fake.createCacheSecurityGroupReturns
	fake.recordInvocation("CreateCacheSecurityGroup", []interface{}{arg1})
	fake.createCacheSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupCallCount() int {
	fake.createCacheSecurityGroupMutex.RLock()
	defer fake.createCacheSecurityGroupMutex.RUnlock()
	return len(fake.createCacheSecurityGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupCalls(stub func(*elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)) {
	fake.createCacheSecurityGroupMutex.Lock()
	defer fake.createCacheSecurityGroupMutex.Unlock()
	fake.CreateCacheSecurityGroupStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupArgsForCall(i int) *elasticache.CreateCacheSecurityGroupInput {
	fake.createCacheSecurityGroupMutex.RLock()
	defer fake.createCacheSecurityGroupMutex.RUnlock()
	argsForCall := fake.createCacheSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupReturns(result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.createCacheSecurityGroupMutex.Lock()
	defer fake.createCacheSecurityGroupMutex.Unlock()
	fake.CreateCacheSecurityGroupStub = nil
	fake.createCacheSecurityGroupReturns = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupReturnsOnCall(i int, result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.createCacheSecurityGroupMutex.Lock()
	defer fake.createCacheSecurityGroupMutex.Unlock()
	fake.CreateCacheSecurityGroupStub = nil
	if fake.createCacheSecurityGroupReturnsOnCall == nil {
		fake.createCacheSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.createCacheSecurityGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequest(arg1 *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput) {
	fake.createCacheSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.createCacheSecurityGroupRequestReturnsOnCall[len(fake.createCacheSecurityGroupRequestArgsForCall)]
	fake.createCacheSecurityGroupRequestArgsForCall = append(fake.createCacheSecurityGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}{arg1})
	stub := fake.CreateCacheSecurityGroupRequestStub
	fakeReturns := fake.createCacheSecurityGroupRequestReturns
	fake.recordInvocation("CreateCacheSecurityGroupRequest", []interface{}{arg1})
	fake.createCacheSecurityGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestCallCount() int {
	fake.createCacheSecurityGroupRequestMutex.RLock()
	defer fake.createCacheSecurityGroupRequestMutex.RUnlock()
	return len(fake.createCacheSecurityGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestCalls(stub func(*elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput)) {
	fake.createCacheSecurityGroupRequestMutex.Lock()
	defer fake.createCacheSecurityGroupRequestMutex.Unlock()
	fake.CreateCacheSecurityGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestArgsForCall(i int) *elasticache.CreateCacheSecurityGroupInput {
	fake.createCacheSecurityGroupRequestMutex.RLock()
	defer fake.createCacheSecurityGroupRequestMutex.RUnlock()
	argsForCall := fake.createCacheSecurityGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheSecurityGroupOutput) {
	fake.createCacheSecurityGroupRequestMutex.Lock()
	defer fake.createCacheSecurityGroupRequestMutex.Unlock()
	fake.CreateCacheSecurityGroupRequestStub = nil
	fake.createCacheSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheSecurityGroupOutput) {
	fake.createCacheSecurityGroupRequestMutex.Lock()
	defer fake.createCacheSecurityGroupRequestMutex.Unlock()
	fake.CreateCacheSecurityGroupRequestStub = nil
	if fake.createCacheSecurityGroupRequestReturnsOnCall == nil {
		fake.createCacheSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheSecurityGroupOutput
		})
	}
	fake.createCacheSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateCacheSecurityGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	fake.createCacheSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheSecurityGroupWithContextReturnsOnCall[len(fake.createCacheSecurityGroupWithContextArgsForCall)]
	fake.createCacheSecurityGroupWithContextArgsForCall = append(fake.createCacheSecurityGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCacheSecurityGroupWithContextStub
	fakeReturns := fake.createCacheSecurityGroupWithContextReturns
	fake.recordInvocation("CreateCacheSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheSecurityGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextCallCount() int {
	fake.createCacheSecurityGroupWithContextMutex.RLock()
	defer fake.createCacheSecurityGroupWithContextMutex.RUnlock()
	return len(fake.createCacheSecurityGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextCalls(stub func(context.Context, *elasticache.CreateCacheSecurityGroupInput, ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error)) {
	fake.createCacheSecurityGroupWithContextMutex.Lock()
	defer fake.createCacheSecurityGroupWithContextMutex.Unlock()
	fake.CreateCacheSecurityGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateCacheSecurityGroupInput, []request.Option) {
	fake.createCacheSecurityGroupWithContextMutex.RLock()
	defer fake.createCacheSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.createCacheSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextReturns(result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.createCacheSecurityGroupWithContextMutex.Lock()
	defer fake.createCacheSecurityGroupWithContextMutex.Unlock()
	fake.CreateCacheSecurityGroupWithContextStub = nil
	fake.createCacheSecurityGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.createCacheSecurityGroupWithContextMutex.Lock()
	defer fake.createCacheSecurityGroupWithContextMutex.Unlock()
	fake.CreateCacheSecurityGroupWithContextStub = nil
	if fake.createCacheSecurityGroupWithContextReturnsOnCall == nil {
		fake.createCacheSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.createCacheSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroup(arg1 *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	fake.createCacheSubnetGroupMutex.Lock()
	ret, specificReturn := fake.createCacheSubnetGroupReturnsOnCall[len(fake.createCacheSubnetGroupArgsForCall)]
	fake.createCacheSubnetGroupArgsForCall = append(fake.createCacheSubnetGroupArgsForCall, struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}{arg1})
	stub := fake.CreateCacheSubnetGroupStub
	fakeReturns := fake.createCacheSubnetGroupReturns
	fake.recordInvocation("CreateCacheSubnetGroup", []interface{}{arg1})
	fake.createCacheSubnetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupCallCount() int {
	fake.createCacheSubnetGroupMutex.RLock()
	defer fake.createCacheSubnetGroupMutex.RUnlock()
	return len(fake.createCacheSubnetGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupCalls(stub func(*elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)) {
	fake.createCacheSubnetGroupMutex.Lock()
	defer fake.createCacheSubnetGroupMutex.Unlock()
	fake.CreateCacheSubnetGroupStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupArgsForCall(i int) *elasticache.CreateCacheSubnetGroupInput {
	fake.createCacheSubnetGroupMutex.RLock()
	defer fake.createCacheSubnetGroupMutex.RUnlock()
	argsForCall := fake.createCacheSubnetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupReturns(result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.createCacheSubnetGroupMutex.Lock()
	defer fake.createCacheSubnetGroupMutex.Unlock()
	fake.CreateCacheSubnetGroupStub = nil
	fake.createCacheSubnetGroupReturns = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupReturnsOnCall(i int, result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.createCacheSubnetGroupMutex.Lock()
	defer fake.createCacheSubnetGroupMutex.Unlock()
	fake.CreateCacheSubnetGroupStub = nil
	if fake.createCacheSubnetGroupReturnsOnCall == nil {
		fake.createCacheSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.createCacheSubnetGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequest(arg1 *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput) {
	fake.createCacheSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.createCacheSubnetGroupRequestReturnsOnCall[len(fake.createCacheSubnetGroupRequestArgsForCall)]
	fake.createCacheSubnetGroupRequestArgsForCall = append(fake.createCacheSubnetGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}{arg1})
	stub := fake.CreateCacheSubnetGroupRequestStub
	fakeReturns := fake.createCacheSubnetGroupRequestReturns
	fake.recordInvocation("CreateCacheSubnetGroupRequest", []interface{}{arg1})
	fake.createCacheSubnetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestCallCount() int {
	fake.createCacheSubnetGroupRequestMutex.RLock()
	defer fake.createCacheSubnetGroupRequestMutex.RUnlock()
	return len(fake.createCacheSubnetGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestCalls(stub func(*elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput)) {
	fake.createCacheSubnetGroupRequestMutex.Lock()
	defer fake.createCacheSubnetGroupRequestMutex.Unlock()
	fake.CreateCacheSubnetGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestArgsForCall(i int) *elasticache.CreateCacheSubnetGroupInput {
	fake.createCacheSubnetGroupRequestMutex.RLock()
	defer fake.createCacheSubnetGroupRequestMutex.RUnlock()
	argsForCall := fake.createCacheSubnetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheSubnetGroupOutput) {
	fake.createCacheSubnetGroupRequestMutex.Lock()
	defer fake.createCacheSubnetGroupRequestMutex.Unlock()
	fake.CreateCacheSubnetGroupRequestStub = nil
	fake.createCacheSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheSubnetGroupOutput) {
	fake.createCacheSubnetGroupRequestMutex.Lock()
	defer fake.createCacheSubnetGroupRequestMutex.Unlock()
	fake.CreateCacheSubnetGroupRequestStub = nil
	if fake.createCacheSubnetGroupRequestReturnsOnCall == nil {
		fake.createCacheSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheSubnetGroupOutput
		})
	}
	fake.createCacheSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateCacheSubnetGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	fake.createCacheSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheSubnetGroupWithContextReturnsOnCall[len(fake.createCacheSubnetGroupWithContextArgsForCall)]
	fake.createCacheSubnetGroupWithContextArgsForCall = append(fake.createCacheSubnetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCacheSubnetGroupWithContextStub
	fakeReturns := fake.createCacheSubnetGroupWithContextReturns
	fake.recordInvocation("CreateCacheSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheSubnetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextCallCount() int {
	fake.createCacheSubnetGroupWithContextMutex.RLock()
	defer fake.createCacheSubnetGroupWithContextMutex.RUnlock()
	return len(fake.createCacheSubnetGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextCalls(stub func(context.Context, *elasticache.CreateCacheSubnetGroupInput, ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error)) {
	fake.createCacheSubnetGroupWithContextMutex.Lock()
	defer fake.createCacheSubnetGroupWithContextMutex.Unlock()
	fake.CreateCacheSubnetGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateCacheSubnetGroupInput, []request.Option) {
	fake.createCacheSubnetGroupWithContextMutex.RLock()
	defer fake.createCacheSubnetGroupWithContextMutex.RUnlock()
	argsForCall := fake.createCacheSubnetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextReturns(result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.createCacheSubnetGroupWithContextMutex.Lock()
	defer fake.createCacheSubnetGroupWithContextMutex.Unlock()
	fake.CreateCacheSubnetGroupWithContextStub = nil
	fake.createCacheSubnetGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.createCacheSubnetGroupWithContextMutex.Lock()
	defer fake.createCacheSubnetGroupWithContextMutex.Unlock()
	fake.CreateCacheSubnetGroupWithContextStub = nil
	if fake.createCacheSubnetGroupWithContextReturnsOnCall == nil {
		fake.createCacheSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.createCacheSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroup(arg1 *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	fake.createGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.createGlobalReplicationGroupReturnsOnCall[len(fake.createGlobalReplicationGroupArgsForCall)]
	fake.createGlobalReplicationGroupArgsForCall = append(fake.createGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.CreateGlobalReplicationGroupInput
	}{arg1})
	stub := fake.CreateGlobalReplicationGroupStub
	fakeReturns := fake.createGlobalReplicationGroupReturns
	fake.recordInvocation("CreateGlobalReplicationGroup", []interface{}{arg1})
	fake.createGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupCallCount() int {
	fake.createGlobalReplicationGroupMutex.RLock()
	defer fake.createGlobalReplicationGroupMutex.RUnlock()
	return len(fake.createGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupCalls(stub func(*elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error)) {
	fake.createGlobalReplicationGroupMutex.Lock()
	defer fake.createGlobalReplicationGroupMutex.Unlock()
	fake.CreateGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupArgsForCall(i int) *elasticache.CreateGlobalReplicationGroupInput {
	fake.createGlobalReplicationGroupMutex.RLock()
	defer fake.createGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.createGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupReturns(result1 *elasticache.CreateGlobalReplicationGroupOutput, result2 error) {
	fake.createGlobalReplicationGroupMutex.Lock()
	defer fake.createGlobalReplicationGroupMutex.Unlock()
	fake.CreateGlobalReplicationGroupStub = nil
	fake.createGlobalReplicationGroupReturns = struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.CreateGlobalReplicationGroupOutput, result2 error) {
	fake.createGlobalReplicationGroupMutex.Lock()
	defer fake.createGlobalReplicationGroupMutex.Unlock()
	fake.CreateGlobalReplicationGroupStub = nil
	if fake.createGlobalReplicationGroupReturnsOnCall == nil {
		fake.createGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.createGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupRequest(arg1 *elasticache.CreateGlobalReplicationGroupInput) (*request.Request, *elasticache.CreateGlobalReplicationGroupOutput) {
	fake.createGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.createGlobalReplicationGroupRequestReturnsOnCall[len(fake.createGlobalReplicationGroupRequestArgsForCall)]
	fake.createGlobalReplicationGroupRequestArgsForCall = append(fake.createGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateGlobalReplicationGroupInput
	}{arg1})
	stub := fake.CreateGlobalReplicationGroupRequestStub
	fakeReturns := fake.createGlobalReplicationGroupRequestReturns
	fake.recordInvocation("CreateGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.createGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupRequestCallCount() int {
	fake.createGlobalReplicationGroupRequestMutex.RLock()
	defer fake.createGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.createGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupRequestCalls(stub func(*elasticache.CreateGlobalReplicationGroupInput) (*request.Request, *elasticache.CreateGlobalReplicationGroupOutput)) {
	fake.createGlobalReplicationGroupRequestMutex.Lock()
	defer fake.createGlobalReplicationGroupRequestMutex.Unlock()
	fake.CreateGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.CreateGlobalReplicationGroupInput {
	fake.createGlobalReplicationGroupRequestMutex.RLock()
	defer fake.createGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.createGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateGlobalReplicationGroupOutput) {
	fake.createGlobalReplicationGroupRequestMutex.Lock()
	defer fake.createGlobalReplicationGroupRequestMutex.Unlock()
	fake.CreateGlobalReplicationGroupRequestStub = nil
	fake.createGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateGlobalReplicationGroupOutput) {
	fake.createGlobalReplicationGroupRequestMutex.Lock()
	defer fake.createGlobalReplicationGroupRequestMutex.Unlock()
	fake.CreateGlobalReplicationGroupRequestStub = nil
	if fake.createGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.createGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateGlobalReplicationGroupOutput
		})
	}
	fake.createGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	fake.createGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createGlobalReplicationGroupWithContextReturnsOnCall[len(fake.createGlobalReplicationGroupWithContextArgsForCall)]
	fake.createGlobalReplicationGroupWithContextArgsForCall = append(fake.createGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateGlobalReplicationGroupWithContextStub
	fakeReturns := fake.createGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("CreateGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupWithContextCallCount() int {
	fake.createGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.createGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.createGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.CreateGlobalReplicationGroupInput, ...request.Option) (*elasticache.CreateGlobalReplicationGroupOutput, error)) {
	fake.createGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.createGlobalReplicationGroupWithContextMutex.Unlock()
	fake.CreateGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateGlobalReplicationGroupInput, []request.Option) {
	fake.createGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.createGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.createGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupWithContextReturns(result1 *elasticache.CreateGlobalReplicationGroupOutput, result2 error) {
	fake.createGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.createGlobalReplicationGroupWithContextMutex.Unlock()
	fake.CreateGlobalReplicationGroupWithContextStub = nil
	fake.createGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateGlobalReplicationGroupOutput, result2 error) {
	fake.createGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.createGlobalReplicationGroupWithContextMutex.Unlock()
	fake.CreateGlobalReplicationGroupWithContextStub = nil
	if fake.createGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.createGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.createGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroup(arg1 *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	fake.createReplicationGroupMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupReturnsOnCall[len(fake.createReplicationGroupArgsForCall)]
	fake.createReplicationGroupArgsForCall = append(fake.createReplicationGroupArgsForCall, struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}{arg1})
	stub := fake.CreateReplicationGroupStub
	fakeReturns := fake.createReplicationGroupReturns
	fake.recordInvocation("CreateReplicationGroup", []interface{}{arg1})
	fake.createReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupCallCount() int {
	fake.createReplicationGroupMutex.RLock()
	defer fake.createReplicationGroupMutex.RUnlock()
	return len(fake.createReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupCalls(stub func(*elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)) {
	fake.createReplicationGroupMutex.Lock()
	defer fake.createReplicationGroupMutex.Unlock()
	fake.CreateReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupArgsForCall(i int) *elasticache.CreateReplicationGroupInput {
	fake.createReplicationGroupMutex.RLock()
	defer fake.createReplicationGroupMutex.RUnlock()
	argsForCall := fake.createReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupReturns(result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.createReplicationGroupMutex.Lock()
	defer fake.createReplicationGroupMutex.Unlock()
	fake.CreateReplicationGroupStub = nil
	fake.createReplicationGroupReturns = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupReturnsOnCall(i int, result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.createReplicationGroupMutex.Lock()
	defer fake.createReplicationGroupMutex.Unlock()
	fake.CreateReplicationGroupStub = nil
	if fake.createReplicationGroupReturnsOnCall == nil {
		fake.createReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateReplicationGroupOutput
			result2 error
		})
	}
	fake.createReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequest(arg1 *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput) {
	fake.createReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupRequestReturnsOnCall[len(fake.createReplicationGroupRequestArgsForCall)]
	fake.createReplicationGroupRequestArgsForCall = append(fake.createReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}{arg1})
	stub := fake.CreateReplicationGroupRequestStub
	fakeReturns := fake.createReplicationGroupRequestReturns
	fake.recordInvocation("CreateReplicationGroupRequest", []interface{}{arg1})
	fake.createReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestCallCount() int {
	fake.createReplicationGroupRequestMutex.RLock()
	defer fake.createReplicationGroupRequestMutex.RUnlock()
	return len(fake.createReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestCalls(stub func(*elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput)) {
	fake.createReplicationGroupRequestMutex.Lock()
	defer fake.createReplicationGroupRequestMutex.Unlock()
	fake.CreateReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestArgsForCall(i int) *elasticache.CreateReplicationGroupInput {
	fake.createReplicationGroupRequestMutex.RLock()
	defer fake.createReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.createReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateReplicationGroupOutput) {
	fake.createReplicationGroupRequestMutex.Lock()
	defer fake.createReplicationGroupRequestMutex.Unlock()
	fake.CreateReplicationGroupRequestStub = nil
	fake.createReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateReplicationGroupOutput) {
	fake.createReplicationGroupRequestMutex.Lock()
	defer fake.createReplicationGroupRequestMutex.Unlock()
	fake.CreateReplicationGroupRequestStub = nil
	if fake.createReplicationGroupRequestReturnsOnCall == nil {
		fake.createReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateReplicationGroupOutput
		})
	}
	fake.createReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateReplicationGroupInput, arg3 ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupWithContextReturnsOnCall[len(fake.createReplicationGroupWithContextArgsForCall)]
	fake.createReplicationGroupWithContextArgsForCall = append(fake.createReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateReplicationGroupWithContextStub
	fakeReturns := fake.createReplicationGroupWithContextReturns
	fake.recordInvocation("CreateReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextCallCount() int {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	return len(fake.createReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.CreateReplicationGroupInput, ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)) {
	fake.createReplicationGroupWithContextMutex.Lock()
	defer fake.createReplicationGroupWithContextMutex.Unlock()
	fake.CreateReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateReplicationGroupInput, []request.Option) {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.createReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextReturns(result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	defer fake.createReplicationGroupWithContextMutex.Unlock()
	fake.CreateReplicationGroupWithContextStub = nil
	fake.createReplicationGroupWithContextReturns = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	defer fake.createReplicationGroupWithContextMutex.Unlock()
	fake.CreateReplicationGroupWithContextStub = nil
	if fake.createReplicationGroupWithContextReturnsOnCall == nil {
		fake.createReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateReplicationGroupOutput
			result2 error
		})
	}
	fake.createReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshot(arg1 *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	fake.createSnapshotMutex.Lock()
	ret, specificReturn := fake.createSnapshotReturnsOnCall[len(fake.createSnapshotArgsForCall)]
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		arg1 *elasticache.CreateSnapshotInput
	}{arg1})
	stub := fake.CreateSnapshotStub
	fakeReturns := fake.createSnapshotReturns
	fake.recordInvocation("CreateSnapshot", []interface{}{arg1})
	fake.createSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateSnapshotCalls(stub func(*elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = stub
}

func (fake *FakeElastiCacheAPI) CreateSnapshotArgsForCall(i int) *elasticache.CreateSnapshotInput {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	argsForCall := fake.createSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateSnapshotReturns(result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotReturnsOnCall(i int, result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	if fake.createSnapshotReturnsOnCall == nil {
		fake.createSnapshotReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateSnapshotOutput
			result2 error
		})
	}
	fake.createSnapshotReturnsOnCall[i] = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequest(arg1 *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput) {
	fake.createSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.createSnapshotRequestReturnsOnCall[len(fake.createSnapshotRequestArgsForCall)]
	fake.createSnapshotRequestArgsForCall = append(fake.createSnapshotRequestArgsForCall, struct {
		arg1 *elasticache.CreateSnapshotInput
	}{arg1})
	stub := fake.CreateSnapshotRequestStub
	fakeReturns := fake.createSnapshotRequestReturns
	fake.recordInvocation("CreateSnapshotRequest", []interface{}{arg1})
	fake.createSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestCallCount() int {
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	return len(fake.createSnapshotRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestCalls(stub func(*elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput)) {
	fake.createSnapshotRequestMutex.Lock()
	defer fake.createSnapshotRequestMutex.Unlock()
	fake.CreateSnapshotRequestStub = stub
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestArgsForCall(i int) *elasticache.CreateSnapshotInput {
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	argsForCall := fake.createSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestReturns(result1 *request.Request, result2 *elasticache.CreateSnapshotOutput) {
	fake.createSnapshotRequestMutex.Lock()
	defer fake.createSnapshotRequestMutex.Unlock()
	fake.CreateSnapshotRequestStub = nil
	fake.createSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateSnapshotOutput) {
	fake.createSnapshotRequestMutex.Lock()
	defer fake.createSnapshotRequestMutex.Unlock()
	fake.CreateSnapshotRequestStub = nil
	if fake.createSnapshotRequestReturnsOnCall == nil {
		fake.createSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateSnapshotOutput
		})
	}
	fake.createSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContext(arg1 context.Context, arg2 *elasticache.CreateSnapshotInput, arg3 ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
	fake.createSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.createSnapshotWithContextReturnsOnCall[len(fake.createSnapshotWithContextArgsForCall)]
	fake.createSnapshotWithContextArgsForCall = append(fake.createSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateSnapshotWithContextStub
	fakeReturns := fake.createSnapshotWithContextReturns
	fake.recordInvocation("CreateSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextCallCount() int {
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	return len(fake.createSnapshotWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextCalls(stub func(context.Context, *elasticache.CreateSnapshotInput, ...request.Option) (*elasticache.CreateSnapshotOutput, error)) {
	fake.createSnapshotWithContextMutex.Lock()
	defer fake.createSnapshotWithContextMutex.Unlock()
	fake.CreateSnapshotWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextArgsForCall(i int) (context.Context, *elasticache.CreateSnapshotInput, []request.Option) {
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.createSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextReturns(result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.createSnapshotWithContextMutex.Lock()
	defer fake.createSnapshotWithContextMutex.Unlock()
	fake.CreateSnapshotWithContextStub = nil
	fake.createSnapshotWithContextReturns = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextReturnsOnCall(i int, result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.createSnapshotWithContextMutex.Lock()
	defer fake.createSnapshotWithContextMutex.Unlock()
	fake.CreateSnapshotWithContextStub = nil
	if fake.createSnapshotWithContextReturnsOnCall == nil {
		fake.createSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateSnapshotOutput
			result2 error
		})
	}
	fake.createSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroup(arg1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.decreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall[len(fake.decreaseNodeGroupsInGlobalReplicationGroupArgsForCall)]
	fake.decreaseNodeGroupsInGlobalReplicationGroupArgsForCall = append(fake.decreaseNodeGroupsInGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}{arg1})
	stub := fake.DecreaseNodeGroupsInGlobalReplicationGroupStub
	fakeReturns := fake.decreaseNodeGroupsInGlobalReplicationGroupReturns
	fake.recordInvocation("DecreaseNodeGroupsInGlobalReplicationGroup", []interface{}{arg1})
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupCallCount() int {
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.RUnlock()
	return len(fake.decreaseNodeGroupsInGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupCalls(stub func(*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupArgsForCall(i int) *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput {
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.decreaseNodeGroupsInGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupReturns(result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupStub = nil
	fake.decreaseNodeGroupsInGlobalReplicationGroupReturns = struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupStub = nil
	if fake.decreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall == nil {
		fake.decreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.decreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupRequest(arg1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.decreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall[len(fake.decreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall)]
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall = append(fake.decreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}{arg1})
	stub := fake.DecreaseNodeGroupsInGlobalReplicationGroupRequestStub
	fakeReturns := fake.decreaseNodeGroupsInGlobalReplicationGroupRequestReturns
	fake.recordInvocation("DecreaseNodeGroupsInGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupRequestCallCount() int {
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.decreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupRequestCalls(stub func(*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput)) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput {
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.decreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupRequestStub = nil
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupRequestStub = nil
	if fake.decreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.decreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		})
	}
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall[len(fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall)]
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall = append(fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DecreaseNodeGroupsInGlobalReplicationGroupWithContextStub
	fakeReturns := fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("DecreaseNodeGroupsInGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupWithContextCallCount() int {
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, ...request.Option) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, []request.Option) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupWithContextReturns(result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupWithContextStub = nil
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DecreaseNodeGroupsInGlobalReplicationGroupWithContextStub = nil
	if fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCount(arg1 *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
	fake.decreaseReplicaCountMutex.Lock()
	ret, specificReturn := fake.decreaseReplicaCountReturnsOnCall[len(fake.decreaseReplicaCountArgsForCall)]
	fake.decreaseReplicaCountArgsForCall = append(fake.decreaseReplicaCountArgsForCall, struct {
		arg1 *elasticache.DecreaseReplicaCountInput
	}{arg1})
	stub := fake.DecreaseReplicaCountStub
	fakeReturns := fake.decreaseReplicaCountReturns
	fake.recordInvocation("DecreaseReplicaCount", []interface{}{arg1})
	fake.decreaseReplicaCountMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountCallCount() int {
	fake.decreaseReplicaCountMutex.RLock()
	defer fake.decreaseReplicaCountMutex.RUnlock()
	return len(fake.decreaseReplicaCountArgsForCall)
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountCalls(stub func(*elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error)) {
	fake.decreaseReplicaCountMutex.Lock()
	defer fake.decreaseReplicaCountMutex.Unlock()
	fake.DecreaseReplicaCountStub = stub
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountArgsForCall(i int) *elasticache.DecreaseReplicaCountInput {
	fake.decreaseReplicaCountMutex.RLock()
	defer fake.decreaseReplicaCountMutex.RUnlock()
	argsForCall := fake.decreaseReplicaCountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountReturns(result1 *elasticache.DecreaseReplicaCountOutput, result2 error) {
	fake.decreaseReplicaCountMutex.Lock()
	defer fake.decreaseReplicaCountMutex.Unlock()
	fake.DecreaseReplicaCountStub = nil
	fake.decreaseReplicaCountReturns = struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountReturnsOnCall(i int, result1 *elasticache.DecreaseReplicaCountOutput, result2 error) {
	fake.decreaseReplicaCountMutex.Lock()
	defer fake.decreaseReplicaCountMutex.Unlock()
	fake.DecreaseReplicaCountStub = nil
	if fake.decreaseReplicaCountReturnsOnCall == nil {
		fake.decreaseReplicaCountReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DecreaseReplicaCountOutput
			result2 error
		})
	}
	fake.decreaseReplicaCountReturnsOnCall[i] = struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountRequest(arg1 *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput) {
	fake.decreaseReplicaCountRequestMutex.Lock()
	ret, specificReturn := fake.decreaseReplicaCountRequestReturnsOnCall[len(fake.decreaseReplicaCountRequestArgsForCall)]
	fake.decreaseReplicaCountRequestArgsForCall = append(fake.decreaseReplicaCountRequestArgsForCall, struct {
		arg1 *elasticache.DecreaseReplicaCountInput
	}{arg1})
	stub := fake.DecreaseReplicaCountRequestStub
	fakeReturns := fake.decreaseReplicaCountRequestReturns
	fake.recordInvocation("DecreaseReplicaCountRequest", []interface{}{arg1})
	fake.decreaseReplicaCountRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountRequestCallCount() int {
	fake.decreaseReplicaCountRequestMutex.RLock()
	defer fake.decreaseReplicaCountRequestMutex.RUnlock()
	return len(fake.decreaseReplicaCountRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountRequestCalls(stub func(*elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput)) {
	fake.decreaseReplicaCountRequestMutex.Lock()
	defer fake.decreaseReplicaCountRequestMutex.Unlock()
	fake.DecreaseReplicaCountRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountRequestArgsForCall(i int) *elasticache.DecreaseReplicaCountInput {
	fake.decreaseReplicaCountRequestMutex.RLock()
	defer fake.decreaseReplicaCountRequestMutex.RUnlock()
	argsForCall := fake.decreaseReplicaCountRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountRequestReturns(result1 *request.Request, result2 *elasticache.DecreaseReplicaCountOutput) {
	fake.decreaseReplicaCountRequestMutex.Lock()
	defer fake.decreaseReplicaCountRequestMutex.Unlock()
	fake.DecreaseReplicaCountRequestStub = nil
	fake.decreaseReplicaCountRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DecreaseReplicaCountOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DecreaseReplicaCountOutput) {
	fake.decreaseReplicaCountRequestMutex.Lock()
	defer fake.decreaseReplicaCountRequestMutex.Unlock()
	fake.DecreaseReplicaCountRequestStub = nil
	if fake.decreaseReplicaCountRequestReturnsOnCall == nil {
		fake.decreaseReplicaCountRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DecreaseReplicaCountOutput
		})
	}
	fake.decreaseReplicaCountRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DecreaseReplicaCountOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountWithContext(arg1 context.Context, arg2 *elasticache.DecreaseReplicaCountInput, arg3 ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {
	fake.decreaseReplicaCountWithContextMutex.Lock()
	ret, specificReturn := fake.decreaseReplicaCountWithContextReturnsOnCall[len(fake.decreaseReplicaCountWithContextArgsForCall)]
	fake.decreaseReplicaCountWithContextArgsForCall = append(fake.decreaseReplicaCountWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DecreaseReplicaCountInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DecreaseReplicaCountWithContextStub
	fakeReturns := fake.decreaseReplicaCountWithContextReturns
	fake.recordInvocation("DecreaseReplicaCountWithContext", []interface{}{arg1, arg2, arg3})
	fake.decreaseReplicaCountWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountWithContextCallCount() int {
	fake.decreaseReplicaCountWithContextMutex.RLock()
	defer fake.decreaseReplicaCountWithContextMutex.RUnlock()
	return len(fake.decreaseReplicaCountWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountWithContextCalls(stub func(context.Context, *elasticache.DecreaseReplicaCountInput, ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error)) {
	fake.decreaseReplicaCountWithContextMutex.Lock()
	defer fake.decreaseReplicaCountWithContextMutex.Unlock()
	fake.DecreaseReplicaCountWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountWithContextArgsForCall(i int) (context.Context, *elasticache.DecreaseReplicaCountInput, []request.Option) {
	fake.decreaseReplicaCountWithContextMutex.RLock()
	defer fake.decreaseReplicaCountWithContextMutex.RUnlock()
	argsForCall := fake.decreaseReplicaCountWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountWithContextReturns(result1 *elasticache.DecreaseReplicaCountOutput, result2 error) {
	fake.decreaseReplicaCountWithContextMutex.Lock()
	defer fake.decreaseReplicaCountWithContextMutex.Unlock()
	fake.DecreaseReplicaCountWithContextStub = nil
	fake.decreaseReplicaCountWithContextReturns = struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DecreaseReplicaCountWithContextReturnsOnCall(i int, result1 *elasticache.DecreaseReplicaCountOutput, result2 error) {
	fake.decreaseReplicaCountWithContextMutex.Lock()
	defer fake.decreaseReplicaCountWithContextMutex.Unlock()
	fake.DecreaseReplicaCountWithContextStub = nil
	if fake.decreaseReplicaCountWithContextReturnsOnCall == nil {
		fake.decreaseReplicaCountWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DecreaseReplicaCountOutput
			result2 error
		})
	}
	fake.decreaseReplicaCountWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DecreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheCluster(arg1 *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	fake.deleteCacheClusterMutex.Lock()
	ret, specificReturn := fake.deleteCacheClusterReturnsOnCall[len(fake.deleteCacheClusterArgsForCall)]
	fake.deleteCacheClusterArgsForCall = append(fake.deleteCacheClusterArgsForCall, struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}{arg1})
	stub := fake.DeleteCacheClusterStub
	fakeReturns := fake.deleteCacheClusterReturns
	fake.recordInvocation("DeleteCacheCluster", []interface{}{arg1})
	fake.deleteCacheClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterCallCount() int {
	fake.deleteCacheClusterMutex.RLock()
	defer fake.deleteCacheClusterMutex.RUnlock()
	return len(fake.deleteCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterCalls(stub func(*elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)) {
	fake.deleteCacheClusterMutex.Lock()
	defer fake.deleteCacheClusterMutex.Unlock()
	fake.DeleteCacheClusterStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterArgsForCall(i int) *elasticache.DeleteCacheClusterInput {
	fake.deleteCacheClusterMutex.RLock()
	defer fake.deleteCacheClusterMutex.RUnlock()
	argsForCall := fake.deleteCacheClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterReturns(result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.deleteCacheClusterMutex.Lock()
	defer fake.deleteCacheClusterMutex.Unlock()
	fake.DeleteCacheClusterStub = nil
	fake.deleteCacheClusterReturns = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterReturnsOnCall(i int, result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.deleteCacheClusterMutex.Lock()
	defer fake.deleteCacheClusterMutex.Unlock()
	fake.DeleteCacheClusterStub = nil
	if fake.deleteCacheClusterReturnsOnCall == nil {
		fake.deleteCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheClusterOutput
			result2 error
		})
	}
	fake.deleteCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequest(arg1 *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput) {
	fake.deleteCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheClusterRequestReturnsOnCall[len(fake.deleteCacheClusterRequestArgsForCall)]
	fake.deleteCacheClusterRequestArgsForCall = append(fake.deleteCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}{arg1})
	stub := fake.DeleteCacheClusterRequestStub
	fakeReturns := fake.deleteCacheClusterRequestReturns
	fake.recordInvocation("DeleteCacheClusterRequest", []interface{}{arg1})
	fake.deleteCacheClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestCallCount() int {
	fake.deleteCacheClusterRequestMutex.RLock()
	defer fake.deleteCacheClusterRequestMutex.RUnlock()
	return len(fake.deleteCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestCalls(stub func(*elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput)) {
	fake.deleteCacheClusterRequestMutex.Lock()
	defer fake.deleteCacheClusterRequestMutex.Unlock()
	fake.DeleteCacheClusterRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestArgsForCall(i int) *elasticache.DeleteCacheClusterInput {
	fake.deleteCacheClusterRequestMutex.RLock()
	defer fake.deleteCacheClusterRequestMutex.RUnlock()
	argsForCall := fake.deleteCacheClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheClusterOutput) {
	fake.deleteCacheClusterRequestMutex.Lock()
	defer fake.deleteCacheClusterRequestMutex.Unlock()
	fake.DeleteCacheClusterRequestStub = nil
	fake.deleteCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheClusterOutput) {
	fake.deleteCacheClusterRequestMutex.Lock()
	defer fake.deleteCacheClusterRequestMutex.Unlock()
	fake.DeleteCacheClusterRequestStub = nil
	if fake.deleteCacheClusterRequestReturnsOnCall == nil {
		fake.deleteCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheClusterOutput
		})
	}
	fake.deleteCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContext(arg1 context.Context, arg2 *elasticache.DeleteCacheClusterInput, arg3 ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
	fake.deleteCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheClusterWithContextReturnsOnCall[len(fake.deleteCacheClusterWithContextArgsForCall)]
	fake.deleteCacheClusterWithContextArgsForCall = append(fake.deleteCacheClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCacheClusterWithContextStub
	fakeReturns := fake.deleteCacheClusterWithContextReturns
	fake.recordInvocation("DeleteCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextCallCount() int {
	fake.deleteCacheClusterWithContextMutex.RLock()
	defer fake.deleteCacheClusterWithContextMutex.RUnlock()
	return len(fake.deleteCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextCalls(stub func(context.Context, *elasticache.DeleteCacheClusterInput, ...request.Option) (*elasticache.DeleteCacheClusterOutput, error)) {
	fake.deleteCacheClusterWithContextMutex.Lock()
	defer fake.deleteCacheClusterWithContextMutex.Unlock()
	fake.DeleteCacheClusterWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteCacheClusterInput, []request.Option) {
	fake.deleteCacheClusterWithContextMutex.RLock()
	defer fake.deleteCacheClusterWithContextMutex.RUnlock()
	argsForCall := fake.deleteCacheClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextReturns(result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.deleteCacheClusterWithContextMutex.Lock()
	defer fake.deleteCacheClusterWithContextMutex.Unlock()
	fake.DeleteCacheClusterWithContextStub = nil
	fake.deleteCacheClusterWithContextReturns = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.deleteCacheClusterWithContextMutex.Lock()
	defer fake.deleteCacheClusterWithContextMutex.Unlock()
	fake.DeleteCacheClusterWithContextStub = nil
	if fake.deleteCacheClusterWithContextReturnsOnCall == nil {
		fake.deleteCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheClusterOutput
			result2 error
		})
	}
	fake.deleteCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroup(arg1 *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	fake.deleteCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupReturnsOnCall[len(fake.deleteCacheParameterGroupArgsForCall)]
	fake.deleteCacheParameterGroupArgsForCall = append(fake.deleteCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}{arg1})
	stub := fake.DeleteCacheParameterGroupStub
	fakeReturns := fake.deleteCacheParameterGroupReturns
	fake.recordInvocation("DeleteCacheParameterGroup", []interface{}{arg1})
	fake.deleteCacheParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupCallCount() int {
	fake.deleteCacheParameterGroupMutex.RLock()
	defer fake.deleteCacheParameterGroupMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupCalls(stub func(*elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)) {
	fake.deleteCacheParameterGroupMutex.Lock()
	defer fake.deleteCacheParameterGroupMutex.Unlock()
	fake.DeleteCacheParameterGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupArgsForCall(i int) *elasticache.DeleteCacheParameterGroupInput {
	fake.deleteCacheParameterGroupMutex.RLock()
	defer fake.deleteCacheParameterGroupMutex.RUnlock()
	argsForCall := fake.deleteCacheParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupReturns(result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.deleteCacheParameterGroupMutex.Lock()
	defer fake.deleteCacheParameterGroupMutex.Unlock()
	fake.DeleteCacheParameterGroupStub = nil
	fake.deleteCacheParameterGroupReturns = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.deleteCacheParameterGroupMutex.Lock()
	defer fake.deleteCacheParameterGroupMutex.Unlock()
	fake.DeleteCacheParameterGroupStub = nil
	if fake.deleteCacheParameterGroupReturnsOnCall == nil {
		fake.deleteCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheParameterGroupOutput
			result2 error
		})
	}
	fake.deleteCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequest(arg1 *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput) {
	fake.deleteCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupRequestReturnsOnCall[len(fake.deleteCacheParameterGroupRequestArgsForCall)]
	fake.deleteCacheParameterGroupRequestArgsForCall = append(fake.deleteCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}{arg1})
	stub := fake.DeleteCacheParameterGroupRequestStub
	fakeReturns := fake.deleteCacheParameterGroupRequestReturns
	fake.recordInvocation("DeleteCacheParameterGroupRequest", []interface{}{arg1})
	fake.deleteCacheParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestCallCount() int {
	fake.deleteCacheParameterGroupRequestMutex.RLock()
	defer fake.deleteCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestCalls(stub func(*elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput)) {
	fake.deleteCacheParameterGroupRequestMutex.Lock()
	defer fake.deleteCacheParameterGroupRequestMutex.Unlock()
	fake.DeleteCacheParameterGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestArgsForCall(i int) *elasticache.DeleteCacheParameterGroupInput {
	fake.deleteCacheParameterGroupRequestMutex.RLock()
	defer fake.deleteCacheParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteCacheParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheParameterGroupOutput) {
	fake.deleteCacheParameterGroupRequestMutex.Lock()
	defer fake.deleteCacheParameterGroupRequestMutex.Unlock()
	fake.DeleteCacheParameterGroupRequestStub = nil
	fake.deleteCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheParameterGroupOutput) {
	fake.deleteCacheParameterGroupRequestMutex.Lock()
	defer fake.deleteCacheParameterGroupRequestMutex.Unlock()
	fake.DeleteCacheParameterGroupRequestStub = nil
	if fake.deleteCacheParameterGroupRequestReturnsOnCall == nil {
		fake.deleteCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheParameterGroupOutput
		})
	}
	fake.deleteCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupWithContextReturnsOnCall[len(fake.deleteCacheParameterGroupWithContextArgsForCall)]
	fake.deleteCacheParameterGroupWithContextArgsForCall = append(fake.deleteCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCacheParameterGroupWithContextStub
	fakeReturns := fake.deleteCacheParameterGroupWithContextReturns
	fake.recordInvocation("DeleteCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextCallCount() int {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteCacheParameterGroupInput, ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	defer fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	fake.DeleteCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteCacheParameterGroupInput, []request.Option) {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextReturns(result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	defer fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	fake.DeleteCacheParameterGroupWithContextStub = nil
	fake.deleteCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	defer fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	fake.DeleteCacheParameterGroupWithContextStub = nil
	if fake.deleteCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheParameterGroupOutput
			result2 error
		})
	}
	fake.deleteCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroup(arg1 *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	fake.deleteCacheSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteCacheSecurityGroupReturnsOnCall[len(fake.deleteCacheSecurityGroupArgsForCall)]
	fake.deleteCacheSecurityGroupArgsForCall = append(fake.deleteCacheSecurityGroupArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}{arg1})
	stub := fake.DeleteCacheSecurityGroupStub
	fakeReturns := fake.deleteCacheSecurityGroupReturns
	fake.recordInvocation("DeleteCacheSecurityGroup", []interface{}{arg1})
	fake.deleteCacheSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupCallCount() int {
	fake.deleteCacheSecurityGroupMutex.RLock()
	defer fake.deleteCacheSecurityGroupMutex.RUnlock()
	return len(fake.deleteCacheSecurityGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupCalls(stub func(*elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)) {
	fake.deleteCacheSecurityGroupMutex.Lock()
	defer fake.deleteCacheSecurityGroupMutex.Unlock()
	fake.DeleteCacheSecurityGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupArgsForCall(i int) *elasticache.DeleteCacheSecurityGroupInput {
	fake.deleteCacheSecurityGroupMutex.RLock()
	defer fake.deleteCacheSecurityGroupMutex.RUnlock()
	argsForCall := fake.deleteCacheSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupReturns(result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.deleteCacheSecurityGroupMutex.Lock()
	defer fake.deleteCacheSecurityGroupMutex.Unlock()
	fake.DeleteCacheSecurityGroupStub = nil
	fake.deleteCacheSecurityGroupReturns = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupReturnsOnCall(i int, result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.deleteCacheSecurityGroupMutex.Lock()
	defer fake.deleteCacheSecurityGroupMutex.Unlock()
	fake.DeleteCacheSecurityGroupStub = nil
	if fake.deleteCacheSecurityGroupReturnsOnCall == nil {
		fake.deleteCacheSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSecurityGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequest(arg1 *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput) {
	fake.deleteCacheSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheSecurityGroupRequestReturnsOnCall[len(fake.deleteCacheSecurityGroupRequestArgsForCall)]
	fake.deleteCacheSecurityGroupRequestArgsForCall = append(fake.deleteCacheSecurityGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}{arg1})
	stub := fake.DeleteCacheSecurityGroupRequestStub
	fakeReturns := fake.deleteCacheSecurityGroupRequestReturns
	fake.recordInvocation("DeleteCacheSecurityGroupRequest", []interface{}{arg1})
	fake.deleteCacheSecurityGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestCallCount() int {
	fake.deleteCacheSecurityGroupRequestMutex.RLock()
	defer fake.deleteCacheSecurityGroupRequestMutex.RUnlock()
	return len(fake.deleteCacheSecurityGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestCalls(stub func(*elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput)) {
	fake.deleteCacheSecurityGroupRequestMutex.Lock()
	defer fake.deleteCacheSecurityGroupRequestMutex.Unlock()
	fake.DeleteCacheSecurityGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestArgsForCall(i int) *elasticache.DeleteCacheSecurityGroupInput {
	fake.deleteCacheSecurityGroupRequestMutex.RLock()
	defer fake.deleteCacheSecurityGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteCacheSecurityGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheSecurityGroupOutput) {
	fake.deleteCacheSecurityGroupRequestMutex.Lock()
	defer fake.deleteCacheSecurityGroupRequestMutex.Unlock()
	fake.DeleteCacheSecurityGroupRequestStub = nil
	fake.deleteCacheSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheSecurityGroupOutput) {
	fake.deleteCacheSecurityGroupRequestMutex.Lock()
	defer fake.deleteCacheSecurityGroupRequestMutex.Unlock()
	fake.DeleteCacheSecurityGroupRequestStub = nil
	if fake.deleteCacheSecurityGroupRequestReturnsOnCall == nil {
		fake.deleteCacheSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheSecurityGroupOutput
		})
	}
	fake.deleteCacheSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteCacheSecurityGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	fake.deleteCacheSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheSecurityGroupWithContextReturnsOnCall[len(fake.deleteCacheSecurityGroupWithContextArgsForCall)]
	fake.deleteCacheSecurityGroupWithContextArgsForCall = append(fake.deleteCacheSecurityGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCacheSecurityGroupWithContextStub
	fakeReturns := fake.deleteCacheSecurityGroupWithContextReturns
	fake.recordInvocation("DeleteCacheSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheSecurityGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextCallCount() int {
	fake.deleteCacheSecurityGroupWithContextMutex.RLock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheSecurityGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteCacheSecurityGroupInput, ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error)) {
	fake.deleteCacheSecurityGroupWithContextMutex.Lock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.Unlock()
	fake.DeleteCacheSecurityGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteCacheSecurityGroupInput, []request.Option) {
	fake.deleteCacheSecurityGroupWithContextMutex.RLock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteCacheSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextReturns(result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.deleteCacheSecurityGroupWithContextMutex.Lock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.Unlock()
	fake.DeleteCacheSecurityGroupWithContextStub = nil
	fake.deleteCacheSecurityGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.deleteCacheSecurityGroupWithContextMutex.Lock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.Unlock()
	fake.DeleteCacheSecurityGroupWithContextStub = nil
	if fake.deleteCacheSecurityGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroup(arg1 *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	fake.deleteCacheSubnetGroupMutex.Lock()
	ret, specificReturn := fake.deleteCacheSubnetGroupReturnsOnCall[len(fake.deleteCacheSubnetGroupArgsForCall)]
	fake.deleteCacheSubnetGroupArgsForCall = append(fake.deleteCacheSubnetGroupArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}{arg1})
	stub := fake.DeleteCacheSubnetGroupStub
	fakeReturns := fake.deleteCacheSubnetGroupReturns
	fake.recordInvocation("DeleteCacheSubnetGroup", []interface{}{arg1})
	fake.deleteCacheSubnetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupCallCount() int {
	fake.deleteCacheSubnetGroupMutex.RLock()
	defer fake.deleteCacheSubnetGroupMutex.RUnlock()
	return len(fake.deleteCacheSubnetGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupCalls(stub func(*elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)) {
	fake.deleteCacheSubnetGroupMutex.Lock()
	defer fake.deleteCacheSubnetGroupMutex.Unlock()
	fake.DeleteCacheSubnetGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupArgsForCall(i int) *elasticache.DeleteCacheSubnetGroupInput {
	fake.deleteCacheSubnetGroupMutex.RLock()
	defer fake.deleteCacheSubnetGroupMutex.RUnlock()
	argsForCall := fake.deleteCacheSubnetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupReturns(result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.deleteCacheSubnetGroupMutex.Lock()
	defer fake.deleteCacheSubnetGroupMutex.Unlock()
	fake.DeleteCacheSubnetGroupStub = nil
	fake.deleteCacheSubnetGroupReturns = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupReturnsOnCall(i int, result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.deleteCacheSubnetGroupMutex.Lock()
	defer fake.deleteCacheSubnetGroupMutex.Unlock()
	fake.DeleteCacheSubnetGroupStub = nil
	if fake.deleteCacheSubnetGroupReturnsOnCall == nil {
		fake.deleteCacheSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSubnetGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequest(arg1 *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput) {
	fake.deleteCacheSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheSubnetGroupRequestReturnsOnCall[len(fake.deleteCacheSubnetGroupRequestArgsForCall)]
	fake.deleteCacheSubnetGroupRequestArgsForCall = append(fake.deleteCacheSubnetGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}{arg1})
	stub := fake.DeleteCacheSubnetGroupRequestStub
	fakeReturns := fake.deleteCacheSubnetGroupRequestReturns
	fake.recordInvocation("DeleteCacheSubnetGroupRequest", []interface{}{arg1})
	fake.deleteCacheSubnetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestCallCount() int {
	fake.deleteCacheSubnetGroupRequestMutex.RLock()
	defer fake.deleteCacheSubnetGroupRequestMutex.RUnlock()
	return len(fake.deleteCacheSubnetGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestCalls(stub func(*elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput)) {
	fake.deleteCacheSubnetGroupRequestMutex.Lock()
	defer fake.deleteCacheSubnetGroupRequestMutex.Unlock()
	fake.DeleteCacheSubnetGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestArgsForCall(i int) *elasticache.DeleteCacheSubnetGroupInput {
	fake.deleteCacheSubnetGroupRequestMutex.RLock()
	defer fake.deleteCacheSubnetGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteCacheSubnetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheSubnetGroupOutput) {
	fake.deleteCacheSubnetGroupRequestMutex.Lock()
	defer fake.deleteCacheSubnetGroupRequestMutex.Unlock()
	fake.DeleteCacheSubnetGroupRequestStub = nil
	fake.deleteCacheSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheSubnetGroupOutput) {
	fake.deleteCacheSubnetGroupRequestMutex.Lock()
	defer fake.deleteCacheSubnetGroupRequestMutex.Unlock()
	fake.DeleteCacheSubnetGroupRequestStub = nil
	if fake.deleteCacheSubnetGroupRequestReturnsOnCall == nil {
		fake.deleteCacheSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheSubnetGroupOutput
		})
	}
	fake.deleteCacheSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteCacheSubnetGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	fake.deleteCacheSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheSubnetGroupWithContextReturnsOnCall[len(fake.deleteCacheSubnetGroupWithContextArgsForCall)]
	fake.deleteCacheSubnetGroupWithContextArgsForCall = append(fake.deleteCacheSubnetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCacheSubnetGroupWithContextStub
	fakeReturns := fake.deleteCacheSubnetGroupWithContextReturns
	fake.recordInvocation("DeleteCacheSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheSubnetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextCallCount() int {
	fake.deleteCacheSubnetGroupWithContextMutex.RLock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheSubnetGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteCacheSubnetGroupInput, ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error)) {
	fake.deleteCacheSubnetGroupWithContextMutex.Lock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.Unlock()
	fake.DeleteCacheSubnetGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteCacheSubnetGroupInput, []request.Option) {
	fake.deleteCacheSubnetGroupWithContextMutex.RLock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteCacheSubnetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextReturns(result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.deleteCacheSubnetGroupWithContextMutex.Lock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.Unlock()
	fake.DeleteCacheSubnetGroupWithContextStub = nil
	fake.deleteCacheSubnetGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.deleteCacheSubnetGroupWithContextMutex.Lock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.Unlock()
	fake.DeleteCacheSubnetGroupWithContextStub = nil
	if fake.deleteCacheSubnetGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroup(arg1 *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	fake.deleteGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.deleteGlobalReplicationGroupReturnsOnCall[len(fake.deleteGlobalReplicationGroupArgsForCall)]
	fake.deleteGlobalReplicationGroupArgsForCall = append(fake.deleteGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.DeleteGlobalReplicationGroupInput
	}{arg1})
	stub := fake.DeleteGlobalReplicationGroupStub
	fakeReturns := fake.deleteGlobalReplicationGroupReturns
	fake.recordInvocation("DeleteGlobalReplicationGroup", []interface{}{arg1})
	fake.deleteGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupCallCount() int {
	fake.deleteGlobalReplicationGroupMutex.RLock()
	defer fake.deleteGlobalReplicationGroupMutex.RUnlock()
	return len(fake.deleteGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupCalls(stub func(*elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error)) {
	fake.deleteGlobalReplicationGroupMutex.Lock()
	defer fake.deleteGlobalReplicationGroupMutex.Unlock()
	fake.DeleteGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupArgsForCall(i int) *elasticache.DeleteGlobalReplicationGroupInput {
	fake.deleteGlobalReplicationGroupMutex.RLock()
	defer fake.deleteGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.deleteGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupReturns(result1 *elasticache.DeleteGlobalReplicationGroupOutput, result2 error) {
	fake.deleteGlobalReplicationGroupMutex.Lock()
	defer fake.deleteGlobalReplicationGroupMutex.Unlock()
	fake.DeleteGlobalReplicationGroupStub = nil
	fake.deleteGlobalReplicationGroupReturns = struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.DeleteGlobalReplicationGroupOutput, result2 error) {
	fake.deleteGlobalReplicationGroupMutex.Lock()
	defer fake.deleteGlobalReplicationGroupMutex.Unlock()
	fake.DeleteGlobalReplicationGroupStub = nil
	if fake.deleteGlobalReplicationGroupReturnsOnCall == nil {
		fake.deleteGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupRequest(arg1 *elasticache.DeleteGlobalReplicationGroupInput) (*request.Request, *elasticache.DeleteGlobalReplicationGroupOutput) {
	fake.deleteGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteGlobalReplicationGroupRequestReturnsOnCall[len(fake.deleteGlobalReplicationGroupRequestArgsForCall)]
	fake.deleteGlobalReplicationGroupRequestArgsForCall = append(fake.deleteGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteGlobalReplicationGroupInput
	}{arg1})
	stub := fake.DeleteGlobalReplicationGroupRequestStub
	fakeReturns := fake.deleteGlobalReplicationGroupRequestReturns
	fake.recordInvocation("DeleteGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.deleteGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupRequestCallCount() int {
	fake.deleteGlobalReplicationGroupRequestMutex.RLock()
	defer fake.deleteGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.deleteGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupRequestCalls(stub func(*elasticache.DeleteGlobalReplicationGroupInput) (*request.Request, *elasticache.DeleteGlobalReplicationGroupOutput)) {
	fake.deleteGlobalReplicationGroupRequestMutex.Lock()
	defer fake.deleteGlobalReplicationGroupRequestMutex.Unlock()
	fake.DeleteGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.DeleteGlobalReplicationGroupInput {
	fake.deleteGlobalReplicationGroupRequestMutex.RLock()
	defer fake.deleteGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteGlobalReplicationGroupOutput) {
	fake.deleteGlobalReplicationGroupRequestMutex.Lock()
	defer fake.deleteGlobalReplicationGroupRequestMutex.Unlock()
	fake.DeleteGlobalReplicationGroupRequestStub = nil
	fake.deleteGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteGlobalReplicationGroupOutput) {
	fake.deleteGlobalReplicationGroupRequestMutex.Lock()
	defer fake.deleteGlobalReplicationGroupRequestMutex.Unlock()
	fake.DeleteGlobalReplicationGroupRequestStub = nil
	if fake.deleteGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.deleteGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteGlobalReplicationGroupOutput
		})
	}
	fake.deleteGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	fake.deleteGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteGlobalReplicationGroupWithContextReturnsOnCall[len(fake.deleteGlobalReplicationGroupWithContextArgsForCall)]
	fake.deleteGlobalReplicationGroupWithContextArgsForCall = append(fake.deleteGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteGlobalReplicationGroupWithContextStub
	fakeReturns := fake.deleteGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("DeleteGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupWithContextCallCount() int {
	fake.deleteGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.deleteGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.deleteGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteGlobalReplicationGroupInput, ...request.Option) (*elasticache.DeleteGlobalReplicationGroupOutput, error)) {
	fake.deleteGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.deleteGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DeleteGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteGlobalReplicationGroupInput, []request.Option) {
	fake.deleteGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.deleteGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupWithContextReturns(result1 *elasticache.DeleteGlobalReplicationGroupOutput, result2 error) {
	fake.deleteGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.deleteGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DeleteGlobalReplicationGroupWithContextStub = nil
	fake.deleteGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteGlobalReplicationGroupOutput, result2 error) {
	fake.deleteGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.deleteGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DeleteGlobalReplicationGroupWithContextStub = nil
	if fake.deleteGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.deleteGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroup(arg1 *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	fake.deleteReplicationGroupMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupReturnsOnCall[len(fake.deleteReplicationGroupArgsForCall)]
	fake.deleteReplicationGroupArgsForCall = append(fake.deleteReplicationGroupArgsForCall, struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}{arg1})
	stub := fake.DeleteReplicationGroupStub
	fakeReturns := fake.deleteReplicationGroupReturns
	fake.recordInvocation("DeleteReplicationGroup", []interface{}{arg1})
	fake.deleteReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupCallCount() int {
	fake.deleteReplicationGroupMutex.RLock()
	defer fake.deleteReplicationGroupMutex.RUnlock()
	return len(fake.deleteReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupCalls(stub func(*elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)) {
	fake.deleteReplicationGroupMutex.Lock()
	defer fake.deleteReplicationGroupMutex.Unlock()
	fake.DeleteReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupArgsForCall(i int) *elasticache.DeleteReplicationGroupInput {
	fake.deleteReplicationGroupMutex.RLock()
	defer fake.deleteReplicationGroupMutex.RUnlock()
	argsForCall := fake.deleteReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupReturns(result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.deleteReplicationGroupMutex.Lock()
	defer fake.deleteReplicationGroupMutex.Unlock()
	fake.DeleteReplicationGroupStub = nil
	fake.deleteReplicationGroupReturns = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupReturnsOnCall(i int, result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.deleteReplicationGroupMutex.Lock()
	defer fake.deleteReplicationGroupMutex.Unlock()
	fake.DeleteReplicationGroupStub = nil
	if fake.deleteReplicationGroupReturnsOnCall == nil {
		fake.deleteReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequest(arg1 *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput) {
	fake.deleteReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupRequestReturnsOnCall[len(fake.deleteReplicationGroupRequestArgsForCall)]
	fake.deleteReplicationGroupRequestArgsForCall = append(fake.deleteReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}{arg1})
	stub := fake.DeleteReplicationGroupRequestStub
	fakeReturns := fake.deleteReplicationGroupRequestReturns
	fake.recordInvocation("DeleteReplicationGroupRequest", []interface{}{arg1})
	fake.deleteReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestCallCount() int {
	fake.deleteReplicationGroupRequestMutex.RLock()
	defer fake.deleteReplicationGroupRequestMutex.RUnlock()
	return len(fake.deleteReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestCalls(stub func(*elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput)) {
	fake.deleteReplicationGroupRequestMutex.Lock()
	defer fake.deleteReplicationGroupRequestMutex.Unlock()
	fake.DeleteReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestArgsForCall(i int) *elasticache.DeleteReplicationGroupInput {
	fake.deleteReplicationGroupRequestMutex.RLock()
	defer fake.deleteReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteReplicationGroupOutput) {
	fake.deleteReplicationGroupRequestMutex.Lock()
	defer fake.deleteReplicationGroupRequestMutex.Unlock()
	fake.DeleteReplicationGroupRequestStub = nil
	fake.deleteReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteReplicationGroupOutput) {
	fake.deleteReplicationGroupRequestMutex.Lock()
	defer fake.deleteReplicationGroupRequestMutex.Unlock()
	fake.DeleteReplicationGroupRequestStub = nil
	if fake.deleteReplicationGroupRequestReturnsOnCall == nil {
		fake.deleteReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteReplicationGroupOutput
		})
	}
	fake.deleteReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteReplicationGroupInput, arg3 ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupWithContextReturnsOnCall[len(fake.deleteReplicationGroupWithContextArgsForCall)]
	fake.deleteReplicationGroupWithContextArgsForCall = append(fake.deleteReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteReplicationGroupWithContextStub
	fakeReturns := fake.deleteReplicationGroupWithContextReturns
	fake.recordInvocation("DeleteReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextCallCount() int {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	return len(fake.deleteReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteReplicationGroupInput, ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	defer fake.deleteReplicationGroupWithContextMutex.Unlock()
	fake.DeleteReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteReplicationGroupInput, []request.Option) {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextReturns(result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	defer fake.deleteReplicationGroupWithContextMutex.Unlock()
	fake.DeleteReplicationGroupWithContextStub = nil
	fake.deleteReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	defer fake.deleteReplicationGroupWithContextMutex.Unlock()
	fake.DeleteReplicationGroupWithContextStub = nil
	if fake.deleteReplicationGroupWithContextReturnsOnCall == nil {
		fake.deleteReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshot(arg1 *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	fake.deleteSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotReturnsOnCall[len(fake.deleteSnapshotArgsForCall)]
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		arg1 *elasticache.DeleteSnapshotInput
	}{arg1})
	stub := fake.DeleteSnapshotStub
	fakeReturns := fake.deleteSnapshotReturns
	fake.recordInvocation("DeleteSnapshot", []interface{}{arg1})
	fake.deleteSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotCalls(stub func(*elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotArgsForCall(i int) *elasticache.DeleteSnapshotInput {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	argsForCall := fake.deleteSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotReturns(result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotReturnsOnCall(i int, result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	if fake.deleteSnapshotReturnsOnCall == nil {
		fake.deleteSnapshotReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteSnapshotOutput
			result2 error
		})
	}
	fake.deleteSnapshotReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequest(arg1 *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotRequestReturnsOnCall[len(fake.deleteSnapshotRequestArgsForCall)]
	fake.deleteSnapshotRequestArgsForCall = append(fake.deleteSnapshotRequestArgsForCall, struct {
		arg1 *elasticache.DeleteSnapshotInput
	}{arg1})
	stub := fake.DeleteSnapshotRequestStub
	fakeReturns := fake.deleteSnapshotRequestReturns
	fake.recordInvocation("DeleteSnapshotRequest", []interface{}{arg1})
	fake.deleteSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestCallCount() int {
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	return len(fake.deleteSnapshotRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestCalls(stub func(*elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput)) {
	fake.deleteSnapshotRequestMutex.Lock()
	defer fake.deleteSnapshotRequestMutex.Unlock()
	fake.DeleteSnapshotRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestArgsForCall(i int) *elasticache.DeleteSnapshotInput {
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	argsForCall := fake.deleteSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestReturns(result1 *request.Request, result2 *elasticache.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	defer fake.deleteSnapshotRequestMutex.Unlock()
	fake.DeleteSnapshotRequestStub = nil
	fake.deleteSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	defer fake.deleteSnapshotRequestMutex.Unlock()
	fake.DeleteSnapshotRequestStub = nil
	if fake.deleteSnapshotRequestReturnsOnCall == nil {
		fake.deleteSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteSnapshotOutput
		})
	}
	fake.deleteSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContext(arg1 context.Context, arg2 *elasticache.DeleteSnapshotInput, arg3 ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotWithContextReturnsOnCall[len(fake.deleteSnapshotWithContextArgsForCall)]
	fake.deleteSnapshotWithContextArgsForCall = append(fake.deleteSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteSnapshotWithContextStub
	fakeReturns := fake.deleteSnapshotWithContextReturns
	fake.recordInvocation("DeleteSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextCallCount() int {
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	return len(fake.deleteSnapshotWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextCalls(stub func(context.Context, *elasticache.DeleteSnapshotInput, ...request.Option) (*elasticache.DeleteSnapshotOutput, error)) {
	fake.deleteSnapshotWithContextMutex.Lock()
	defer fake.deleteSnapshotWithContextMutex.Unlock()
	fake.DeleteSnapshotWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteSnapshotInput, []request.Option) {
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.deleteSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextReturns(result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	defer fake.deleteSnapshotWithContextMutex.Unlock()
	fake.DeleteSnapshotWithContextStub = nil
	fake.deleteSnapshotWithContextReturns = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextReturnsOnCall(i int, result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	defer fake.deleteSnapshotWithContextMutex.Unlock()
	fake.DeleteSnapshotWithContextStub = nil
	if fake.deleteSnapshotWithContextReturnsOnCall == nil {
		fake.deleteSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteSnapshotOutput
			result2 error
		})
	}
	fake.deleteSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClusters(arg1 *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	fake.describeCacheClustersMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersReturnsOnCall[len(fake.describeCacheClustersArgsForCall)]
	fake.describeCacheClustersArgsForCall = append(fake.describeCacheClustersArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	stub := fake.DescribeCacheClustersStub
	fakeReturns := fake.describeCacheClustersReturns
	fake.recordInvocation("DescribeCacheClusters", []interface{}{arg1})
	fake.describeCacheClustersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersCallCount() int {
	fake.describeCacheClustersMutex.RLock()
	defer fake.describeCacheClustersMutex.RUnlock()
	return len(fake.describeCacheClustersArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersCalls(stub func(*elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)) {
	fake.describeCacheClustersMutex.Lock()
	defer fake.describeCacheClustersMutex.Unlock()
	fake.DescribeCacheClustersStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.describeCacheClustersMutex.RLock()
	defer fake.describeCacheClustersMutex.RUnlock()
	argsForCall := fake.describeCacheClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersReturns(result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.describeCacheClustersMutex.Lock()
	defer fake.describeCacheClustersMutex.Unlock()
	fake.DescribeCacheClustersStub = nil
	fake.describeCacheClustersReturns = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersReturnsOnCall(i int, result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.describeCacheClustersMutex.Lock()
	defer fake.describeCacheClustersMutex.Unlock()
	fake.DescribeCacheClustersStub = nil
	if fake.describeCacheClustersReturnsOnCall == nil {
		fake.describeCacheClustersReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheClustersOutput
			result2 error
		})
	}
	fake.describeCacheClustersReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPages(arg1 *elasticache.DescribeCacheClustersInput, arg2 func(*elasticache.DescribeCacheClustersOutput, bool) bool) error {
	fake.describeCacheClustersPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersPagesReturnsOnCall[len(fake.describeCacheClustersPagesArgsForCall)]
	fake.describeCacheClustersPagesArgsForCall = append(fake.describeCacheClustersPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
		arg2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCacheClustersPagesStub
	fakeReturns := fake.describeCacheClustersPagesReturns
	fake.recordInvocation("DescribeCacheClustersPages", []interface{}{arg1, arg2})
	fake.describeCacheClustersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesCallCount() int {
	fake.describeCacheClustersPagesMutex.RLock()
	defer fake.describeCacheClustersPagesMutex.RUnlock()
	return len(fake.describeCacheClustersPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesCalls(stub func(*elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool) error) {
	fake.describeCacheClustersPagesMutex.Lock()
	defer fake.describeCacheClustersPagesMutex.Unlock()
	fake.DescribeCacheClustersPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesArgsForCall(i int) (*elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool) {
	fake.describeCacheClustersPagesMutex.RLock()
	defer fake.describeCacheClustersPagesMutex.RUnlock()
	argsForCall := fake.describeCacheClustersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesReturns(result1 error) {
	fake.describeCacheClustersPagesMutex.Lock()
	defer fake.describeCacheClustersPagesMutex.Unlock()
	fake.DescribeCacheClustersPagesStub = nil
	fake.describeCacheClustersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesReturnsOnCall(i int, result1 error) {
	fake.describeCacheClustersPagesMutex.Lock()
	defer fake.describeCacheClustersPagesMutex.Unlock()
	fake.DescribeCacheClustersPagesStub = nil
	if fake.describeCacheClustersPagesReturnsOnCall == nil {
		fake.describeCacheClustersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheClustersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 func(*elasticache.DescribeCacheClustersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheClustersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersPagesWithContextReturnsOnCall[len(fake.describeCacheClustersPagesWithContextArgsForCall)]
	fake.describeCacheClustersPagesWithContextArgsForCall = append(fake.describeCacheClustersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCacheClustersPagesWithContextStub
	fakeReturns := fake.describeCacheClustersPagesWithContextReturns
	fake.recordInvocation("DescribeCacheClustersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheClustersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextCallCount() int {
	fake.describeCacheClustersPagesWithContextMutex.RLock()
	defer fake.describeCacheClustersPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheClustersPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool, ...request.Option) error) {
	fake.describeCacheClustersPagesWithContextMutex.Lock()
	defer fake.describeCacheClustersPagesWithContextMutex.Unlock()
	fake.DescribeCacheClustersPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool, []request.Option) {
	fake.describeCacheClustersPagesWithContextMutex.RLock()
	defer fake.describeCacheClustersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheClustersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextReturns(result1 error) {
	fake.describeCacheClustersPagesWithContextMutex.Lock()
	defer fake.describeCacheClustersPagesWithContextMutex.Unlock()
	fake.DescribeCacheClustersPagesWithContextStub = nil
	fake.describeCacheClustersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCacheClustersPagesWithContextMutex.Lock()
	defer fake.describeCacheClustersPagesWithContextMutex.Unlock()
	fake.DescribeCacheClustersPagesWithContextStub = nil
	if fake.describeCacheClustersPagesWithContextReturnsOnCall == nil {
		fake.describeCacheClustersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheClustersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequest(arg1 *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput) {
	fake.describeCacheClustersRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersRequestReturnsOnCall[len(fake.describeCacheClustersRequestArgsForCall)]
	fake.describeCacheClustersRequestArgsForCall = append(fake.describeCacheClustersRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	stub := fake.DescribeCacheClustersRequestStub
	fakeReturns := fake.describeCacheClustersRequestReturns
	fake.recordInvocation("DescribeCacheClustersRequest", []interface{}{arg1})
	fake.describeCacheClustersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestCallCount() int {
	fake.describeCacheClustersRequestMutex.RLock()
	defer fake.describeCacheClustersRequestMutex.RUnlock()
	return len(fake.describeCacheClustersRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestCalls(stub func(*elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput)) {
	fake.describeCacheClustersRequestMutex.Lock()
	defer fake.describeCacheClustersRequestMutex.Unlock()
	fake.DescribeCacheClustersRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.describeCacheClustersRequestMutex.RLock()
	defer fake.describeCacheClustersRequestMutex.RUnlock()
	argsForCall := fake.describeCacheClustersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheClustersOutput) {
	fake.describeCacheClustersRequestMutex.Lock()
	defer fake.describeCacheClustersRequestMutex.Unlock()
	fake.DescribeCacheClustersRequestStub = nil
	fake.describeCacheClustersRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheClustersOutput) {
	fake.describeCacheClustersRequestMutex.Lock()
	defer fake.describeCacheClustersRequestMutex.Unlock()
	fake.DescribeCacheClustersRequestStub = nil
	if fake.describeCacheClustersRequestReturnsOnCall == nil {
		fake.describeCacheClustersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheClustersOutput
		})
	}
	fake.describeCacheClustersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersWithContextReturnsOnCall[len(fake.describeCacheClustersWithContextArgsForCall)]
	fake.describeCacheClustersWithContextArgsForCall = append(fake.describeCacheClustersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheClustersWithContextStub
	fakeReturns := fake.describeCacheClustersWithContextReturns
	fake.recordInvocation("DescribeCacheClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheClustersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextCallCount() int {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	return len(fake.describeCacheClustersWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)) {
	fake.describeCacheClustersWithContextMutex.Lock()
	defer fake.describeCacheClustersWithContextMutex.Unlock()
	fake.DescribeCacheClustersWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheClustersInput, []request.Option) {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheClustersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextReturns(result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	defer fake.describeCacheClustersWithContextMutex.Unlock()
	fake.DescribeCacheClustersWithContextStub = nil
	fake.describeCacheClustersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	defer fake.describeCacheClustersWithContextMutex.Unlock()
	fake.DescribeCacheClustersWithContextStub = nil
	if fake.describeCacheClustersWithContextReturnsOnCall == nil {
		fake.describeCacheClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheClustersOutput
			result2 error
		})
	}
	fake.describeCacheClustersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersions(arg1 *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	fake.describeCacheEngineVersionsMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsReturnsOnCall[len(fake.describeCacheEngineVersionsArgsForCall)]
	fake.describeCacheEngineVersionsArgsForCall = append(fake.describeCacheEngineVersionsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}{arg1})
	stub := fake.DescribeCacheEngineVersionsStub
	fakeReturns := fake.describeCacheEngineVersionsReturns
	fake.recordInvocation("DescribeCacheEngineVersions", []interface{}{arg1})
	fake.describeCacheEngineVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsCallCount() int {
	fake.describeCacheEngineVersionsMutex.RLock()
	defer fake.describeCacheEngineVersionsMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsCalls(stub func(*elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)) {
	fake.describeCacheEngineVersionsMutex.Lock()
	defer fake.describeCacheEngineVersionsMutex.Unlock()
	fake.DescribeCacheEngineVersionsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsArgsForCall(i int) *elasticache.DescribeCacheEngineVersionsInput {
	fake.describeCacheEngineVersionsMutex.RLock()
	defer fake.describeCacheEngineVersionsMutex.RUnlock()
	argsForCall := fake.describeCacheEngineVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsReturns(result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.describeCacheEngineVersionsMutex.Lock()
	defer fake.describeCacheEngineVersionsMutex.Unlock()
	fake.DescribeCacheEngineVersionsStub = nil
	fake.describeCacheEngineVersionsReturns = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsReturnsOnCall(i int, result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.describeCacheEngineVersionsMutex.Lock()
	defer fake.describeCacheEngineVersionsMutex.Unlock()
	fake.DescribeCacheEngineVersionsStub = nil
	if fake.describeCacheEngineVersionsReturnsOnCall == nil {
		fake.describeCacheEngineVersionsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheEngineVersionsOutput
			result2 error
		})
	}
	fake.describeCacheEngineVersionsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPages(arg1 *elasticache.DescribeCacheEngineVersionsInput, arg2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error {
	fake.describeCacheEngineVersionsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsPagesReturnsOnCall[len(fake.describeCacheEngineVersionsPagesArgsForCall)]
	fake.describeCacheEngineVersionsPagesArgsForCall = append(fake.describeCacheEngineVersionsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
		arg2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCacheEngineVersionsPagesStub
	fakeReturns := fake.describeCacheEngineVersionsPagesReturns
	fake.recordInvocation("DescribeCacheEngineVersionsPages", []interface{}{arg1, arg2})
	fake.describeCacheEngineVersionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesCallCount() int {
	fake.describeCacheEngineVersionsPagesMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesCalls(stub func(*elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error) {
	fake.describeCacheEngineVersionsPagesMutex.Lock()
	defer fake.describeCacheEngineVersionsPagesMutex.Unlock()
	fake.DescribeCacheEngineVersionsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesArgsForCall(i int) (*elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) {
	fake.describeCacheEngineVersionsPagesMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesMutex.RUnlock()
	argsForCall := fake.describeCacheEngineVersionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesReturns(result1 error) {
	fake.describeCacheEngineVersionsPagesMutex.Lock()
	defer fake.describeCacheEngineVersionsPagesMutex.Unlock()
	fake.DescribeCacheEngineVersionsPagesStub = nil
	fake.describeCacheEngineVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeCacheEngineVersionsPagesMutex.Lock()
	defer fake.describeCacheEngineVersionsPagesMutex.Unlock()
	fake.DescribeCacheEngineVersionsPagesStub = nil
	if fake.describeCacheEngineVersionsPagesReturnsOnCall == nil {
		fake.describeCacheEngineVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheEngineVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheEngineVersionsInput, arg3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheEngineVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall[len(fake.describeCacheEngineVersionsPagesWithContextArgsForCall)]
	fake.describeCacheEngineVersionsPagesWithContextArgsForCall = append(fake.describeCacheEngineVersionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCacheEngineVersionsPagesWithContextStub
	fakeReturns := fake.describeCacheEngineVersionsPagesWithContextReturns
	fake.recordInvocation("DescribeCacheEngineVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheEngineVersionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextCallCount() int {
	fake.describeCacheEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, ...request.Option) error) {
	fake.describeCacheEngineVersionsPagesWithContextMutex.Lock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.Unlock()
	fake.DescribeCacheEngineVersionsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, []request.Option) {
	fake.describeCacheEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheEngineVersionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextReturns(result1 error) {
	fake.describeCacheEngineVersionsPagesWithContextMutex.Lock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.Unlock()
	fake.DescribeCacheEngineVersionsPagesWithContextStub = nil
	fake.describeCacheEngineVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCacheEngineVersionsPagesWithContextMutex.Lock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.Unlock()
	fake.DescribeCacheEngineVersionsPagesWithContextStub = nil
	if fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequest(arg1 *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput) {
	fake.describeCacheEngineVersionsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsRequestReturnsOnCall[len(fake.describeCacheEngineVersionsRequestArgsForCall)]
	fake.describeCacheEngineVersionsRequestArgsForCall = append(fake.describeCacheEngineVersionsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}{arg1})
	stub := fake.DescribeCacheEngineVersionsRequestStub
	fakeReturns := fake.describeCacheEngineVersionsRequestReturns
	fake.recordInvocation("DescribeCacheEngineVersionsRequest", []interface{}{arg1})
	fake.describeCacheEngineVersionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestCallCount() int {
	fake.describeCacheEngineVersionsRequestMutex.RLock()
	defer fake.describeCacheEngineVersionsRequestMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestCalls(stub func(*elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput)) {
	fake.describeCacheEngineVersionsRequestMutex.Lock()
	defer fake.describeCacheEngineVersionsRequestMutex.Unlock()
	fake.DescribeCacheEngineVersionsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestArgsForCall(i int) *elasticache.DescribeCacheEngineVersionsInput {
	fake.describeCacheEngineVersionsRequestMutex.RLock()
	defer fake.describeCacheEngineVersionsRequestMutex.RUnlock()
	argsForCall := fake.describeCacheEngineVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheEngineVersionsOutput) {
	fake.describeCacheEngineVersionsRequestMutex.Lock()
	defer fake.describeCacheEngineVersionsRequestMutex.Unlock()
	fake.DescribeCacheEngineVersionsRequestStub = nil
	fake.describeCacheEngineVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheEngineVersionsOutput) {
	fake.describeCacheEngineVersionsRequestMutex.Lock()
	defer fake.describeCacheEngineVersionsRequestMutex.Unlock()
	fake.DescribeCacheEngineVersionsRequestStub = nil
	if fake.describeCacheEngineVersionsRequestReturnsOnCall == nil {
		fake.describeCacheEngineVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheEngineVersionsOutput
		})
	}
	fake.describeCacheEngineVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheEngineVersionsInput, arg3 ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	fake.describeCacheEngineVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsWithContextReturnsOnCall[len(fake.describeCacheEngineVersionsWithContextArgsForCall)]
	fake.describeCacheEngineVersionsWithContextArgsForCall = append(fake.describeCacheEngineVersionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheEngineVersionsWithContextStub
	fakeReturns := fake.describeCacheEngineVersionsWithContextReturns
	fake.recordInvocation("DescribeCacheEngineVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheEngineVersionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextCallCount() int {
	fake.describeCacheEngineVersionsWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsWithContextMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheEngineVersionsInput, ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error)) {
	fake.describeCacheEngineVersionsWithContextMutex.Lock()
	defer fake.describeCacheEngineVersionsWithContextMutex.Unlock()
	fake.DescribeCacheEngineVersionsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheEngineVersionsInput, []request.Option) {
	fake.describeCacheEngineVersionsWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheEngineVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextReturns(result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.describeCacheEngineVersionsWithContextMutex.Lock()
	defer fake.describeCacheEngineVersionsWithContextMutex.Unlock()
	fake.DescribeCacheEngineVersionsWithContextStub = nil
	fake.describeCacheEngineVersionsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.describeCacheEngineVersionsWithContextMutex.Lock()
	defer fake.describeCacheEngineVersionsWithContextMutex.Unlock()
	fake.DescribeCacheEngineVersionsWithContextStub = nil
	if fake.describeCacheEngineVersionsWithContextReturnsOnCall == nil {
		fake.describeCacheEngineVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheEngineVersionsOutput
			result2 error
		})
	}
	fake.describeCacheEngineVersionsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroups(arg1 *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	fake.describeCacheParameterGroupsMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsReturnsOnCall[len(fake.describeCacheParameterGroupsArgsForCall)]
	fake.describeCacheParameterGroupsArgsForCall = append(fake.describeCacheParameterGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}{arg1})
	stub := fake.DescribeCacheParameterGroupsStub
	fakeReturns := fake.describeCacheParameterGroupsReturns
	fake.recordInvocation("DescribeCacheParameterGroups", []interface{}{arg1})
	fake.describeCacheParameterGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsCallCount() int {
	fake.describeCacheParameterGroupsMutex.RLock()
	defer fake.describeCacheParameterGroupsMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsCalls(stub func(*elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)) {
	fake.describeCacheParameterGroupsMutex.Lock()
	defer fake.describeCacheParameterGroupsMutex.Unlock()
	fake.DescribeCacheParameterGroupsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsArgsForCall(i int) *elasticache.DescribeCacheParameterGroupsInput {
	fake.describeCacheParameterGroupsMutex.RLock()
	defer fake.describeCacheParameterGroupsMutex.RUnlock()
	argsForCall := fake.describeCacheParameterGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsReturns(result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.describeCacheParameterGroupsMutex.Lock()
	defer fake.describeCacheParameterGroupsMutex.Unlock()
	fake.DescribeCacheParameterGroupsStub = nil
	fake.describeCacheParameterGroupsReturns = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsReturnsOnCall(i int, result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.describeCacheParameterGroupsMutex.Lock()
	defer fake.describeCacheParameterGroupsMutex.Unlock()
	fake.DescribeCacheParameterGroupsStub = nil
	if fake.describeCacheParameterGroupsReturnsOnCall == nil {
		fake.describeCacheParameterGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParameterGroupsOutput
			result2 error
		})
	}
	fake.describeCacheParameterGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPages(arg1 *elasticache.DescribeCacheParameterGroupsInput, arg2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error {
	fake.describeCacheParameterGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsPagesReturnsOnCall[len(fake.describeCacheParameterGroupsPagesArgsForCall)]
	fake.describeCacheParameterGroupsPagesArgsForCall = append(fake.describeCacheParameterGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
		arg2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCacheParameterGroupsPagesStub
	fakeReturns := fake.describeCacheParameterGroupsPagesReturns
	fake.recordInvocation("DescribeCacheParameterGroupsPages", []interface{}{arg1, arg2})
	fake.describeCacheParameterGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesCallCount() int {
	fake.describeCacheParameterGroupsPagesMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesCalls(stub func(*elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error) {
	fake.describeCacheParameterGroupsPagesMutex.Lock()
	defer fake.describeCacheParameterGroupsPagesMutex.Unlock()
	fake.DescribeCacheParameterGroupsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesArgsForCall(i int) (*elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) {
	fake.describeCacheParameterGroupsPagesMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeCacheParameterGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesReturns(result1 error) {
	fake.describeCacheParameterGroupsPagesMutex.Lock()
	defer fake.describeCacheParameterGroupsPagesMutex.Unlock()
	fake.DescribeCacheParameterGroupsPagesStub = nil
	fake.describeCacheParameterGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeCacheParameterGroupsPagesMutex.Lock()
	defer fake.describeCacheParameterGroupsPagesMutex.Unlock()
	fake.DescribeCacheParameterGroupsPagesStub = nil
	if fake.describeCacheParameterGroupsPagesReturnsOnCall == nil {
		fake.describeCacheParameterGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParameterGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheParameterGroupsInput, arg3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheParameterGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall[len(fake.describeCacheParameterGroupsPagesWithContextArgsForCall)]
	fake.describeCacheParameterGroupsPagesWithContextArgsForCall = append(fake.describeCacheParameterGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCacheParameterGroupsPagesWithContextStub
	fakeReturns := fake.describeCacheParameterGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeCacheParameterGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheParameterGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextCallCount() int {
	fake.describeCacheParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeCacheParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheParameterGroupsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, []request.Option) {
	fake.describeCacheParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheParameterGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextReturns(result1 error) {
	fake.describeCacheParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheParameterGroupsPagesWithContextStub = nil
	fake.describeCacheParameterGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCacheParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheParameterGroupsPagesWithContextStub = nil
	if fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequest(arg1 *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput) {
	fake.describeCacheParameterGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsRequestReturnsOnCall[len(fake.describeCacheParameterGroupsRequestArgsForCall)]
	fake.describeCacheParameterGroupsRequestArgsForCall = append(fake.describeCacheParameterGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}{arg1})
	stub := fake.DescribeCacheParameterGroupsRequestStub
	fakeReturns := fake.describeCacheParameterGroupsRequestReturns
	fake.recordInvocation("DescribeCacheParameterGroupsRequest", []interface{}{arg1})
	fake.describeCacheParameterGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestCallCount() int {
	fake.describeCacheParameterGroupsRequestMutex.RLock()
	defer fake.describeCacheParameterGroupsRequestMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestCalls(stub func(*elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput)) {
	fake.describeCacheParameterGroupsRequestMutex.Lock()
	defer fake.describeCacheParameterGroupsRequestMutex.Unlock()
	fake.DescribeCacheParameterGroupsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestArgsForCall(i int) *elasticache.DescribeCacheParameterGroupsInput {
	fake.describeCacheParameterGroupsRequestMutex.RLock()
	defer fake.describeCacheParameterGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeCacheParameterGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheParameterGroupsOutput) {
	fake.describeCacheParameterGroupsRequestMutex.Lock()
	defer fake.describeCacheParameterGroupsRequestMutex.Unlock()
	fake.DescribeCacheParameterGroupsRequestStub = nil
	fake.describeCacheParameterGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheParameterGroupsOutput) {
	fake.describeCacheParameterGroupsRequestMutex.Lock()
	defer fake.describeCacheParameterGroupsRequestMutex.Unlock()
	fake.DescribeCacheParameterGroupsRequestStub = nil
	if fake.describeCacheParameterGroupsRequestReturnsOnCall == nil {
		fake.describeCacheParameterGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheParameterGroupsOutput
		})
	}
	fake.describeCacheParameterGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheParameterGroupsInput, arg3 ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	fake.describeCacheParameterGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsWithContextReturnsOnCall[len(fake.describeCacheParameterGroupsWithContextArgsForCall)]
	fake.describeCacheParameterGroupsWithContextArgsForCall = append(fake.describeCacheParameterGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheParameterGroupsWithContextStub
	fakeReturns := fake.describeCacheParameterGroupsWithContextReturns
	fake.recordInvocation("DescribeCacheParameterGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheParameterGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextCallCount() int {
	fake.describeCacheParameterGroupsWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsWithContextMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheParameterGroupsInput, ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error)) {
	fake.describeCacheParameterGroupsWithContextMutex.Lock()
	defer fake.describeCacheParameterGroupsWithContextMutex.Unlock()
	fake.DescribeCacheParameterGroupsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheParameterGroupsInput, []request.Option) {
	fake.describeCacheParameterGroupsWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheParameterGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextReturns(result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.describeCacheParameterGroupsWithContextMutex.Lock()
	defer fake.describeCacheParameterGroupsWithContextMutex.Unlock()
	fake.DescribeCacheParameterGroupsWithContextStub = nil
	fake.describeCacheParameterGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.describeCacheParameterGroupsWithContextMutex.Lock()
	defer fake.describeCacheParameterGroupsWithContextMutex.Unlock()
	fake.DescribeCacheParameterGroupsWithContextStub = nil
	if fake.describeCacheParameterGroupsWithContextReturnsOnCall == nil {
		fake.describeCacheParameterGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParameterGroupsOutput
			result2 error
		})
	}
	fake.describeCacheParameterGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameters(arg1 *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	fake.describeCacheParametersMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersReturnsOnCall[len(fake.describeCacheParametersArgsForCall)]
	fake.describeCacheParametersArgsForCall = append(fake.describeCacheParametersArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}{arg1})
	stub := fake.DescribeCacheParametersStub
	fakeReturns := fake.describeCacheParametersReturns
	fake.recordInvocation("DescribeCacheParameters", []interface{}{arg1})
	fake.describeCacheParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersCallCount() int {
	fake.describeCacheParametersMutex.RLock()
	defer fake.describeCacheParametersMutex.RUnlock()
	return len(fake.describeCacheParametersArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersCalls(stub func(*elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)) {
	fake.describeCacheParametersMutex.Lock()
	defer fake.describeCacheParametersMutex.Unlock()
	fake.DescribeCacheParametersStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersArgsForCall(i int) *elasticache.DescribeCacheParametersInput {
	fake.describeCacheParametersMutex.RLock()
	defer fake.describeCacheParametersMutex.RUnlock()
	argsForCall := fake.describeCacheParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersReturns(result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.describeCacheParametersMutex.Lock()
	defer fake.describeCacheParametersMutex.Unlock()
	fake.DescribeCacheParametersStub = nil
	fake.describeCacheParametersReturns = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersReturnsOnCall(i int, result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.describeCacheParametersMutex.Lock()
	defer fake.describeCacheParametersMutex.Unlock()
	fake.DescribeCacheParametersStub = nil
	if fake.describeCacheParametersReturnsOnCall == nil {
		fake.describeCacheParametersReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParametersOutput
			result2 error
		})
	}
	fake.describeCacheParametersReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPages(arg1 *elasticache.DescribeCacheParametersInput, arg2 func(*elasticache.DescribeCacheParametersOutput, bool) bool) error {
	fake.describeCacheParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersPagesReturnsOnCall[len(fake.describeCacheParametersPagesArgsForCall)]
	fake.describeCacheParametersPagesArgsForCall = append(fake.describeCacheParametersPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParametersInput
		arg2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCacheParametersPagesStub
	fakeReturns := fake.describeCacheParametersPagesReturns
	fake.recordInvocation("DescribeCacheParametersPages", []interface{}{arg1, arg2})
	fake.describeCacheParametersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesCallCount() int {
	fake.describeCacheParametersPagesMutex.RLock()
	defer fake.describeCacheParametersPagesMutex.RUnlock()
	return len(fake.describeCacheParametersPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesCalls(stub func(*elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool) error) {
	fake.describeCacheParametersPagesMutex.Lock()
	defer fake.describeCacheParametersPagesMutex.Unlock()
	fake.DescribeCacheParametersPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesArgsForCall(i int) (*elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool) {
	fake.describeCacheParametersPagesMutex.RLock()
	defer fake.describeCacheParametersPagesMutex.RUnlock()
	argsForCall := fake.describeCacheParametersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesReturns(result1 error) {
	fake.describeCacheParametersPagesMutex.Lock()
	defer fake.describeCacheParametersPagesMutex.Unlock()
	fake.DescribeCacheParametersPagesStub = nil
	fake.describeCacheParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesReturnsOnCall(i int, result1 error) {
	fake.describeCacheParametersPagesMutex.Lock()
	defer fake.describeCacheParametersPagesMutex.Unlock()
	fake.DescribeCacheParametersPagesStub = nil
	if fake.describeCacheParametersPagesReturnsOnCall == nil {
		fake.describeCacheParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheParametersInput, arg3 func(*elasticache.DescribeCacheParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersPagesWithContextReturnsOnCall[len(fake.describeCacheParametersPagesWithContextArgsForCall)]
	fake.describeCacheParametersPagesWithContextArgsForCall = append(fake.describeCacheParametersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCacheParametersPagesWithContextStub
	fakeReturns := fake.describeCacheParametersPagesWithContextReturns
	fake.recordInvocation("DescribeCacheParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheParametersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextCallCount() int {
	fake.describeCacheParametersPagesWithContextMutex.RLock()
	defer fake.describeCacheParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheParametersPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool, ...request.Option) error) {
	fake.describeCacheParametersPagesWithContextMutex.Lock()
	defer fake.describeCacheParametersPagesWithContextMutex.Unlock()
	fake.DescribeCacheParametersPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool, []request.Option) {
	fake.describeCacheParametersPagesWithContextMutex.RLock()
	defer fake.describeCacheParametersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheParametersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextReturns(result1 error) {
	fake.describeCacheParametersPagesWithContextMutex.Lock()
	defer fake.describeCacheParametersPagesWithContextMutex.Unlock()
	fake.DescribeCacheParametersPagesWithContextStub = nil
	fake.describeCacheParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCacheParametersPagesWithContextMutex.Lock()
	defer fake.describeCacheParametersPagesWithContextMutex.Unlock()
	fake.DescribeCacheParametersPagesWithContextStub = nil
	if fake.describeCacheParametersPagesWithContextReturnsOnCall == nil {
		fake.describeCacheParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequest(arg1 *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput) {
	fake.describeCacheParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersRequestReturnsOnCall[len(fake.describeCacheParametersRequestArgsForCall)]
	fake.describeCacheParametersRequestArgsForCall = append(fake.describeCacheParametersRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}{arg1})
	stub := fake.DescribeCacheParametersRequestStub
	fakeReturns := fake.describeCacheParametersRequestReturns
	fake.recordInvocation("DescribeCacheParametersRequest", []interface{}{arg1})
	fake.describeCacheParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestCallCount() int {
	fake.describeCacheParametersRequestMutex.RLock()
	defer fake.describeCacheParametersRequestMutex.RUnlock()
	return len(fake.describeCacheParametersRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestCalls(stub func(*elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput)) {
	fake.describeCacheParametersRequestMutex.Lock()
	defer fake.describeCacheParametersRequestMutex.Unlock()
	fake.DescribeCacheParametersRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestArgsForCall(i int) *elasticache.DescribeCacheParametersInput {
	fake.describeCacheParametersRequestMutex.RLock()
	defer fake.describeCacheParametersRequestMutex.RUnlock()
	argsForCall := fake.describeCacheParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheParametersOutput) {
	fake.describeCacheParametersRequestMutex.Lock()
	defer fake.describeCacheParametersRequestMutex.Unlock()
	fake.DescribeCacheParametersRequestStub = nil
	fake.describeCacheParametersRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheParametersOutput) {
	fake.describeCacheParametersRequestMutex.Lock()
	defer fake.describeCacheParametersRequestMutex.Unlock()
	fake.DescribeCacheParametersRequestStub = nil
	if fake.describeCacheParametersRequestReturnsOnCall == nil {
		fake.describeCacheParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheParametersOutput
		})
	}
	fake.describeCacheParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheParametersInput, arg3 ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersWithContextReturnsOnCall[len(fake.describeCacheParametersWithContextArgsForCall)]
	fake.describeCacheParametersWithContextArgsForCall = append(fake.describeCacheParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheParametersWithContextStub
	fakeReturns := fake.describeCacheParametersWithContextReturns
	fake.recordInvocation("DescribeCacheParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextCallCount() int {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	return len(fake.describeCacheParametersWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheParametersInput, ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)) {
	fake.describeCacheParametersWithContextMutex.Lock()
	defer fake.describeCacheParametersWithContextMutex.Unlock()
	fake.DescribeCacheParametersWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheParametersInput, []request.Option) {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextReturns(result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	defer fake.describeCacheParametersWithContextMutex.Unlock()
	fake.DescribeCacheParametersWithContextStub = nil
	fake.describeCacheParametersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	defer fake.describeCacheParametersWithContextMutex.Unlock()
	fake.DescribeCacheParametersWithContextStub = nil
	if fake.describeCacheParametersWithContextReturnsOnCall == nil {
		fake.describeCacheParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParametersOutput
			result2 error
		})
	}
	fake.describeCacheParametersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroups(arg1 *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	fake.describeCacheSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsReturnsOnCall[len(fake.describeCacheSecurityGroupsArgsForCall)]
	fake.describeCacheSecurityGroupsArgsForCall = append(fake.describeCacheSecurityGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}{arg1})
	stub := fake.DescribeCacheSecurityGroupsStub
	fakeReturns := fake.describeCacheSecurityGroupsReturns
	fake.recordInvocation("DescribeCacheSecurityGroups", []interface{}{arg1})
	fake.describeCacheSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsCallCount() int {
	fake.describeCacheSecurityGroupsMutex.RLock()
	defer fake.describeCacheSecurityGroupsMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsCalls(stub func(*elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)) {
	fake.describeCacheSecurityGroupsMutex.Lock()
	defer fake.describeCacheSecurityGroupsMutex.Unlock()
	fake.DescribeCacheSecurityGroupsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsArgsForCall(i int) *elasticache.DescribeCacheSecurityGroupsInput {
	fake.describeCacheSecurityGroupsMutex.RLock()
	defer fake.describeCacheSecurityGroupsMutex.RUnlock()
	argsForCall := fake.describeCacheSecurityGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsReturns(result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.describeCacheSecurityGroupsMutex.Lock()
	defer fake.describeCacheSecurityGroupsMutex.Unlock()
	fake.DescribeCacheSecurityGroupsStub = nil
	fake.describeCacheSecurityGroupsReturns = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsReturnsOnCall(i int, result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.describeCacheSecurityGroupsMutex.Lock()
	defer fake.describeCacheSecurityGroupsMutex.Unlock()
	fake.DescribeCacheSecurityGroupsStub = nil
	if fake.describeCacheSecurityGroupsReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSecurityGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPages(arg1 *elasticache.DescribeCacheSecurityGroupsInput, arg2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error {
	fake.describeCacheSecurityGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsPagesReturnsOnCall[len(fake.describeCacheSecurityGroupsPagesArgsForCall)]
	fake.describeCacheSecurityGroupsPagesArgsForCall = append(fake.describeCacheSecurityGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
		arg2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCacheSecurityGroupsPagesStub
	fakeReturns := fake.describeCacheSecurityGroupsPagesReturns
	fake.recordInvocation("DescribeCacheSecurityGroupsPages", []interface{}{arg1, arg2})
	fake.describeCacheSecurityGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesCallCount() int {
	fake.describeCacheSecurityGroupsPagesMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesCalls(stub func(*elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error) {
	fake.describeCacheSecurityGroupsPagesMutex.Lock()
	defer fake.describeCacheSecurityGroupsPagesMutex.Unlock()
	fake.DescribeCacheSecurityGroupsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesArgsForCall(i int) (*elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) {
	fake.describeCacheSecurityGroupsPagesMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeCacheSecurityGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesReturns(result1 error) {
	fake.describeCacheSecurityGroupsPagesMutex.Lock()
	defer fake.describeCacheSecurityGroupsPagesMutex.Unlock()
	fake.DescribeCacheSecurityGroupsPagesStub = nil
	fake.describeCacheSecurityGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeCacheSecurityGroupsPagesMutex.Lock()
	defer fake.describeCacheSecurityGroupsPagesMutex.Unlock()
	fake.DescribeCacheSecurityGroupsPagesStub = nil
	if fake.describeCacheSecurityGroupsPagesReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSecurityGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheSecurityGroupsInput, arg3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall[len(fake.describeCacheSecurityGroupsPagesWithContextArgsForCall)]
	fake.describeCacheSecurityGroupsPagesWithContextArgsForCall = append(fake.describeCacheSecurityGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCacheSecurityGroupsPagesWithContextStub
	fakeReturns := fake.describeCacheSecurityGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeCacheSecurityGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextCallCount() int {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheSecurityGroupsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, []request.Option) {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheSecurityGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextReturns(result1 error) {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheSecurityGroupsPagesWithContextStub = nil
	fake.describeCacheSecurityGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheSecurityGroupsPagesWithContextStub = nil
	if fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequest(arg1 *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput) {
	fake.describeCacheSecurityGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsRequestReturnsOnCall[len(fake.describeCacheSecurityGroupsRequestArgsForCall)]
	fake.describeCacheSecurityGroupsRequestArgsForCall = append(fake.describeCacheSecurityGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}{arg1})
	stub := fake.DescribeCacheSecurityGroupsRequestStub
	fakeReturns := fake.describeCacheSecurityGroupsRequestReturns
	fake.recordInvocation("DescribeCacheSecurityGroupsRequest", []interface{}{arg1})
	fake.describeCacheSecurityGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestCallCount() int {
	fake.describeCacheSecurityGroupsRequestMutex.RLock()
	defer fake.describeCacheSecurityGroupsRequestMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestCalls(stub func(*elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput)) {
	fake.describeCacheSecurityGroupsRequestMutex.Lock()
	defer fake.describeCacheSecurityGroupsRequestMutex.Unlock()
	fake.DescribeCacheSecurityGroupsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestArgsForCall(i int) *elasticache.DescribeCacheSecurityGroupsInput {
	fake.describeCacheSecurityGroupsRequestMutex.RLock()
	defer fake.describeCacheSecurityGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeCacheSecurityGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheSecurityGroupsOutput) {
	fake.describeCacheSecurityGroupsRequestMutex.Lock()
	defer fake.describeCacheSecurityGroupsRequestMutex.Unlock()
	fake.DescribeCacheSecurityGroupsRequestStub = nil
	fake.describeCacheSecurityGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheSecurityGroupsOutput) {
	fake.describeCacheSecurityGroupsRequestMutex.Lock()
	defer fake.describeCacheSecurityGroupsRequestMutex.Unlock()
	fake.DescribeCacheSecurityGroupsRequestStub = nil
	if fake.describeCacheSecurityGroupsRequestReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheSecurityGroupsOutput
		})
	}
	fake.describeCacheSecurityGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheSecurityGroupsInput, arg3 ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	fake.describeCacheSecurityGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsWithContextReturnsOnCall[len(fake.describeCacheSecurityGroupsWithContextArgsForCall)]
	fake.describeCacheSecurityGroupsWithContextArgsForCall = append(fake.describeCacheSecurityGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheSecurityGroupsWithContextStub
	fakeReturns := fake.describeCacheSecurityGroupsWithContextReturns
	fake.recordInvocation("DescribeCacheSecurityGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheSecurityGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextCallCount() int {
	fake.describeCacheSecurityGroupsWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheSecurityGroupsInput, ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error)) {
	fake.describeCacheSecurityGroupsWithContextMutex.Lock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeCacheSecurityGroupsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheSecurityGroupsInput, []request.Option) {
	fake.describeCacheSecurityGroupsWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheSecurityGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextReturns(result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.describeCacheSecurityGroupsWithContextMutex.Lock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeCacheSecurityGroupsWithContextStub = nil
	fake.describeCacheSecurityGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.describeCacheSecurityGroupsWithContextMutex.Lock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeCacheSecurityGroupsWithContextStub = nil
	if fake.describeCacheSecurityGroupsWithContextReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSecurityGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroups(arg1 *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	fake.describeCacheSubnetGroupsMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsReturnsOnCall[len(fake.describeCacheSubnetGroupsArgsForCall)]
	fake.describeCacheSubnetGroupsArgsForCall = append(fake.describeCacheSubnetGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}{arg1})
	stub := fake.DescribeCacheSubnetGroupsStub
	fakeReturns := fake.describeCacheSubnetGroupsReturns
	fake.recordInvocation("DescribeCacheSubnetGroups", []interface{}{arg1})
	fake.describeCacheSubnetGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsCallCount() int {
	fake.describeCacheSubnetGroupsMutex.RLock()
	defer fake.describeCacheSubnetGroupsMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsCalls(stub func(*elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)) {
	fake.describeCacheSubnetGroupsMutex.Lock()
	defer fake.describeCacheSubnetGroupsMutex.Unlock()
	fake.DescribeCacheSubnetGroupsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsArgsForCall(i int) *elasticache.DescribeCacheSubnetGroupsInput {
	fake.describeCacheSubnetGroupsMutex.RLock()
	defer fake.describeCacheSubnetGroupsMutex.RUnlock()
	argsForCall := fake.describeCacheSubnetGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsReturns(result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.describeCacheSubnetGroupsMutex.Lock()
	defer fake.describeCacheSubnetGroupsMutex.Unlock()
	fake.DescribeCacheSubnetGroupsStub = nil
	fake.describeCacheSubnetGroupsReturns = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsReturnsOnCall(i int, result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.describeCacheSubnetGroupsMutex.Lock()
	defer fake.describeCacheSubnetGroupsMutex.Unlock()
	fake.DescribeCacheSubnetGroupsStub = nil
	if fake.describeCacheSubnetGroupsReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSubnetGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPages(arg1 *elasticache.DescribeCacheSubnetGroupsInput, arg2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error {
	fake.describeCacheSubnetGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsPagesReturnsOnCall[len(fake.describeCacheSubnetGroupsPagesArgsForCall)]
	fake.describeCacheSubnetGroupsPagesArgsForCall = append(fake.describeCacheSubnetGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
		arg2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCacheSubnetGroupsPagesStub
	fakeReturns := fake.describeCacheSubnetGroupsPagesReturns
	fake.recordInvocation("DescribeCacheSubnetGroupsPages", []interface{}{arg1, arg2})
	fake.describeCacheSubnetGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesCallCount() int {
	fake.describeCacheSubnetGroupsPagesMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesCalls(stub func(*elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error) {
	fake.describeCacheSubnetGroupsPagesMutex.Lock()
	defer fake.describeCacheSubnetGroupsPagesMutex.Unlock()
	fake.DescribeCacheSubnetGroupsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesArgsForCall(i int) (*elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) {
	fake.describeCacheSubnetGroupsPagesMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeCacheSubnetGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesReturns(result1 error) {
	fake.describeCacheSubnetGroupsPagesMutex.Lock()
	defer fake.describeCacheSubnetGroupsPagesMutex.Unlock()
	fake.DescribeCacheSubnetGroupsPagesStub = nil
	fake.describeCacheSubnetGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeCacheSubnetGroupsPagesMutex.Lock()
	defer fake.describeCacheSubnetGroupsPagesMutex.Unlock()
	fake.DescribeCacheSubnetGroupsPagesStub = nil
	if fake.describeCacheSubnetGroupsPagesReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSubnetGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheSubnetGroupsInput, arg3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall[len(fake.describeCacheSubnetGroupsPagesWithContextArgsForCall)]
	fake.describeCacheSubnetGroupsPagesWithContextArgsForCall = append(fake.describeCacheSubnetGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCacheSubnetGroupsPagesWithContextStub
	fakeReturns := fake.describeCacheSubnetGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeCacheSubnetGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextCallCount() int {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheSubnetGroupsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, []request.Option) {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheSubnetGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextReturns(result1 error) {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheSubnetGroupsPagesWithContextStub = nil
	fake.describeCacheSubnetGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Lock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeCacheSubnetGroupsPagesWithContextStub = nil
	if fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequest(arg1 *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput) {
	fake.describeCacheSubnetGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsRequestReturnsOnCall[len(fake.describeCacheSubnetGroupsRequestArgsForCall)]
	fake.describeCacheSubnetGroupsRequestArgsForCall = append(fake.describeCacheSubnetGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}{arg1})
	stub := fake.DescribeCacheSubnetGroupsRequestStub
	fakeReturns := fake.describeCacheSubnetGroupsRequestReturns
	fake.recordInvocation("DescribeCacheSubnetGroupsRequest", []interface{}{arg1})
	fake.describeCacheSubnetGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestCallCount() int {
	fake.describeCacheSubnetGroupsRequestMutex.RLock()
	defer fake.describeCacheSubnetGroupsRequestMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestCalls(stub func(*elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput)) {
	fake.describeCacheSubnetGroupsRequestMutex.Lock()
	defer fake.describeCacheSubnetGroupsRequestMutex.Unlock()
	fake.DescribeCacheSubnetGroupsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestArgsForCall(i int) *elasticache.DescribeCacheSubnetGroupsInput {
	fake.describeCacheSubnetGroupsRequestMutex.RLock()
	defer fake.describeCacheSubnetGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeCacheSubnetGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheSubnetGroupsOutput) {
	fake.describeCacheSubnetGroupsRequestMutex.Lock()
	defer fake.describeCacheSubnetGroupsRequestMutex.Unlock()
	fake.DescribeCacheSubnetGroupsRequestStub = nil
	fake.describeCacheSubnetGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheSubnetGroupsOutput) {
	fake.describeCacheSubnetGroupsRequestMutex.Lock()
	defer fake.describeCacheSubnetGroupsRequestMutex.Unlock()
	fake.DescribeCacheSubnetGroupsRequestStub = nil
	if fake.describeCacheSubnetGroupsRequestReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheSubnetGroupsOutput
		})
	}
	fake.describeCacheSubnetGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheSubnetGroupsInput, arg3 ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	fake.describeCacheSubnetGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsWithContextReturnsOnCall[len(fake.describeCacheSubnetGroupsWithContextArgsForCall)]
	fake.describeCacheSubnetGroupsWithContextArgsForCall = append(fake.describeCacheSubnetGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheSubnetGroupsWithContextStub
	fakeReturns := fake.describeCacheSubnetGroupsWithContextReturns
	fake.recordInvocation("DescribeCacheSubnetGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheSubnetGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextCallCount() int {
	fake.describeCacheSubnetGroupsWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheSubnetGroupsInput, ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error)) {
	fake.describeCacheSubnetGroupsWithContextMutex.Lock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.Unlock()
	fake.DescribeCacheSubnetGroupsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheSubnetGroupsInput, []request.Option) {
	fake.describeCacheSubnetGroupsWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheSubnetGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextReturns(result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.describeCacheSubnetGroupsWithContextMutex.Lock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.Unlock()
	fake.DescribeCacheSubnetGroupsWithContextStub = nil
	fake.describeCacheSubnetGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.describeCacheSubnetGroupsWithContextMutex.Lock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.Unlock()
	fake.DescribeCacheSubnetGroupsWithContextStub = nil
	if fake.describeCacheSubnetGroupsWithContextReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSubnetGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParameters(arg1 *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersReturnsOnCall[len(fake.describeEngineDefaultParametersArgsForCall)]
	fake.describeEngineDefaultParametersArgsForCall = append(fake.describeEngineDefaultParametersArgsForCall, struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}{arg1})
	stub := fake.DescribeEngineDefaultParametersStub
	fakeReturns := fake.describeEngineDefaultParametersReturns
	fake.recordInvocation("DescribeEngineDefaultParameters", []interface{}{arg1})
	fake.describeEngineDefaultParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersCallCount() int {
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersCalls(stub func(*elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)) {
	fake.describeEngineDefaultParametersMutex.Lock()
	defer fake.describeEngineDefaultParametersMutex.Unlock()
	fake.DescribeEngineDefaultParametersStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersArgsForCall(i int) *elasticache.DescribeEngineDefaultParametersInput {
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersReturns(result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	defer fake.describeEngineDefaultParametersMutex.Unlock()
	fake.DescribeEngineDefaultParametersStub = nil
	fake.describeEngineDefaultParametersReturns = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersReturnsOnCall(i int, result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	defer fake.describeEngineDefaultParametersMutex.Unlock()
	fake.DescribeEngineDefaultParametersStub = nil
	if fake.describeEngineDefaultParametersReturnsOnCall == nil {
		fake.describeEngineDefaultParametersReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEngineDefaultParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultParametersReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPages(arg1 *elasticache.DescribeEngineDefaultParametersInput, arg2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersPagesReturnsOnCall[len(fake.describeEngineDefaultParametersPagesArgsForCall)]
	fake.describeEngineDefaultParametersPagesArgsForCall = append(fake.describeEngineDefaultParametersPagesArgsForCall, struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
		arg2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEngineDefaultParametersPagesStub
	fakeReturns := fake.describeEngineDefaultParametersPagesReturns
	fake.recordInvocation("DescribeEngineDefaultParametersPages", []interface{}{arg1, arg2})
	fake.describeEngineDefaultParametersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesCallCount() int {
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesCalls(stub func(*elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error) {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesArgsForCall(i int) (*elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) {
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesReturns(result1 error) {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesStub = nil
	fake.describeEngineDefaultParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesReturnsOnCall(i int, result1 error) {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesStub = nil
	if fake.describeEngineDefaultParametersPagesReturnsOnCall == nil {
		fake.describeEngineDefaultParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEngineDefaultParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeEngineDefaultParametersInput, arg3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall[len(fake.describeEngineDefaultParametersPagesWithContextArgsForCall)]
	fake.describeEngineDefaultParametersPagesWithContextArgsForCall = append(fake.describeEngineDefaultParametersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEngineDefaultParametersPagesWithContextStub
	fakeReturns := fake.describeEngineDefaultParametersPagesWithContextReturns
	fake.recordInvocation("DescribeEngineDefaultParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextCallCount() int {
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, ...request.Option) error) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, []request.Option) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextReturns(result1 error) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesWithContextStub = nil
	fake.describeEngineDefaultParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesWithContextStub = nil
	if fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequest(arg1 *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersRequestReturnsOnCall[len(fake.describeEngineDefaultParametersRequestArgsForCall)]
	fake.describeEngineDefaultParametersRequestArgsForCall = append(fake.describeEngineDefaultParametersRequestArgsForCall, struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}{arg1})
	stub := fake.DescribeEngineDefaultParametersRequestStub
	fakeReturns := fake.describeEngineDefaultParametersRequestReturns
	fake.recordInvocation("DescribeEngineDefaultParametersRequest", []interface{}{arg1})
	fake.describeEngineDefaultParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestCallCount() int {
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestCalls(stub func(*elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput)) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultParametersRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestArgsForCall(i int) *elasticache.DescribeEngineDefaultParametersInput {
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestReturns(result1 *request.Request, result2 *elasticache.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultParametersRequestStub = nil
	fake.describeEngineDefaultParametersRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultParametersRequestStub = nil
	if fake.describeEngineDefaultParametersRequestReturnsOnCall == nil {
		fake.describeEngineDefaultParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeEngineDefaultParametersOutput
		})
	}
	fake.describeEngineDefaultParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContext(arg1 context.Context, arg2 *elasticache.DescribeEngineDefaultParametersInput, arg3 ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersWithContextReturnsOnCall[len(fake.describeEngineDefaultParametersWithContextArgsForCall)]
	fake.describeEngineDefaultParametersWithContextArgsForCall = append(fake.describeEngineDefaultParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEngineDefaultParametersWithContextStub
	fakeReturns := fake.describeEngineDefaultParametersWithContextReturns
	fake.recordInvocation("DescribeEngineDefaultParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextCallCount() int {
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextCalls(stub func(context.Context, *elasticache.DescribeEngineDefaultParametersInput, ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error)) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeEngineDefaultParametersInput, []request.Option) {
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextReturns(result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersWithContextStub = nil
	fake.describeEngineDefaultParametersWithContextReturns = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersWithContextStub = nil
	if fake.describeEngineDefaultParametersWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEngineDefaultParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultParametersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEvents(arg1 *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	fake.describeEventsMutex.Lock()
	ret, specificReturn := fake.describeEventsReturnsOnCall[len(fake.describeEventsArgsForCall)]
	fake.describeEventsArgsForCall = append(fake.describeEventsArgsForCall, struct {
		arg1 *elasticache.DescribeEventsInput
	}{arg1})
	stub := fake.DescribeEventsStub
	fakeReturns := fake.describeEventsReturns
	fake.recordInvocation("DescribeEvents", []interface{}{arg1})
	fake.describeEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEventsCallCount() int {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	return len(fake.describeEventsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsCalls(stub func(*elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEventsArgsForCall(i int) *elasticache.DescribeEventsInput {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	argsForCall := fake.describeEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeEventsReturns(result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = nil
	fake.describeEventsReturns = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsReturnsOnCall(i int, result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = nil
	if fake.describeEventsReturnsOnCall == nil {
		fake.describeEventsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPages(arg1 *elasticache.DescribeEventsInput, arg2 func(*elasticache.DescribeEventsOutput, bool) bool) error {
	fake.describeEventsPagesMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesReturnsOnCall[len(fake.describeEventsPagesArgsForCall)]
	fake.describeEventsPagesArgsForCall = append(fake.describeEventsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeEventsInput
		arg2 func(*elasticache.DescribeEventsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventsPagesStub
	fakeReturns := fake.describeEventsPagesReturns
	fake.recordInvocation("DescribeEventsPages", []interface{}{arg1, arg2})
	fake.describeEventsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesCallCount() int {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	return len(fake.describeEventsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesCalls(stub func(*elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool) error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesArgsForCall(i int) (*elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool) {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	argsForCall := fake.describeEventsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesReturns(result1 error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = nil
	fake.describeEventsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = nil
	if fake.describeEventsPagesReturnsOnCall == nil {
		fake.describeEventsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeEventsInput, arg3 func(*elasticache.DescribeEventsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesWithContextReturnsOnCall[len(fake.describeEventsPagesWithContextArgsForCall)]
	fake.describeEventsPagesWithContextArgsForCall = append(fake.describeEventsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 func(*elasticache.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventsPagesWithContextStub
	fakeReturns := fake.describeEventsPagesWithContextReturns
	fake.recordInvocation("DescribeEventsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextCallCount() int {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	return len(fake.describeEventsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool, ...request.Option) error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool, []request.Option) {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextReturns(result1 error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = nil
	fake.describeEventsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = nil
	if fake.describeEventsPagesWithContextReturnsOnCall == nil {
		fake.describeEventsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequest(arg1 *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	ret, specificReturn := fake.describeEventsRequestReturnsOnCall[len(fake.describeEventsRequestArgsForCall)]
	fake.describeEventsRequestArgsForCall = append(fake.describeEventsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeEventsInput
	}{arg1})
	stub := fake.DescribeEventsRequestStub
	fakeReturns := fake.describeEventsRequestReturns
	fake.recordInvocation("DescribeEventsRequest", []interface{}{arg1})
	fake.describeEventsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestCallCount() int {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	return len(fake.describeEventsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestCalls(stub func(*elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput)) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestArgsForCall(i int) *elasticache.DescribeEventsInput {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	argsForCall := fake.describeEventsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = nil
	fake.describeEventsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = nil
	if fake.describeEventsRequestReturnsOnCall == nil {
		fake.describeEventsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeEventsOutput
		})
	}
	fake.describeEventsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContext(arg1 context.Context, arg2 *elasticache.DescribeEventsInput, arg3 ...request.Option) (*elasticache.DescribeEventsOutput, error) {
	fake.describeEventsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsWithContextReturnsOnCall[len(fake.describeEventsWithContextArgsForCall)]
	fake.describeEventsWithContextArgsForCall = append(fake.describeEventsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventsWithContextStub
	fakeReturns := fake.describeEventsWithContextReturns
	fake.recordInvocation("DescribeEventsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextCallCount() int {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	return len(fake.describeEventsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextCalls(stub func(context.Context, *elasticache.DescribeEventsInput, ...request.Option) (*elasticache.DescribeEventsOutput, error)) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeEventsInput, []request.Option) {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextReturns(result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = nil
	fake.describeEventsWithContextReturns = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = nil
	if fake.describeEventsWithContextReturnsOnCall == nil {
		fake.describeEventsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroups(arg1 *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	fake.describeGlobalReplicationGroupsMutex.Lock()
	ret, specificReturn := fake.describeGlobalReplicationGroupsReturnsOnCall[len(fake.describeGlobalReplicationGroupsArgsForCall)]
	fake.describeGlobalReplicationGroupsArgsForCall = append(fake.describeGlobalReplicationGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeGlobalReplicationGroupsInput
	}{arg1})
	stub := fake.DescribeGlobalReplicationGroupsStub
	fakeReturns := fake.describeGlobalReplicationGroupsReturns
	fake.recordInvocation("DescribeGlobalReplicationGroups", []interface{}{arg1})
	fake.describeGlobalReplicationGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsCallCount() int {
	fake.describeGlobalReplicationGroupsMutex.RLock()
	defer fake.describeGlobalReplicationGroupsMutex.RUnlock()
	return len(fake.describeGlobalReplicationGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsCalls(stub func(*elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)) {
	fake.describeGlobalReplicationGroupsMutex.Lock()
	defer fake.describeGlobalReplicationGroupsMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsArgsForCall(i int) *elasticache.DescribeGlobalReplicationGroupsInput {
	fake.describeGlobalReplicationGroupsMutex.RLock()
	defer fake.describeGlobalReplicationGroupsMutex.RUnlock()
	argsForCall := fake.describeGlobalReplicationGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsReturns(result1 *elasticache.DescribeGlobalReplicationGroupsOutput, result2 error) {
	fake.describeGlobalReplicationGroupsMutex.Lock()
	defer fake.describeGlobalReplicationGroupsMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsStub = nil
	fake.describeGlobalReplicationGroupsReturns = struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsReturnsOnCall(i int, result1 *elasticache.DescribeGlobalReplicationGroupsOutput, result2 error) {
	fake.describeGlobalReplicationGroupsMutex.Lock()
	defer fake.describeGlobalReplicationGroupsMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsStub = nil
	if fake.describeGlobalReplicationGroupsReturnsOnCall == nil {
		fake.describeGlobalReplicationGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeGlobalReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeGlobalReplicationGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPages(arg1 *elasticache.DescribeGlobalReplicationGroupsInput, arg2 func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) error {
	fake.describeGlobalReplicationGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeGlobalReplicationGroupsPagesReturnsOnCall[len(fake.describeGlobalReplicationGroupsPagesArgsForCall)]
	fake.describeGlobalReplicationGroupsPagesArgsForCall = append(fake.describeGlobalReplicationGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeGlobalReplicationGroupsInput
		arg2 func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeGlobalReplicationGroupsPagesStub
	fakeReturns := fake.describeGlobalReplicationGroupsPagesReturns
	fake.recordInvocation("DescribeGlobalReplicationGroupsPages", []interface{}{arg1, arg2})
	fake.describeGlobalReplicationGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesCallCount() int {
	fake.describeGlobalReplicationGroupsPagesMutex.RLock()
	defer fake.describeGlobalReplicationGroupsPagesMutex.RUnlock()
	return len(fake.describeGlobalReplicationGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesCalls(stub func(*elasticache.DescribeGlobalReplicationGroupsInput, func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) error) {
	fake.describeGlobalReplicationGroupsPagesMutex.Lock()
	defer fake.describeGlobalReplicationGroupsPagesMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesArgsForCall(i int) (*elasticache.DescribeGlobalReplicationGroupsInput, func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) {
	fake.describeGlobalReplicationGroupsPagesMutex.RLock()
	defer fake.describeGlobalReplicationGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeGlobalReplicationGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesReturns(result1 error) {
	fake.describeGlobalReplicationGroupsPagesMutex.Lock()
	defer fake.describeGlobalReplicationGroupsPagesMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsPagesStub = nil
	fake.describeGlobalReplicationGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeGlobalReplicationGroupsPagesMutex.Lock()
	defer fake.describeGlobalReplicationGroupsPagesMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsPagesStub = nil
	if fake.describeGlobalReplicationGroupsPagesReturnsOnCall == nil {
		fake.describeGlobalReplicationGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeGlobalReplicationGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeGlobalReplicationGroupsInput, arg3 func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeGlobalReplicationGroupsPagesWithContextReturnsOnCall[len(fake.describeGlobalReplicationGroupsPagesWithContextArgsForCall)]
	fake.describeGlobalReplicationGroupsPagesWithContextArgsForCall = append(fake.describeGlobalReplicationGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeGlobalReplicationGroupsInput
		arg3 func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeGlobalReplicationGroupsPagesWithContextStub
	fakeReturns := fake.describeGlobalReplicationGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeGlobalReplicationGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesWithContextCallCount() int {
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeGlobalReplicationGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeGlobalReplicationGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeGlobalReplicationGroupsInput, func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.Lock()
	defer fake.describeGlobalReplicationGroupsPagesWithContextMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeGlobalReplicationGroupsInput, func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, []request.Option) {
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeGlobalReplicationGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeGlobalReplicationGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesWithContextReturns(result1 error) {
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.Lock()
	defer fake.describeGlobalReplicationGroupsPagesWithContextMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsPagesWithContextStub = nil
	fake.describeGlobalReplicationGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.Lock()
	defer fake.describeGlobalReplicationGroupsPagesWithContextMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsPagesWithContextStub = nil
	if fake.describeGlobalReplicationGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeGlobalReplicationGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeGlobalReplicationGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsRequest(arg1 *elasticache.DescribeGlobalReplicationGroupsInput) (*request.Request, *elasticache.DescribeGlobalReplicationGroupsOutput) {
	fake.describeGlobalReplicationGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeGlobalReplicationGroupsRequestReturnsOnCall[len(fake.describeGlobalReplicationGroupsRequestArgsForCall)]
	fake.describeGlobalReplicationGroupsRequestArgsForCall = append(fake.describeGlobalReplicationGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeGlobalReplicationGroupsInput
	}{arg1})
	stub := fake.DescribeGlobalReplicationGroupsRequestStub
	fakeReturns := fake.describeGlobalReplicationGroupsRequestReturns
	fake.recordInvocation("DescribeGlobalReplicationGroupsRequest", []interface{}{arg1})
	fake.describeGlobalReplicationGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsRequestCallCount() int {
	fake.describeGlobalReplicationGroupsRequestMutex.RLock()
	defer fake.describeGlobalReplicationGroupsRequestMutex.RUnlock()
	return len(fake.describeGlobalReplicationGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsRequestCalls(stub func(*elasticache.DescribeGlobalReplicationGroupsInput) (*request.Request, *elasticache.DescribeGlobalReplicationGroupsOutput)) {
	fake.describeGlobalReplicationGroupsRequestMutex.Lock()
	defer fake.describeGlobalReplicationGroupsRequestMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsRequestArgsForCall(i int) *elasticache.DescribeGlobalReplicationGroupsInput {
	fake.describeGlobalReplicationGroupsRequestMutex.RLock()
	defer fake.describeGlobalReplicationGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeGlobalReplicationGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeGlobalReplicationGroupsOutput) {
	fake.describeGlobalReplicationGroupsRequestMutex.Lock()
	defer fake.describeGlobalReplicationGroupsRequestMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsRequestStub = nil
	fake.describeGlobalReplicationGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeGlobalReplicationGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeGlobalReplicationGroupsOutput) {
	fake.describeGlobalReplicationGroupsRequestMutex.Lock()
	defer fake.describeGlobalReplicationGroupsRequestMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsRequestStub = nil
	if fake.describeGlobalReplicationGroupsRequestReturnsOnCall == nil {
		fake.describeGlobalReplicationGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeGlobalReplicationGroupsOutput
		})
	}
	fake.describeGlobalReplicationGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeGlobalReplicationGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsWithContext(arg1 context.Context, arg2 *elasticache.DescribeGlobalReplicationGroupsInput, arg3 ...request.Option) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	fake.describeGlobalReplicationGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeGlobalReplicationGroupsWithContextReturnsOnCall[len(fake.describeGlobalReplicationGroupsWithContextArgsForCall)]
	fake.describeGlobalReplicationGroupsWithContextArgsForCall = append(fake.describeGlobalReplicationGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeGlobalReplicationGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeGlobalReplicationGroupsWithContextStub
	fakeReturns := fake.describeGlobalReplicationGroupsWithContextReturns
	fake.recordInvocation("DescribeGlobalReplicationGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeGlobalReplicationGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsWithContextCallCount() int {
	fake.describeGlobalReplicationGroupsWithContextMutex.RLock()
	defer fake.describeGlobalReplicationGroupsWithContextMutex.RUnlock()
	return len(fake.describeGlobalReplicationGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsWithContextCalls(stub func(context.Context, *elasticache.DescribeGlobalReplicationGroupsInput, ...request.Option) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)) {
	fake.describeGlobalReplicationGroupsWithContextMutex.Lock()
	defer fake.describeGlobalReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeGlobalReplicationGroupsInput, []request.Option) {
	fake.describeGlobalReplicationGroupsWithContextMutex.RLock()
	defer fake.describeGlobalReplicationGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeGlobalReplicationGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsWithContextReturns(result1 *elasticache.DescribeGlobalReplicationGroupsOutput, result2 error) {
	fake.describeGlobalReplicationGroupsWithContextMutex.Lock()
	defer fake.describeGlobalReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsWithContextStub = nil
	fake.describeGlobalReplicationGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeGlobalReplicationGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeGlobalReplicationGroupsOutput, result2 error) {
	fake.describeGlobalReplicationGroupsWithContextMutex.Lock()
	defer fake.describeGlobalReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeGlobalReplicationGroupsWithContextStub = nil
	if fake.describeGlobalReplicationGroupsWithContextReturnsOnCall == nil {
		fake.describeGlobalReplicationGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeGlobalReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeGlobalReplicationGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeGlobalReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroups(arg1 *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	fake.describeReplicationGroupsMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsReturnsOnCall[len(fake.describeReplicationGroupsArgsForCall)]
	fake.describeReplicationGroupsArgsForCall = append(fake.describeReplicationGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	stub := fake.DescribeReplicationGroupsStub
	fakeReturns := fake.describeReplicationGroupsReturns
	fake.recordInvocation("DescribeReplicationGroups", []interface{}{arg1})
	fake.describeReplicationGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsCallCount() int {
	fake.describeReplicationGroupsMutex.RLock()
	defer fake.describeReplicationGroupsMutex.RUnlock()
	return len(fake.describeReplicationGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsCalls(stub func(*elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)) {
	fake.describeReplicationGroupsMutex.Lock()
	defer fake.describeReplicationGroupsMutex.Unlock()
	fake.DescribeReplicationGroupsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.describeReplicationGroupsMutex.RLock()
	defer fake.describeReplicationGroupsMutex.RUnlock()
	argsForCall := fake.describeReplicationGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsReturns(result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.describeReplicationGroupsMutex.Lock()
	defer fake.describeReplicationGroupsMutex.Unlock()
	fake.DescribeReplicationGroupsStub = nil
	fake.describeReplicationGroupsReturns = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsReturnsOnCall(i int, result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.describeReplicationGroupsMutex.Lock()
	defer fake.describeReplicationGroupsMutex.Unlock()
	fake.DescribeReplicationGroupsStub = nil
	if fake.describeReplicationGroupsReturnsOnCall == nil {
		fake.describeReplicationGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeReplicationGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPages(arg1 *elasticache.DescribeReplicationGroupsInput, arg2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error {
	fake.describeReplicationGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsPagesReturnsOnCall[len(fake.describeReplicationGroupsPagesArgsForCall)]
	fake.describeReplicationGroupsPagesArgsForCall = append(fake.describeReplicationGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
		arg2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeReplicationGroupsPagesStub
	fakeReturns := fake.describeReplicationGroupsPagesReturns
	fake.recordInvocation("DescribeReplicationGroupsPages", []interface{}{arg1, arg2})
	fake.describeReplicationGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesCallCount() int {
	fake.describeReplicationGroupsPagesMutex.RLock()
	defer fake.describeReplicationGroupsPagesMutex.RUnlock()
	return len(fake.describeReplicationGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesCalls(stub func(*elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error) {
	fake.describeReplicationGroupsPagesMutex.Lock()
	defer fake.describeReplicationGroupsPagesMutex.Unlock()
	fake.DescribeReplicationGroupsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesArgsForCall(i int) (*elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) {
	fake.describeReplicationGroupsPagesMutex.RLock()
	defer fake.describeReplicationGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeReplicationGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesReturns(result1 error) {
	fake.describeReplicationGroupsPagesMutex.Lock()
	defer fake.describeReplicationGroupsPagesMutex.Unlock()
	fake.DescribeReplicationGroupsPagesStub = nil
	fake.describeReplicationGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeReplicationGroupsPagesMutex.Lock()
	defer fake.describeReplicationGroupsPagesMutex.Unlock()
	fake.DescribeReplicationGroupsPagesStub = nil
	if fake.describeReplicationGroupsPagesReturnsOnCall == nil {
		fake.describeReplicationGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReplicationGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReplicationGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsPagesWithContextReturnsOnCall[len(fake.describeReplicationGroupsPagesWithContextArgsForCall)]
	fake.describeReplicationGroupsPagesWithContextArgsForCall = append(fake.describeReplicationGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeReplicationGroupsPagesWithContextStub
	fakeReturns := fake.describeReplicationGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeReplicationGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReplicationGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextCallCount() int {
	fake.describeReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeReplicationGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeReplicationGroupsPagesWithContextMutex.Lock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, []request.Option) {
	fake.describeReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReplicationGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextReturns(result1 error) {
	fake.describeReplicationGroupsPagesWithContextMutex.Lock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsPagesWithContextStub = nil
	fake.describeReplicationGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReplicationGroupsPagesWithContextMutex.Lock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsPagesWithContextStub = nil
	if fake.describeReplicationGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeReplicationGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReplicationGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequest(arg1 *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput) {
	fake.describeReplicationGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsRequestReturnsOnCall[len(fake.describeReplicationGroupsRequestArgsForCall)]
	fake.describeReplicationGroupsRequestArgsForCall = append(fake.describeReplicationGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	stub := fake.DescribeReplicationGroupsRequestStub
	fakeReturns := fake.describeReplicationGroupsRequestReturns
	fake.recordInvocation("DescribeReplicationGroupsRequest", []interface{}{arg1})
	fake.describeReplicationGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestCallCount() int {
	fake.describeReplicationGroupsRequestMutex.RLock()
	defer fake.describeReplicationGroupsRequestMutex.RUnlock()
	return len(fake.describeReplicationGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestCalls(stub func(*elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput)) {
	fake.describeReplicationGroupsRequestMutex.Lock()
	defer fake.describeReplicationGroupsRequestMutex.Unlock()
	fake.DescribeReplicationGroupsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.describeReplicationGroupsRequestMutex.RLock()
	defer fake.describeReplicationGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeReplicationGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeReplicationGroupsOutput) {
	fake.describeReplicationGroupsRequestMutex.Lock()
	defer fake.describeReplicationGroupsRequestMutex.Unlock()
	fake.DescribeReplicationGroupsRequestStub = nil
	fake.describeReplicationGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeReplicationGroupsOutput) {
	fake.describeReplicationGroupsRequestMutex.Lock()
	defer fake.describeReplicationGroupsRequestMutex.Unlock()
	fake.DescribeReplicationGroupsRequestStub = nil
	if fake.describeReplicationGroupsRequestReturnsOnCall == nil {
		fake.describeReplicationGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeReplicationGroupsOutput
		})
	}
	fake.describeReplicationGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContext(arg1 context.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsWithContextReturnsOnCall[len(fake.describeReplicationGroupsWithContextArgsForCall)]
	fake.describeReplicationGroupsWithContextArgsForCall = append(fake.describeReplicationGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeReplicationGroupsWithContextStub
	fakeReturns := fake.describeReplicationGroupsWithContextReturns
	fake.recordInvocation("DescribeReplicationGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReplicationGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextCallCount() int {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	return len(fake.describeReplicationGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextCalls(stub func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	defer fake.describeReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReplicationGroupsInput, []request.Option) {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeReplicationGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextReturns(result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	defer fake.describeReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsWithContextStub = nil
	fake.describeReplicationGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	defer fake.describeReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsWithContextStub = nil
	if fake.describeReplicationGroupsWithContextReturnsOnCall == nil {
		fake.describeReplicationGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeReplicationGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodes(arg1 *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	fake.describeReservedCacheNodesMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesReturnsOnCall[len(fake.describeReservedCacheNodesArgsForCall)]
	fake.describeReservedCacheNodesArgsForCall = append(fake.describeReservedCacheNodesArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}{arg1})
	stub := fake.DescribeReservedCacheNodesStub
	fakeReturns := fake.describeReservedCacheNodesReturns
	fake.recordInvocation("DescribeReservedCacheNodes", []interface{}{arg1})
	fake.describeReservedCacheNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesCallCount() int {
	fake.describeReservedCacheNodesMutex.RLock()
	defer fake.describeReservedCacheNodesMutex.RUnlock()
	return len(fake.describeReservedCacheNodesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesCalls(stub func(*elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)) {
	fake.describeReservedCacheNodesMutex.Lock()
	defer fake.describeReservedCacheNodesMutex.Unlock()
	fake.DescribeReservedCacheNodesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesArgsForCall(i int) *elasticache.DescribeReservedCacheNodesInput {
	fake.describeReservedCacheNodesMutex.RLock()
	defer fake.describeReservedCacheNodesMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesReturns(result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.describeReservedCacheNodesMutex.Lock()
	defer fake.describeReservedCacheNodesMutex.Unlock()
	fake.DescribeReservedCacheNodesStub = nil
	fake.describeReservedCacheNodesReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.describeReservedCacheNodesMutex.Lock()
	defer fake.describeReservedCacheNodesMutex.Unlock()
	fake.DescribeReservedCacheNodesStub = nil
	if fake.describeReservedCacheNodesReturnsOnCall == nil {
		fake.describeReservedCacheNodesReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferings(arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	fake.describeReservedCacheNodesOfferingsMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsArgsForCall)]
	fake.describeReservedCacheNodesOfferingsArgsForCall = append(fake.describeReservedCacheNodesOfferingsArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{arg1})
	stub := fake.DescribeReservedCacheNodesOfferingsStub
	fakeReturns := fake.describeReservedCacheNodesOfferingsReturns
	fake.recordInvocation("DescribeReservedCacheNodesOfferings", []interface{}{arg1})
	fake.describeReservedCacheNodesOfferingsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsCallCount() int {
	fake.describeReservedCacheNodesOfferingsMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsCalls(stub func(*elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)) {
	fake.describeReservedCacheNodesOfferingsMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsArgsForCall(i int) *elasticache.DescribeReservedCacheNodesOfferingsInput {
	fake.describeReservedCacheNodesOfferingsMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesOfferingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsReturns(result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.describeReservedCacheNodesOfferingsMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsStub = nil
	fake.describeReservedCacheNodesOfferingsReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.describeReservedCacheNodesOfferingsMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsStub = nil
	if fake.describeReservedCacheNodesOfferingsReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesOfferingsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPages(arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput, arg2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error {
	fake.describeReservedCacheNodesOfferingsPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsPagesArgsForCall)]
	fake.describeReservedCacheNodesOfferingsPagesArgsForCall = append(fake.describeReservedCacheNodesOfferingsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeReservedCacheNodesOfferingsPagesStub
	fakeReturns := fake.describeReservedCacheNodesOfferingsPagesReturns
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsPages", []interface{}{arg1, arg2})
	fake.describeReservedCacheNodesOfferingsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesCallCount() int {
	fake.describeReservedCacheNodesOfferingsPagesMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesCalls(stub func(*elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error) {
	fake.describeReservedCacheNodesOfferingsPagesMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesArgsForCall(i int) (*elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) {
	fake.describeReservedCacheNodesOfferingsPagesMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesOfferingsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesReturns(result1 error) {
	fake.describeReservedCacheNodesOfferingsPagesMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsPagesStub = nil
	fake.describeReservedCacheNodesOfferingsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesReturnsOnCall(i int, result1 error) {
	fake.describeReservedCacheNodesOfferingsPagesMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsPagesStub = nil
	if fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput, arg3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall)]
	fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall = append(fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub
	fakeReturns := fake.describeReservedCacheNodesOfferingsPagesWithContextReturns
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextCallCount() int {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, ...request.Option) error) {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, []request.Option) {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextReturns(result1 error) {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub = nil
	fake.describeReservedCacheNodesOfferingsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub = nil
	if fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequest(arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	fake.describeReservedCacheNodesOfferingsRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsRequestArgsForCall)]
	fake.describeReservedCacheNodesOfferingsRequestArgsForCall = append(fake.describeReservedCacheNodesOfferingsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{arg1})
	stub := fake.DescribeReservedCacheNodesOfferingsRequestStub
	fakeReturns := fake.describeReservedCacheNodesOfferingsRequestReturns
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsRequest", []interface{}{arg1})
	fake.describeReservedCacheNodesOfferingsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestCallCount() int {
	fake.describeReservedCacheNodesOfferingsRequestMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestCalls(stub func(*elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput)) {
	fake.describeReservedCacheNodesOfferingsRequestMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestArgsForCall(i int) *elasticache.DescribeReservedCacheNodesOfferingsInput {
	fake.describeReservedCacheNodesOfferingsRequestMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesOfferingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	fake.describeReservedCacheNodesOfferingsRequestMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsRequestStub = nil
	fake.describeReservedCacheNodesOfferingsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	fake.describeReservedCacheNodesOfferingsRequestMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsRequestStub = nil
	if fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		})
	}
	fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContext(arg1 context.Context, arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput, arg3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsWithContextArgsForCall)]
	fake.describeReservedCacheNodesOfferingsWithContextArgsForCall = append(fake.describeReservedCacheNodesOfferingsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeReservedCacheNodesOfferingsWithContextStub
	fakeReturns := fake.describeReservedCacheNodesOfferingsWithContextReturns
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextCallCount() int {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextCalls(stub func(context.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, []request.Option) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesOfferingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextReturns(result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsWithContextStub = nil
	fake.describeReservedCacheNodesOfferingsWithContextReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesOfferingsWithContextStub = nil
	if fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPages(arg1 *elasticache.DescribeReservedCacheNodesInput, arg2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error {
	fake.describeReservedCacheNodesPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesPagesReturnsOnCall[len(fake.describeReservedCacheNodesPagesArgsForCall)]
	fake.describeReservedCacheNodesPagesArgsForCall = append(fake.describeReservedCacheNodesPagesArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeReservedCacheNodesPagesStub
	fakeReturns := fake.describeReservedCacheNodesPagesReturns
	fake.recordInvocation("DescribeReservedCacheNodesPages", []interface{}{arg1, arg2})
	fake.describeReservedCacheNodesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesCallCount() int {
	fake.describeReservedCacheNodesPagesMutex.RLock()
	defer fake.describeReservedCacheNodesPagesMutex.RUnlock()
	return len(fake.describeReservedCacheNodesPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesCalls(stub func(*elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error) {
	fake.describeReservedCacheNodesPagesMutex.Lock()
	defer fake.describeReservedCacheNodesPagesMutex.Unlock()
	fake.DescribeReservedCacheNodesPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesArgsForCall(i int) (*elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) {
	fake.describeReservedCacheNodesPagesMutex.RLock()
	defer fake.describeReservedCacheNodesPagesMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesReturns(result1 error) {
	fake.describeReservedCacheNodesPagesMutex.Lock()
	defer fake.describeReservedCacheNodesPagesMutex.Unlock()
	fake.DescribeReservedCacheNodesPagesStub = nil
	fake.describeReservedCacheNodesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesReturnsOnCall(i int, result1 error) {
	fake.describeReservedCacheNodesPagesMutex.Lock()
	defer fake.describeReservedCacheNodesPagesMutex.Unlock()
	fake.DescribeReservedCacheNodesPagesStub = nil
	if fake.describeReservedCacheNodesPagesReturnsOnCall == nil {
		fake.describeReservedCacheNodesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeReservedCacheNodesInput, arg3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedCacheNodesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesPagesWithContextReturnsOnCall[len(fake.describeReservedCacheNodesPagesWithContextArgsForCall)]
	fake.describeReservedCacheNodesPagesWithContextArgsForCall = append(fake.describeReservedCacheNodesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeReservedCacheNodesPagesWithContextStub
	fakeReturns := fake.describeReservedCacheNodesPagesWithContextReturns
	fake.recordInvocation("DescribeReservedCacheNodesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedCacheNodesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextCallCount() int {
	fake.describeReservedCacheNodesPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, ...request.Option) error) {
	fake.describeReservedCacheNodesPagesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, []request.Option) {
	fake.describeReservedCacheNodesPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextReturns(result1 error) {
	fake.describeReservedCacheNodesPagesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesPagesWithContextStub = nil
	fake.describeReservedCacheNodesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReservedCacheNodesPagesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesPagesWithContextStub = nil
	if fake.describeReservedCacheNodesPagesWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequest(arg1 *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput) {
	fake.describeReservedCacheNodesRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesRequestReturnsOnCall[len(fake.describeReservedCacheNodesRequestArgsForCall)]
	fake.describeReservedCacheNodesRequestArgsForCall = append(fake.describeReservedCacheNodesRequestArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}{arg1})
	stub := fake.DescribeReservedCacheNodesRequestStub
	fakeReturns := fake.describeReservedCacheNodesRequestReturns
	fake.recordInvocation("DescribeReservedCacheNodesRequest", []interface{}{arg1})
	fake.describeReservedCacheNodesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestCallCount() int {
	fake.describeReservedCacheNodesRequestMutex.RLock()
	defer fake.describeReservedCacheNodesRequestMutex.RUnlock()
	return len(fake.describeReservedCacheNodesRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestCalls(stub func(*elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput)) {
	fake.describeReservedCacheNodesRequestMutex.Lock()
	defer fake.describeReservedCacheNodesRequestMutex.Unlock()
	fake.DescribeReservedCacheNodesRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestArgsForCall(i int) *elasticache.DescribeReservedCacheNodesInput {
	fake.describeReservedCacheNodesRequestMutex.RLock()
	defer fake.describeReservedCacheNodesRequestMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestReturns(result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOutput) {
	fake.describeReservedCacheNodesRequestMutex.Lock()
	defer fake.describeReservedCacheNodesRequestMutex.Unlock()
	fake.DescribeReservedCacheNodesRequestStub = nil
	fake.describeReservedCacheNodesRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOutput) {
	fake.describeReservedCacheNodesRequestMutex.Lock()
	defer fake.describeReservedCacheNodesRequestMutex.Unlock()
	fake.DescribeReservedCacheNodesRequestStub = nil
	if fake.describeReservedCacheNodesRequestReturnsOnCall == nil {
		fake.describeReservedCacheNodesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeReservedCacheNodesOutput
		})
	}
	fake.describeReservedCacheNodesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContext(arg1 context.Context, arg2 *elasticache.DescribeReservedCacheNodesInput, arg3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	fake.describeReservedCacheNodesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesWithContextReturnsOnCall[len(fake.describeReservedCacheNodesWithContextArgsForCall)]
	fake.describeReservedCacheNodesWithContextArgsForCall = append(fake.describeReservedCacheNodesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeReservedCacheNodesWithContextStub
	fakeReturns := fake.describeReservedCacheNodesWithContextReturns
	fake.recordInvocation("DescribeReservedCacheNodesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedCacheNodesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextCallCount() int {
	fake.describeReservedCacheNodesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextCalls(stub func(context.Context, *elasticache.DescribeReservedCacheNodesInput, ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error)) {
	fake.describeReservedCacheNodesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReservedCacheNodesInput, []request.Option) {
	fake.describeReservedCacheNodesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedCacheNodesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextReturns(result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.describeReservedCacheNodesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesWithContextStub = nil
	fake.describeReservedCacheNodesWithContextReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.describeReservedCacheNodesWithContextMutex.Lock()
	defer fake.describeReservedCacheNodesWithContextMutex.Unlock()
	fake.DescribeReservedCacheNodesWithContextStub = nil
	if fake.describeReservedCacheNodesWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdates(arg1 *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
	fake.describeServiceUpdatesMutex.Lock()
	ret, specificReturn := fake.describeServiceUpdatesReturnsOnCall[len(fake.describeServiceUpdatesArgsForCall)]
	fake.describeServiceUpdatesArgsForCall = append(fake.describeServiceUpdatesArgsForCall, struct {
		arg1 *elasticache.DescribeServiceUpdatesInput
	}{arg1})
	stub := fake.DescribeServiceUpdatesStub
	fakeReturns := fake.describeServiceUpdatesReturns
	fake.recordInvocation("DescribeServiceUpdates", []interface{}{arg1})
	fake.describeServiceUpdatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesCallCount() int {
	fake.describeServiceUpdatesMutex.RLock()
	defer fake.describeServiceUpdatesMutex.RUnlock()
	return len(fake.describeServiceUpdatesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesCalls(stub func(*elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error)) {
	fake.describeServiceUpdatesMutex.Lock()
	defer fake.describeServiceUpdatesMutex.Unlock()
	fake.DescribeServiceUpdatesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesArgsForCall(i int) *elasticache.DescribeServiceUpdatesInput {
	fake.describeServiceUpdatesMutex.RLock()
	defer fake.describeServiceUpdatesMutex.RUnlock()
	argsForCall := fake.describeServiceUpdatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesReturns(result1 *elasticache.DescribeServiceUpdatesOutput, result2 error) {
	fake.describeServiceUpdatesMutex.Lock()
	defer fake.describeServiceUpdatesMutex.Unlock()
	fake.DescribeServiceUpdatesStub = nil
	fake.describeServiceUpdatesReturns = struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesReturnsOnCall(i int, result1 *elasticache.DescribeServiceUpdatesOutput, result2 error) {
	fake.describeServiceUpdatesMutex.Lock()
	defer fake.describeServiceUpdatesMutex.Unlock()
	fake.DescribeServiceUpdatesStub = nil
	if fake.describeServiceUpdatesReturnsOnCall == nil {
		fake.describeServiceUpdatesReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeServiceUpdatesOutput
			result2 error
		})
	}
	fake.describeServiceUpdatesReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPages(arg1 *elasticache.DescribeServiceUpdatesInput, arg2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error {
	fake.describeServiceUpdatesPagesMutex.Lock()
	ret, specificReturn := fake.describeServiceUpdatesPagesReturnsOnCall[len(fake.describeServiceUpdatesPagesArgsForCall)]
	fake.describeServiceUpdatesPagesArgsForCall = append(fake.describeServiceUpdatesPagesArgsForCall, struct {
		arg1 *elasticache.DescribeServiceUpdatesInput
		arg2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeServiceUpdatesPagesStub
	fakeReturns := fake.describeServiceUpdatesPagesReturns
	fake.recordInvocation("DescribeServiceUpdatesPages", []interface{}{arg1, arg2})
	fake.describeServiceUpdatesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesCallCount() int {
	fake.describeServiceUpdatesPagesMutex.RLock()
	defer fake.describeServiceUpdatesPagesMutex.RUnlock()
	return len(fake.describeServiceUpdatesPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesCalls(stub func(*elasticache.DescribeServiceUpdatesInput, func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error) {
	fake.describeServiceUpdatesPagesMutex.Lock()
	defer fake.describeServiceUpdatesPagesMutex.Unlock()
	fake.DescribeServiceUpdatesPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesArgsForCall(i int) (*elasticache.DescribeServiceUpdatesInput, func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) {
	fake.describeServiceUpdatesPagesMutex.RLock()
	defer fake.describeServiceUpdatesPagesMutex.RUnlock()
	argsForCall := fake.describeServiceUpdatesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesReturns(result1 error) {
	fake.describeServiceUpdatesPagesMutex.Lock()
	defer fake.describeServiceUpdatesPagesMutex.Unlock()
	fake.DescribeServiceUpdatesPagesStub = nil
	fake.describeServiceUpdatesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesReturnsOnCall(i int, result1 error) {
	fake.describeServiceUpdatesPagesMutex.Lock()
	defer fake.describeServiceUpdatesPagesMutex.Unlock()
	fake.DescribeServiceUpdatesPagesStub = nil
	if fake.describeServiceUpdatesPagesReturnsOnCall == nil {
		fake.describeServiceUpdatesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeServiceUpdatesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeServiceUpdatesInput, arg3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeServiceUpdatesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeServiceUpdatesPagesWithContextReturnsOnCall[len(fake.describeServiceUpdatesPagesWithContextArgsForCall)]
	fake.describeServiceUpdatesPagesWithContextArgsForCall = append(fake.describeServiceUpdatesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeServiceUpdatesInput
		arg3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeServiceUpdatesPagesWithContextStub
	fakeReturns := fake.describeServiceUpdatesPagesWithContextReturns
	fake.recordInvocation("DescribeServiceUpdatesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeServiceUpdatesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesWithContextCallCount() int {
	fake.describeServiceUpdatesPagesWithContextMutex.RLock()
	defer fake.describeServiceUpdatesPagesWithContextMutex.RUnlock()
	return len(fake.describeServiceUpdatesPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeServiceUpdatesInput, func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, ...request.Option) error) {
	fake.describeServiceUpdatesPagesWithContextMutex.Lock()
	defer fake.describeServiceUpdatesPagesWithContextMutex.Unlock()
	fake.DescribeServiceUpdatesPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeServiceUpdatesInput, func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, []request.Option) {
	fake.describeServiceUpdatesPagesWithContextMutex.RLock()
	defer fake.describeServiceUpdatesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeServiceUpdatesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesWithContextReturns(result1 error) {
	fake.describeServiceUpdatesPagesWithContextMutex.Lock()
	defer fake.describeServiceUpdatesPagesWithContextMutex.Unlock()
	fake.DescribeServiceUpdatesPagesWithContextStub = nil
	fake.describeServiceUpdatesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeServiceUpdatesPagesWithContextMutex.Lock()
	defer fake.describeServiceUpdatesPagesWithContextMutex.Unlock()
	fake.DescribeServiceUpdatesPagesWithContextStub = nil
	if fake.describeServiceUpdatesPagesWithContextReturnsOnCall == nil {
		fake.describeServiceUpdatesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeServiceUpdatesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesRequest(arg1 *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput) {
	fake.describeServiceUpdatesRequestMutex.Lock()
	ret, specificReturn := fake.describeServiceUpdatesRequestReturnsOnCall[len(fake.describeServiceUpdatesRequestArgsForCall)]
	fake.describeServiceUpdatesRequestArgsForCall = append(fake.describeServiceUpdatesRequestArgsForCall, struct {
		arg1 *elasticache.DescribeServiceUpdatesInput
	}{arg1})
	stub := fake.DescribeServiceUpdatesRequestStub
	fakeReturns := fake.describeServiceUpdatesRequestReturns
	fake.recordInvocation("DescribeServiceUpdatesRequest", []interface{}{arg1})
	fake.describeServiceUpdatesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesRequestCallCount() int {
	fake.describeServiceUpdatesRequestMutex.RLock()
	defer fake.describeServiceUpdatesRequestMutex.RUnlock()
	return len(fake.describeServiceUpdatesRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesRequestCalls(stub func(*elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput)) {
	fake.describeServiceUpdatesRequestMutex.Lock()
	defer fake.describeServiceUpdatesRequestMutex.Unlock()
	fake.DescribeServiceUpdatesRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesRequestArgsForCall(i int) *elasticache.DescribeServiceUpdatesInput {
	fake.describeServiceUpdatesRequestMutex.RLock()
	defer fake.describeServiceUpdatesRequestMutex.RUnlock()
	argsForCall := fake.describeServiceUpdatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesRequestReturns(result1 *request.Request, result2 *elasticache.DescribeServiceUpdatesOutput) {
	fake.describeServiceUpdatesRequestMutex.Lock()
	defer fake.describeServiceUpdatesRequestMutex.Unlock()
	fake.DescribeServiceUpdatesRequestStub = nil
	fake.describeServiceUpdatesRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeServiceUpdatesOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeServiceUpdatesOutput) {
	fake.describeServiceUpdatesRequestMutex.Lock()
	defer fake.describeServiceUpdatesRequestMutex.Unlock()
	fake.DescribeServiceUpdatesRequestStub = nil
	if fake.describeServiceUpdatesRequestReturnsOnCall == nil {
		fake.describeServiceUpdatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeServiceUpdatesOutput
		})
	}
	fake.describeServiceUpdatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeServiceUpdatesOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesWithContext(arg1 context.Context, arg2 *elasticache.DescribeServiceUpdatesInput, arg3 ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {
	fake.describeServiceUpdatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeServiceUpdatesWithContextReturnsOnCall[len(fake.describeServiceUpdatesWithContextArgsForCall)]
	fake.describeServiceUpdatesWithContextArgsForCall = append(fake.describeServiceUpdatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeServiceUpdatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeServiceUpdatesWithContextStub
	fakeReturns := fake.describeServiceUpdatesWithContextReturns
	fake.recordInvocation("DescribeServiceUpdatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeServiceUpdatesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesWithContextCallCount() int {
	fake.describeServiceUpdatesWithContextMutex.RLock()
	defer fake.describeServiceUpdatesWithContextMutex.RUnlock()
	return len(fake.describeServiceUpdatesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesWithContextCalls(stub func(context.Context, *elasticache.DescribeServiceUpdatesInput, ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error)) {
	fake.describeServiceUpdatesWithContextMutex.Lock()
	defer fake.describeServiceUpdatesWithContextMutex.Unlock()
	fake.DescribeServiceUpdatesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeServiceUpdatesInput, []request.Option) {
	fake.describeServiceUpdatesWithContextMutex.RLock()
	defer fake.describeServiceUpdatesWithContextMutex.RUnlock()
	argsForCall := fake.describeServiceUpdatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesWithContextReturns(result1 *elasticache.DescribeServiceUpdatesOutput, result2 error) {
	fake.describeServiceUpdatesWithContextMutex.Lock()
	defer fake.describeServiceUpdatesWithContextMutex.Unlock()
	fake.DescribeServiceUpdatesWithContextStub = nil
	fake.describeServiceUpdatesWithContextReturns = struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeServiceUpdatesWithContextReturnsOnCall(i int, result1 *elasticache.DescribeServiceUpdatesOutput, result2 error) {
	fake.describeServiceUpdatesWithContextMutex.Lock()
	defer fake.describeServiceUpdatesWithContextMutex.Unlock()
	fake.DescribeServiceUpdatesWithContextStub = nil
	if fake.describeServiceUpdatesWithContextReturnsOnCall == nil {
		fake.describeServiceUpdatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeServiceUpdatesOutput
			result2 error
		})
	}
	fake.describeServiceUpdatesWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeServiceUpdatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshots(arg1 *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	fake.describeSnapshotsMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsReturnsOnCall[len(fake.describeSnapshotsArgsForCall)]
	fake.describeSnapshotsArgsForCall = append(fake.describeSnapshotsArgsForCall, struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}{arg1})
	stub := fake.DescribeSnapshotsStub
	fakeReturns := fake.describeSnapshotsReturns
	fake.recordInvocation("DescribeSnapshots", []interface{}{arg1})
	fake.describeSnapshotsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsCallCount() int {
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	return len(fake.describeSnapshotsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsCalls(stub func(*elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)) {
	fake.describeSnapshotsMutex.Lock()
	defer fake.describeSnapshotsMutex.Unlock()
	fake.DescribeSnapshotsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsArgsForCall(i int) *elasticache.DescribeSnapshotsInput {
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	argsForCall := fake.describeSnapshotsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsReturns(result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsMutex.Lock()
	defer fake.describeSnapshotsMutex.Unlock()
	fake.DescribeSnapshotsStub = nil
	fake.describeSnapshotsReturns = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsReturnsOnCall(i int, result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsMutex.Lock()
	defer fake.describeSnapshotsMutex.Unlock()
	fake.DescribeSnapshotsStub = nil
	if fake.describeSnapshotsReturnsOnCall == nil {
		fake.describeSnapshotsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeSnapshotsOutput
			result2 error
		})
	}
	fake.describeSnapshotsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPages(arg1 *elasticache.DescribeSnapshotsInput, arg2 func(*elasticache.DescribeSnapshotsOutput, bool) bool) error {
	fake.describeSnapshotsPagesMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesReturnsOnCall[len(fake.describeSnapshotsPagesArgsForCall)]
	fake.describeSnapshotsPagesArgsForCall = append(fake.describeSnapshotsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeSnapshotsInput
		arg2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeSnapshotsPagesStub
	fakeReturns := fake.describeSnapshotsPagesReturns
	fake.recordInvocation("DescribeSnapshotsPages", []interface{}{arg1, arg2})
	fake.describeSnapshotsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesCallCount() int {
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	return len(fake.describeSnapshotsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesCalls(stub func(*elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool) error) {
	fake.describeSnapshotsPagesMutex.Lock()
	defer fake.describeSnapshotsPagesMutex.Unlock()
	fake.DescribeSnapshotsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesArgsForCall(i int) (*elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool) {
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	argsForCall := fake.describeSnapshotsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesReturns(result1 error) {
	fake.describeSnapshotsPagesMutex.Lock()
	defer fake.describeSnapshotsPagesMutex.Unlock()
	fake.DescribeSnapshotsPagesStub = nil
	fake.describeSnapshotsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesReturnsOnCall(i int, result1 error) {
	fake.describeSnapshotsPagesMutex.Lock()
	defer fake.describeSnapshotsPagesMutex.Unlock()
	fake.DescribeSnapshotsPagesStub = nil
	if fake.describeSnapshotsPagesReturnsOnCall == nil {
		fake.describeSnapshotsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeSnapshotsInput, arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesWithContextReturnsOnCall[len(fake.describeSnapshotsPagesWithContextArgsForCall)]
	fake.describeSnapshotsPagesWithContextArgsForCall = append(fake.describeSnapshotsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeSnapshotsPagesWithContextStub
	fakeReturns := fake.describeSnapshotsPagesWithContextReturns
	fake.recordInvocation("DescribeSnapshotsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSnapshotsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextCallCount() int {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, ...request.Option) error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSnapshotsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextReturns(result1 error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = nil
	fake.describeSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = nil
	if fake.describeSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequest(arg1 *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsRequestReturnsOnCall[len(fake.describeSnapshotsRequestArgsForCall)]
	fake.describeSnapshotsRequestArgsForCall = append(fake.describeSnapshotsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}{arg1})
	stub := fake.DescribeSnapshotsRequestStub
	fakeReturns := fake.describeSnapshotsRequestReturns
	fake.recordInvocation("DescribeSnapshotsRequest", []interface{}{arg1})
	fake.describeSnapshotsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestCallCount() int {
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	return len(fake.describeSnapshotsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestCalls(stub func(*elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput)) {
	fake.describeSnapshotsRequestMutex.Lock()
	defer fake.describeSnapshotsRequestMutex.Unlock()
	fake.DescribeSnapshotsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestArgsForCall(i int) *elasticache.DescribeSnapshotsInput {
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	argsForCall := fake.describeSnapshotsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	defer fake.describeSnapshotsRequestMutex.Unlock()
	fake.DescribeSnapshotsRequestStub = nil
	fake.describeSnapshotsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	defer fake.describeSnapshotsRequestMutex.Unlock()
	fake.DescribeSnapshotsRequestStub = nil
	if fake.describeSnapshotsRequestReturnsOnCall == nil {
		fake.describeSnapshotsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeSnapshotsOutput
		})
	}
	fake.describeSnapshotsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContext(arg1 context.Context, arg2 *elasticache.DescribeSnapshotsInput, arg3 ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsWithContextReturnsOnCall[len(fake.describeSnapshotsWithContextArgsForCall)]
	fake.describeSnapshotsWithContextArgsForCall = append(fake.describeSnapshotsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeSnapshotsWithContextStub
	fakeReturns := fake.describeSnapshotsWithContextReturns
	fake.recordInvocation("DescribeSnapshotsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSnapshotsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextCallCount() int {
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextCalls(stub func(context.Context, *elasticache.DescribeSnapshotsInput, ...request.Option) (*elasticache.DescribeSnapshotsOutput, error)) {
	fake.describeSnapshotsWithContextMutex.Lock()
	defer fake.describeSnapshotsWithContextMutex.Unlock()
	fake.DescribeSnapshotsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeSnapshotsInput, []request.Option) {
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	argsForCall := fake.describeSnapshotsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextReturns(result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	defer fake.describeSnapshotsWithContextMutex.Unlock()
	fake.DescribeSnapshotsWithContextStub = nil
	fake.describeSnapshotsWithContextReturns = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	defer fake.describeSnapshotsWithContextMutex.Unlock()
	fake.DescribeSnapshotsWithContextStub = nil
	if fake.describeSnapshotsWithContextReturnsOnCall == nil {
		fake.describeSnapshotsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeSnapshotsOutput
			result2 error
		})
	}
	fake.describeSnapshotsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActions(arg1 *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
	fake.describeUpdateActionsMutex.Lock()
	ret, specificReturn := fake.describeUpdateActionsReturnsOnCall[len(fake.describeUpdateActionsArgsForCall)]
	fake.describeUpdateActionsArgsForCall = append(fake.describeUpdateActionsArgsForCall, struct {
		arg1 *elasticache.DescribeUpdateActionsInput
	}{arg1})
	stub := fake.DescribeUpdateActionsStub
	fakeReturns := fake.describeUpdateActionsReturns
	fake.recordInvocation("DescribeUpdateActions", []interface{}{arg1})
	fake.describeUpdateActionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsCallCount() int {
	fake.describeUpdateActionsMutex.RLock()
	defer fake.describeUpdateActionsMutex.RUnlock()
	return len(fake.describeUpdateActionsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsCalls(stub func(*elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error)) {
	fake.describeUpdateActionsMutex.Lock()
	defer fake.describeUpdateActionsMutex.Unlock()
	fake.DescribeUpdateActionsStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsArgsForCall(i int) *elasticache.DescribeUpdateActionsInput {
	fake.describeUpdateActionsMutex.RLock()
	defer fake.describeUpdateActionsMutex.RUnlock()
	argsForCall := fake.describeUpdateActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsReturns(result1 *elasticache.DescribeUpdateActionsOutput, result2 error) {
	fake.describeUpdateActionsMutex.Lock()
	defer fake.describeUpdateActionsMutex.Unlock()
	fake.DescribeUpdateActionsStub = nil
	fake.describeUpdateActionsReturns = struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsReturnsOnCall(i int, result1 *elasticache.DescribeUpdateActionsOutput, result2 error) {
	fake.describeUpdateActionsMutex.Lock()
	defer fake.describeUpdateActionsMutex.Unlock()
	fake.DescribeUpdateActionsStub = nil
	if fake.describeUpdateActionsReturnsOnCall == nil {
		fake.describeUpdateActionsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeUpdateActionsOutput
			result2 error
		})
	}
	fake.describeUpdateActionsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPages(arg1 *elasticache.DescribeUpdateActionsInput, arg2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error {
	fake.describeUpdateActionsPagesMutex.Lock()
	ret, specificReturn := fake.describeUpdateActionsPagesReturnsOnCall[len(fake.describeUpdateActionsPagesArgsForCall)]
	fake.describeUpdateActionsPagesArgsForCall = append(fake.describeUpdateActionsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeUpdateActionsInput
		arg2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeUpdateActionsPagesStub
	fakeReturns := fake.describeUpdateActionsPagesReturns
	fake.recordInvocation("DescribeUpdateActionsPages", []interface{}{arg1, arg2})
	fake.describeUpdateActionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesCallCount() int {
	fake.describeUpdateActionsPagesMutex.RLock()
	defer fake.describeUpdateActionsPagesMutex.RUnlock()
	return len(fake.describeUpdateActionsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesCalls(stub func(*elasticache.DescribeUpdateActionsInput, func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error) {
	fake.describeUpdateActionsPagesMutex.Lock()
	defer fake.describeUpdateActionsPagesMutex.Unlock()
	fake.DescribeUpdateActionsPagesStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesArgsForCall(i int) (*elasticache.DescribeUpdateActionsInput, func(*elasticache.DescribeUpdateActionsOutput, bool) bool) {
	fake.describeUpdateActionsPagesMutex.RLock()
	defer fake.describeUpdateActionsPagesMutex.RUnlock()
	argsForCall := fake.describeUpdateActionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesReturns(result1 error) {
	fake.describeUpdateActionsPagesMutex.Lock()
	defer fake.describeUpdateActionsPagesMutex.Unlock()
	fake.DescribeUpdateActionsPagesStub = nil
	fake.describeUpdateActionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeUpdateActionsPagesMutex.Lock()
	defer fake.describeUpdateActionsPagesMutex.Unlock()
	fake.DescribeUpdateActionsPagesStub = nil
	if fake.describeUpdateActionsPagesReturnsOnCall == nil {
		fake.describeUpdateActionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeUpdateActionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeUpdateActionsInput, arg3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeUpdateActionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeUpdateActionsPagesWithContextReturnsOnCall[len(fake.describeUpdateActionsPagesWithContextArgsForCall)]
	fake.describeUpdateActionsPagesWithContextArgsForCall = append(fake.describeUpdateActionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeUpdateActionsInput
		arg3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeUpdateActionsPagesWithContextStub
	fakeReturns := fake.describeUpdateActionsPagesWithContextReturns
	fake.recordInvocation("DescribeUpdateActionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeUpdateActionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesWithContextCallCount() int {
	fake.describeUpdateActionsPagesWithContextMutex.RLock()
	defer fake.describeUpdateActionsPagesWithContextMutex.RUnlock()
	return len(fake.describeUpdateActionsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeUpdateActionsInput, func(*elasticache.DescribeUpdateActionsOutput, bool) bool, ...request.Option) error) {
	fake.describeUpdateActionsPagesWithContextMutex.Lock()
	defer fake.describeUpdateActionsPagesWithContextMutex.Unlock()
	fake.DescribeUpdateActionsPagesWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeUpdateActionsInput, func(*elasticache.DescribeUpdateActionsOutput, bool) bool, []request.Option) {
	fake.describeUpdateActionsPagesWithContextMutex.RLock()
	defer fake.describeUpdateActionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeUpdateActionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesWithContextReturns(result1 error) {
	fake.describeUpdateActionsPagesWithContextMutex.Lock()
	defer fake.describeUpdateActionsPagesWithContextMutex.Unlock()
	fake.DescribeUpdateActionsPagesWithContextStub = nil
	fake.describeUpdateActionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeUpdateActionsPagesWithContextMutex.Lock()
	defer fake.describeUpdateActionsPagesWithContextMutex.Unlock()
	fake.DescribeUpdateActionsPagesWithContextStub = nil
	if fake.describeUpdateActionsPagesWithContextReturnsOnCall == nil {
		fake.describeUpdateActionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeUpdateActionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsRequest(arg1 *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput) {
	fake.describeUpdateActionsRequestMutex.Lock()
	ret, specificReturn := fake.describeUpdateActionsRequestReturnsOnCall[len(fake.describeUpdateActionsRequestArgsForCall)]
	fake.describeUpdateActionsRequestArgsForCall = append(fake.describeUpdateActionsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeUpdateActionsInput
	}{arg1})
	stub := fake.DescribeUpdateActionsRequestStub
	fakeReturns := fake.describeUpdateActionsRequestReturns
	fake.recordInvocation("DescribeUpdateActionsRequest", []interface{}{arg1})
	fake.describeUpdateActionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsRequestCallCount() int {
	fake.describeUpdateActionsRequestMutex.RLock()
	defer fake.describeUpdateActionsRequestMutex.RUnlock()
	return len(fake.describeUpdateActionsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsRequestCalls(stub func(*elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput)) {
	fake.describeUpdateActionsRequestMutex.Lock()
	defer fake.describeUpdateActionsRequestMutex.Unlock()
	fake.DescribeUpdateActionsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsRequestArgsForCall(i int) *elasticache.DescribeUpdateActionsInput {
	fake.describeUpdateActionsRequestMutex.RLock()
	defer fake.describeUpdateActionsRequestMutex.RUnlock()
	argsForCall := fake.describeUpdateActionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeUpdateActionsOutput) {
	fake.describeUpdateActionsRequestMutex.Lock()
	defer fake.describeUpdateActionsRequestMutex.Unlock()
	fake.DescribeUpdateActionsRequestStub = nil
	fake.describeUpdateActionsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeUpdateActionsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeUpdateActionsOutput) {
	fake.describeUpdateActionsRequestMutex.Lock()
	defer fake.describeUpdateActionsRequestMutex.Unlock()
	fake.DescribeUpdateActionsRequestStub = nil
	if fake.describeUpdateActionsRequestReturnsOnCall == nil {
		fake.describeUpdateActionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeUpdateActionsOutput
		})
	}
	fake.describeUpdateActionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeUpdateActionsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsWithContext(arg1 context.Context, arg2 *elasticache.DescribeUpdateActionsInput, arg3 ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {
	fake.describeUpdateActionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeUpdateActionsWithContextReturnsOnCall[len(fake.describeUpdateActionsWithContextArgsForCall)]
	fake.describeUpdateActionsWithContextArgsForCall = append(fake.describeUpdateActionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeUpdateActionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeUpdateActionsWithContextStub
	fakeReturns := fake.describeUpdateActionsWithContextReturns
	fake.recordInvocation("DescribeUpdateActionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeUpdateActionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsWithContextCallCount() int {
	fake.describeUpdateActionsWithContextMutex.RLock()
	defer fake.describeUpdateActionsWithContextMutex.RUnlock()
	return len(fake.describeUpdateActionsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsWithContextCalls(stub func(context.Context, *elasticache.DescribeUpdateActionsInput, ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error)) {
	fake.describeUpdateActionsWithContextMutex.Lock()
	defer fake.describeUpdateActionsWithContextMutex.Unlock()
	fake.DescribeUpdateActionsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeUpdateActionsInput, []request.Option) {
	fake.describeUpdateActionsWithContextMutex.RLock()
	defer fake.describeUpdateActionsWithContextMutex.RUnlock()
	argsForCall := fake.describeUpdateActionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsWithContextReturns(result1 *elasticache.DescribeUpdateActionsOutput, result2 error) {
	fake.describeUpdateActionsWithContextMutex.Lock()
	defer fake.describeUpdateActionsWithContextMutex.Unlock()
	fake.DescribeUpdateActionsWithContextStub = nil
	fake.describeUpdateActionsWithContextReturns = struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeUpdateActionsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeUpdateActionsOutput, result2 error) {
	fake.describeUpdateActionsWithContextMutex.Lock()
	defer fake.describeUpdateActionsWithContextMutex.Unlock()
	fake.DescribeUpdateActionsWithContextStub = nil
	if fake.describeUpdateActionsWithContextReturnsOnCall == nil {
		fake.describeUpdateActionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeUpdateActionsOutput
			result2 error
		})
	}
	fake.describeUpdateActionsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeUpdateActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroup(arg1 *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	fake.disassociateGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.disassociateGlobalReplicationGroupReturnsOnCall[len(fake.disassociateGlobalReplicationGroupArgsForCall)]
	fake.disassociateGlobalReplicationGroupArgsForCall = append(fake.disassociateGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.DisassociateGlobalReplicationGroupInput
	}{arg1})
	stub := fake.DisassociateGlobalReplicationGroupStub
	fakeReturns := fake.disassociateGlobalReplicationGroupReturns
	fake.recordInvocation("DisassociateGlobalReplicationGroup", []interface{}{arg1})
	fake.disassociateGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupCallCount() int {
	fake.disassociateGlobalReplicationGroupMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupMutex.RUnlock()
	return len(fake.disassociateGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupCalls(stub func(*elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)) {
	fake.disassociateGlobalReplicationGroupMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupArgsForCall(i int) *elasticache.DisassociateGlobalReplicationGroupInput {
	fake.disassociateGlobalReplicationGroupMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.disassociateGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupReturns(result1 *elasticache.DisassociateGlobalReplicationGroupOutput, result2 error) {
	fake.disassociateGlobalReplicationGroupMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupStub = nil
	fake.disassociateGlobalReplicationGroupReturns = struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.DisassociateGlobalReplicationGroupOutput, result2 error) {
	fake.disassociateGlobalReplicationGroupMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupStub = nil
	if fake.disassociateGlobalReplicationGroupReturnsOnCall == nil {
		fake.disassociateGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DisassociateGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.disassociateGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupRequest(arg1 *elasticache.DisassociateGlobalReplicationGroupInput) (*request.Request, *elasticache.DisassociateGlobalReplicationGroupOutput) {
	fake.disassociateGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.disassociateGlobalReplicationGroupRequestReturnsOnCall[len(fake.disassociateGlobalReplicationGroupRequestArgsForCall)]
	fake.disassociateGlobalReplicationGroupRequestArgsForCall = append(fake.disassociateGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.DisassociateGlobalReplicationGroupInput
	}{arg1})
	stub := fake.DisassociateGlobalReplicationGroupRequestStub
	fakeReturns := fake.disassociateGlobalReplicationGroupRequestReturns
	fake.recordInvocation("DisassociateGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.disassociateGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupRequestCallCount() int {
	fake.disassociateGlobalReplicationGroupRequestMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.disassociateGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupRequestCalls(stub func(*elasticache.DisassociateGlobalReplicationGroupInput) (*request.Request, *elasticache.DisassociateGlobalReplicationGroupOutput)) {
	fake.disassociateGlobalReplicationGroupRequestMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupRequestMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.DisassociateGlobalReplicationGroupInput {
	fake.disassociateGlobalReplicationGroupRequestMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.disassociateGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.DisassociateGlobalReplicationGroupOutput) {
	fake.disassociateGlobalReplicationGroupRequestMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupRequestMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupRequestStub = nil
	fake.disassociateGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DisassociateGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DisassociateGlobalReplicationGroupOutput) {
	fake.disassociateGlobalReplicationGroupRequestMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupRequestMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupRequestStub = nil
	if fake.disassociateGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.disassociateGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DisassociateGlobalReplicationGroupOutput
		})
	}
	fake.disassociateGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DisassociateGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.DisassociateGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	fake.disassociateGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateGlobalReplicationGroupWithContextReturnsOnCall[len(fake.disassociateGlobalReplicationGroupWithContextArgsForCall)]
	fake.disassociateGlobalReplicationGroupWithContextArgsForCall = append(fake.disassociateGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DisassociateGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisassociateGlobalReplicationGroupWithContextStub
	fakeReturns := fake.disassociateGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("DisassociateGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupWithContextCallCount() int {
	fake.disassociateGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.disassociateGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.DisassociateGlobalReplicationGroupInput, ...request.Option) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)) {
	fake.disassociateGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DisassociateGlobalReplicationGroupInput, []request.Option) {
	fake.disassociateGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.disassociateGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupWithContextReturns(result1 *elasticache.DisassociateGlobalReplicationGroupOutput, result2 error) {
	fake.disassociateGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupWithContextStub = nil
	fake.disassociateGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DisassociateGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DisassociateGlobalReplicationGroupOutput, result2 error) {
	fake.disassociateGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.disassociateGlobalReplicationGroupWithContextMutex.Unlock()
	fake.DisassociateGlobalReplicationGroupWithContextStub = nil
	if fake.disassociateGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.disassociateGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DisassociateGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.disassociateGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DisassociateGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroup(arg1 *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	fake.failoverGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.failoverGlobalReplicationGroupReturnsOnCall[len(fake.failoverGlobalReplicationGroupArgsForCall)]
	fake.failoverGlobalReplicationGroupArgsForCall = append(fake.failoverGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.FailoverGlobalReplicationGroupInput
	}{arg1})
	stub := fake.FailoverGlobalReplicationGroupStub
	fakeReturns := fake.failoverGlobalReplicationGroupReturns
	fake.recordInvocation("FailoverGlobalReplicationGroup", []interface{}{arg1})
	fake.failoverGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupCallCount() int {
	fake.failoverGlobalReplicationGroupMutex.RLock()
	defer fake.failoverGlobalReplicationGroupMutex.RUnlock()
	return len(fake.failoverGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupCalls(stub func(*elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error)) {
	fake.failoverGlobalReplicationGroupMutex.Lock()
	defer fake.failoverGlobalReplicationGroupMutex.Unlock()
	fake.FailoverGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupArgsForCall(i int) *elasticache.FailoverGlobalReplicationGroupInput {
	fake.failoverGlobalReplicationGroupMutex.RLock()
	defer fake.failoverGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.failoverGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupReturns(result1 *elasticache.FailoverGlobalReplicationGroupOutput, result2 error) {
	fake.failoverGlobalReplicationGroupMutex.Lock()
	defer fake.failoverGlobalReplicationGroupMutex.Unlock()
	fake.FailoverGlobalReplicationGroupStub = nil
	fake.failoverGlobalReplicationGroupReturns = struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.FailoverGlobalReplicationGroupOutput, result2 error) {
	fake.failoverGlobalReplicationGroupMutex.Lock()
	defer fake.failoverGlobalReplicationGroupMutex.Unlock()
	fake.FailoverGlobalReplicationGroupStub = nil
	if fake.failoverGlobalReplicationGroupReturnsOnCall == nil {
		fake.failoverGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.FailoverGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.failoverGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupRequest(arg1 *elasticache.FailoverGlobalReplicationGroupInput) (*request.Request, *elasticache.FailoverGlobalReplicationGroupOutput) {
	fake.failoverGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.failoverGlobalReplicationGroupRequestReturnsOnCall[len(fake.failoverGlobalReplicationGroupRequestArgsForCall)]
	fake.failoverGlobalReplicationGroupRequestArgsForCall = append(fake.failoverGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.FailoverGlobalReplicationGroupInput
	}{arg1})
	stub := fake.FailoverGlobalReplicationGroupRequestStub
	fakeReturns := fake.failoverGlobalReplicationGroupRequestReturns
	fake.recordInvocation("FailoverGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.failoverGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupRequestCallCount() int {
	fake.failoverGlobalReplicationGroupRequestMutex.RLock()
	defer fake.failoverGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.failoverGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupRequestCalls(stub func(*elasticache.FailoverGlobalReplicationGroupInput) (*request.Request, *elasticache.FailoverGlobalReplicationGroupOutput)) {
	fake.failoverGlobalReplicationGroupRequestMutex.Lock()
	defer fake.failoverGlobalReplicationGroupRequestMutex.Unlock()
	fake.FailoverGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.FailoverGlobalReplicationGroupInput {
	fake.failoverGlobalReplicationGroupRequestMutex.RLock()
	defer fake.failoverGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.failoverGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.FailoverGlobalReplicationGroupOutput) {
	fake.failoverGlobalReplicationGroupRequestMutex.Lock()
	defer fake.failoverGlobalReplicationGroupRequestMutex.Unlock()
	fake.FailoverGlobalReplicationGroupRequestStub = nil
	fake.failoverGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.FailoverGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.FailoverGlobalReplicationGroupOutput) {
	fake.failoverGlobalReplicationGroupRequestMutex.Lock()
	defer fake.failoverGlobalReplicationGroupRequestMutex.Unlock()
	fake.FailoverGlobalReplicationGroupRequestStub = nil
	if fake.failoverGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.failoverGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.FailoverGlobalReplicationGroupOutput
		})
	}
	fake.failoverGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.FailoverGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.FailoverGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	fake.failoverGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.failoverGlobalReplicationGroupWithContextReturnsOnCall[len(fake.failoverGlobalReplicationGroupWithContextArgsForCall)]
	fake.failoverGlobalReplicationGroupWithContextArgsForCall = append(fake.failoverGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.FailoverGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.FailoverGlobalReplicationGroupWithContextStub
	fakeReturns := fake.failoverGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("FailoverGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.failoverGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupWithContextCallCount() int {
	fake.failoverGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.failoverGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.failoverGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.FailoverGlobalReplicationGroupInput, ...request.Option) (*elasticache.FailoverGlobalReplicationGroupOutput, error)) {
	fake.failoverGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.failoverGlobalReplicationGroupWithContextMutex.Unlock()
	fake.FailoverGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.FailoverGlobalReplicationGroupInput, []request.Option) {
	fake.failoverGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.failoverGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.failoverGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupWithContextReturns(result1 *elasticache.FailoverGlobalReplicationGroupOutput, result2 error) {
	fake.failoverGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.failoverGlobalReplicationGroupWithContextMutex.Unlock()
	fake.FailoverGlobalReplicationGroupWithContextStub = nil
	fake.failoverGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) FailoverGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.FailoverGlobalReplicationGroupOutput, result2 error) {
	fake.failoverGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.failoverGlobalReplicationGroupWithContextMutex.Unlock()
	fake.FailoverGlobalReplicationGroupWithContextStub = nil
	if fake.failoverGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.failoverGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.FailoverGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.failoverGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.FailoverGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroup(arg1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.increaseNodeGroupsInGlobalReplicationGroupReturnsOnCall[len(fake.increaseNodeGroupsInGlobalReplicationGroupArgsForCall)]
	fake.increaseNodeGroupsInGlobalReplicationGroupArgsForCall = append(fake.increaseNodeGroupsInGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}{arg1})
	stub := fake.IncreaseNodeGroupsInGlobalReplicationGroupStub
	fakeReturns := fake.increaseNodeGroupsInGlobalReplicationGroupReturns
	fake.recordInvocation("IncreaseNodeGroupsInGlobalReplicationGroup", []interface{}{arg1})
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupCallCount() int {
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupMutex.RUnlock()
	return len(fake.increaseNodeGroupsInGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupCalls(stub func(*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)) {
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupArgsForCall(i int) *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput {
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.increaseNodeGroupsInGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupReturns(result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupStub = nil
	fake.increaseNodeGroupsInGlobalReplicationGroupReturns = struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupStub = nil
	if fake.increaseNodeGroupsInGlobalReplicationGroupReturnsOnCall == nil {
		fake.increaseNodeGroupsInGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.increaseNodeGroupsInGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupRequest(arg1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput) {
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.increaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall[len(fake.increaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall)]
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall = append(fake.increaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}{arg1})
	stub := fake.IncreaseNodeGroupsInGlobalReplicationGroupRequestStub
	fakeReturns := fake.increaseNodeGroupsInGlobalReplicationGroupRequestReturns
	fake.recordInvocation("IncreaseNodeGroupsInGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupRequestCallCount() int {
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.increaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupRequestCalls(stub func(*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput)) {
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput {
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.increaseNodeGroupsInGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput) {
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupRequestStub = nil
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput) {
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupRequestStub = nil
	if fake.increaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.increaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		})
	}
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.increaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall[len(fake.increaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall)]
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall = append(fake.increaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.IncreaseNodeGroupsInGlobalReplicationGroupWithContextStub
	fakeReturns := fake.increaseNodeGroupsInGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("IncreaseNodeGroupsInGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupWithContextCallCount() int {
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.increaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, ...request.Option) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)) {
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, []request.Option) {
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.increaseNodeGroupsInGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupWithContextReturns(result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupWithContextStub = nil
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, result2 error) {
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.IncreaseNodeGroupsInGlobalReplicationGroupWithContextStub = nil
	if fake.increaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.increaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCount(arg1 *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
	fake.increaseReplicaCountMutex.Lock()
	ret, specificReturn := fake.increaseReplicaCountReturnsOnCall[len(fake.increaseReplicaCountArgsForCall)]
	fake.increaseReplicaCountArgsForCall = append(fake.increaseReplicaCountArgsForCall, struct {
		arg1 *elasticache.IncreaseReplicaCountInput
	}{arg1})
	stub := fake.IncreaseReplicaCountStub
	fakeReturns := fake.increaseReplicaCountReturns
	fake.recordInvocation("IncreaseReplicaCount", []interface{}{arg1})
	fake.increaseReplicaCountMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountCallCount() int {
	fake.increaseReplicaCountMutex.RLock()
	defer fake.increaseReplicaCountMutex.RUnlock()
	return len(fake.increaseReplicaCountArgsForCall)
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountCalls(stub func(*elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error)) {
	fake.increaseReplicaCountMutex.Lock()
	defer fake.increaseReplicaCountMutex.Unlock()
	fake.IncreaseReplicaCountStub = stub
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountArgsForCall(i int) *elasticache.IncreaseReplicaCountInput {
	fake.increaseReplicaCountMutex.RLock()
	defer fake.increaseReplicaCountMutex.RUnlock()
	argsForCall := fake.increaseReplicaCountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountReturns(result1 *elasticache.IncreaseReplicaCountOutput, result2 error) {
	fake.increaseReplicaCountMutex.Lock()
	defer fake.increaseReplicaCountMutex.Unlock()
	fake.IncreaseReplicaCountStub = nil
	fake.increaseReplicaCountReturns = struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountReturnsOnCall(i int, result1 *elasticache.IncreaseReplicaCountOutput, result2 error) {
	fake.increaseReplicaCountMutex.Lock()
	defer fake.increaseReplicaCountMutex.Unlock()
	fake.IncreaseReplicaCountStub = nil
	if fake.increaseReplicaCountReturnsOnCall == nil {
		fake.increaseReplicaCountReturnsOnCall = make(map[int]struct {
			result1 *elasticache.IncreaseReplicaCountOutput
			result2 error
		})
	}
	fake.increaseReplicaCountReturnsOnCall[i] = struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountRequest(arg1 *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput) {
	fake.increaseReplicaCountRequestMutex.Lock()
	ret, specificReturn := fake.increaseReplicaCountRequestReturnsOnCall[len(fake.increaseReplicaCountRequestArgsForCall)]
	fake.increaseReplicaCountRequestArgsForCall = append(fake.increaseReplicaCountRequestArgsForCall, struct {
		arg1 *elasticache.IncreaseReplicaCountInput
	}{arg1})
	stub := fake.IncreaseReplicaCountRequestStub
	fakeReturns := fake.increaseReplicaCountRequestReturns
	fake.recordInvocation("IncreaseReplicaCountRequest", []interface{}{arg1})
	fake.increaseReplicaCountRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountRequestCallCount() int {
	fake.increaseReplicaCountRequestMutex.RLock()
	defer fake.increaseReplicaCountRequestMutex.RUnlock()
	return len(fake.increaseReplicaCountRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountRequestCalls(stub func(*elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput)) {
	fake.increaseReplicaCountRequestMutex.Lock()
	defer fake.increaseReplicaCountRequestMutex.Unlock()
	fake.IncreaseReplicaCountRequestStub = stub
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountRequestArgsForCall(i int) *elasticache.IncreaseReplicaCountInput {
	fake.increaseReplicaCountRequestMutex.RLock()
	defer fake.increaseReplicaCountRequestMutex.RUnlock()
	argsForCall := fake.increaseReplicaCountRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountRequestReturns(result1 *request.Request, result2 *elasticache.IncreaseReplicaCountOutput) {
	fake.increaseReplicaCountRequestMutex.Lock()
	defer fake.increaseReplicaCountRequestMutex.Unlock()
	fake.IncreaseReplicaCountRequestStub = nil
	fake.increaseReplicaCountRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.IncreaseReplicaCountOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.IncreaseReplicaCountOutput) {
	fake.increaseReplicaCountRequestMutex.Lock()
	defer fake.increaseReplicaCountRequestMutex.Unlock()
	fake.IncreaseReplicaCountRequestStub = nil
	if fake.increaseReplicaCountRequestReturnsOnCall == nil {
		fake.increaseReplicaCountRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.IncreaseReplicaCountOutput
		})
	}
	fake.increaseReplicaCountRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.IncreaseReplicaCountOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountWithContext(arg1 context.Context, arg2 *elasticache.IncreaseReplicaCountInput, arg3 ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {
	fake.increaseReplicaCountWithContextMutex.Lock()
	ret, specificReturn := fake.increaseReplicaCountWithContextReturnsOnCall[len(fake.increaseReplicaCountWithContextArgsForCall)]
	fake.increaseReplicaCountWithContextArgsForCall = append(fake.increaseReplicaCountWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.IncreaseReplicaCountInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.IncreaseReplicaCountWithContextStub
	fakeReturns := fake.increaseReplicaCountWithContextReturns
	fake.recordInvocation("IncreaseReplicaCountWithContext", []interface{}{arg1, arg2, arg3})
	fake.increaseReplicaCountWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountWithContextCallCount() int {
	fake.increaseReplicaCountWithContextMutex.RLock()
	defer fake.increaseReplicaCountWithContextMutex.RUnlock()
	return len(fake.increaseReplicaCountWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountWithContextCalls(stub func(context.Context, *elasticache.IncreaseReplicaCountInput, ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error)) {
	fake.increaseReplicaCountWithContextMutex.Lock()
	defer fake.increaseReplicaCountWithContextMutex.Unlock()
	fake.IncreaseReplicaCountWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountWithContextArgsForCall(i int) (context.Context, *elasticache.IncreaseReplicaCountInput, []request.Option) {
	fake.increaseReplicaCountWithContextMutex.RLock()
	defer fake.increaseReplicaCountWithContextMutex.RUnlock()
	argsForCall := fake.increaseReplicaCountWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountWithContextReturns(result1 *elasticache.IncreaseReplicaCountOutput, result2 error) {
	fake.increaseReplicaCountWithContextMutex.Lock()
	defer fake.increaseReplicaCountWithContextMutex.Unlock()
	fake.IncreaseReplicaCountWithContextStub = nil
	fake.increaseReplicaCountWithContextReturns = struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) IncreaseReplicaCountWithContextReturnsOnCall(i int, result1 *elasticache.IncreaseReplicaCountOutput, result2 error) {
	fake.increaseReplicaCountWithContextMutex.Lock()
	defer fake.increaseReplicaCountWithContextMutex.Unlock()
	fake.IncreaseReplicaCountWithContextStub = nil
	if fake.increaseReplicaCountWithContextReturnsOnCall == nil {
		fake.increaseReplicaCountWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.IncreaseReplicaCountOutput
			result2 error
		})
	}
	fake.increaseReplicaCountWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.IncreaseReplicaCountOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModifications(arg1 *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	fake.listAllowedNodeTypeModificationsMutex.Lock()
	ret, specificReturn := fake.listAllowedNodeTypeModificationsReturnsOnCall[len(fake.listAllowedNodeTypeModificationsArgsForCall)]
	fake.listAllowedNodeTypeModificationsArgsForCall = append(fake.listAllowedNodeTypeModificationsArgsForCall, struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}{arg1})
	stub := fake.ListAllowedNodeTypeModificationsStub
	fakeReturns := fake.listAllowedNodeTypeModificationsReturns
	fake.recordInvocation("ListAllowedNodeTypeModifications", []interface{}{arg1})
	fake.listAllowedNodeTypeModificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsCallCount() int {
	fake.listAllowedNodeTypeModificationsMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsMutex.RUnlock()
	return len(fake.listAllowedNodeTypeModificationsArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsCalls(stub func(*elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)) {
	fake.listAllowedNodeTypeModificationsMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsStub = stub
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsArgsForCall(i int) *elasticache.ListAllowedNodeTypeModificationsInput {
	fake.listAllowedNodeTypeModificationsMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsMutex.RUnlock()
	argsForCall := fake.listAllowedNodeTypeModificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsReturns(result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.listAllowedNodeTypeModificationsMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsStub = nil
	fake.listAllowedNodeTypeModificationsReturns = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsReturnsOnCall(i int, result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.listAllowedNodeTypeModificationsMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsStub = nil
	if fake.listAllowedNodeTypeModificationsReturnsOnCall == nil {
		fake.listAllowedNodeTypeModificationsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ListAllowedNodeTypeModificationsOutput
			result2 error
		})
	}
	fake.listAllowedNodeTypeModificationsReturnsOnCall[i] = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequest(arg1 *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput) {
	fake.listAllowedNodeTypeModificationsRequestMutex.Lock()
	ret, specificReturn := fake.listAllowedNodeTypeModificationsRequestReturnsOnCall[len(fake.listAllowedNodeTypeModificationsRequestArgsForCall)]
	fake.listAllowedNodeTypeModificationsRequestArgsForCall = append(fake.listAllowedNodeTypeModificationsRequestArgsForCall, struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}{arg1})
	stub := fake.ListAllowedNodeTypeModificationsRequestStub
	fakeReturns := fake.listAllowedNodeTypeModificationsRequestReturns
	fake.recordInvocation("ListAllowedNodeTypeModificationsRequest", []interface{}{arg1})
	fake.listAllowedNodeTypeModificationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestCallCount() int {
	fake.listAllowedNodeTypeModificationsRequestMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.RUnlock()
	return len(fake.listAllowedNodeTypeModificationsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestCalls(stub func(*elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput)) {
	fake.listAllowedNodeTypeModificationsRequestMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestArgsForCall(i int) *elasticache.ListAllowedNodeTypeModificationsInput {
	fake.listAllowedNodeTypeModificationsRequestMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.RUnlock()
	argsForCall := fake.listAllowedNodeTypeModificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestReturns(result1 *request.Request, result2 *elasticache.ListAllowedNodeTypeModificationsOutput) {
	fake.listAllowedNodeTypeModificationsRequestMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsRequestStub = nil
	fake.listAllowedNodeTypeModificationsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ListAllowedNodeTypeModificationsOutput) {
	fake.listAllowedNodeTypeModificationsRequestMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsRequestStub = nil
	if fake.listAllowedNodeTypeModificationsRequestReturnsOnCall == nil {
		fake.listAllowedNodeTypeModificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ListAllowedNodeTypeModificationsOutput
		})
	}
	fake.listAllowedNodeTypeModificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContext(arg1 context.Context, arg2 *elasticache.ListAllowedNodeTypeModificationsInput, arg3 ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.Lock()
	ret, specificReturn := fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall[len(fake.listAllowedNodeTypeModificationsWithContextArgsForCall)]
	fake.listAllowedNodeTypeModificationsWithContextArgsForCall = append(fake.listAllowedNodeTypeModificationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ListAllowedNodeTypeModificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListAllowedNodeTypeModificationsWithContextStub
	fakeReturns := fake.listAllowedNodeTypeModificationsWithContextReturns
	fake.recordInvocation("ListAllowedNodeTypeModificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAllowedNodeTypeModificationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextCallCount() int {
	fake.listAllowedNodeTypeModificationsWithContextMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.RUnlock()
	return len(fake.listAllowedNodeTypeModificationsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextCalls(stub func(context.Context, *elasticache.ListAllowedNodeTypeModificationsInput, ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextArgsForCall(i int) (context.Context, *elasticache.ListAllowedNodeTypeModificationsInput, []request.Option) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.RUnlock()
	argsForCall := fake.listAllowedNodeTypeModificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextReturns(result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsWithContextStub = nil
	fake.listAllowedNodeTypeModificationsWithContextReturns = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextReturnsOnCall(i int, result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.Lock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.Unlock()
	fake.ListAllowedNodeTypeModificationsWithContextStub = nil
	if fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall == nil {
		fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ListAllowedNodeTypeModificationsOutput
			result2 error
		})
	}
	fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResource(arg1 *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *elasticache.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceStub
	fakeReturns := fake.listTagsForResourceReturns
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceCalls(stub func(*elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceArgsForCall(i int) *elasticache.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequest(arg1 *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *elasticache.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceRequestStub
	fakeReturns := fake.listTagsForResourceRequestReturns
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestCalls(stub func(*elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestArgsForCall(i int) *elasticache.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TagListMessage
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContext(arg1 context.Context, arg2 *elasticache.ListTagsForResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextCalls(stub func(context.Context, *elasticache.ListTagsForResourceInput, ...request.Option) (*elasticache.TagListMessage, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *elasticache.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheCluster(arg1 *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	fake.modifyCacheClusterMutex.Lock()
	ret, specificReturn := fake.modifyCacheClusterReturnsOnCall[len(fake.modifyCacheClusterArgsForCall)]
	fake.modifyCacheClusterArgsForCall = append(fake.modifyCacheClusterArgsForCall, struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}{arg1})
	stub := fake.ModifyCacheClusterStub
	fakeReturns := fake.modifyCacheClusterReturns
	fake.recordInvocation("ModifyCacheCluster", []interface{}{arg1})
	fake.modifyCacheClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterCallCount() int {
	fake.modifyCacheClusterMutex.RLock()
	defer fake.modifyCacheClusterMutex.RUnlock()
	return len(fake.modifyCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterCalls(stub func(*elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)) {
	fake.modifyCacheClusterMutex.Lock()
	defer fake.modifyCacheClusterMutex.Unlock()
	fake.ModifyCacheClusterStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterArgsForCall(i int) *elasticache.ModifyCacheClusterInput {
	fake.modifyCacheClusterMutex.RLock()
	defer fake.modifyCacheClusterMutex.RUnlock()
	argsForCall := fake.modifyCacheClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterReturns(result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.modifyCacheClusterMutex.Lock()
	defer fake.modifyCacheClusterMutex.Unlock()
	fake.ModifyCacheClusterStub = nil
	fake.modifyCacheClusterReturns = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterReturnsOnCall(i int, result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.modifyCacheClusterMutex.Lock()
	defer fake.modifyCacheClusterMutex.Unlock()
	fake.ModifyCacheClusterStub = nil
	if fake.modifyCacheClusterReturnsOnCall == nil {
		fake.modifyCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheClusterOutput
			result2 error
		})
	}
	fake.modifyCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequest(arg1 *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput) {
	fake.modifyCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.modifyCacheClusterRequestReturnsOnCall[len(fake.modifyCacheClusterRequestArgsForCall)]
	fake.modifyCacheClusterRequestArgsForCall = append(fake.modifyCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}{arg1})
	stub := fake.ModifyCacheClusterRequestStub
	fakeReturns := fake.modifyCacheClusterRequestReturns
	fake.recordInvocation("ModifyCacheClusterRequest", []interface{}{arg1})
	fake.modifyCacheClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestCallCount() int {
	fake.modifyCacheClusterRequestMutex.RLock()
	defer fake.modifyCacheClusterRequestMutex.RUnlock()
	return len(fake.modifyCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestCalls(stub func(*elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput)) {
	fake.modifyCacheClusterRequestMutex.Lock()
	defer fake.modifyCacheClusterRequestMutex.Unlock()
	fake.ModifyCacheClusterRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestArgsForCall(i int) *elasticache.ModifyCacheClusterInput {
	fake.modifyCacheClusterRequestMutex.RLock()
	defer fake.modifyCacheClusterRequestMutex.RUnlock()
	argsForCall := fake.modifyCacheClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.ModifyCacheClusterOutput) {
	fake.modifyCacheClusterRequestMutex.Lock()
	defer fake.modifyCacheClusterRequestMutex.Unlock()
	fake.ModifyCacheClusterRequestStub = nil
	fake.modifyCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyCacheClusterOutput) {
	fake.modifyCacheClusterRequestMutex.Lock()
	defer fake.modifyCacheClusterRequestMutex.Unlock()
	fake.ModifyCacheClusterRequestStub = nil
	if fake.modifyCacheClusterRequestReturnsOnCall == nil {
		fake.modifyCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyCacheClusterOutput
		})
	}
	fake.modifyCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContext(arg1 context.Context, arg2 *elasticache.ModifyCacheClusterInput, arg3 ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
	fake.modifyCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheClusterWithContextReturnsOnCall[len(fake.modifyCacheClusterWithContextArgsForCall)]
	fake.modifyCacheClusterWithContextArgsForCall = append(fake.modifyCacheClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyCacheClusterWithContextStub
	fakeReturns := fake.modifyCacheClusterWithContextReturns
	fake.recordInvocation("ModifyCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextCallCount() int {
	fake.modifyCacheClusterWithContextMutex.RLock()
	defer fake.modifyCacheClusterWithContextMutex.RUnlock()
	return len(fake.modifyCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextCalls(stub func(context.Context, *elasticache.ModifyCacheClusterInput, ...request.Option) (*elasticache.ModifyCacheClusterOutput, error)) {
	fake.modifyCacheClusterWithContextMutex.Lock()
	defer fake.modifyCacheClusterWithContextMutex.Unlock()
	fake.ModifyCacheClusterWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyCacheClusterInput, []request.Option) {
	fake.modifyCacheClusterWithContextMutex.RLock()
	defer fake.modifyCacheClusterWithContextMutex.RUnlock()
	argsForCall := fake.modifyCacheClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextReturns(result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.modifyCacheClusterWithContextMutex.Lock()
	defer fake.modifyCacheClusterWithContextMutex.Unlock()
	fake.ModifyCacheClusterWithContextStub = nil
	fake.modifyCacheClusterWithContextReturns = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.modifyCacheClusterWithContextMutex.Lock()
	defer fake.modifyCacheClusterWithContextMutex.Unlock()
	fake.ModifyCacheClusterWithContextStub = nil
	if fake.modifyCacheClusterWithContextReturnsOnCall == nil {
		fake.modifyCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheClusterOutput
			result2 error
		})
	}
	fake.modifyCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroup(arg1 *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.modifyCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupReturnsOnCall[len(fake.modifyCacheParameterGroupArgsForCall)]
	fake.modifyCacheParameterGroupArgsForCall = append(fake.modifyCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}{arg1})
	stub := fake.ModifyCacheParameterGroupStub
	fakeReturns := fake.modifyCacheParameterGroupReturns
	fake.recordInvocation("ModifyCacheParameterGroup", []interface{}{arg1})
	fake.modifyCacheParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupCallCount() int {
	fake.modifyCacheParameterGroupMutex.RLock()
	defer fake.modifyCacheParameterGroupMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupCalls(stub func(*elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)) {
	fake.modifyCacheParameterGroupMutex.Lock()
	defer fake.modifyCacheParameterGroupMutex.Unlock()
	fake.ModifyCacheParameterGroupStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupArgsForCall(i int) *elasticache.ModifyCacheParameterGroupInput {
	fake.modifyCacheParameterGroupMutex.RLock()
	defer fake.modifyCacheParameterGroupMutex.RUnlock()
	argsForCall := fake.modifyCacheParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.modifyCacheParameterGroupMutex.Lock()
	defer fake.modifyCacheParameterGroupMutex.Unlock()
	fake.ModifyCacheParameterGroupStub = nil
	fake.modifyCacheParameterGroupReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.modifyCacheParameterGroupMutex.Lock()
	defer fake.modifyCacheParameterGroupMutex.Unlock()
	fake.ModifyCacheParameterGroupStub = nil
	if fake.modifyCacheParameterGroupReturnsOnCall == nil {
		fake.modifyCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequest(arg1 *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	fake.modifyCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupRequestReturnsOnCall[len(fake.modifyCacheParameterGroupRequestArgsForCall)]
	fake.modifyCacheParameterGroupRequestArgsForCall = append(fake.modifyCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}{arg1})
	stub := fake.ModifyCacheParameterGroupRequestStub
	fakeReturns := fake.modifyCacheParameterGroupRequestReturns
	fake.recordInvocation("ModifyCacheParameterGroupRequest", []interface{}{arg1})
	fake.modifyCacheParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestCallCount() int {
	fake.modifyCacheParameterGroupRequestMutex.RLock()
	defer fake.modifyCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestCalls(stub func(*elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)) {
	fake.modifyCacheParameterGroupRequestMutex.Lock()
	defer fake.modifyCacheParameterGroupRequestMutex.Unlock()
	fake.ModifyCacheParameterGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestArgsForCall(i int) *elasticache.ModifyCacheParameterGroupInput {
	fake.modifyCacheParameterGroupRequestMutex.RLock()
	defer fake.modifyCacheParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyCacheParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.modifyCacheParameterGroupRequestMutex.Lock()
	defer fake.modifyCacheParameterGroupRequestMutex.Unlock()
	fake.ModifyCacheParameterGroupRequestStub = nil
	fake.modifyCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.modifyCacheParameterGroupRequestMutex.Lock()
	defer fake.modifyCacheParameterGroupRequestMutex.Unlock()
	fake.ModifyCacheParameterGroupRequestStub = nil
	if fake.modifyCacheParameterGroupRequestReturnsOnCall == nil {
		fake.modifyCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CacheParameterGroupNameMessage
		})
	}
	fake.modifyCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.ModifyCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupWithContextReturnsOnCall[len(fake.modifyCacheParameterGroupWithContextArgsForCall)]
	fake.modifyCacheParameterGroupWithContextArgsForCall = append(fake.modifyCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyCacheParameterGroupWithContextStub
	fakeReturns := fake.modifyCacheParameterGroupWithContextReturns
	fake.recordInvocation("ModifyCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextCallCount() int {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.ModifyCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	defer fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	fake.ModifyCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyCacheParameterGroupInput, []request.Option) {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	defer fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	fake.ModifyCacheParameterGroupWithContextStub = nil
	fake.modifyCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	defer fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	fake.ModifyCacheParameterGroupWithContextStub = nil
	if fake.modifyCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.modifyCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroup(arg1 *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	fake.modifyCacheSubnetGroupMutex.Lock()
	ret, specificReturn := fake.modifyCacheSubnetGroupReturnsOnCall[len(fake.modifyCacheSubnetGroupArgsForCall)]
	fake.modifyCacheSubnetGroupArgsForCall = append(fake.modifyCacheSubnetGroupArgsForCall, struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}{arg1})
	stub := fake.ModifyCacheSubnetGroupStub
	fakeReturns := fake.modifyCacheSubnetGroupReturns
	fake.recordInvocation("ModifyCacheSubnetGroup", []interface{}{arg1})
	fake.modifyCacheSubnetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupCallCount() int {
	fake.modifyCacheSubnetGroupMutex.RLock()
	defer fake.modifyCacheSubnetGroupMutex.RUnlock()
	return len(fake.modifyCacheSubnetGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupCalls(stub func(*elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)) {
	fake.modifyCacheSubnetGroupMutex.Lock()
	defer fake.modifyCacheSubnetGroupMutex.Unlock()
	fake.ModifyCacheSubnetGroupStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupArgsForCall(i int) *elasticache.ModifyCacheSubnetGroupInput {
	fake.modifyCacheSubnetGroupMutex.RLock()
	defer fake.modifyCacheSubnetGroupMutex.RUnlock()
	argsForCall := fake.modifyCacheSubnetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupReturns(result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.modifyCacheSubnetGroupMutex.Lock()
	defer fake.modifyCacheSubnetGroupMutex.Unlock()
	fake.ModifyCacheSubnetGroupStub = nil
	fake.modifyCacheSubnetGroupReturns = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupReturnsOnCall(i int, result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.modifyCacheSubnetGroupMutex.Lock()
	defer fake.modifyCacheSubnetGroupMutex.Unlock()
	fake.ModifyCacheSubnetGroupStub = nil
	if fake.modifyCacheSubnetGroupReturnsOnCall == nil {
		fake.modifyCacheSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.modifyCacheSubnetGroupReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequest(arg1 *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput) {
	fake.modifyCacheSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyCacheSubnetGroupRequestReturnsOnCall[len(fake.modifyCacheSubnetGroupRequestArgsForCall)]
	fake.modifyCacheSubnetGroupRequestArgsForCall = append(fake.modifyCacheSubnetGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}{arg1})
	stub := fake.ModifyCacheSubnetGroupRequestStub
	fakeReturns := fake.modifyCacheSubnetGroupRequestReturns
	fake.recordInvocation("ModifyCacheSubnetGroupRequest", []interface{}{arg1})
	fake.modifyCacheSubnetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestCallCount() int {
	fake.modifyCacheSubnetGroupRequestMutex.RLock()
	defer fake.modifyCacheSubnetGroupRequestMutex.RUnlock()
	return len(fake.modifyCacheSubnetGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestCalls(stub func(*elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput)) {
	fake.modifyCacheSubnetGroupRequestMutex.Lock()
	defer fake.modifyCacheSubnetGroupRequestMutex.Unlock()
	fake.ModifyCacheSubnetGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestArgsForCall(i int) *elasticache.ModifyCacheSubnetGroupInput {
	fake.modifyCacheSubnetGroupRequestMutex.RLock()
	defer fake.modifyCacheSubnetGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyCacheSubnetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestReturns(result1 *request.Request, result2 *elasticache.ModifyCacheSubnetGroupOutput) {
	fake.modifyCacheSubnetGroupRequestMutex.Lock()
	defer fake.modifyCacheSubnetGroupRequestMutex.Unlock()
	fake.ModifyCacheSubnetGroupRequestStub = nil
	fake.modifyCacheSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyCacheSubnetGroupOutput) {
	fake.modifyCacheSubnetGroupRequestMutex.Lock()
	defer fake.modifyCacheSubnetGroupRequestMutex.Unlock()
	fake.ModifyCacheSubnetGroupRequestStub = nil
	if fake.modifyCacheSubnetGroupRequestReturnsOnCall == nil {
		fake.modifyCacheSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyCacheSubnetGroupOutput
		})
	}
	fake.modifyCacheSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContext(arg1 context.Context, arg2 *elasticache.ModifyCacheSubnetGroupInput, arg3 ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	fake.modifyCacheSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheSubnetGroupWithContextReturnsOnCall[len(fake.modifyCacheSubnetGroupWithContextArgsForCall)]
	fake.modifyCacheSubnetGroupWithContextArgsForCall = append(fake.modifyCacheSubnetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyCacheSubnetGroupWithContextStub
	fakeReturns := fake.modifyCacheSubnetGroupWithContextReturns
	fake.recordInvocation("ModifyCacheSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheSubnetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextCallCount() int {
	fake.modifyCacheSubnetGroupWithContextMutex.RLock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.RUnlock()
	return len(fake.modifyCacheSubnetGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextCalls(stub func(context.Context, *elasticache.ModifyCacheSubnetGroupInput, ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error)) {
	fake.modifyCacheSubnetGroupWithContextMutex.Lock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.Unlock()
	fake.ModifyCacheSubnetGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyCacheSubnetGroupInput, []request.Option) {
	fake.modifyCacheSubnetGroupWithContextMutex.RLock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyCacheSubnetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextReturns(result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.modifyCacheSubnetGroupWithContextMutex.Lock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.Unlock()
	fake.ModifyCacheSubnetGroupWithContextStub = nil
	fake.modifyCacheSubnetGroupWithContextReturns = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextReturnsOnCall(i int, result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.modifyCacheSubnetGroupWithContextMutex.Lock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.Unlock()
	fake.ModifyCacheSubnetGroupWithContextStub = nil
	if fake.modifyCacheSubnetGroupWithContextReturnsOnCall == nil {
		fake.modifyCacheSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.modifyCacheSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroup(arg1 *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	fake.modifyGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.modifyGlobalReplicationGroupReturnsOnCall[len(fake.modifyGlobalReplicationGroupArgsForCall)]
	fake.modifyGlobalReplicationGroupArgsForCall = append(fake.modifyGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.ModifyGlobalReplicationGroupInput
	}{arg1})
	stub := fake.ModifyGlobalReplicationGroupStub
	fakeReturns := fake.modifyGlobalReplicationGroupReturns
	fake.recordInvocation("ModifyGlobalReplicationGroup", []interface{}{arg1})
	fake.modifyGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupCallCount() int {
	fake.modifyGlobalReplicationGroupMutex.RLock()
	defer fake.modifyGlobalReplicationGroupMutex.RUnlock()
	return len(fake.modifyGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupCalls(stub func(*elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error)) {
	fake.modifyGlobalReplicationGroupMutex.Lock()
	defer fake.modifyGlobalReplicationGroupMutex.Unlock()
	fake.ModifyGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupArgsForCall(i int) *elasticache.ModifyGlobalReplicationGroupInput {
	fake.modifyGlobalReplicationGroupMutex.RLock()
	defer fake.modifyGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.modifyGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupReturns(result1 *elasticache.ModifyGlobalReplicationGroupOutput, result2 error) {
	fake.modifyGlobalReplicationGroupMutex.Lock()
	defer fake.modifyGlobalReplicationGroupMutex.Unlock()
	fake.ModifyGlobalReplicationGroupStub = nil
	fake.modifyGlobalReplicationGroupReturns = struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.ModifyGlobalReplicationGroupOutput, result2 error) {
	fake.modifyGlobalReplicationGroupMutex.Lock()
	defer fake.modifyGlobalReplicationGroupMutex.Unlock()
	fake.ModifyGlobalReplicationGroupStub = nil
	if fake.modifyGlobalReplicationGroupReturnsOnCall == nil {
		fake.modifyGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupRequest(arg1 *elasticache.ModifyGlobalReplicationGroupInput) (*request.Request, *elasticache.ModifyGlobalReplicationGroupOutput) {
	fake.modifyGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyGlobalReplicationGroupRequestReturnsOnCall[len(fake.modifyGlobalReplicationGroupRequestArgsForCall)]
	fake.modifyGlobalReplicationGroupRequestArgsForCall = append(fake.modifyGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyGlobalReplicationGroupInput
	}{arg1})
	stub := fake.ModifyGlobalReplicationGroupRequestStub
	fakeReturns := fake.modifyGlobalReplicationGroupRequestReturns
	fake.recordInvocation("ModifyGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.modifyGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupRequestCallCount() int {
	fake.modifyGlobalReplicationGroupRequestMutex.RLock()
	defer fake.modifyGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.modifyGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupRequestCalls(stub func(*elasticache.ModifyGlobalReplicationGroupInput) (*request.Request, *elasticache.ModifyGlobalReplicationGroupOutput)) {
	fake.modifyGlobalReplicationGroupRequestMutex.Lock()
	defer fake.modifyGlobalReplicationGroupRequestMutex.Unlock()
	fake.ModifyGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.ModifyGlobalReplicationGroupInput {
	fake.modifyGlobalReplicationGroupRequestMutex.RLock()
	defer fake.modifyGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.ModifyGlobalReplicationGroupOutput) {
	fake.modifyGlobalReplicationGroupRequestMutex.Lock()
	defer fake.modifyGlobalReplicationGroupRequestMutex.Unlock()
	fake.ModifyGlobalReplicationGroupRequestStub = nil
	fake.modifyGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyGlobalReplicationGroupOutput) {
	fake.modifyGlobalReplicationGroupRequestMutex.Lock()
	defer fake.modifyGlobalReplicationGroupRequestMutex.Unlock()
	fake.ModifyGlobalReplicationGroupRequestStub = nil
	if fake.modifyGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.modifyGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyGlobalReplicationGroupOutput
		})
	}
	fake.modifyGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.ModifyGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	fake.modifyGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyGlobalReplicationGroupWithContextReturnsOnCall[len(fake.modifyGlobalReplicationGroupWithContextArgsForCall)]
	fake.modifyGlobalReplicationGroupWithContextArgsForCall = append(fake.modifyGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyGlobalReplicationGroupWithContextStub
	fakeReturns := fake.modifyGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("ModifyGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupWithContextCallCount() int {
	fake.modifyGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.modifyGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.modifyGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.ModifyGlobalReplicationGroupInput, ...request.Option) (*elasticache.ModifyGlobalReplicationGroupOutput, error)) {
	fake.modifyGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.modifyGlobalReplicationGroupWithContextMutex.Unlock()
	fake.ModifyGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyGlobalReplicationGroupInput, []request.Option) {
	fake.modifyGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.modifyGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupWithContextReturns(result1 *elasticache.ModifyGlobalReplicationGroupOutput, result2 error) {
	fake.modifyGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.modifyGlobalReplicationGroupWithContextMutex.Unlock()
	fake.ModifyGlobalReplicationGroupWithContextStub = nil
	fake.modifyGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.ModifyGlobalReplicationGroupOutput, result2 error) {
	fake.modifyGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.modifyGlobalReplicationGroupWithContextMutex.Unlock()
	fake.ModifyGlobalReplicationGroupWithContextStub = nil
	if fake.modifyGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.modifyGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroup(arg1 *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	fake.modifyReplicationGroupMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupReturnsOnCall[len(fake.modifyReplicationGroupArgsForCall)]
	fake.modifyReplicationGroupArgsForCall = append(fake.modifyReplicationGroupArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}{arg1})
	stub := fake.ModifyReplicationGroupStub
	fakeReturns := fake.modifyReplicationGroupReturns
	fake.recordInvocation("ModifyReplicationGroup", []interface{}{arg1})
	fake.modifyReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupCallCount() int {
	fake.modifyReplicationGroupMutex.RLock()
	defer fake.modifyReplicationGroupMutex.RUnlock()
	return len(fake.modifyReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupCalls(stub func(*elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)) {
	fake.modifyReplicationGroupMutex.Lock()
	defer fake.modifyReplicationGroupMutex.Unlock()
	fake.ModifyReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupArgsForCall(i int) *elasticache.ModifyReplicationGroupInput {
	fake.modifyReplicationGroupMutex.RLock()
	defer fake.modifyReplicationGroupMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupReturns(result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.modifyReplicationGroupMutex.Lock()
	defer fake.modifyReplicationGroupMutex.Unlock()
	fake.ModifyReplicationGroupStub = nil
	fake.modifyReplicationGroupReturns = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.modifyReplicationGroupMutex.Lock()
	defer fake.modifyReplicationGroupMutex.Unlock()
	fake.ModifyReplicationGroupStub = nil
	if fake.modifyReplicationGroupReturnsOnCall == nil {
		fake.modifyReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequest(arg1 *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput) {
	fake.modifyReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupRequestReturnsOnCall[len(fake.modifyReplicationGroupRequestArgsForCall)]
	fake.modifyReplicationGroupRequestArgsForCall = append(fake.modifyReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}{arg1})
	stub := fake.ModifyReplicationGroupRequestStub
	fakeReturns := fake.modifyReplicationGroupRequestReturns
	fake.recordInvocation("ModifyReplicationGroupRequest", []interface{}{arg1})
	fake.modifyReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestCallCount() int {
	fake.modifyReplicationGroupRequestMutex.RLock()
	defer fake.modifyReplicationGroupRequestMutex.RUnlock()
	return len(fake.modifyReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestCalls(stub func(*elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput)) {
	fake.modifyReplicationGroupRequestMutex.Lock()
	defer fake.modifyReplicationGroupRequestMutex.Unlock()
	fake.ModifyReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestArgsForCall(i int) *elasticache.ModifyReplicationGroupInput {
	fake.modifyReplicationGroupRequestMutex.RLock()
	defer fake.modifyReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.ModifyReplicationGroupOutput) {
	fake.modifyReplicationGroupRequestMutex.Lock()
	defer fake.modifyReplicationGroupRequestMutex.Unlock()
	fake.ModifyReplicationGroupRequestStub = nil
	fake.modifyReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyReplicationGroupOutput) {
	fake.modifyReplicationGroupRequestMutex.Lock()
	defer fake.modifyReplicationGroupRequestMutex.Unlock()
	fake.ModifyReplicationGroupRequestStub = nil
	if fake.modifyReplicationGroupRequestReturnsOnCall == nil {
		fake.modifyReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyReplicationGroupOutput
		})
	}
	fake.modifyReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfiguration(arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	fake.modifyReplicationGroupShardConfigurationMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupShardConfigurationReturnsOnCall[len(fake.modifyReplicationGroupShardConfigurationArgsForCall)]
	fake.modifyReplicationGroupShardConfigurationArgsForCall = append(fake.modifyReplicationGroupShardConfigurationArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{arg1})
	stub := fake.ModifyReplicationGroupShardConfigurationStub
	fakeReturns := fake.modifyReplicationGroupShardConfigurationReturns
	fake.recordInvocation("ModifyReplicationGroupShardConfiguration", []interface{}{arg1})
	fake.modifyReplicationGroupShardConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationCallCount() int {
	fake.modifyReplicationGroupShardConfigurationMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.RUnlock()
	return len(fake.modifyReplicationGroupShardConfigurationArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationCalls(stub func(*elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)) {
	fake.modifyReplicationGroupShardConfigurationMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationArgsForCall(i int) *elasticache.ModifyReplicationGroupShardConfigurationInput {
	fake.modifyReplicationGroupShardConfigurationMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupShardConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationReturns(result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.modifyReplicationGroupShardConfigurationMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationStub = nil
	fake.modifyReplicationGroupShardConfigurationReturns = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.modifyReplicationGroupShardConfigurationMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationStub = nil
	if fake.modifyReplicationGroupShardConfigurationReturnsOnCall == nil {
		fake.modifyReplicationGroupShardConfigurationReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupShardConfigurationReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequest(arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall[len(fake.modifyReplicationGroupShardConfigurationRequestArgsForCall)]
	fake.modifyReplicationGroupShardConfigurationRequestArgsForCall = append(fake.modifyReplicationGroupShardConfigurationRequestArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{arg1})
	stub := fake.ModifyReplicationGroupShardConfigurationRequestStub
	fakeReturns := fake.modifyReplicationGroupShardConfigurationRequestReturns
	fake.recordInvocation("ModifyReplicationGroupShardConfigurationRequest", []interface{}{arg1})
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestCallCount() int {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.RUnlock()
	return len(fake.modifyReplicationGroupShardConfigurationRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestCalls(stub func(*elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput)) {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestArgsForCall(i int) *elasticache.ModifyReplicationGroupShardConfigurationInput {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupShardConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestReturns(result1 *request.Request, result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationRequestStub = nil
	fake.modifyReplicationGroupShardConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationRequestStub = nil
	if fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall == nil {
		fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		})
	}
	fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContext(arg1 context.Context, arg2 *elasticache.ModifyReplicationGroupShardConfigurationInput, arg3 ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall[len(fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall)]
	fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall = append(fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyReplicationGroupShardConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyReplicationGroupShardConfigurationWithContextStub
	fakeReturns := fake.modifyReplicationGroupShardConfigurationWithContextReturns
	fake.recordInvocation("ModifyReplicationGroupShardConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextCallCount() int {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.RUnlock()
	return len(fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextCalls(stub func(context.Context, *elasticache.ModifyReplicationGroupShardConfigurationInput, ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyReplicationGroupShardConfigurationInput, []request.Option) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextReturns(result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationWithContextStub = nil
	fake.modifyReplicationGroupShardConfigurationWithContextReturns = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Lock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.Unlock()
	fake.ModifyReplicationGroupShardConfigurationWithContextStub = nil
	if fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall == nil {
		fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.ModifyReplicationGroupInput, arg3 ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupWithContextReturnsOnCall[len(fake.modifyReplicationGroupWithContextArgsForCall)]
	fake.modifyReplicationGroupWithContextArgsForCall = append(fake.modifyReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyReplicationGroupWithContextStub
	fakeReturns := fake.modifyReplicationGroupWithContextReturns
	fake.recordInvocation("ModifyReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextCallCount() int {
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	return len(fake.modifyReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.ModifyReplicationGroupInput, ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	defer fake.modifyReplicationGroupWithContextMutex.Unlock()
	fake.ModifyReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyReplicationGroupInput, []request.Option) {
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextReturns(result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	defer fake.modifyReplicationGroupWithContextMutex.Unlock()
	fake.ModifyReplicationGroupWithContextStub = nil
	fake.modifyReplicationGroupWithContextReturns = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	defer fake.modifyReplicationGroupWithContextMutex.Unlock()
	fake.ModifyReplicationGroupWithContextStub = nil
	if fake.modifyReplicationGroupWithContextReturnsOnCall == nil {
		fake.modifyReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOffering(arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	fake.purchaseReservedCacheNodesOfferingMutex.Lock()
	ret, specificReturn := fake.purchaseReservedCacheNodesOfferingReturnsOnCall[len(fake.purchaseReservedCacheNodesOfferingArgsForCall)]
	fake.purchaseReservedCacheNodesOfferingArgsForCall = append(fake.purchaseReservedCacheNodesOfferingArgsForCall, struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{arg1})
	stub := fake.PurchaseReservedCacheNodesOfferingStub
	fakeReturns := fake.purchaseReservedCacheNodesOfferingReturns
	fake.recordInvocation("PurchaseReservedCacheNodesOffering", []interface{}{arg1})
	fake.purchaseReservedCacheNodesOfferingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingCallCount() int {
	fake.purchaseReservedCacheNodesOfferingMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.RUnlock()
	return len(fake.purchaseReservedCacheNodesOfferingArgsForCall)
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingCalls(stub func(*elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)) {
	fake.purchaseReservedCacheNodesOfferingMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingStub = stub
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingArgsForCall(i int) *elasticache.PurchaseReservedCacheNodesOfferingInput {
	fake.purchaseReservedCacheNodesOfferingMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.RUnlock()
	argsForCall := fake.purchaseReservedCacheNodesOfferingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingReturns(result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.purchaseReservedCacheNodesOfferingMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingStub = nil
	fake.purchaseReservedCacheNodesOfferingReturns = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingReturnsOnCall(i int, result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.purchaseReservedCacheNodesOfferingMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingStub = nil
	if fake.purchaseReservedCacheNodesOfferingReturnsOnCall == nil {
		fake.purchaseReservedCacheNodesOfferingReturnsOnCall = make(map[int]struct {
			result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedCacheNodesOfferingReturnsOnCall[i] = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequest(arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Lock()
	ret, specificReturn := fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall[len(fake.purchaseReservedCacheNodesOfferingRequestArgsForCall)]
	fake.purchaseReservedCacheNodesOfferingRequestArgsForCall = append(fake.purchaseReservedCacheNodesOfferingRequestArgsForCall, struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{arg1})
	stub := fake.PurchaseReservedCacheNodesOfferingRequestStub
	fakeReturns := fake.purchaseReservedCacheNodesOfferingRequestReturns
	fake.recordInvocation("PurchaseReservedCacheNodesOfferingRequest", []interface{}{arg1})
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestCallCount() int {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.RUnlock()
	return len(fake.purchaseReservedCacheNodesOfferingRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestCalls(stub func(*elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput)) {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingRequestStub = stub
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestArgsForCall(i int) *elasticache.PurchaseReservedCacheNodesOfferingInput {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.RUnlock()
	argsForCall := fake.purchaseReservedCacheNodesOfferingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestReturns(result1 *request.Request, result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingRequestStub = nil
	fake.purchaseReservedCacheNodesOfferingRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingRequestStub = nil
	if fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall == nil {
		fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		})
	}
	fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContext(arg1 context.Context, arg2 *elasticache.PurchaseReservedCacheNodesOfferingInput, arg3 ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Lock()
	ret, specificReturn := fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall[len(fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall)]
	fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall = append(fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.PurchaseReservedCacheNodesOfferingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PurchaseReservedCacheNodesOfferingWithContextStub
	fakeReturns := fake.purchaseReservedCacheNodesOfferingWithContextReturns
	fake.recordInvocation("PurchaseReservedCacheNodesOfferingWithContext", []interface{}{arg1, arg2, arg3})
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextCallCount() int {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.RUnlock()
	return len(fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextCalls(stub func(context.Context, *elasticache.PurchaseReservedCacheNodesOfferingInput, ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextArgsForCall(i int) (context.Context, *elasticache.PurchaseReservedCacheNodesOfferingInput, []request.Option) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.RUnlock()
	argsForCall := fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextReturns(result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingWithContextStub = nil
	fake.purchaseReservedCacheNodesOfferingWithContextReturns = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextReturnsOnCall(i int, result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedCacheNodesOfferingWithContextStub = nil
	if fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall == nil {
		fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroup(arg1 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.Lock()
	ret, specificReturn := fake.rebalanceSlotsInGlobalReplicationGroupReturnsOnCall[len(fake.rebalanceSlotsInGlobalReplicationGroupArgsForCall)]
	fake.rebalanceSlotsInGlobalReplicationGroupArgsForCall = append(fake.rebalanceSlotsInGlobalReplicationGroupArgsForCall, struct {
		arg1 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}{arg1})
	stub := fake.RebalanceSlotsInGlobalReplicationGroupStub
	fakeReturns := fake.rebalanceSlotsInGlobalReplicationGroupReturns
	fake.recordInvocation("RebalanceSlotsInGlobalReplicationGroup", []interface{}{arg1})
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupCallCount() int {
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupMutex.RUnlock()
	return len(fake.rebalanceSlotsInGlobalReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupCalls(stub func(*elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)) {
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupStub = stub
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupArgsForCall(i int) *elasticache.RebalanceSlotsInGlobalReplicationGroupInput {
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupMutex.RUnlock()
	argsForCall := fake.rebalanceSlotsInGlobalReplicationGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupReturns(result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, result2 error) {
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupStub = nil
	fake.rebalanceSlotsInGlobalReplicationGroupReturns = struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupReturnsOnCall(i int, result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, result2 error) {
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupStub = nil
	if fake.rebalanceSlotsInGlobalReplicationGroupReturnsOnCall == nil {
		fake.rebalanceSlotsInGlobalReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.rebalanceSlotsInGlobalReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupRequest(arg1 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*request.Request, *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput) {
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.rebalanceSlotsInGlobalReplicationGroupRequestReturnsOnCall[len(fake.rebalanceSlotsInGlobalReplicationGroupRequestArgsForCall)]
	fake.rebalanceSlotsInGlobalReplicationGroupRequestArgsForCall = append(fake.rebalanceSlotsInGlobalReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}{arg1})
	stub := fake.RebalanceSlotsInGlobalReplicationGroupRequestStub
	fakeReturns := fake.rebalanceSlotsInGlobalReplicationGroupRequestReturns
	fake.recordInvocation("RebalanceSlotsInGlobalReplicationGroupRequest", []interface{}{arg1})
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupRequestCallCount() int {
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.RUnlock()
	return len(fake.rebalanceSlotsInGlobalReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupRequestCalls(stub func(*elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*request.Request, *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput)) {
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupRequestArgsForCall(i int) *elasticache.RebalanceSlotsInGlobalReplicationGroupInput {
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.RUnlock()
	argsForCall := fake.rebalanceSlotsInGlobalReplicationGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput) {
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupRequestStub = nil
	fake.rebalanceSlotsInGlobalReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput) {
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupRequestStub = nil
	if fake.rebalanceSlotsInGlobalReplicationGroupRequestReturnsOnCall == nil {
		fake.rebalanceSlotsInGlobalReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		})
	}
	fake.rebalanceSlotsInGlobalReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, arg3 ...request.Option) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.rebalanceSlotsInGlobalReplicationGroupWithContextReturnsOnCall[len(fake.rebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall)]
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall = append(fake.rebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RebalanceSlotsInGlobalReplicationGroupWithContextStub
	fakeReturns := fake.rebalanceSlotsInGlobalReplicationGroupWithContextReturns
	fake.recordInvocation("RebalanceSlotsInGlobalReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupWithContextCallCount() int {
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.RUnlock()
	return len(fake.rebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, ...request.Option) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)) {
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, []request.Option) {
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.rebalanceSlotsInGlobalReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupWithContextReturns(result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, result2 error) {
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupWithContextStub = nil
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextReturns = struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebalanceSlotsInGlobalReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, result2 error) {
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Lock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.Unlock()
	fake.RebalanceSlotsInGlobalReplicationGroupWithContextStub = nil
	if fake.rebalanceSlotsInGlobalReplicationGroupWithContextReturnsOnCall == nil {
		fake.rebalanceSlotsInGlobalReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
			result2 error
		})
	}
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheCluster(arg1 *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	fake.rebootCacheClusterMutex.Lock()
	ret, specificReturn := fake.rebootCacheClusterReturnsOnCall[len(fake.rebootCacheClusterArgsForCall)]
	fake.rebootCacheClusterArgsForCall = append(fake.rebootCacheClusterArgsForCall, struct {
		arg1 *elasticache.RebootCacheClusterInput
	}{arg1})
	stub := fake.RebootCacheClusterStub
	fakeReturns := fake.rebootCacheClusterReturns
	fake.recordInvocation("RebootCacheCluster", []interface{}{arg1})
	fake.rebootCacheClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterCallCount() int {
	fake.rebootCacheClusterMutex.RLock()
	defer fake.rebootCacheClusterMutex.RUnlock()
	return len(fake.rebootCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterCalls(stub func(*elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)) {
	fake.rebootCacheClusterMutex.Lock()
	defer fake.rebootCacheClusterMutex.Unlock()
	fake.RebootCacheClusterStub = stub
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterArgsForCall(i int) *elasticache.RebootCacheClusterInput {
	fake.rebootCacheClusterMutex.RLock()
	defer fake.rebootCacheClusterMutex.RUnlock()
	argsForCall := fake.rebootCacheClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterReturns(result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.rebootCacheClusterMutex.Lock()
	defer fake.rebootCacheClusterMutex.Unlock()
	fake.RebootCacheClusterStub = nil
	fake.rebootCacheClusterReturns = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterReturnsOnCall(i int, result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.rebootCacheClusterMutex.Lock()
	defer fake.rebootCacheClusterMutex.Unlock()
	fake.RebootCacheClusterStub = nil
	if fake.rebootCacheClusterReturnsOnCall == nil {
		fake.rebootCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RebootCacheClusterOutput
			result2 error
		})
	}
	fake.rebootCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequest(arg1 *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput) {
	fake.rebootCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.rebootCacheClusterRequestReturnsOnCall[len(fake.rebootCacheClusterRequestArgsForCall)]
	fake.rebootCacheClusterRequestArgsForCall = append(fake.rebootCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.RebootCacheClusterInput
	}{arg1})
	stub := fake.RebootCacheClusterRequestStub
	fakeReturns := fake.rebootCacheClusterRequestReturns
	fake.recordInvocation("RebootCacheClusterRequest", []interface{}{arg1})
	fake.rebootCacheClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestCallCount() int {
	fake.rebootCacheClusterRequestMutex.RLock()
	defer fake.rebootCacheClusterRequestMutex.RUnlock()
	return len(fake.rebootCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestCalls(stub func(*elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput)) {
	fake.rebootCacheClusterRequestMutex.Lock()
	defer fake.rebootCacheClusterRequestMutex.Unlock()
	fake.RebootCacheClusterRequestStub = stub
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestArgsForCall(i int) *elasticache.RebootCacheClusterInput {
	fake.rebootCacheClusterRequestMutex.RLock()
	defer fake.rebootCacheClusterRequestMutex.RUnlock()
	argsForCall := fake.rebootCacheClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.RebootCacheClusterOutput) {
	fake.rebootCacheClusterRequestMutex.Lock()
	defer fake.rebootCacheClusterRequestMutex.Unlock()
	fake.RebootCacheClusterRequestStub = nil
	fake.rebootCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.RebootCacheClusterOutput) {
	fake.rebootCacheClusterRequestMutex.Lock()
	defer fake.rebootCacheClusterRequestMutex.Unlock()
	fake.RebootCacheClusterRequestStub = nil
	if fake.rebootCacheClusterRequestReturnsOnCall == nil {
		fake.rebootCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.RebootCacheClusterOutput
		})
	}
	fake.rebootCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContext(arg1 context.Context, arg2 *elasticache.RebootCacheClusterInput, arg3 ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
	fake.rebootCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.rebootCacheClusterWithContextReturnsOnCall[len(fake.rebootCacheClusterWithContextArgsForCall)]
	fake.rebootCacheClusterWithContextArgsForCall = append(fake.rebootCacheClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.RebootCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RebootCacheClusterWithContextStub
	fakeReturns := fake.rebootCacheClusterWithContextReturns
	fake.recordInvocation("RebootCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.rebootCacheClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextCallCount() int {
	fake.rebootCacheClusterWithContextMutex.RLock()
	defer fake.rebootCacheClusterWithContextMutex.RUnlock()
	return len(fake.rebootCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextCalls(stub func(context.Context, *elasticache.RebootCacheClusterInput, ...request.Option) (*elasticache.RebootCacheClusterOutput, error)) {
	fake.rebootCacheClusterWithContextMutex.Lock()
	defer fake.rebootCacheClusterWithContextMutex.Unlock()
	fake.RebootCacheClusterWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextArgsForCall(i int) (context.Context, *elasticache.RebootCacheClusterInput, []request.Option) {
	fake.rebootCacheClusterWithContextMutex.RLock()
	defer fake.rebootCacheClusterWithContextMutex.RUnlock()
	argsForCall := fake.rebootCacheClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextReturns(result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.rebootCacheClusterWithContextMutex.Lock()
	defer fake.rebootCacheClusterWithContextMutex.Unlock()
	fake.RebootCacheClusterWithContextStub = nil
	fake.rebootCacheClusterWithContextReturns = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.rebootCacheClusterWithContextMutex.Lock()
	defer fake.rebootCacheClusterWithContextMutex.Unlock()
	fake.RebootCacheClusterWithContextStub = nil
	if fake.rebootCacheClusterWithContextReturnsOnCall == nil {
		fake.rebootCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RebootCacheClusterOutput
			result2 error
		})
	}
	fake.rebootCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResource(arg1 *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	fake.removeTagsFromResourceMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceReturnsOnCall[len(fake.removeTagsFromResourceArgsForCall)]
	fake.removeTagsFromResourceArgsForCall = append(fake.removeTagsFromResourceArgsForCall, struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}{arg1})
	stub := fake.RemoveTagsFromResourceStub
	fakeReturns := fake.removeTagsFromResourceReturns
	fake.recordInvocation("RemoveTagsFromResource", []interface{}{arg1})
	fake.removeTagsFromResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceCallCount() int {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	return len(fake.removeTagsFromResourceArgsForCall)
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceCalls(stub func(*elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = stub
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceArgsForCall(i int) *elasticache.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = nil
	fake.removeTagsFromResourceReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = nil
	if fake.removeTagsFromResourceReturnsOnCall == nil {
		fake.removeTagsFromResourceReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.removeTagsFromResourceReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequest(arg1 *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceRequestReturnsOnCall[len(fake.removeTagsFromResourceRequestArgsForCall)]
	fake.removeTagsFromResourceRequestArgsForCall = append(fake.removeTagsFromResourceRequestArgsForCall, struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}{arg1})
	stub := fake.RemoveTagsFromResourceRequestStub
	fakeReturns := fake.removeTagsFromResourceRequestReturns
	fake.recordInvocation("RemoveTagsFromResourceRequest", []interface{}{arg1})
	fake.removeTagsFromResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestCallCount() int {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	return len(fake.removeTagsFromResourceRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestCalls(stub func(*elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage)) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = stub
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestArgsForCall(i int) *elasticache.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestReturns(result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = nil
	fake.removeTagsFromResourceRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = nil
	if fake.removeTagsFromResourceRequestReturnsOnCall == nil {
		fake.removeTagsFromResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TagListMessage
		})
	}
	fake.removeTagsFromResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContext(arg1 context.Context, arg2 *elasticache.RemoveTagsFromResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceWithContextReturnsOnCall[len(fake.removeTagsFromResourceWithContextArgsForCall)]
	fake.removeTagsFromResourceWithContextArgsForCall = append(fake.removeTagsFromResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.RemoveTagsFromResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveTagsFromResourceWithContextStub
	fakeReturns := fake.removeTagsFromResourceWithContextReturns
	fake.recordInvocation("RemoveTagsFromResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeTagsFromResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextCallCount() int {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	return len(fake.removeTagsFromResourceWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextCalls(stub func(context.Context, *elasticache.RemoveTagsFromResourceInput, ...request.Option) (*elasticache.TagListMessage, error)) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextArgsForCall(i int) (context.Context, *elasticache.RemoveTagsFromResourceInput, []request.Option) {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	fake.removeTagsFromResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	if fake.removeTagsFromResourceWithContextReturnsOnCall == nil {
		fake.removeTagsFromResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.removeTagsFromResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroup(arg1 *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.resetCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.resetCacheParameterGroupReturnsOnCall[len(fake.resetCacheParameterGroupArgsForCall)]
	fake.resetCacheParameterGroupArgsForCall = append(fake.resetCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}{arg1})
	stub := fake.ResetCacheParameterGroupStub
	fakeReturns := fake.resetCacheParameterGroupReturns
	fake.recordInvocation("ResetCacheParameterGroup", []interface{}{arg1})
	fake.resetCacheParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupCallCount() int {
	fake.resetCacheParameterGroupMutex.RLock()
	defer fake.resetCacheParameterGroupMutex.RUnlock()
	return len(fake.resetCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupCalls(stub func(*elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)) {
	fake.resetCacheParameterGroupMutex.Lock()
	defer fake.resetCacheParameterGroupMutex.Unlock()
	fake.ResetCacheParameterGroupStub = stub
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupArgsForCall(i int) *elasticache.ResetCacheParameterGroupInput {
	fake.resetCacheParameterGroupMutex.RLock()
	defer fake.resetCacheParameterGroupMutex.RUnlock()
	argsForCall := fake.resetCacheParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.resetCacheParameterGroupMutex.Lock()
	defer fake.resetCacheParameterGroupMutex.Unlock()
	fake.ResetCacheParameterGroupStub = nil
	fake.resetCacheParameterGroupReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.resetCacheParameterGroupMutex.Lock()
	defer fake.resetCacheParameterGroupMutex.Unlock()
	fake.ResetCacheParameterGroupStub = nil
	if fake.resetCacheParameterGroupReturnsOnCall == nil {
		fake.resetCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequest(arg1 *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	fake.resetCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.resetCacheParameterGroupRequestReturnsOnCall[len(fake.resetCacheParameterGroupRequestArgsForCall)]
	fake.resetCacheParameterGroupRequestArgsForCall = append(fake.resetCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}{arg1})
	stub := fake.ResetCacheParameterGroupRequestStub
	fakeReturns := fake.resetCacheParameterGroupRequestReturns
	fake.recordInvocation("ResetCacheParameterGroupRequest", []interface{}{arg1})
	fake.resetCacheParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestCallCount() int {
	fake.resetCacheParameterGroupRequestMutex.RLock()
	defer fake.resetCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.resetCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestCalls(stub func(*elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)) {
	fake.resetCacheParameterGroupRequestMutex.Lock()
	defer fake.resetCacheParameterGroupRequestMutex.Unlock()
	fake.ResetCacheParameterGroupRequestStub = stub
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestArgsForCall(i int) *elasticache.ResetCacheParameterGroupInput {
	fake.resetCacheParameterGroupRequestMutex.RLock()
	defer fake.resetCacheParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.resetCacheParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.resetCacheParameterGroupRequestMutex.Lock()
	defer fake.resetCacheParameterGroupRequestMutex.Unlock()
	fake.ResetCacheParameterGroupRequestStub = nil
	fake.resetCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.resetCacheParameterGroupRequestMutex.Lock()
	defer fake.resetCacheParameterGroupRequestMutex.Unlock()
	fake.ResetCacheParameterGroupRequestStub = nil
	if fake.resetCacheParameterGroupRequestReturnsOnCall == nil {
		fake.resetCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CacheParameterGroupNameMessage
		})
	}
	fake.resetCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.ResetCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.resetCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.resetCacheParameterGroupWithContextReturnsOnCall[len(fake.resetCacheParameterGroupWithContextArgsForCall)]
	fake.resetCacheParameterGroupWithContextArgsForCall = append(fake.resetCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ResetCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ResetCacheParameterGroupWithContextStub
	fakeReturns := fake.resetCacheParameterGroupWithContextReturns
	fake.recordInvocation("ResetCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextCallCount() int {
	fake.resetCacheParameterGroupWithContextMutex.RLock()
	defer fake.resetCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.resetCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.ResetCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)) {
	fake.resetCacheParameterGroupWithContextMutex.Lock()
	defer fake.resetCacheParameterGroupWithContextMutex.Unlock()
	fake.ResetCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ResetCacheParameterGroupInput, []request.Option) {
	fake.resetCacheParameterGroupWithContextMutex.RLock()
	defer fake.resetCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.resetCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.resetCacheParameterGroupWithContextMutex.Lock()
	defer fake.resetCacheParameterGroupWithContextMutex.Unlock()
	fake.ResetCacheParameterGroupWithContextStub = nil
	fake.resetCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.resetCacheParameterGroupWithContextMutex.Lock()
	defer fake.resetCacheParameterGroupWithContextMutex.Unlock()
	fake.ResetCacheParameterGroupWithContextStub = nil
	if fake.resetCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.resetCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngress(arg1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	fake.revokeCacheSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.revokeCacheSecurityGroupIngressReturnsOnCall[len(fake.revokeCacheSecurityGroupIngressArgsForCall)]
	fake.revokeCacheSecurityGroupIngressArgsForCall = append(fake.revokeCacheSecurityGroupIngressArgsForCall, struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}{arg1})
	stub := fake.RevokeCacheSecurityGroupIngressStub
	fakeReturns := fake.revokeCacheSecurityGroupIngressReturns
	fake.recordInvocation("RevokeCacheSecurityGroupIngress", []interface{}{arg1})
	fake.revokeCacheSecurityGroupIngressMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressCallCount() int {
	fake.revokeCacheSecurityGroupIngressMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressMutex.RUnlock()
	return len(fake.revokeCacheSecurityGroupIngressArgsForCall)
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressCalls(stub func(*elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)) {
	fake.revokeCacheSecurityGroupIngressMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressStub = stub
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressArgsForCall(i int) *elasticache.RevokeCacheSecurityGroupIngressInput {
	fake.revokeCacheSecurityGroupIngressMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressMutex.RUnlock()
	argsForCall := fake.revokeCacheSecurityGroupIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressReturns(result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.revokeCacheSecurityGroupIngressMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressStub = nil
	fake.revokeCacheSecurityGroupIngressReturns = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressReturnsOnCall(i int, result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.revokeCacheSecurityGroupIngressMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressStub = nil
	if fake.revokeCacheSecurityGroupIngressReturnsOnCall == nil {
		fake.revokeCacheSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeCacheSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequest(arg1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	fake.revokeCacheSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall[len(fake.revokeCacheSecurityGroupIngressRequestArgsForCall)]
	fake.revokeCacheSecurityGroupIngressRequestArgsForCall = append(fake.revokeCacheSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}{arg1})
	stub := fake.RevokeCacheSecurityGroupIngressRequestStub
	fakeReturns := fake.revokeCacheSecurityGroupIngressRequestReturns
	fake.recordInvocation("RevokeCacheSecurityGroupIngressRequest", []interface{}{arg1})
	fake.revokeCacheSecurityGroupIngressRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestCallCount() int {
	fake.revokeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.revokeCacheSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestCalls(stub func(*elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput)) {
	fake.revokeCacheSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressRequestStub = stub
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestArgsForCall(i int) *elasticache.RevokeCacheSecurityGroupIngressInput {
	fake.revokeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.RUnlock()
	argsForCall := fake.revokeCacheSecurityGroupIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	fake.revokeCacheSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressRequestStub = nil
	fake.revokeCacheSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	fake.revokeCacheSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressRequestStub = nil
	if fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
		})
	}
	fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContext(arg1 context.Context, arg2 *elasticache.RevokeCacheSecurityGroupIngressInput, arg3 ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall[len(fake.revokeCacheSecurityGroupIngressWithContextArgsForCall)]
	fake.revokeCacheSecurityGroupIngressWithContextArgsForCall = append(fake.revokeCacheSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.RevokeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RevokeCacheSecurityGroupIngressWithContextStub
	fakeReturns := fake.revokeCacheSecurityGroupIngressWithContextReturns
	fake.recordInvocation("RevokeCacheSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextCallCount() int {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.revokeCacheSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextCalls(stub func(context.Context, *elasticache.RevokeCacheSecurityGroupIngressInput, ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextArgsForCall(i int) (context.Context, *elasticache.RevokeCacheSecurityGroupIngressInput, []request.Option) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.revokeCacheSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextReturns(result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressWithContextStub = nil
	fake.revokeCacheSecurityGroupIngressWithContextReturns = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeCacheSecurityGroupIngressWithContextStub = nil
	if fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) StartMigration(arg1 *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
	fake.startMigrationMutex.Lock()
	ret, specificReturn := fake.startMigrationReturnsOnCall[len(fake.startMigrationArgsForCall)]
	fake.startMigrationArgsForCall = append(fake.startMigrationArgsForCall, struct {
		arg1 *elasticache.StartMigrationInput
	}{arg1})
	stub := fake.StartMigrationStub
	fakeReturns := fake.startMigrationReturns
	fake.recordInvocation("StartMigration", []interface{}{arg1})
	fake.startMigrationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) StartMigrationCallCount() int {
	fake.startMigrationMutex.RLock()
	defer fake.startMigrationMutex.RUnlock()
	return len(fake.startMigrationArgsForCall)
}

func (fake *FakeElastiCacheAPI) StartMigrationCalls(stub func(*elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error)) {
	fake.startMigrationMutex.Lock()
	defer fake.startMigrationMutex.Unlock()
	fake.StartMigrationStub = stub
}

func (fake *FakeElastiCacheAPI) StartMigrationArgsForCall(i int) *elasticache.StartMigrationInput {
	fake.startMigrationMutex.RLock()
	defer fake.startMigrationMutex.RUnlock()
	argsForCall := fake.startMigrationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) StartMigrationReturns(result1 *elasticache.StartMigrationOutput, result2 error) {
	fake.startMigrationMutex.Lock()
	defer fake.startMigrationMutex.Unlock()
	fake.StartMigrationStub = nil
	fake.startMigrationReturns = struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) StartMigrationReturnsOnCall(i int, result1 *elasticache.StartMigrationOutput, result2 error) {
	fake.startMigrationMutex.Lock()
	defer fake.startMigrationMutex.Unlock()
	fake.StartMigrationStub = nil
	if fake.startMigrationReturnsOnCall == nil {
		fake.startMigrationReturnsOnCall = make(map[int]struct {
			result1 *elasticache.StartMigrationOutput
			result2 error
		})
	}
	fake.startMigrationReturnsOnCall[i] = struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) StartMigrationRequest(arg1 *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput) {
	fake.startMigrationRequestMutex.Lock()
	ret, specificReturn := fake.startMigrationRequestReturnsOnCall[len(fake.startMigrationRequestArgsForCall)]
	fake.startMigrationRequestArgsForCall = append(fake.startMigrationRequestArgsForCall, struct {
		arg1 *elasticache.StartMigrationInput
	}{arg1})
	stub := fake.StartMigrationRequestStub
	fakeReturns := fake.startMigrationRequestReturns
	fake.recordInvocation("StartMigrationRequest", []interface{}{arg1})
	fake.startMigrationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) StartMigrationRequestCallCount() int {
	fake.startMigrationRequestMutex.RLock()
	defer fake.startMigrationRequestMutex.RUnlock()
	return len(fake.startMigrationRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) StartMigrationRequestCalls(stub func(*elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput)) {
	fake.startMigrationRequestMutex.Lock()
	defer fake.startMigrationRequestMutex.Unlock()
	fake.StartMigrationRequestStub = stub
}

func (fake *FakeElastiCacheAPI) StartMigrationRequestArgsForCall(i int) *elasticache.StartMigrationInput {
	fake.startMigrationRequestMutex.RLock()
	defer fake.startMigrationRequestMutex.RUnlock()
	argsForCall := fake.startMigrationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) StartMigrationRequestReturns(result1 *request.Request, result2 *elasticache.StartMigrationOutput) {
	fake.startMigrationRequestMutex.Lock()
	defer fake.startMigrationRequestMutex.Unlock()
	fake.StartMigrationRequestStub = nil
	fake.startMigrationRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.StartMigrationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) StartMigrationRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.StartMigrationOutput) {
	fake.startMigrationRequestMutex.Lock()
	defer fake.startMigrationRequestMutex.Unlock()
	fake.StartMigrationRequestStub = nil
	if fake.startMigrationRequestReturnsOnCall == nil {
		fake.startMigrationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.StartMigrationOutput
		})
	}
	fake.startMigrationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.StartMigrationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) StartMigrationWithContext(arg1 context.Context, arg2 *elasticache.StartMigrationInput, arg3 ...request.Option) (*elasticache.StartMigrationOutput, error) {
	fake.startMigrationWithContextMutex.Lock()
	ret, specificReturn := fake.startMigrationWithContextReturnsOnCall[len(fake.startMigrationWithContextArgsForCall)]
	fake.startMigrationWithContextArgsForCall = append(fake.startMigrationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.StartMigrationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartMigrationWithContextStub
	fakeReturns := fake.startMigrationWithContextReturns
	fake.recordInvocation("StartMigrationWithContext", []interface{}{arg1, arg2, arg3})
	fake.startMigrationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) StartMigrationWithContextCallCount() int {
	fake.startMigrationWithContextMutex.RLock()
	defer fake.startMigrationWithContextMutex.RUnlock()
	return len(fake.startMigrationWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) StartMigrationWithContextCalls(stub func(context.Context, *elasticache.StartMigrationInput, ...request.Option) (*elasticache.StartMigrationOutput, error)) {
	fake.startMigrationWithContextMutex.Lock()
	defer fake.startMigrationWithContextMutex.Unlock()
	fake.StartMigrationWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) StartMigrationWithContextArgsForCall(i int) (context.Context, *elasticache.StartMigrationInput, []request.Option) {
	fake.startMigrationWithContextMutex.RLock()
	defer fake.startMigrationWithContextMutex.RUnlock()
	argsForCall := fake.startMigrationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) StartMigrationWithContextReturns(result1 *elasticache.StartMigrationOutput, result2 error) {
	fake.startMigrationWithContextMutex.Lock()
	defer fake.startMigrationWithContextMutex.Unlock()
	fake.StartMigrationWithContextStub = nil
	fake.startMigrationWithContextReturns = struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) StartMigrationWithContextReturnsOnCall(i int, result1 *elasticache.StartMigrationOutput, result2 error) {
	fake.startMigrationWithContextMutex.Lock()
	defer fake.startMigrationWithContextMutex.Unlock()
	fake.StartMigrationWithContextStub = nil
	if fake.startMigrationWithContextReturnsOnCall == nil {
		fake.startMigrationWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.StartMigrationOutput
			result2 error
		})
	}
	fake.startMigrationWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.StartMigrationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailover(arg1 *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	fake.testFailoverMutex.Lock()
	ret, specificReturn := fake.testFailoverReturnsOnCall[len(fake.testFailoverArgsForCall)]
	fake.testFailoverArgsForCall = append(fake.testFailoverArgsForCall, struct {
		arg1 *elasticache.TestFailoverInput
	}{arg1})
	stub := fake.TestFailoverStub
	fakeReturns := fake.testFailoverReturns
	fake.recordInvocation("TestFailover", []interface{}{arg1})
	fake.testFailoverMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) TestFailoverCallCount() int {
	fake.testFailoverMutex.RLock()
	defer fake.testFailoverMutex.RUnlock()
	return len(fake.testFailoverArgsForCall)
}

func (fake *FakeElastiCacheAPI) TestFailoverCalls(stub func(*elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)) {
	fake.testFailoverMutex.Lock()
	defer fake.testFailoverMutex.Unlock()
	fake.TestFailoverStub = stub
}

func (fake *FakeElastiCacheAPI) TestFailoverArgsForCall(i int) *elasticache.TestFailoverInput {
	fake.testFailoverMutex.RLock()
	defer fake.testFailoverMutex.RUnlock()
	argsForCall := fake.testFailoverArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) TestFailoverReturns(result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.testFailoverMutex.Lock()
	defer fake.testFailoverMutex.Unlock()
	fake.TestFailoverStub = nil
	fake.testFailoverReturns = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverReturnsOnCall(i int, result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.testFailoverMutex.Lock()
	defer fake.testFailoverMutex.Unlock()
	fake.TestFailoverStub = nil
	if fake.testFailoverReturnsOnCall == nil {
		fake.testFailoverReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TestFailoverOutput
			result2 error
		})
	}
	fake.testFailoverReturnsOnCall[i] = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverRequest(arg1 *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput) {
	fake.testFailoverRequestMutex.Lock()
	ret, specificReturn := fake.testFailoverRequestReturnsOnCall[len(fake.testFailoverRequestArgsForCall)]
	fake.testFailoverRequestArgsForCall = append(fake.testFailoverRequestArgsForCall, struct {
		arg1 *elasticache.TestFailoverInput
	}{arg1})
	stub := fake.TestFailoverRequestStub
	fakeReturns := fake.testFailoverRequestReturns
	fake.recordInvocation("TestFailoverRequest", []interface{}{arg1})
	fake.testFailoverRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestCallCount() int {
	fake.testFailoverRequestMutex.RLock()
	defer fake.testFailoverRequestMutex.RUnlock()
	return len(fake.testFailoverRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestCalls(stub func(*elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput)) {
	fake.testFailoverRequestMutex.Lock()
	defer fake.testFailoverRequestMutex.Unlock()
	fake.TestFailoverRequestStub = stub
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestArgsForCall(i int) *elasticache.TestFailoverInput {
	fake.testFailoverRequestMutex.RLock()
	defer fake.testFailoverRequestMutex.RUnlock()
	argsForCall := fake.testFailoverRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestReturns(result1 *request.Request, result2 *elasticache.TestFailoverOutput) {
	fake.testFailoverRequestMutex.Lock()
	defer fake.testFailoverRequestMutex.Unlock()
	fake.TestFailoverRequestStub = nil
	fake.testFailoverRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TestFailoverOutput) {
	fake.testFailoverRequestMutex.Lock()
	defer fake.testFailoverRequestMutex.Unlock()
	fake.TestFailoverRequestStub = nil
	if fake.testFailoverRequestReturnsOnCall == nil {
		fake.testFailoverRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TestFailoverOutput
		})
	}
	fake.testFailoverRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContext(arg1 context.Context, arg2 *elasticache.TestFailoverInput, arg3 ...request.Option) (*elasticache.TestFailoverOutput, error) {
	fake.testFailoverWithContextMutex.Lock()
	ret, specificReturn := fake.testFailoverWithContextReturnsOnCall[len(fake.testFailoverWithContextArgsForCall)]
	fake.testFailoverWithContextArgsForCall = append(fake.testFailoverWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.TestFailoverInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TestFailoverWithContextStub
	fakeReturns := fake.testFailoverWithContextReturns
	fake.recordInvocation("TestFailoverWithContext", []interface{}{arg1, arg2, arg3})
	fake.testFailoverWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextCallCount() int {
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	return len(fake.testFailoverWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextCalls(stub func(context.Context, *elasticache.TestFailoverInput, ...request.Option) (*elasticache.TestFailoverOutput, error)) {
	fake.testFailoverWithContextMutex.Lock()
	defer fake.testFailoverWithContextMutex.Unlock()
	fake.TestFailoverWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextArgsForCall(i int) (context.Context, *elasticache.TestFailoverInput, []request.Option) {
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	argsForCall := fake.testFailoverWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextReturns(result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.testFailoverWithContextMutex.Lock()
	defer fake.testFailoverWithContextMutex.Unlock()
	fake.TestFailoverWithContextStub = nil
	fake.testFailoverWithContextReturns = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextReturnsOnCall(i int, result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.testFailoverWithContextMutex.Lock()
	defer fake.testFailoverWithContextMutex.Unlock()
	fake.TestFailoverWithContextStub = nil
	if fake.testFailoverWithContextReturnsOnCall == nil {
		fake.testFailoverWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TestFailoverOutput
			result2 error
		})
	}
	fake.testFailoverWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailable(arg1 *elasticache.DescribeCacheClustersInput) error {
	fake.waitUntilCacheClusterAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterAvailableReturnsOnCall[len(fake.waitUntilCacheClusterAvailableArgsForCall)]
	fake.waitUntilCacheClusterAvailableArgsForCall = append(fake.waitUntilCacheClusterAvailableArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	stub := fake.WaitUntilCacheClusterAvailableStub
	fakeReturns := fake.waitUntilCacheClusterAvailableReturns
	fake.recordInvocation("WaitUntilCacheClusterAvailable", []interface{}{arg1})
	fake.waitUntilCacheClusterAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableCallCount() int {
	fake.waitUntilCacheClusterAvailableMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableMutex.RUnlock()
	return len(fake.waitUntilCacheClusterAvailableArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableCalls(stub func(*elasticache.DescribeCacheClustersInput) error) {
	fake.waitUntilCacheClusterAvailableMutex.Lock()
	defer fake.waitUntilCacheClusterAvailableMutex.Unlock()
	fake.WaitUntilCacheClusterAvailableStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.waitUntilCacheClusterAvailableMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilCacheClusterAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableReturns(result1 error) {
	fake.waitUntilCacheClusterAvailableMutex.Lock()
	defer fake.waitUntilCacheClusterAvailableMutex.Unlock()
	fake.WaitUntilCacheClusterAvailableStub = nil
	fake.waitUntilCacheClusterAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilCacheClusterAvailableMutex.Lock()
	defer fake.waitUntilCacheClusterAvailableMutex.Unlock()
	fake.WaitUntilCacheClusterAvailableStub = nil
	if fake.waitUntilCacheClusterAvailableReturnsOnCall == nil {
		fake.waitUntilCacheClusterAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCacheClusterAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall[len(fake.waitUntilCacheClusterAvailableWithContextArgsForCall)]
	fake.waitUntilCacheClusterAvailableWithContextArgsForCall = append(fake.waitUntilCacheClusterAvailableWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilCacheClusterAvailableWithContextStub
	fakeReturns := fake.waitUntilCacheClusterAvailableWithContextReturns
	fake.recordInvocation("WaitUntilCacheClusterAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCacheClusterAvailableWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextCallCount() int {
	fake.waitUntilCacheClusterAvailableWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilCacheClusterAvailableWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.WaiterOption) error) {
	fake.waitUntilCacheClusterAvailableWithContextMutex.Lock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.Unlock()
	fake.WaitUntilCacheClusterAvailableWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheClustersInput, []request.WaiterOption) {
	fake.waitUntilCacheClusterAvailableWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilCacheClusterAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextReturns(result1 error) {
	fake.waitUntilCacheClusterAvailableWithContextMutex.Lock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.Unlock()
	fake.WaitUntilCacheClusterAvailableWithContextStub = nil
	fake.waitUntilCacheClusterAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilCacheClusterAvailableWithContextMutex.Lock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.Unlock()
	fake.WaitUntilCacheClusterAvailableWithContextStub = nil
	if fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeleted(arg1 *elasticache.DescribeCacheClustersInput) error {
	fake.waitUntilCacheClusterDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterDeletedReturnsOnCall[len(fake.waitUntilCacheClusterDeletedArgsForCall)]
	fake.waitUntilCacheClusterDeletedArgsForCall = append(fake.waitUntilCacheClusterDeletedArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	stub := fake.WaitUntilCacheClusterDeletedStub
	fakeReturns := fake.waitUntilCacheClusterDeletedReturns
	fake.recordInvocation("WaitUntilCacheClusterDeleted", []interface{}{arg1})
	fake.waitUntilCacheClusterDeletedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedCallCount() int {
	fake.waitUntilCacheClusterDeletedMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedMutex.RUnlock()
	return len(fake.waitUntilCacheClusterDeletedArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedCalls(stub func(*elasticache.DescribeCacheClustersInput) error) {
	fake.waitUntilCacheClusterDeletedMutex.Lock()
	defer fake.waitUntilCacheClusterDeletedMutex.Unlock()
	fake.WaitUntilCacheClusterDeletedStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.waitUntilCacheClusterDeletedMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilCacheClusterDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedReturns(result1 error) {
	fake.waitUntilCacheClusterDeletedMutex.Lock()
	defer fake.waitUntilCacheClusterDeletedMutex.Unlock()
	fake.WaitUntilCacheClusterDeletedStub = nil
	fake.waitUntilCacheClusterDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilCacheClusterDeletedMutex.Lock()
	defer fake.waitUntilCacheClusterDeletedMutex.Unlock()
	fake.WaitUntilCacheClusterDeletedStub = nil
	if fake.waitUntilCacheClusterDeletedReturnsOnCall == nil {
		fake.waitUntilCacheClusterDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCacheClusterDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall[len(fake.waitUntilCacheClusterDeletedWithContextArgsForCall)]
	fake.waitUntilCacheClusterDeletedWithContextArgsForCall = append(fake.waitUntilCacheClusterDeletedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilCacheClusterDeletedWithContextStub
	fakeReturns := fake.waitUntilCacheClusterDeletedWithContextReturns
	fake.recordInvocation("WaitUntilCacheClusterDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCacheClusterDeletedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextCallCount() int {
	fake.waitUntilCacheClusterDeletedWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilCacheClusterDeletedWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.WaiterOption) error) {
	fake.waitUntilCacheClusterDeletedWithContextMutex.Lock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.Unlock()
	fake.WaitUntilCacheClusterDeletedWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheClustersInput, []request.WaiterOption) {
	fake.waitUntilCacheClusterDeletedWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilCacheClusterDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextReturns(result1 error) {
	fake.waitUntilCacheClusterDeletedWithContextMutex.Lock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.Unlock()
	fake.WaitUntilCacheClusterDeletedWithContextStub = nil
	fake.waitUntilCacheClusterDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilCacheClusterDeletedWithContextMutex.Lock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.Unlock()
	fake.WaitUntilCacheClusterDeletedWithContextStub = nil
	if fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailable(arg1 *elasticache.DescribeReplicationGroupsInput) error {
	fake.waitUntilReplicationGroupAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupAvailableReturnsOnCall[len(fake.waitUntilReplicationGroupAvailableArgsForCall)]
	fake.waitUntilReplicationGroupAvailableArgsForCall = append(fake.waitUntilReplicationGroupAvailableArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	stub := fake.WaitUntilReplicationGroupAvailableStub
	fakeReturns := fake.waitUntilReplicationGroupAvailableReturns
	fake.recordInvocation("WaitUntilReplicationGroupAvailable", []interface{}{arg1})
	fake.waitUntilReplicationGroupAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableCallCount() int {
	fake.waitUntilReplicationGroupAvailableMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupAvailableArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableCalls(stub func(*elasticache.DescribeReplicationGroupsInput) error) {
	fake.waitUntilReplicationGroupAvailableMutex.Lock()
	defer fake.waitUntilReplicationGroupAvailableMutex.Unlock()
	fake.WaitUntilReplicationGroupAvailableStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.waitUntilReplicationGroupAvailableMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilReplicationGroupAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableReturns(result1 error) {
	fake.waitUntilReplicationGroupAvailableMutex.Lock()
	defer fake.waitUntilReplicationGroupAvailableMutex.Unlock()
	fake.WaitUntilReplicationGroupAvailableStub = nil
	fake.waitUntilReplicationGroupAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilReplicationGroupAvailableMutex.Lock()
	defer fake.waitUntilReplicationGroupAvailableMutex.Unlock()
	fake.WaitUntilReplicationGroupAvailableStub = nil
	if fake.waitUntilReplicationGroupAvailableReturnsOnCall == nil {
		fake.waitUntilReplicationGroupAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContext(arg1 context.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall[len(fake.waitUntilReplicationGroupAvailableWithContextArgsForCall)]
	fake.waitUntilReplicationGroupAvailableWithContextArgsForCall = append(fake.waitUntilReplicationGroupAvailableWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilReplicationGroupAvailableWithContextStub
	fakeReturns := fake.waitUntilReplicationGroupAvailableWithContextReturns
	fake.recordInvocation("WaitUntilReplicationGroupAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextCallCount() int {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupAvailableWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextCalls(stub func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.WaiterOption) error) {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Lock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.Unlock()
	fake.WaitUntilReplicationGroupAvailableWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReplicationGroupsInput, []request.WaiterOption) {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilReplicationGroupAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextReturns(result1 error) {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Lock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.Unlock()
	fake.WaitUntilReplicationGroupAvailableWithContextStub = nil
	fake.waitUntilReplicationGroupAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Lock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.Unlock()
	fake.WaitUntilReplicationGroupAvailableWithContextStub = nil
	if fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeleted(arg1 *elasticache.DescribeReplicationGroupsInput) error {
	fake.waitUntilReplicationGroupDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupDeletedReturnsOnCall[len(fake.waitUntilReplicationGroupDeletedArgsForCall)]
	fake.waitUntilReplicationGroupDeletedArgsForCall = append(fake.waitUntilReplicationGroupDeletedArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	stub := fake.WaitUntilReplicationGroupDeletedStub
	fakeReturns := fake.waitUntilReplicationGroupDeletedReturns
	fake.recordInvocation("WaitUntilReplicationGroupDeleted", []interface{}{arg1})
	fake.waitUntilReplicationGroupDeletedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedCallCount() int {
	fake.waitUntilReplicationGroupDeletedMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupDeletedArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedCalls(stub func(*elasticache.DescribeReplicationGroupsInput) error) {
	fake.waitUntilReplicationGroupDeletedMutex.Lock()
	defer fake.waitUntilReplicationGroupDeletedMutex.Unlock()
	fake.WaitUntilReplicationGroupDeletedStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.waitUntilReplicationGroupDeletedMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilReplicationGroupDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedReturns(result1 error) {
	fake.waitUntilReplicationGroupDeletedMutex.Lock()
	defer fake.waitUntilReplicationGroupDeletedMutex.Unlock()
	fake.WaitUntilReplicationGroupDeletedStub = nil
	fake.waitUntilReplicationGroupDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilReplicationGroupDeletedMutex.Lock()
	defer fake.waitUntilReplicationGroupDeletedMutex.Unlock()
	fake.WaitUntilReplicationGroupDeletedStub = nil
	if fake.waitUntilReplicationGroupDeletedReturnsOnCall == nil {
		fake.waitUntilReplicationGroupDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContext(arg1 context.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall[len(fake.waitUntilReplicationGroupDeletedWithContextArgsForCall)]
	fake.waitUntilReplicationGroupDeletedWithContextArgsForCall = append(fake.waitUntilReplicationGroupDeletedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilReplicationGroupDeletedWithContextStub
	fakeReturns := fake.waitUntilReplicationGroupDeletedWithContextReturns
	fake.recordInvocation("WaitUntilReplicationGroupDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextCallCount() int {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupDeletedWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextCalls(stub func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.WaiterOption) error) {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Lock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.Unlock()
	fake.WaitUntilReplicationGroupDeletedWithContextStub = stub
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReplicationGroupsInput, []request.WaiterOption) {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilReplicationGroupDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextReturns(result1 error) {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Lock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.Unlock()
	fake.WaitUntilReplicationGroupDeletedWithContextStub = nil
	fake.waitUntilReplicationGroupDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Lock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.Unlock()
	fake.WaitUntilReplicationGroupDeletedWithContextStub = nil
	if fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	fake.authorizeCacheSecurityGroupIngressMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.RUnlock()
	fake.authorizeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.RUnlock()
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	fake.batchApplyUpdateActionMutex.RLock()
	defer fake.batchApplyUpdateActionMutex.RUnlock()
	fake.batchApplyUpdateActionRequestMutex.RLock()
	defer fake.batchApplyUpdateActionRequestMutex.RUnlock()
	fake.batchApplyUpdateActionWithContextMutex.RLock()
	defer fake.batchApplyUpdateActionWithContextMutex.RUnlock()
	fake.batchStopUpdateActionMutex.RLock()
	defer fake.batchStopUpdateActionMutex.RUnlock()
	fake.batchStopUpdateActionRequestMutex.RLock()
	defer fake.batchStopUpdateActionRequestMutex.RUnlock()
	fake.batchStopUpdateActionWithContextMutex.RLock()
	defer fake.batchStopUpdateActionWithContextMutex.RUnlock()
	fake.completeMigrationMutex.RLock()
	defer fake.completeMigrationMutex.RUnlock()
	fake.completeMigrationRequestMutex.RLock()
	defer fake.completeMigrationRequestMutex.RUnlock()
	fake.completeMigrationWithContextMutex.RLock()
	defer fake.completeMigrationWithContextMutex.RUnlock()
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	fake.createCacheClusterMutex.RLock()
	defer fake.createCacheClusterMutex.RUnlock()
	fake.createCacheClusterRequestMutex.RLock()
	defer fake.createCacheClusterRequestMutex.RUnlock()
	fake.createCacheClusterWithContextMutex.RLock()
	defer fake.createCacheClusterWithContextMutex.RUnlock()
	fake.createCacheParameterGroupMutex.RLock()
	defer fake.createCacheParameterGroupMutex.RUnlock()
	fake.createCacheParameterGroupRequestMutex.RLock()
	defer fake.createCacheParameterGroupRequestMutex.RUnlock()
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	fake.createCacheSecurityGroupMutex.RLock()
	defer fake.createCacheSecurityGroupMutex.RUnlock()
	fake.createCacheSecurityGroupRequestMutex.RLock()
	defer fake.createCacheSecurityGroupRequestMutex.RUnlock()
	fake.createCacheSecurityGroupWithContextMutex.RLock()
	defer fake.createCacheSecurityGroupWithContextMutex.RUnlock()
	fake.createCacheSubnetGroupMutex.RLock()
	defer fake.createCacheSubnetGroupMutex.RUnlock()
	fake.createCacheSubnetGroupRequestMutex.RLock()
	defer fake.createCacheSubnetGroupRequestMutex.RUnlock()
	fake.createCacheSubnetGroupWithContextMutex.RLock()
	defer fake.createCacheSubnetGroupWithContextMutex.RUnlock()
	fake.createGlobalReplicationGroupMutex.RLock()
	defer fake.createGlobalReplicationGroupMutex.RUnlock()
	fake.createGlobalReplicationGroupRequestMutex.RLock()
	defer fake.createGlobalReplicationGroupRequestMutex.RUnlock()
	fake.createGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.createGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.createReplicationGroupMutex.RLock()
	defer fake.createReplicationGroupMutex.RUnlock()
	fake.createReplicationGroupRequestMutex.RLock()
	defer fake.createReplicationGroupRequestMutex.RUnlock()
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupMutex.RUnlock()
	fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupRequestMutex.RUnlock()
	fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.decreaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.decreaseReplicaCountMutex.RLock()
	defer fake.decreaseReplicaCountMutex.RUnlock()
	fake.decreaseReplicaCountRequestMutex.RLock()
	defer fake.decreaseReplicaCountRequestMutex.RUnlock()
	fake.decreaseReplicaCountWithContextMutex.RLock()
	defer fake.decreaseReplicaCountWithContextMutex.RUnlock()
	fake.deleteCacheClusterMutex.RLock()
	defer fake.deleteCacheClusterMutex.RUnlock()
	fake.deleteCacheClusterRequestMutex.RLock()
	defer fake.deleteCacheClusterRequestMutex.RUnlock()
	fake.deleteCacheClusterWithContextMutex.RLock()
	defer fake.deleteCacheClusterWithContextMutex.RUnlock()
	fake.deleteCacheParameterGroupMutex.RLock()
	defer fake.deleteCacheParameterGroupMutex.RUnlock()
	fake.deleteCacheParameterGroupRequestMutex.RLock()
	defer fake.deleteCacheParameterGroupRequestMutex.RUnlock()
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	fake.deleteCacheSecurityGroupMutex.RLock()
	defer fake.deleteCacheSecurityGroupMutex.RUnlock()
	fake.deleteCacheSecurityGroupRequestMutex.RLock()
	defer fake.deleteCacheSecurityGroupRequestMutex.RUnlock()
	fake.deleteCacheSecurityGroupWithContextMutex.RLock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.RUnlock()
	fake.deleteCacheSubnetGroupMutex.RLock()
	defer fake.deleteCacheSubnetGroupMutex.RUnlock()
	fake.deleteCacheSubnetGroupRequestMutex.RLock()
	defer fake.deleteCacheSubnetGroupRequestMutex.RUnlock()
	fake.deleteCacheSubnetGroupWithContextMutex.RLock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.RUnlock()
	fake.deleteGlobalReplicationGroupMutex.RLock()
	defer fake.deleteGlobalReplicationGroupMutex.RUnlock()
	fake.deleteGlobalReplicationGroupRequestMutex.RLock()
	defer fake.deleteGlobalReplicationGroupRequestMutex.RUnlock()
	fake.deleteGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.deleteGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.deleteReplicationGroupMutex.RLock()
	defer fake.deleteReplicationGroupMutex.RUnlock()
	fake.deleteReplicationGroupRequestMutex.RLock()
	defer fake.deleteReplicationGroupRequestMutex.RUnlock()
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	fake.describeCacheClustersMutex.RLock()
	defer fake.describeCacheClustersMutex.RUnlock()
	fake.describeCacheClustersPagesMutex.RLock()
	defer fake.describeCacheClustersPagesMutex.RUnlock()
	fake.describeCacheClustersPagesWithContextMutex.RLock()
	defer fake.describeCacheClustersPagesWithContextMutex.RUnlock()
	fake.describeCacheClustersRequestMutex.RLock()
	defer fake.describeCacheClustersRequestMutex.RUnlock()
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	fake.describeCacheEngineVersionsMutex.RLock()
	defer fake.describeCacheEngineVersionsMutex.RUnlock()
	fake.describeCacheEngineVersionsPagesMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesMutex.RUnlock()
	fake.describeCacheEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.RUnlock()
	fake.describeCacheEngineVersionsRequestMutex.RLock()
	defer fake.describeCacheEngineVersionsRequestMutex.RUnlock()
	fake.describeCacheEngineVersionsWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsWithContextMutex.RUnlock()
	fake.describeCacheParameterGroupsMutex.RLock()
	defer fake.describeCacheParameterGroupsMutex.RUnlock()
	fake.describeCacheParameterGroupsPagesMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesMutex.RUnlock()
	fake.describeCacheParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.RUnlock()
	fake.describeCacheParameterGroupsRequestMutex.RLock()
	defer fake.describeCacheParameterGroupsRequestMutex.RUnlock()
	fake.describeCacheParameterGroupsWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsWithContextMutex.RUnlock()
	fake.describeCacheParametersMutex.RLock()
	defer fake.describeCacheParametersMutex.RUnlock()
	fake.describeCacheParametersPagesMutex.RLock()
	defer fake.describeCacheParametersPagesMutex.RUnlock()
	fake.describeCacheParametersPagesWithContextMutex.RLock()
	defer fake.describeCacheParametersPagesWithContextMutex.RUnlock()
	fake.describeCacheParametersRequestMutex.RLock()
	defer fake.describeCacheParametersRequestMutex.RUnlock()
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	fake.describeCacheSecurityGroupsMutex.RLock()
	defer fake.describeCacheSecurityGroupsMutex.RUnlock()
	fake.describeCacheSecurityGroupsPagesMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesMutex.RUnlock()
	fake.describeCacheSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.RUnlock()
	fake.describeCacheSecurityGroupsRequestMutex.RLock()
	defer fake.describeCacheSecurityGroupsRequestMutex.RUnlock()
	fake.describeCacheSecurityGroupsWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.RUnlock()
	fake.describeCacheSubnetGroupsMutex.RLock()
	defer fake.describeCacheSubnetGroupsMutex.RUnlock()
	fake.describeCacheSubnetGroupsPagesMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesMutex.RUnlock()
	fake.describeCacheSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.RUnlock()
	fake.describeCacheSubnetGroupsRequestMutex.RLock()
	defer fake.describeCacheSubnetGroupsRequestMutex.RUnlock()
	fake.describeCacheSubnetGroupsWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.RUnlock()
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	fake.describeGlobalReplicationGroupsMutex.RLock()
	defer fake.describeGlobalReplicationGroupsMutex.RUnlock()
	fake.describeGlobalReplicationGroupsPagesMutex.RLock()
	defer fake.describeGlobalReplicationGroupsPagesMutex.RUnlock()
	fake.describeGlobalReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeGlobalReplicationGroupsPagesWithContextMutex.RUnlock()
	fake.describeGlobalReplicationGroupsRequestMutex.RLock()
	defer fake.describeGlobalReplicationGroupsRequestMutex.RUnlock()
	fake.describeGlobalReplicationGroupsWithContextMutex.RLock()
	defer fake.describeGlobalReplicationGroupsWithContextMutex.RUnlock()
	fake.describeReplicationGroupsMutex.RLock()
	defer fake.describeReplicationGroupsMutex.RUnlock()
	fake.describeReplicationGroupsPagesMutex.RLock()
	defer fake.describeReplicationGroupsPagesMutex.RUnlock()
	fake.describeReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.RUnlock()
	fake.describeReplicationGroupsRequestMutex.RLock()
	defer fake.describeReplicationGroupsRequestMutex.RUnlock()
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesMutex.RLock()
	defer fake.describeReservedCacheNodesMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsPagesMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsRequestMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesPagesMutex.RLock()
	defer fake.describeReservedCacheNodesPagesMutex.RUnlock()
	fake.describeReservedCacheNodesPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesRequestMutex.RLock()
	defer fake.describeReservedCacheNodesRequestMutex.RUnlock()
	fake.describeReservedCacheNodesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesWithContextMutex.RUnlock()
	fake.describeServiceUpdatesMutex.RLock()
	defer fake.describeServiceUpdatesMutex.RUnlock()
	fake.describeServiceUpdatesPagesMutex.RLock()
	defer fake.describeServiceUpdatesPagesMutex.RUnlock()
	fake.describeServiceUpdatesPagesWithContextMutex.RLock()
	defer fake.describeServiceUpdatesPagesWithContextMutex.RUnlock()
	fake.describeServiceUpdatesRequestMutex.RLock()
	defer fake.describeServiceUpdatesRequestMutex.RUnlock()
	fake.describeServiceUpdatesWithContextMutex.RLock()
	defer fake.describeServiceUpdatesWithContextMutex.RUnlock()
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	fake.describeUpdateActionsMutex.RLock()
	defer fake.describeUpdateActionsMutex.RUnlock()
	fake.describeUpdateActionsPagesMutex.RLock()
	defer fake.describeUpdateActionsPagesMutex.RUnlock()
	fake.describeUpdateActionsPagesWithContextMutex.RLock()
	defer fake.describeUpdateActionsPagesWithContextMutex.RUnlock()
	fake.describeUpdateActionsRequestMutex.RLock()
	defer fake.describeUpdateActionsRequestMutex.RUnlock()
	fake.describeUpdateActionsWithContextMutex.RLock()
	defer fake.describeUpdateActionsWithContextMutex.RUnlock()
	fake.disassociateGlobalReplicationGroupMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupMutex.RUnlock()
	fake.disassociateGlobalReplicationGroupRequestMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupRequestMutex.RUnlock()
	fake.disassociateGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.disassociateGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.failoverGlobalReplicationGroupMutex.RLock()
	defer fake.failoverGlobalReplicationGroupMutex.RUnlock()
	fake.failoverGlobalReplicationGroupRequestMutex.RLock()
	defer fake.failoverGlobalReplicationGroupRequestMutex.RUnlock()
	fake.failoverGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.failoverGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.increaseNodeGroupsInGlobalReplicationGroupMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupMutex.RUnlock()
	fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupRequestMutex.RUnlock()
	fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.increaseNodeGroupsInGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.increaseReplicaCountMutex.RLock()
	defer fake.increaseReplicaCountMutex.RUnlock()
	fake.increaseReplicaCountRequestMutex.RLock()
	defer fake.increaseReplicaCountRequestMutex.RUnlock()
	fake.increaseReplicaCountWithContextMutex.RLock()
	defer fake.increaseReplicaCountWithContextMutex.RUnlock()
	fake.listAllowedNodeTypeModificationsMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsMutex.RUnlock()
	fake.listAllowedNodeTypeModificationsRequestMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.RUnlock()
	fake.listAllowedNodeTypeModificationsWithContextMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.modifyCacheClusterMutex.RLock()
	defer fake.modifyCacheClusterMutex.RUnlock()
	fake.modifyCacheClusterRequestMutex.RLock()
	defer fake.modifyCacheClusterRequestMutex.RUnlock()
	fake.modifyCacheClusterWithContextMutex.RLock()
	defer fake.modifyCacheClusterWithContextMutex.RUnlock()
	fake.modifyCacheParameterGroupMutex.RLock()
	defer fake.modifyCacheParameterGroupMutex.RUnlock()
	fake.modifyCacheParameterGroupRequestMutex.RLock()
	defer fake.modifyCacheParameterGroupRequestMutex.RUnlock()
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	fake.modifyCacheSubnetGroupMutex.RLock()
	defer fake.modifyCacheSubnetGroupMutex.RUnlock()
	fake.modifyCacheSubnetGroupRequestMutex.RLock()
	defer fake.modifyCacheSubnetGroupRequestMutex.RUnlock()
	fake.modifyCacheSubnetGroupWithContextMutex.RLock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.RUnlock()
	fake.modifyGlobalReplicationGroupMutex.RLock()
	defer fake.modifyGlobalReplicationGroupMutex.RUnlock()
	fake.modifyGlobalReplicationGroupRequestMutex.RLock()
	defer fake.modifyGlobalReplicationGroupRequestMutex.RUnlock()
	fake.modifyGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.modifyGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.modifyReplicationGroupMutex.RLock()
	defer fake.modifyReplicationGroupMutex.RUnlock()
	fake.modifyReplicationGroupRequestMutex.RLock()
	defer fake.modifyReplicationGroupRequestMutex.RUnlock()
	fake.modifyReplicationGroupShardConfigurationMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.RUnlock()
	fake.modifyReplicationGroupShardConfigurationRequestMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.RUnlock()
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.RUnlock()
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	fake.purchaseReservedCacheNodesOfferingMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.RUnlock()
	fake.purchaseReservedCacheNodesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.RUnlock()
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.RUnlock()
	fake.rebalanceSlotsInGlobalReplicationGroupMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupMutex.RUnlock()
	fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupRequestMutex.RUnlock()
	fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.RLock()
	defer fake.rebalanceSlotsInGlobalReplicationGroupWithContextMutex.RUnlock()
	fake.rebootCacheClusterMutex.RLock()
	defer fake.rebootCacheClusterMutex.RUnlock()
	fake.rebootCacheClusterRequestMutex.RLock()
	defer fake.rebootCacheClusterRequestMutex.RUnlock()
	fake.rebootCacheClusterWithContextMutex.RLock()
	defer fake.rebootCacheClusterWithContextMutex.RUnlock()
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	fake.resetCacheParameterGroupMutex.RLock()
	defer fake.resetCacheParameterGroupMutex.RUnlock()
	fake.resetCacheParameterGroupRequestMutex.RLock()
	defer fake.resetCacheParameterGroupRequestMutex.RUnlock()
	fake.resetCacheParameterGroupWithContextMutex.RLock()
	defer fake.resetCacheParameterGroupWithContextMutex.RUnlock()
	fake.revokeCacheSecurityGroupIngressMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressMutex.RUnlock()
	fake.revokeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.RUnlock()
	fake.revokeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	fake.startMigrationMutex.RLock()
	defer fake.startMigrationMutex.RUnlock()
	fake.startMigrationRequestMutex.RLock()
	defer fake.startMigrationRequestMutex.RUnlock()
	fake.startMigrationWithContextMutex.RLock()
	defer fake.startMigrationWithContextMutex.RUnlock()
	fake.testFailoverMutex.RLock()
	defer fake.testFailoverMutex.RUnlock()
	fake.testFailoverRequestMutex.RLock()
	defer fake.testFailoverRequestMutex.RUnlock()
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	fake.waitUntilCacheClusterAvailableMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableMutex.RUnlock()
	fake.waitUntilCacheClusterAvailableWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.RUnlock()
	fake.waitUntilCacheClusterDeletedMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedMutex.RUnlock()
	fake.waitUntilCacheClusterDeletedWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.RUnlock()
	fake.waitUntilReplicationGroupAvailableMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableMutex.RUnlock()
	fake.waitUntilReplicationGroupAvailableWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.RUnlock()
	fake.waitUntilReplicationGroupDeletedMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedMutex.RUnlock()
	fake.waitUntilReplicationGroupDeletedWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeElastiCacheAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ elasticacheiface.ElastiCacheAPI = new(FakeElastiCacheAPI)
