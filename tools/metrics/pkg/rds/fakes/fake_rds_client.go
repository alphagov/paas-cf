// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/aws/aws-sdk-go/service/rds/rdsiface"
)

type FakeRDSAPI struct {
	AddRoleToDBClusterStub        func(*rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error)
	addRoleToDBClusterMutex       sync.RWMutex
	addRoleToDBClusterArgsForCall []struct {
		arg1 *rds.AddRoleToDBClusterInput
	}
	addRoleToDBClusterReturns struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}
	addRoleToDBClusterReturnsOnCall map[int]struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}
	AddRoleToDBClusterRequestStub        func(*rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput)
	addRoleToDBClusterRequestMutex       sync.RWMutex
	addRoleToDBClusterRequestArgsForCall []struct {
		arg1 *rds.AddRoleToDBClusterInput
	}
	addRoleToDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBClusterOutput
	}
	addRoleToDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBClusterOutput
	}
	AddRoleToDBClusterWithContextStub        func(context.Context, *rds.AddRoleToDBClusterInput, ...request.Option) (*rds.AddRoleToDBClusterOutput, error)
	addRoleToDBClusterWithContextMutex       sync.RWMutex
	addRoleToDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.AddRoleToDBClusterInput
		arg3 []request.Option
	}
	addRoleToDBClusterWithContextReturns struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}
	addRoleToDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}
	AddRoleToDBInstanceStub        func(*rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error)
	addRoleToDBInstanceMutex       sync.RWMutex
	addRoleToDBInstanceArgsForCall []struct {
		arg1 *rds.AddRoleToDBInstanceInput
	}
	addRoleToDBInstanceReturns struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}
	addRoleToDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}
	AddRoleToDBInstanceRequestStub        func(*rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput)
	addRoleToDBInstanceRequestMutex       sync.RWMutex
	addRoleToDBInstanceRequestArgsForCall []struct {
		arg1 *rds.AddRoleToDBInstanceInput
	}
	addRoleToDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBInstanceOutput
	}
	addRoleToDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBInstanceOutput
	}
	AddRoleToDBInstanceWithContextStub        func(context.Context, *rds.AddRoleToDBInstanceInput, ...request.Option) (*rds.AddRoleToDBInstanceOutput, error)
	addRoleToDBInstanceWithContextMutex       sync.RWMutex
	addRoleToDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.AddRoleToDBInstanceInput
		arg3 []request.Option
	}
	addRoleToDBInstanceWithContextReturns struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}
	addRoleToDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}
	AddSourceIdentifierToSubscriptionStub        func(*rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error)
	addSourceIdentifierToSubscriptionMutex       sync.RWMutex
	addSourceIdentifierToSubscriptionArgsForCall []struct {
		arg1 *rds.AddSourceIdentifierToSubscriptionInput
	}
	addSourceIdentifierToSubscriptionReturns struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}
	addSourceIdentifierToSubscriptionReturnsOnCall map[int]struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}
	AddSourceIdentifierToSubscriptionRequestStub        func(*rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput)
	addSourceIdentifierToSubscriptionRequestMutex       sync.RWMutex
	addSourceIdentifierToSubscriptionRequestArgsForCall []struct {
		arg1 *rds.AddSourceIdentifierToSubscriptionInput
	}
	addSourceIdentifierToSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *rds.AddSourceIdentifierToSubscriptionOutput
	}
	addSourceIdentifierToSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.AddSourceIdentifierToSubscriptionOutput
	}
	AddSourceIdentifierToSubscriptionWithContextStub        func(context.Context, *rds.AddSourceIdentifierToSubscriptionInput, ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error)
	addSourceIdentifierToSubscriptionWithContextMutex       sync.RWMutex
	addSourceIdentifierToSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.AddSourceIdentifierToSubscriptionInput
		arg3 []request.Option
	}
	addSourceIdentifierToSubscriptionWithContextReturns struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}
	addSourceIdentifierToSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}
	AddTagsToResourceStub        func(*rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error)
	addTagsToResourceMutex       sync.RWMutex
	addTagsToResourceArgsForCall []struct {
		arg1 *rds.AddTagsToResourceInput
	}
	addTagsToResourceReturns struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}
	addTagsToResourceReturnsOnCall map[int]struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}
	AddTagsToResourceRequestStub        func(*rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput)
	addTagsToResourceRequestMutex       sync.RWMutex
	addTagsToResourceRequestArgsForCall []struct {
		arg1 *rds.AddTagsToResourceInput
	}
	addTagsToResourceRequestReturns struct {
		result1 *request.Request
		result2 *rds.AddTagsToResourceOutput
	}
	addTagsToResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.AddTagsToResourceOutput
	}
	AddTagsToResourceWithContextStub        func(context.Context, *rds.AddTagsToResourceInput, ...request.Option) (*rds.AddTagsToResourceOutput, error)
	addTagsToResourceWithContextMutex       sync.RWMutex
	addTagsToResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.AddTagsToResourceInput
		arg3 []request.Option
	}
	addTagsToResourceWithContextReturns struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}
	addTagsToResourceWithContextReturnsOnCall map[int]struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}
	ApplyPendingMaintenanceActionStub        func(*rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error)
	applyPendingMaintenanceActionMutex       sync.RWMutex
	applyPendingMaintenanceActionArgsForCall []struct {
		arg1 *rds.ApplyPendingMaintenanceActionInput
	}
	applyPendingMaintenanceActionReturns struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}
	applyPendingMaintenanceActionReturnsOnCall map[int]struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}
	ApplyPendingMaintenanceActionRequestStub        func(*rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput)
	applyPendingMaintenanceActionRequestMutex       sync.RWMutex
	applyPendingMaintenanceActionRequestArgsForCall []struct {
		arg1 *rds.ApplyPendingMaintenanceActionInput
	}
	applyPendingMaintenanceActionRequestReturns struct {
		result1 *request.Request
		result2 *rds.ApplyPendingMaintenanceActionOutput
	}
	applyPendingMaintenanceActionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ApplyPendingMaintenanceActionOutput
	}
	ApplyPendingMaintenanceActionWithContextStub        func(context.Context, *rds.ApplyPendingMaintenanceActionInput, ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error)
	applyPendingMaintenanceActionWithContextMutex       sync.RWMutex
	applyPendingMaintenanceActionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ApplyPendingMaintenanceActionInput
		arg3 []request.Option
	}
	applyPendingMaintenanceActionWithContextReturns struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}
	applyPendingMaintenanceActionWithContextReturnsOnCall map[int]struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}
	AuthorizeDBSecurityGroupIngressStub        func(*rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)
	authorizeDBSecurityGroupIngressMutex       sync.RWMutex
	authorizeDBSecurityGroupIngressArgsForCall []struct {
		arg1 *rds.AuthorizeDBSecurityGroupIngressInput
	}
	authorizeDBSecurityGroupIngressReturns struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}
	authorizeDBSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}
	AuthorizeDBSecurityGroupIngressRequestStub        func(*rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput)
	authorizeDBSecurityGroupIngressRequestMutex       sync.RWMutex
	authorizeDBSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *rds.AuthorizeDBSecurityGroupIngressInput
	}
	authorizeDBSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *rds.AuthorizeDBSecurityGroupIngressOutput
	}
	authorizeDBSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.AuthorizeDBSecurityGroupIngressOutput
	}
	AuthorizeDBSecurityGroupIngressWithContextStub        func(context.Context, *rds.AuthorizeDBSecurityGroupIngressInput, ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)
	authorizeDBSecurityGroupIngressWithContextMutex       sync.RWMutex
	authorizeDBSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.AuthorizeDBSecurityGroupIngressInput
		arg3 []request.Option
	}
	authorizeDBSecurityGroupIngressWithContextReturns struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}
	authorizeDBSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}
	BacktrackDBClusterStub        func(*rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error)
	backtrackDBClusterMutex       sync.RWMutex
	backtrackDBClusterArgsForCall []struct {
		arg1 *rds.BacktrackDBClusterInput
	}
	backtrackDBClusterReturns struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}
	backtrackDBClusterReturnsOnCall map[int]struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}
	BacktrackDBClusterRequestStub        func(*rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput)
	backtrackDBClusterRequestMutex       sync.RWMutex
	backtrackDBClusterRequestArgsForCall []struct {
		arg1 *rds.BacktrackDBClusterInput
	}
	backtrackDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.BacktrackDBClusterOutput
	}
	backtrackDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.BacktrackDBClusterOutput
	}
	BacktrackDBClusterWithContextStub        func(context.Context, *rds.BacktrackDBClusterInput, ...request.Option) (*rds.BacktrackDBClusterOutput, error)
	backtrackDBClusterWithContextMutex       sync.RWMutex
	backtrackDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.BacktrackDBClusterInput
		arg3 []request.Option
	}
	backtrackDBClusterWithContextReturns struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}
	backtrackDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}
	CancelExportTaskStub        func(*rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error)
	cancelExportTaskMutex       sync.RWMutex
	cancelExportTaskArgsForCall []struct {
		arg1 *rds.CancelExportTaskInput
	}
	cancelExportTaskReturns struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}
	cancelExportTaskReturnsOnCall map[int]struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}
	CancelExportTaskRequestStub        func(*rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput)
	cancelExportTaskRequestMutex       sync.RWMutex
	cancelExportTaskRequestArgsForCall []struct {
		arg1 *rds.CancelExportTaskInput
	}
	cancelExportTaskRequestReturns struct {
		result1 *request.Request
		result2 *rds.CancelExportTaskOutput
	}
	cancelExportTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CancelExportTaskOutput
	}
	CancelExportTaskWithContextStub        func(context.Context, *rds.CancelExportTaskInput, ...request.Option) (*rds.CancelExportTaskOutput, error)
	cancelExportTaskWithContextMutex       sync.RWMutex
	cancelExportTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CancelExportTaskInput
		arg3 []request.Option
	}
	cancelExportTaskWithContextReturns struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}
	cancelExportTaskWithContextReturnsOnCall map[int]struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}
	CopyDBClusterParameterGroupStub        func(*rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error)
	copyDBClusterParameterGroupMutex       sync.RWMutex
	copyDBClusterParameterGroupArgsForCall []struct {
		arg1 *rds.CopyDBClusterParameterGroupInput
	}
	copyDBClusterParameterGroupReturns struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}
	copyDBClusterParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}
	CopyDBClusterParameterGroupRequestStub        func(*rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput)
	copyDBClusterParameterGroupRequestMutex       sync.RWMutex
	copyDBClusterParameterGroupRequestArgsForCall []struct {
		arg1 *rds.CopyDBClusterParameterGroupInput
	}
	copyDBClusterParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterParameterGroupOutput
	}
	copyDBClusterParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterParameterGroupOutput
	}
	CopyDBClusterParameterGroupWithContextStub        func(context.Context, *rds.CopyDBClusterParameterGroupInput, ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error)
	copyDBClusterParameterGroupWithContextMutex       sync.RWMutex
	copyDBClusterParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CopyDBClusterParameterGroupInput
		arg3 []request.Option
	}
	copyDBClusterParameterGroupWithContextReturns struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}
	copyDBClusterParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}
	CopyDBClusterSnapshotStub        func(*rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error)
	copyDBClusterSnapshotMutex       sync.RWMutex
	copyDBClusterSnapshotArgsForCall []struct {
		arg1 *rds.CopyDBClusterSnapshotInput
	}
	copyDBClusterSnapshotReturns struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}
	copyDBClusterSnapshotReturnsOnCall map[int]struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}
	CopyDBClusterSnapshotRequestStub        func(*rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput)
	copyDBClusterSnapshotRequestMutex       sync.RWMutex
	copyDBClusterSnapshotRequestArgsForCall []struct {
		arg1 *rds.CopyDBClusterSnapshotInput
	}
	copyDBClusterSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterSnapshotOutput
	}
	copyDBClusterSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterSnapshotOutput
	}
	CopyDBClusterSnapshotWithContextStub        func(context.Context, *rds.CopyDBClusterSnapshotInput, ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error)
	copyDBClusterSnapshotWithContextMutex       sync.RWMutex
	copyDBClusterSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CopyDBClusterSnapshotInput
		arg3 []request.Option
	}
	copyDBClusterSnapshotWithContextReturns struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}
	copyDBClusterSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}
	CopyDBParameterGroupStub        func(*rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error)
	copyDBParameterGroupMutex       sync.RWMutex
	copyDBParameterGroupArgsForCall []struct {
		arg1 *rds.CopyDBParameterGroupInput
	}
	copyDBParameterGroupReturns struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}
	copyDBParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}
	CopyDBParameterGroupRequestStub        func(*rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput)
	copyDBParameterGroupRequestMutex       sync.RWMutex
	copyDBParameterGroupRequestArgsForCall []struct {
		arg1 *rds.CopyDBParameterGroupInput
	}
	copyDBParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CopyDBParameterGroupOutput
	}
	copyDBParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CopyDBParameterGroupOutput
	}
	CopyDBParameterGroupWithContextStub        func(context.Context, *rds.CopyDBParameterGroupInput, ...request.Option) (*rds.CopyDBParameterGroupOutput, error)
	copyDBParameterGroupWithContextMutex       sync.RWMutex
	copyDBParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CopyDBParameterGroupInput
		arg3 []request.Option
	}
	copyDBParameterGroupWithContextReturns struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}
	copyDBParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}
	CopyDBSnapshotStub        func(*rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error)
	copyDBSnapshotMutex       sync.RWMutex
	copyDBSnapshotArgsForCall []struct {
		arg1 *rds.CopyDBSnapshotInput
	}
	copyDBSnapshotReturns struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}
	copyDBSnapshotReturnsOnCall map[int]struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}
	CopyDBSnapshotRequestStub        func(*rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput)
	copyDBSnapshotRequestMutex       sync.RWMutex
	copyDBSnapshotRequestArgsForCall []struct {
		arg1 *rds.CopyDBSnapshotInput
	}
	copyDBSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.CopyDBSnapshotOutput
	}
	copyDBSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CopyDBSnapshotOutput
	}
	CopyDBSnapshotWithContextStub        func(context.Context, *rds.CopyDBSnapshotInput, ...request.Option) (*rds.CopyDBSnapshotOutput, error)
	copyDBSnapshotWithContextMutex       sync.RWMutex
	copyDBSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CopyDBSnapshotInput
		arg3 []request.Option
	}
	copyDBSnapshotWithContextReturns struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}
	copyDBSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}
	CopyOptionGroupStub        func(*rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error)
	copyOptionGroupMutex       sync.RWMutex
	copyOptionGroupArgsForCall []struct {
		arg1 *rds.CopyOptionGroupInput
	}
	copyOptionGroupReturns struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}
	copyOptionGroupReturnsOnCall map[int]struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}
	CopyOptionGroupRequestStub        func(*rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput)
	copyOptionGroupRequestMutex       sync.RWMutex
	copyOptionGroupRequestArgsForCall []struct {
		arg1 *rds.CopyOptionGroupInput
	}
	copyOptionGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CopyOptionGroupOutput
	}
	copyOptionGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CopyOptionGroupOutput
	}
	CopyOptionGroupWithContextStub        func(context.Context, *rds.CopyOptionGroupInput, ...request.Option) (*rds.CopyOptionGroupOutput, error)
	copyOptionGroupWithContextMutex       sync.RWMutex
	copyOptionGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CopyOptionGroupInput
		arg3 []request.Option
	}
	copyOptionGroupWithContextReturns struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}
	copyOptionGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}
	CreateCustomAvailabilityZoneStub        func(*rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error)
	createCustomAvailabilityZoneMutex       sync.RWMutex
	createCustomAvailabilityZoneArgsForCall []struct {
		arg1 *rds.CreateCustomAvailabilityZoneInput
	}
	createCustomAvailabilityZoneReturns struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}
	createCustomAvailabilityZoneReturnsOnCall map[int]struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}
	CreateCustomAvailabilityZoneRequestStub        func(*rds.CreateCustomAvailabilityZoneInput) (*request.Request, *rds.CreateCustomAvailabilityZoneOutput)
	createCustomAvailabilityZoneRequestMutex       sync.RWMutex
	createCustomAvailabilityZoneRequestArgsForCall []struct {
		arg1 *rds.CreateCustomAvailabilityZoneInput
	}
	createCustomAvailabilityZoneRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateCustomAvailabilityZoneOutput
	}
	createCustomAvailabilityZoneRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateCustomAvailabilityZoneOutput
	}
	CreateCustomAvailabilityZoneWithContextStub        func(context.Context, *rds.CreateCustomAvailabilityZoneInput, ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error)
	createCustomAvailabilityZoneWithContextMutex       sync.RWMutex
	createCustomAvailabilityZoneWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateCustomAvailabilityZoneInput
		arg3 []request.Option
	}
	createCustomAvailabilityZoneWithContextReturns struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}
	createCustomAvailabilityZoneWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}
	CreateDBClusterStub        func(*rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error)
	createDBClusterMutex       sync.RWMutex
	createDBClusterArgsForCall []struct {
		arg1 *rds.CreateDBClusterInput
	}
	createDBClusterReturns struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}
	createDBClusterReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}
	CreateDBClusterEndpointStub        func(*rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error)
	createDBClusterEndpointMutex       sync.RWMutex
	createDBClusterEndpointArgsForCall []struct {
		arg1 *rds.CreateDBClusterEndpointInput
	}
	createDBClusterEndpointReturns struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}
	createDBClusterEndpointReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}
	CreateDBClusterEndpointRequestStub        func(*rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput)
	createDBClusterEndpointRequestMutex       sync.RWMutex
	createDBClusterEndpointRequestArgsForCall []struct {
		arg1 *rds.CreateDBClusterEndpointInput
	}
	createDBClusterEndpointRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterEndpointOutput
	}
	createDBClusterEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterEndpointOutput
	}
	CreateDBClusterEndpointWithContextStub        func(context.Context, *rds.CreateDBClusterEndpointInput, ...request.Option) (*rds.CreateDBClusterEndpointOutput, error)
	createDBClusterEndpointWithContextMutex       sync.RWMutex
	createDBClusterEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterEndpointInput
		arg3 []request.Option
	}
	createDBClusterEndpointWithContextReturns struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}
	createDBClusterEndpointWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}
	CreateDBClusterParameterGroupStub        func(*rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error)
	createDBClusterParameterGroupMutex       sync.RWMutex
	createDBClusterParameterGroupArgsForCall []struct {
		arg1 *rds.CreateDBClusterParameterGroupInput
	}
	createDBClusterParameterGroupReturns struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}
	createDBClusterParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}
	CreateDBClusterParameterGroupRequestStub        func(*rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput)
	createDBClusterParameterGroupRequestMutex       sync.RWMutex
	createDBClusterParameterGroupRequestArgsForCall []struct {
		arg1 *rds.CreateDBClusterParameterGroupInput
	}
	createDBClusterParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterParameterGroupOutput
	}
	createDBClusterParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterParameterGroupOutput
	}
	CreateDBClusterParameterGroupWithContextStub        func(context.Context, *rds.CreateDBClusterParameterGroupInput, ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error)
	createDBClusterParameterGroupWithContextMutex       sync.RWMutex
	createDBClusterParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterParameterGroupInput
		arg3 []request.Option
	}
	createDBClusterParameterGroupWithContextReturns struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}
	createDBClusterParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}
	CreateDBClusterRequestStub        func(*rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput)
	createDBClusterRequestMutex       sync.RWMutex
	createDBClusterRequestArgsForCall []struct {
		arg1 *rds.CreateDBClusterInput
	}
	createDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterOutput
	}
	createDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterOutput
	}
	CreateDBClusterSnapshotStub        func(*rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error)
	createDBClusterSnapshotMutex       sync.RWMutex
	createDBClusterSnapshotArgsForCall []struct {
		arg1 *rds.CreateDBClusterSnapshotInput
	}
	createDBClusterSnapshotReturns struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}
	createDBClusterSnapshotReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}
	CreateDBClusterSnapshotRequestStub        func(*rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput)
	createDBClusterSnapshotRequestMutex       sync.RWMutex
	createDBClusterSnapshotRequestArgsForCall []struct {
		arg1 *rds.CreateDBClusterSnapshotInput
	}
	createDBClusterSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterSnapshotOutput
	}
	createDBClusterSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterSnapshotOutput
	}
	CreateDBClusterSnapshotWithContextStub        func(context.Context, *rds.CreateDBClusterSnapshotInput, ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error)
	createDBClusterSnapshotWithContextMutex       sync.RWMutex
	createDBClusterSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterSnapshotInput
		arg3 []request.Option
	}
	createDBClusterSnapshotWithContextReturns struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}
	createDBClusterSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}
	CreateDBClusterWithContextStub        func(context.Context, *rds.CreateDBClusterInput, ...request.Option) (*rds.CreateDBClusterOutput, error)
	createDBClusterWithContextMutex       sync.RWMutex
	createDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterInput
		arg3 []request.Option
	}
	createDBClusterWithContextReturns struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}
	createDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}
	CreateDBInstanceStub        func(*rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error)
	createDBInstanceMutex       sync.RWMutex
	createDBInstanceArgsForCall []struct {
		arg1 *rds.CreateDBInstanceInput
	}
	createDBInstanceReturns struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}
	createDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}
	CreateDBInstanceReadReplicaStub        func(*rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error)
	createDBInstanceReadReplicaMutex       sync.RWMutex
	createDBInstanceReadReplicaArgsForCall []struct {
		arg1 *rds.CreateDBInstanceReadReplicaInput
	}
	createDBInstanceReadReplicaReturns struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}
	createDBInstanceReadReplicaReturnsOnCall map[int]struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}
	CreateDBInstanceReadReplicaRequestStub        func(*rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput)
	createDBInstanceReadReplicaRequestMutex       sync.RWMutex
	createDBInstanceReadReplicaRequestArgsForCall []struct {
		arg1 *rds.CreateDBInstanceReadReplicaInput
	}
	createDBInstanceReadReplicaRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceReadReplicaOutput
	}
	createDBInstanceReadReplicaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceReadReplicaOutput
	}
	CreateDBInstanceReadReplicaWithContextStub        func(context.Context, *rds.CreateDBInstanceReadReplicaInput, ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error)
	createDBInstanceReadReplicaWithContextMutex       sync.RWMutex
	createDBInstanceReadReplicaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBInstanceReadReplicaInput
		arg3 []request.Option
	}
	createDBInstanceReadReplicaWithContextReturns struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}
	createDBInstanceReadReplicaWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}
	CreateDBInstanceRequestStub        func(*rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput)
	createDBInstanceRequestMutex       sync.RWMutex
	createDBInstanceRequestArgsForCall []struct {
		arg1 *rds.CreateDBInstanceInput
	}
	createDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceOutput
	}
	createDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceOutput
	}
	CreateDBInstanceWithContextStub        func(context.Context, *rds.CreateDBInstanceInput, ...request.Option) (*rds.CreateDBInstanceOutput, error)
	createDBInstanceWithContextMutex       sync.RWMutex
	createDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBInstanceInput
		arg3 []request.Option
	}
	createDBInstanceWithContextReturns struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}
	createDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}
	CreateDBParameterGroupStub        func(*rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error)
	createDBParameterGroupMutex       sync.RWMutex
	createDBParameterGroupArgsForCall []struct {
		arg1 *rds.CreateDBParameterGroupInput
	}
	createDBParameterGroupReturns struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}
	createDBParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}
	CreateDBParameterGroupRequestStub        func(*rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput)
	createDBParameterGroupRequestMutex       sync.RWMutex
	createDBParameterGroupRequestArgsForCall []struct {
		arg1 *rds.CreateDBParameterGroupInput
	}
	createDBParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBParameterGroupOutput
	}
	createDBParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBParameterGroupOutput
	}
	CreateDBParameterGroupWithContextStub        func(context.Context, *rds.CreateDBParameterGroupInput, ...request.Option) (*rds.CreateDBParameterGroupOutput, error)
	createDBParameterGroupWithContextMutex       sync.RWMutex
	createDBParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBParameterGroupInput
		arg3 []request.Option
	}
	createDBParameterGroupWithContextReturns struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}
	createDBParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}
	CreateDBProxyStub        func(*rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error)
	createDBProxyMutex       sync.RWMutex
	createDBProxyArgsForCall []struct {
		arg1 *rds.CreateDBProxyInput
	}
	createDBProxyReturns struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}
	createDBProxyReturnsOnCall map[int]struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}
	CreateDBProxyRequestStub        func(*rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput)
	createDBProxyRequestMutex       sync.RWMutex
	createDBProxyRequestArgsForCall []struct {
		arg1 *rds.CreateDBProxyInput
	}
	createDBProxyRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBProxyOutput
	}
	createDBProxyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBProxyOutput
	}
	CreateDBProxyWithContextStub        func(context.Context, *rds.CreateDBProxyInput, ...request.Option) (*rds.CreateDBProxyOutput, error)
	createDBProxyWithContextMutex       sync.RWMutex
	createDBProxyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBProxyInput
		arg3 []request.Option
	}
	createDBProxyWithContextReturns struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}
	createDBProxyWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}
	CreateDBSecurityGroupStub        func(*rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error)
	createDBSecurityGroupMutex       sync.RWMutex
	createDBSecurityGroupArgsForCall []struct {
		arg1 *rds.CreateDBSecurityGroupInput
	}
	createDBSecurityGroupReturns struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}
	createDBSecurityGroupReturnsOnCall map[int]struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}
	CreateDBSecurityGroupRequestStub        func(*rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput)
	createDBSecurityGroupRequestMutex       sync.RWMutex
	createDBSecurityGroupRequestArgsForCall []struct {
		arg1 *rds.CreateDBSecurityGroupInput
	}
	createDBSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBSecurityGroupOutput
	}
	createDBSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBSecurityGroupOutput
	}
	CreateDBSecurityGroupWithContextStub        func(context.Context, *rds.CreateDBSecurityGroupInput, ...request.Option) (*rds.CreateDBSecurityGroupOutput, error)
	createDBSecurityGroupWithContextMutex       sync.RWMutex
	createDBSecurityGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBSecurityGroupInput
		arg3 []request.Option
	}
	createDBSecurityGroupWithContextReturns struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}
	createDBSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}
	CreateDBSnapshotStub        func(*rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error)
	createDBSnapshotMutex       sync.RWMutex
	createDBSnapshotArgsForCall []struct {
		arg1 *rds.CreateDBSnapshotInput
	}
	createDBSnapshotReturns struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}
	createDBSnapshotReturnsOnCall map[int]struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}
	CreateDBSnapshotRequestStub        func(*rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput)
	createDBSnapshotRequestMutex       sync.RWMutex
	createDBSnapshotRequestArgsForCall []struct {
		arg1 *rds.CreateDBSnapshotInput
	}
	createDBSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBSnapshotOutput
	}
	createDBSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBSnapshotOutput
	}
	CreateDBSnapshotWithContextStub        func(context.Context, *rds.CreateDBSnapshotInput, ...request.Option) (*rds.CreateDBSnapshotOutput, error)
	createDBSnapshotWithContextMutex       sync.RWMutex
	createDBSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBSnapshotInput
		arg3 []request.Option
	}
	createDBSnapshotWithContextReturns struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}
	createDBSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}
	CreateDBSubnetGroupStub        func(*rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error)
	createDBSubnetGroupMutex       sync.RWMutex
	createDBSubnetGroupArgsForCall []struct {
		arg1 *rds.CreateDBSubnetGroupInput
	}
	createDBSubnetGroupReturns struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}
	createDBSubnetGroupReturnsOnCall map[int]struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}
	CreateDBSubnetGroupRequestStub        func(*rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput)
	createDBSubnetGroupRequestMutex       sync.RWMutex
	createDBSubnetGroupRequestArgsForCall []struct {
		arg1 *rds.CreateDBSubnetGroupInput
	}
	createDBSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateDBSubnetGroupOutput
	}
	createDBSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateDBSubnetGroupOutput
	}
	CreateDBSubnetGroupWithContextStub        func(context.Context, *rds.CreateDBSubnetGroupInput, ...request.Option) (*rds.CreateDBSubnetGroupOutput, error)
	createDBSubnetGroupWithContextMutex       sync.RWMutex
	createDBSubnetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateDBSubnetGroupInput
		arg3 []request.Option
	}
	createDBSubnetGroupWithContextReturns struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}
	createDBSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}
	CreateEventSubscriptionStub        func(*rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error)
	createEventSubscriptionMutex       sync.RWMutex
	createEventSubscriptionArgsForCall []struct {
		arg1 *rds.CreateEventSubscriptionInput
	}
	createEventSubscriptionReturns struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}
	createEventSubscriptionReturnsOnCall map[int]struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}
	CreateEventSubscriptionRequestStub        func(*rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput)
	createEventSubscriptionRequestMutex       sync.RWMutex
	createEventSubscriptionRequestArgsForCall []struct {
		arg1 *rds.CreateEventSubscriptionInput
	}
	createEventSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateEventSubscriptionOutput
	}
	createEventSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateEventSubscriptionOutput
	}
	CreateEventSubscriptionWithContextStub        func(context.Context, *rds.CreateEventSubscriptionInput, ...request.Option) (*rds.CreateEventSubscriptionOutput, error)
	createEventSubscriptionWithContextMutex       sync.RWMutex
	createEventSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateEventSubscriptionInput
		arg3 []request.Option
	}
	createEventSubscriptionWithContextReturns struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}
	createEventSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}
	CreateGlobalClusterStub        func(*rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error)
	createGlobalClusterMutex       sync.RWMutex
	createGlobalClusterArgsForCall []struct {
		arg1 *rds.CreateGlobalClusterInput
	}
	createGlobalClusterReturns struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}
	createGlobalClusterReturnsOnCall map[int]struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}
	CreateGlobalClusterRequestStub        func(*rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput)
	createGlobalClusterRequestMutex       sync.RWMutex
	createGlobalClusterRequestArgsForCall []struct {
		arg1 *rds.CreateGlobalClusterInput
	}
	createGlobalClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateGlobalClusterOutput
	}
	createGlobalClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateGlobalClusterOutput
	}
	CreateGlobalClusterWithContextStub        func(context.Context, *rds.CreateGlobalClusterInput, ...request.Option) (*rds.CreateGlobalClusterOutput, error)
	createGlobalClusterWithContextMutex       sync.RWMutex
	createGlobalClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateGlobalClusterInput
		arg3 []request.Option
	}
	createGlobalClusterWithContextReturns struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}
	createGlobalClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}
	CreateOptionGroupStub        func(*rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error)
	createOptionGroupMutex       sync.RWMutex
	createOptionGroupArgsForCall []struct {
		arg1 *rds.CreateOptionGroupInput
	}
	createOptionGroupReturns struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}
	createOptionGroupReturnsOnCall map[int]struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}
	CreateOptionGroupRequestStub        func(*rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput)
	createOptionGroupRequestMutex       sync.RWMutex
	createOptionGroupRequestArgsForCall []struct {
		arg1 *rds.CreateOptionGroupInput
	}
	createOptionGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.CreateOptionGroupOutput
	}
	createOptionGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.CreateOptionGroupOutput
	}
	CreateOptionGroupWithContextStub        func(context.Context, *rds.CreateOptionGroupInput, ...request.Option) (*rds.CreateOptionGroupOutput, error)
	createOptionGroupWithContextMutex       sync.RWMutex
	createOptionGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.CreateOptionGroupInput
		arg3 []request.Option
	}
	createOptionGroupWithContextReturns struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}
	createOptionGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}
	DeleteCustomAvailabilityZoneStub        func(*rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error)
	deleteCustomAvailabilityZoneMutex       sync.RWMutex
	deleteCustomAvailabilityZoneArgsForCall []struct {
		arg1 *rds.DeleteCustomAvailabilityZoneInput
	}
	deleteCustomAvailabilityZoneReturns struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}
	deleteCustomAvailabilityZoneReturnsOnCall map[int]struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}
	DeleteCustomAvailabilityZoneRequestStub        func(*rds.DeleteCustomAvailabilityZoneInput) (*request.Request, *rds.DeleteCustomAvailabilityZoneOutput)
	deleteCustomAvailabilityZoneRequestMutex       sync.RWMutex
	deleteCustomAvailabilityZoneRequestArgsForCall []struct {
		arg1 *rds.DeleteCustomAvailabilityZoneInput
	}
	deleteCustomAvailabilityZoneRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteCustomAvailabilityZoneOutput
	}
	deleteCustomAvailabilityZoneRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteCustomAvailabilityZoneOutput
	}
	DeleteCustomAvailabilityZoneWithContextStub        func(context.Context, *rds.DeleteCustomAvailabilityZoneInput, ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error)
	deleteCustomAvailabilityZoneWithContextMutex       sync.RWMutex
	deleteCustomAvailabilityZoneWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteCustomAvailabilityZoneInput
		arg3 []request.Option
	}
	deleteCustomAvailabilityZoneWithContextReturns struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}
	deleteCustomAvailabilityZoneWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}
	DeleteDBClusterStub        func(*rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error)
	deleteDBClusterMutex       sync.RWMutex
	deleteDBClusterArgsForCall []struct {
		arg1 *rds.DeleteDBClusterInput
	}
	deleteDBClusterReturns struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}
	deleteDBClusterReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}
	DeleteDBClusterEndpointStub        func(*rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error)
	deleteDBClusterEndpointMutex       sync.RWMutex
	deleteDBClusterEndpointArgsForCall []struct {
		arg1 *rds.DeleteDBClusterEndpointInput
	}
	deleteDBClusterEndpointReturns struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}
	deleteDBClusterEndpointReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}
	DeleteDBClusterEndpointRequestStub        func(*rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput)
	deleteDBClusterEndpointRequestMutex       sync.RWMutex
	deleteDBClusterEndpointRequestArgsForCall []struct {
		arg1 *rds.DeleteDBClusterEndpointInput
	}
	deleteDBClusterEndpointRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterEndpointOutput
	}
	deleteDBClusterEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterEndpointOutput
	}
	DeleteDBClusterEndpointWithContextStub        func(context.Context, *rds.DeleteDBClusterEndpointInput, ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error)
	deleteDBClusterEndpointWithContextMutex       sync.RWMutex
	deleteDBClusterEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterEndpointInput
		arg3 []request.Option
	}
	deleteDBClusterEndpointWithContextReturns struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}
	deleteDBClusterEndpointWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}
	DeleteDBClusterParameterGroupStub        func(*rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error)
	deleteDBClusterParameterGroupMutex       sync.RWMutex
	deleteDBClusterParameterGroupArgsForCall []struct {
		arg1 *rds.DeleteDBClusterParameterGroupInput
	}
	deleteDBClusterParameterGroupReturns struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}
	deleteDBClusterParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}
	DeleteDBClusterParameterGroupRequestStub        func(*rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput)
	deleteDBClusterParameterGroupRequestMutex       sync.RWMutex
	deleteDBClusterParameterGroupRequestArgsForCall []struct {
		arg1 *rds.DeleteDBClusterParameterGroupInput
	}
	deleteDBClusterParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterParameterGroupOutput
	}
	deleteDBClusterParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterParameterGroupOutput
	}
	DeleteDBClusterParameterGroupWithContextStub        func(context.Context, *rds.DeleteDBClusterParameterGroupInput, ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error)
	deleteDBClusterParameterGroupWithContextMutex       sync.RWMutex
	deleteDBClusterParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterParameterGroupInput
		arg3 []request.Option
	}
	deleteDBClusterParameterGroupWithContextReturns struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}
	deleteDBClusterParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}
	DeleteDBClusterRequestStub        func(*rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput)
	deleteDBClusterRequestMutex       sync.RWMutex
	deleteDBClusterRequestArgsForCall []struct {
		arg1 *rds.DeleteDBClusterInput
	}
	deleteDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterOutput
	}
	deleteDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterOutput
	}
	DeleteDBClusterSnapshotStub        func(*rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error)
	deleteDBClusterSnapshotMutex       sync.RWMutex
	deleteDBClusterSnapshotArgsForCall []struct {
		arg1 *rds.DeleteDBClusterSnapshotInput
	}
	deleteDBClusterSnapshotReturns struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}
	deleteDBClusterSnapshotReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}
	DeleteDBClusterSnapshotRequestStub        func(*rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput)
	deleteDBClusterSnapshotRequestMutex       sync.RWMutex
	deleteDBClusterSnapshotRequestArgsForCall []struct {
		arg1 *rds.DeleteDBClusterSnapshotInput
	}
	deleteDBClusterSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterSnapshotOutput
	}
	deleteDBClusterSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterSnapshotOutput
	}
	DeleteDBClusterSnapshotWithContextStub        func(context.Context, *rds.DeleteDBClusterSnapshotInput, ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error)
	deleteDBClusterSnapshotWithContextMutex       sync.RWMutex
	deleteDBClusterSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterSnapshotInput
		arg3 []request.Option
	}
	deleteDBClusterSnapshotWithContextReturns struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}
	deleteDBClusterSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}
	DeleteDBClusterWithContextStub        func(context.Context, *rds.DeleteDBClusterInput, ...request.Option) (*rds.DeleteDBClusterOutput, error)
	deleteDBClusterWithContextMutex       sync.RWMutex
	deleteDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterInput
		arg3 []request.Option
	}
	deleteDBClusterWithContextReturns struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}
	deleteDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}
	DeleteDBInstanceStub        func(*rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error)
	deleteDBInstanceMutex       sync.RWMutex
	deleteDBInstanceArgsForCall []struct {
		arg1 *rds.DeleteDBInstanceInput
	}
	deleteDBInstanceReturns struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}
	deleteDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}
	DeleteDBInstanceAutomatedBackupStub        func(*rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)
	deleteDBInstanceAutomatedBackupMutex       sync.RWMutex
	deleteDBInstanceAutomatedBackupArgsForCall []struct {
		arg1 *rds.DeleteDBInstanceAutomatedBackupInput
	}
	deleteDBInstanceAutomatedBackupReturns struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}
	deleteDBInstanceAutomatedBackupReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}
	DeleteDBInstanceAutomatedBackupRequestStub        func(*rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput)
	deleteDBInstanceAutomatedBackupRequestMutex       sync.RWMutex
	deleteDBInstanceAutomatedBackupRequestArgsForCall []struct {
		arg1 *rds.DeleteDBInstanceAutomatedBackupInput
	}
	deleteDBInstanceAutomatedBackupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceAutomatedBackupOutput
	}
	deleteDBInstanceAutomatedBackupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceAutomatedBackupOutput
	}
	DeleteDBInstanceAutomatedBackupWithContextStub        func(context.Context, *rds.DeleteDBInstanceAutomatedBackupInput, ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)
	deleteDBInstanceAutomatedBackupWithContextMutex       sync.RWMutex
	deleteDBInstanceAutomatedBackupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBInstanceAutomatedBackupInput
		arg3 []request.Option
	}
	deleteDBInstanceAutomatedBackupWithContextReturns struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}
	deleteDBInstanceAutomatedBackupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}
	DeleteDBInstanceRequestStub        func(*rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput)
	deleteDBInstanceRequestMutex       sync.RWMutex
	deleteDBInstanceRequestArgsForCall []struct {
		arg1 *rds.DeleteDBInstanceInput
	}
	deleteDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceOutput
	}
	deleteDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceOutput
	}
	DeleteDBInstanceWithContextStub        func(context.Context, *rds.DeleteDBInstanceInput, ...request.Option) (*rds.DeleteDBInstanceOutput, error)
	deleteDBInstanceWithContextMutex       sync.RWMutex
	deleteDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBInstanceInput
		arg3 []request.Option
	}
	deleteDBInstanceWithContextReturns struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}
	deleteDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}
	DeleteDBParameterGroupStub        func(*rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error)
	deleteDBParameterGroupMutex       sync.RWMutex
	deleteDBParameterGroupArgsForCall []struct {
		arg1 *rds.DeleteDBParameterGroupInput
	}
	deleteDBParameterGroupReturns struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}
	deleteDBParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}
	DeleteDBParameterGroupRequestStub        func(*rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput)
	deleteDBParameterGroupRequestMutex       sync.RWMutex
	deleteDBParameterGroupRequestArgsForCall []struct {
		arg1 *rds.DeleteDBParameterGroupInput
	}
	deleteDBParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBParameterGroupOutput
	}
	deleteDBParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBParameterGroupOutput
	}
	DeleteDBParameterGroupWithContextStub        func(context.Context, *rds.DeleteDBParameterGroupInput, ...request.Option) (*rds.DeleteDBParameterGroupOutput, error)
	deleteDBParameterGroupWithContextMutex       sync.RWMutex
	deleteDBParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBParameterGroupInput
		arg3 []request.Option
	}
	deleteDBParameterGroupWithContextReturns struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}
	deleteDBParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}
	DeleteDBProxyStub        func(*rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error)
	deleteDBProxyMutex       sync.RWMutex
	deleteDBProxyArgsForCall []struct {
		arg1 *rds.DeleteDBProxyInput
	}
	deleteDBProxyReturns struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}
	deleteDBProxyReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}
	DeleteDBProxyRequestStub        func(*rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput)
	deleteDBProxyRequestMutex       sync.RWMutex
	deleteDBProxyRequestArgsForCall []struct {
		arg1 *rds.DeleteDBProxyInput
	}
	deleteDBProxyRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBProxyOutput
	}
	deleteDBProxyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBProxyOutput
	}
	DeleteDBProxyWithContextStub        func(context.Context, *rds.DeleteDBProxyInput, ...request.Option) (*rds.DeleteDBProxyOutput, error)
	deleteDBProxyWithContextMutex       sync.RWMutex
	deleteDBProxyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBProxyInput
		arg3 []request.Option
	}
	deleteDBProxyWithContextReturns struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}
	deleteDBProxyWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}
	DeleteDBSecurityGroupStub        func(*rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error)
	deleteDBSecurityGroupMutex       sync.RWMutex
	deleteDBSecurityGroupArgsForCall []struct {
		arg1 *rds.DeleteDBSecurityGroupInput
	}
	deleteDBSecurityGroupReturns struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}
	deleteDBSecurityGroupReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}
	DeleteDBSecurityGroupRequestStub        func(*rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput)
	deleteDBSecurityGroupRequestMutex       sync.RWMutex
	deleteDBSecurityGroupRequestArgsForCall []struct {
		arg1 *rds.DeleteDBSecurityGroupInput
	}
	deleteDBSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBSecurityGroupOutput
	}
	deleteDBSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBSecurityGroupOutput
	}
	DeleteDBSecurityGroupWithContextStub        func(context.Context, *rds.DeleteDBSecurityGroupInput, ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error)
	deleteDBSecurityGroupWithContextMutex       sync.RWMutex
	deleteDBSecurityGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBSecurityGroupInput
		arg3 []request.Option
	}
	deleteDBSecurityGroupWithContextReturns struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}
	deleteDBSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}
	DeleteDBSnapshotStub        func(*rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error)
	deleteDBSnapshotMutex       sync.RWMutex
	deleteDBSnapshotArgsForCall []struct {
		arg1 *rds.DeleteDBSnapshotInput
	}
	deleteDBSnapshotReturns struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}
	deleteDBSnapshotReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}
	DeleteDBSnapshotRequestStub        func(*rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput)
	deleteDBSnapshotRequestMutex       sync.RWMutex
	deleteDBSnapshotRequestArgsForCall []struct {
		arg1 *rds.DeleteDBSnapshotInput
	}
	deleteDBSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBSnapshotOutput
	}
	deleteDBSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBSnapshotOutput
	}
	DeleteDBSnapshotWithContextStub        func(context.Context, *rds.DeleteDBSnapshotInput, ...request.Option) (*rds.DeleteDBSnapshotOutput, error)
	deleteDBSnapshotWithContextMutex       sync.RWMutex
	deleteDBSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBSnapshotInput
		arg3 []request.Option
	}
	deleteDBSnapshotWithContextReturns struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}
	deleteDBSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}
	DeleteDBSubnetGroupStub        func(*rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error)
	deleteDBSubnetGroupMutex       sync.RWMutex
	deleteDBSubnetGroupArgsForCall []struct {
		arg1 *rds.DeleteDBSubnetGroupInput
	}
	deleteDBSubnetGroupReturns struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}
	deleteDBSubnetGroupReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}
	DeleteDBSubnetGroupRequestStub        func(*rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput)
	deleteDBSubnetGroupRequestMutex       sync.RWMutex
	deleteDBSubnetGroupRequestArgsForCall []struct {
		arg1 *rds.DeleteDBSubnetGroupInput
	}
	deleteDBSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteDBSubnetGroupOutput
	}
	deleteDBSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteDBSubnetGroupOutput
	}
	DeleteDBSubnetGroupWithContextStub        func(context.Context, *rds.DeleteDBSubnetGroupInput, ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error)
	deleteDBSubnetGroupWithContextMutex       sync.RWMutex
	deleteDBSubnetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteDBSubnetGroupInput
		arg3 []request.Option
	}
	deleteDBSubnetGroupWithContextReturns struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}
	deleteDBSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}
	DeleteEventSubscriptionStub        func(*rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error)
	deleteEventSubscriptionMutex       sync.RWMutex
	deleteEventSubscriptionArgsForCall []struct {
		arg1 *rds.DeleteEventSubscriptionInput
	}
	deleteEventSubscriptionReturns struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}
	deleteEventSubscriptionReturnsOnCall map[int]struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}
	DeleteEventSubscriptionRequestStub        func(*rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput)
	deleteEventSubscriptionRequestMutex       sync.RWMutex
	deleteEventSubscriptionRequestArgsForCall []struct {
		arg1 *rds.DeleteEventSubscriptionInput
	}
	deleteEventSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteEventSubscriptionOutput
	}
	deleteEventSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteEventSubscriptionOutput
	}
	DeleteEventSubscriptionWithContextStub        func(context.Context, *rds.DeleteEventSubscriptionInput, ...request.Option) (*rds.DeleteEventSubscriptionOutput, error)
	deleteEventSubscriptionWithContextMutex       sync.RWMutex
	deleteEventSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteEventSubscriptionInput
		arg3 []request.Option
	}
	deleteEventSubscriptionWithContextReturns struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}
	deleteEventSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}
	DeleteGlobalClusterStub        func(*rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error)
	deleteGlobalClusterMutex       sync.RWMutex
	deleteGlobalClusterArgsForCall []struct {
		arg1 *rds.DeleteGlobalClusterInput
	}
	deleteGlobalClusterReturns struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}
	deleteGlobalClusterReturnsOnCall map[int]struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}
	DeleteGlobalClusterRequestStub        func(*rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput)
	deleteGlobalClusterRequestMutex       sync.RWMutex
	deleteGlobalClusterRequestArgsForCall []struct {
		arg1 *rds.DeleteGlobalClusterInput
	}
	deleteGlobalClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteGlobalClusterOutput
	}
	deleteGlobalClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteGlobalClusterOutput
	}
	DeleteGlobalClusterWithContextStub        func(context.Context, *rds.DeleteGlobalClusterInput, ...request.Option) (*rds.DeleteGlobalClusterOutput, error)
	deleteGlobalClusterWithContextMutex       sync.RWMutex
	deleteGlobalClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteGlobalClusterInput
		arg3 []request.Option
	}
	deleteGlobalClusterWithContextReturns struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}
	deleteGlobalClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}
	DeleteInstallationMediaStub        func(*rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error)
	deleteInstallationMediaMutex       sync.RWMutex
	deleteInstallationMediaArgsForCall []struct {
		arg1 *rds.DeleteInstallationMediaInput
	}
	deleteInstallationMediaReturns struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}
	deleteInstallationMediaReturnsOnCall map[int]struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}
	DeleteInstallationMediaRequestStub        func(*rds.DeleteInstallationMediaInput) (*request.Request, *rds.DeleteInstallationMediaOutput)
	deleteInstallationMediaRequestMutex       sync.RWMutex
	deleteInstallationMediaRequestArgsForCall []struct {
		arg1 *rds.DeleteInstallationMediaInput
	}
	deleteInstallationMediaRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteInstallationMediaOutput
	}
	deleteInstallationMediaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteInstallationMediaOutput
	}
	DeleteInstallationMediaWithContextStub        func(context.Context, *rds.DeleteInstallationMediaInput, ...request.Option) (*rds.DeleteInstallationMediaOutput, error)
	deleteInstallationMediaWithContextMutex       sync.RWMutex
	deleteInstallationMediaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteInstallationMediaInput
		arg3 []request.Option
	}
	deleteInstallationMediaWithContextReturns struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}
	deleteInstallationMediaWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}
	DeleteOptionGroupStub        func(*rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error)
	deleteOptionGroupMutex       sync.RWMutex
	deleteOptionGroupArgsForCall []struct {
		arg1 *rds.DeleteOptionGroupInput
	}
	deleteOptionGroupReturns struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}
	deleteOptionGroupReturnsOnCall map[int]struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}
	DeleteOptionGroupRequestStub        func(*rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput)
	deleteOptionGroupRequestMutex       sync.RWMutex
	deleteOptionGroupRequestArgsForCall []struct {
		arg1 *rds.DeleteOptionGroupInput
	}
	deleteOptionGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeleteOptionGroupOutput
	}
	deleteOptionGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeleteOptionGroupOutput
	}
	DeleteOptionGroupWithContextStub        func(context.Context, *rds.DeleteOptionGroupInput, ...request.Option) (*rds.DeleteOptionGroupOutput, error)
	deleteOptionGroupWithContextMutex       sync.RWMutex
	deleteOptionGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeleteOptionGroupInput
		arg3 []request.Option
	}
	deleteOptionGroupWithContextReturns struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}
	deleteOptionGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}
	DeregisterDBProxyTargetsStub        func(*rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error)
	deregisterDBProxyTargetsMutex       sync.RWMutex
	deregisterDBProxyTargetsArgsForCall []struct {
		arg1 *rds.DeregisterDBProxyTargetsInput
	}
	deregisterDBProxyTargetsReturns struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}
	deregisterDBProxyTargetsReturnsOnCall map[int]struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}
	DeregisterDBProxyTargetsRequestStub        func(*rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput)
	deregisterDBProxyTargetsRequestMutex       sync.RWMutex
	deregisterDBProxyTargetsRequestArgsForCall []struct {
		arg1 *rds.DeregisterDBProxyTargetsInput
	}
	deregisterDBProxyTargetsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DeregisterDBProxyTargetsOutput
	}
	deregisterDBProxyTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DeregisterDBProxyTargetsOutput
	}
	DeregisterDBProxyTargetsWithContextStub        func(context.Context, *rds.DeregisterDBProxyTargetsInput, ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error)
	deregisterDBProxyTargetsWithContextMutex       sync.RWMutex
	deregisterDBProxyTargetsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DeregisterDBProxyTargetsInput
		arg3 []request.Option
	}
	deregisterDBProxyTargetsWithContextReturns struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}
	deregisterDBProxyTargetsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}
	DescribeAccountAttributesStub        func(*rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error)
	describeAccountAttributesMutex       sync.RWMutex
	describeAccountAttributesArgsForCall []struct {
		arg1 *rds.DescribeAccountAttributesInput
	}
	describeAccountAttributesReturns struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}
	describeAccountAttributesReturnsOnCall map[int]struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}
	DescribeAccountAttributesRequestStub        func(*rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput)
	describeAccountAttributesRequestMutex       sync.RWMutex
	describeAccountAttributesRequestArgsForCall []struct {
		arg1 *rds.DescribeAccountAttributesInput
	}
	describeAccountAttributesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeAccountAttributesOutput
	}
	describeAccountAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeAccountAttributesOutput
	}
	DescribeAccountAttributesWithContextStub        func(context.Context, *rds.DescribeAccountAttributesInput, ...request.Option) (*rds.DescribeAccountAttributesOutput, error)
	describeAccountAttributesWithContextMutex       sync.RWMutex
	describeAccountAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeAccountAttributesInput
		arg3 []request.Option
	}
	describeAccountAttributesWithContextReturns struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}
	describeAccountAttributesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}
	DescribeCertificatesStub        func(*rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error)
	describeCertificatesMutex       sync.RWMutex
	describeCertificatesArgsForCall []struct {
		arg1 *rds.DescribeCertificatesInput
	}
	describeCertificatesReturns struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}
	describeCertificatesReturnsOnCall map[int]struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}
	DescribeCertificatesPagesStub        func(*rds.DescribeCertificatesInput, func(*rds.DescribeCertificatesOutput, bool) bool) error
	describeCertificatesPagesMutex       sync.RWMutex
	describeCertificatesPagesArgsForCall []struct {
		arg1 *rds.DescribeCertificatesInput
		arg2 func(*rds.DescribeCertificatesOutput, bool) bool
	}
	describeCertificatesPagesReturns struct {
		result1 error
	}
	describeCertificatesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCertificatesPagesWithContextStub        func(context.Context, *rds.DescribeCertificatesInput, func(*rds.DescribeCertificatesOutput, bool) bool, ...request.Option) error
	describeCertificatesPagesWithContextMutex       sync.RWMutex
	describeCertificatesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeCertificatesInput
		arg3 func(*rds.DescribeCertificatesOutput, bool) bool
		arg4 []request.Option
	}
	describeCertificatesPagesWithContextReturns struct {
		result1 error
	}
	describeCertificatesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCertificatesRequestStub        func(*rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput)
	describeCertificatesRequestMutex       sync.RWMutex
	describeCertificatesRequestArgsForCall []struct {
		arg1 *rds.DescribeCertificatesInput
	}
	describeCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeCertificatesOutput
	}
	describeCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeCertificatesOutput
	}
	DescribeCertificatesWithContextStub        func(context.Context, *rds.DescribeCertificatesInput, ...request.Option) (*rds.DescribeCertificatesOutput, error)
	describeCertificatesWithContextMutex       sync.RWMutex
	describeCertificatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeCertificatesInput
		arg3 []request.Option
	}
	describeCertificatesWithContextReturns struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}
	describeCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}
	DescribeCustomAvailabilityZonesStub        func(*rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error)
	describeCustomAvailabilityZonesMutex       sync.RWMutex
	describeCustomAvailabilityZonesArgsForCall []struct {
		arg1 *rds.DescribeCustomAvailabilityZonesInput
	}
	describeCustomAvailabilityZonesReturns struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}
	describeCustomAvailabilityZonesReturnsOnCall map[int]struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}
	DescribeCustomAvailabilityZonesPagesStub        func(*rds.DescribeCustomAvailabilityZonesInput, func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) error
	describeCustomAvailabilityZonesPagesMutex       sync.RWMutex
	describeCustomAvailabilityZonesPagesArgsForCall []struct {
		arg1 *rds.DescribeCustomAvailabilityZonesInput
		arg2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
	}
	describeCustomAvailabilityZonesPagesReturns struct {
		result1 error
	}
	describeCustomAvailabilityZonesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCustomAvailabilityZonesPagesWithContextStub        func(context.Context, *rds.DescribeCustomAvailabilityZonesInput, func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, ...request.Option) error
	describeCustomAvailabilityZonesPagesWithContextMutex       sync.RWMutex
	describeCustomAvailabilityZonesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeCustomAvailabilityZonesInput
		arg3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
		arg4 []request.Option
	}
	describeCustomAvailabilityZonesPagesWithContextReturns struct {
		result1 error
	}
	describeCustomAvailabilityZonesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCustomAvailabilityZonesRequestStub        func(*rds.DescribeCustomAvailabilityZonesInput) (*request.Request, *rds.DescribeCustomAvailabilityZonesOutput)
	describeCustomAvailabilityZonesRequestMutex       sync.RWMutex
	describeCustomAvailabilityZonesRequestArgsForCall []struct {
		arg1 *rds.DescribeCustomAvailabilityZonesInput
	}
	describeCustomAvailabilityZonesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeCustomAvailabilityZonesOutput
	}
	describeCustomAvailabilityZonesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeCustomAvailabilityZonesOutput
	}
	DescribeCustomAvailabilityZonesWithContextStub        func(context.Context, *rds.DescribeCustomAvailabilityZonesInput, ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error)
	describeCustomAvailabilityZonesWithContextMutex       sync.RWMutex
	describeCustomAvailabilityZonesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeCustomAvailabilityZonesInput
		arg3 []request.Option
	}
	describeCustomAvailabilityZonesWithContextReturns struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}
	describeCustomAvailabilityZonesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}
	DescribeDBClusterBacktracksStub        func(*rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error)
	describeDBClusterBacktracksMutex       sync.RWMutex
	describeDBClusterBacktracksArgsForCall []struct {
		arg1 *rds.DescribeDBClusterBacktracksInput
	}
	describeDBClusterBacktracksReturns struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}
	describeDBClusterBacktracksReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}
	DescribeDBClusterBacktracksPagesStub        func(*rds.DescribeDBClusterBacktracksInput, func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) error
	describeDBClusterBacktracksPagesMutex       sync.RWMutex
	describeDBClusterBacktracksPagesArgsForCall []struct {
		arg1 *rds.DescribeDBClusterBacktracksInput
		arg2 func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
	}
	describeDBClusterBacktracksPagesReturns struct {
		result1 error
	}
	describeDBClusterBacktracksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterBacktracksPagesWithContextStub        func(context.Context, *rds.DescribeDBClusterBacktracksInput, func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, ...request.Option) error
	describeDBClusterBacktracksPagesWithContextMutex       sync.RWMutex
	describeDBClusterBacktracksPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterBacktracksInput
		arg3 func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
		arg4 []request.Option
	}
	describeDBClusterBacktracksPagesWithContextReturns struct {
		result1 error
	}
	describeDBClusterBacktracksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterBacktracksRequestStub        func(*rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput)
	describeDBClusterBacktracksRequestMutex       sync.RWMutex
	describeDBClusterBacktracksRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClusterBacktracksInput
	}
	describeDBClusterBacktracksRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterBacktracksOutput
	}
	describeDBClusterBacktracksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterBacktracksOutput
	}
	DescribeDBClusterBacktracksWithContextStub        func(context.Context, *rds.DescribeDBClusterBacktracksInput, ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error)
	describeDBClusterBacktracksWithContextMutex       sync.RWMutex
	describeDBClusterBacktracksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterBacktracksInput
		arg3 []request.Option
	}
	describeDBClusterBacktracksWithContextReturns struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}
	describeDBClusterBacktracksWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}
	DescribeDBClusterEndpointsStub        func(*rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error)
	describeDBClusterEndpointsMutex       sync.RWMutex
	describeDBClusterEndpointsArgsForCall []struct {
		arg1 *rds.DescribeDBClusterEndpointsInput
	}
	describeDBClusterEndpointsReturns struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}
	describeDBClusterEndpointsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}
	DescribeDBClusterEndpointsPagesStub        func(*rds.DescribeDBClusterEndpointsInput, func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) error
	describeDBClusterEndpointsPagesMutex       sync.RWMutex
	describeDBClusterEndpointsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBClusterEndpointsInput
		arg2 func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
	}
	describeDBClusterEndpointsPagesReturns struct {
		result1 error
	}
	describeDBClusterEndpointsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterEndpointsPagesWithContextStub        func(context.Context, *rds.DescribeDBClusterEndpointsInput, func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, ...request.Option) error
	describeDBClusterEndpointsPagesWithContextMutex       sync.RWMutex
	describeDBClusterEndpointsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterEndpointsInput
		arg3 func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBClusterEndpointsPagesWithContextReturns struct {
		result1 error
	}
	describeDBClusterEndpointsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterEndpointsRequestStub        func(*rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput)
	describeDBClusterEndpointsRequestMutex       sync.RWMutex
	describeDBClusterEndpointsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClusterEndpointsInput
	}
	describeDBClusterEndpointsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterEndpointsOutput
	}
	describeDBClusterEndpointsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterEndpointsOutput
	}
	DescribeDBClusterEndpointsWithContextStub        func(context.Context, *rds.DescribeDBClusterEndpointsInput, ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error)
	describeDBClusterEndpointsWithContextMutex       sync.RWMutex
	describeDBClusterEndpointsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterEndpointsInput
		arg3 []request.Option
	}
	describeDBClusterEndpointsWithContextReturns struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}
	describeDBClusterEndpointsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}
	DescribeDBClusterParameterGroupsStub        func(*rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error)
	describeDBClusterParameterGroupsMutex       sync.RWMutex
	describeDBClusterParameterGroupsArgsForCall []struct {
		arg1 *rds.DescribeDBClusterParameterGroupsInput
	}
	describeDBClusterParameterGroupsReturns struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}
	describeDBClusterParameterGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}
	DescribeDBClusterParameterGroupsPagesStub        func(*rds.DescribeDBClusterParameterGroupsInput, func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) error
	describeDBClusterParameterGroupsPagesMutex       sync.RWMutex
	describeDBClusterParameterGroupsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBClusterParameterGroupsInput
		arg2 func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
	}
	describeDBClusterParameterGroupsPagesReturns struct {
		result1 error
	}
	describeDBClusterParameterGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterParameterGroupsPagesWithContextStub        func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, ...request.Option) error
	describeDBClusterParameterGroupsPagesWithContextMutex       sync.RWMutex
	describeDBClusterParameterGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParameterGroupsInput
		arg3 func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBClusterParameterGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeDBClusterParameterGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterParameterGroupsRequestStub        func(*rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput)
	describeDBClusterParameterGroupsRequestMutex       sync.RWMutex
	describeDBClusterParameterGroupsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClusterParameterGroupsInput
	}
	describeDBClusterParameterGroupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParameterGroupsOutput
	}
	describeDBClusterParameterGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParameterGroupsOutput
	}
	DescribeDBClusterParameterGroupsWithContextStub        func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error)
	describeDBClusterParameterGroupsWithContextMutex       sync.RWMutex
	describeDBClusterParameterGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParameterGroupsInput
		arg3 []request.Option
	}
	describeDBClusterParameterGroupsWithContextReturns struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}
	describeDBClusterParameterGroupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}
	DescribeDBClusterParametersStub        func(*rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error)
	describeDBClusterParametersMutex       sync.RWMutex
	describeDBClusterParametersArgsForCall []struct {
		arg1 *rds.DescribeDBClusterParametersInput
	}
	describeDBClusterParametersReturns struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}
	describeDBClusterParametersReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}
	DescribeDBClusterParametersPagesStub        func(*rds.DescribeDBClusterParametersInput, func(*rds.DescribeDBClusterParametersOutput, bool) bool) error
	describeDBClusterParametersPagesMutex       sync.RWMutex
	describeDBClusterParametersPagesArgsForCall []struct {
		arg1 *rds.DescribeDBClusterParametersInput
		arg2 func(*rds.DescribeDBClusterParametersOutput, bool) bool
	}
	describeDBClusterParametersPagesReturns struct {
		result1 error
	}
	describeDBClusterParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterParametersPagesWithContextStub        func(context.Context, *rds.DescribeDBClusterParametersInput, func(*rds.DescribeDBClusterParametersOutput, bool) bool, ...request.Option) error
	describeDBClusterParametersPagesWithContextMutex       sync.RWMutex
	describeDBClusterParametersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParametersInput
		arg3 func(*rds.DescribeDBClusterParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeDBClusterParametersPagesWithContextReturns struct {
		result1 error
	}
	describeDBClusterParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterParametersRequestStub        func(*rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput)
	describeDBClusterParametersRequestMutex       sync.RWMutex
	describeDBClusterParametersRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClusterParametersInput
	}
	describeDBClusterParametersRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParametersOutput
	}
	describeDBClusterParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParametersOutput
	}
	DescribeDBClusterParametersWithContextStub        func(context.Context, *rds.DescribeDBClusterParametersInput, ...request.Option) (*rds.DescribeDBClusterParametersOutput, error)
	describeDBClusterParametersWithContextMutex       sync.RWMutex
	describeDBClusterParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParametersInput
		arg3 []request.Option
	}
	describeDBClusterParametersWithContextReturns struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}
	describeDBClusterParametersWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}
	DescribeDBClusterSnapshotAttributesStub        func(*rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)
	describeDBClusterSnapshotAttributesMutex       sync.RWMutex
	describeDBClusterSnapshotAttributesArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotAttributesInput
	}
	describeDBClusterSnapshotAttributesReturns struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}
	describeDBClusterSnapshotAttributesReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}
	DescribeDBClusterSnapshotAttributesRequestStub        func(*rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput)
	describeDBClusterSnapshotAttributesRequestMutex       sync.RWMutex
	describeDBClusterSnapshotAttributesRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotAttributesInput
	}
	describeDBClusterSnapshotAttributesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotAttributesOutput
	}
	describeDBClusterSnapshotAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotAttributesOutput
	}
	DescribeDBClusterSnapshotAttributesWithContextStub        func(context.Context, *rds.DescribeDBClusterSnapshotAttributesInput, ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)
	describeDBClusterSnapshotAttributesWithContextMutex       sync.RWMutex
	describeDBClusterSnapshotAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotAttributesInput
		arg3 []request.Option
	}
	describeDBClusterSnapshotAttributesWithContextReturns struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}
	describeDBClusterSnapshotAttributesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}
	DescribeDBClusterSnapshotsStub        func(*rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error)
	describeDBClusterSnapshotsMutex       sync.RWMutex
	describeDBClusterSnapshotsArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}
	describeDBClusterSnapshotsReturns struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}
	describeDBClusterSnapshotsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}
	DescribeDBClusterSnapshotsPagesStub        func(*rds.DescribeDBClusterSnapshotsInput, func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) error
	describeDBClusterSnapshotsPagesMutex       sync.RWMutex
	describeDBClusterSnapshotsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
		arg2 func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
	}
	describeDBClusterSnapshotsPagesReturns struct {
		result1 error
	}
	describeDBClusterSnapshotsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterSnapshotsPagesWithContextStub        func(context.Context, *rds.DescribeDBClusterSnapshotsInput, func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, ...request.Option) error
	describeDBClusterSnapshotsPagesWithContextMutex       sync.RWMutex
	describeDBClusterSnapshotsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBClusterSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeDBClusterSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClusterSnapshotsRequestStub        func(*rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput)
	describeDBClusterSnapshotsRequestMutex       sync.RWMutex
	describeDBClusterSnapshotsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}
	describeDBClusterSnapshotsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotsOutput
	}
	describeDBClusterSnapshotsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotsOutput
	}
	DescribeDBClusterSnapshotsWithContextStub        func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error)
	describeDBClusterSnapshotsWithContextMutex       sync.RWMutex
	describeDBClusterSnapshotsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 []request.Option
	}
	describeDBClusterSnapshotsWithContextReturns struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}
	describeDBClusterSnapshotsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}
	DescribeDBClustersStub        func(*rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error)
	describeDBClustersMutex       sync.RWMutex
	describeDBClustersArgsForCall []struct {
		arg1 *rds.DescribeDBClustersInput
	}
	describeDBClustersReturns struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}
	describeDBClustersReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}
	DescribeDBClustersPagesStub        func(*rds.DescribeDBClustersInput, func(*rds.DescribeDBClustersOutput, bool) bool) error
	describeDBClustersPagesMutex       sync.RWMutex
	describeDBClustersPagesArgsForCall []struct {
		arg1 *rds.DescribeDBClustersInput
		arg2 func(*rds.DescribeDBClustersOutput, bool) bool
	}
	describeDBClustersPagesReturns struct {
		result1 error
	}
	describeDBClustersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClustersPagesWithContextStub        func(context.Context, *rds.DescribeDBClustersInput, func(*rds.DescribeDBClustersOutput, bool) bool, ...request.Option) error
	describeDBClustersPagesWithContextMutex       sync.RWMutex
	describeDBClustersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClustersInput
		arg3 func(*rds.DescribeDBClustersOutput, bool) bool
		arg4 []request.Option
	}
	describeDBClustersPagesWithContextReturns struct {
		result1 error
	}
	describeDBClustersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBClustersRequestStub        func(*rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput)
	describeDBClustersRequestMutex       sync.RWMutex
	describeDBClustersRequestArgsForCall []struct {
		arg1 *rds.DescribeDBClustersInput
	}
	describeDBClustersRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBClustersOutput
	}
	describeDBClustersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBClustersOutput
	}
	DescribeDBClustersWithContextStub        func(context.Context, *rds.DescribeDBClustersInput, ...request.Option) (*rds.DescribeDBClustersOutput, error)
	describeDBClustersWithContextMutex       sync.RWMutex
	describeDBClustersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClustersInput
		arg3 []request.Option
	}
	describeDBClustersWithContextReturns struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}
	describeDBClustersWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}
	DescribeDBEngineVersionsStub        func(*rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error)
	describeDBEngineVersionsMutex       sync.RWMutex
	describeDBEngineVersionsArgsForCall []struct {
		arg1 *rds.DescribeDBEngineVersionsInput
	}
	describeDBEngineVersionsReturns struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}
	describeDBEngineVersionsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}
	DescribeDBEngineVersionsPagesStub        func(*rds.DescribeDBEngineVersionsInput, func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error
	describeDBEngineVersionsPagesMutex       sync.RWMutex
	describeDBEngineVersionsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBEngineVersionsInput
		arg2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	}
	describeDBEngineVersionsPagesReturns struct {
		result1 error
	}
	describeDBEngineVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBEngineVersionsPagesWithContextStub        func(context.Context, *rds.DescribeDBEngineVersionsInput, func(*rds.DescribeDBEngineVersionsOutput, bool) bool, ...request.Option) error
	describeDBEngineVersionsPagesWithContextMutex       sync.RWMutex
	describeDBEngineVersionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBEngineVersionsInput
		arg3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBEngineVersionsPagesWithContextReturns struct {
		result1 error
	}
	describeDBEngineVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBEngineVersionsRequestStub        func(*rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput)
	describeDBEngineVersionsRequestMutex       sync.RWMutex
	describeDBEngineVersionsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBEngineVersionsInput
	}
	describeDBEngineVersionsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBEngineVersionsOutput
	}
	describeDBEngineVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBEngineVersionsOutput
	}
	DescribeDBEngineVersionsWithContextStub        func(context.Context, *rds.DescribeDBEngineVersionsInput, ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error)
	describeDBEngineVersionsWithContextMutex       sync.RWMutex
	describeDBEngineVersionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBEngineVersionsInput
		arg3 []request.Option
	}
	describeDBEngineVersionsWithContextReturns struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}
	describeDBEngineVersionsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}
	DescribeDBInstanceAutomatedBackupsStub        func(*rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)
	describeDBInstanceAutomatedBackupsMutex       sync.RWMutex
	describeDBInstanceAutomatedBackupsArgsForCall []struct {
		arg1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}
	describeDBInstanceAutomatedBackupsReturns struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}
	describeDBInstanceAutomatedBackupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}
	DescribeDBInstanceAutomatedBackupsPagesStub        func(*rds.DescribeDBInstanceAutomatedBackupsInput, func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error
	describeDBInstanceAutomatedBackupsPagesMutex       sync.RWMutex
	describeDBInstanceAutomatedBackupsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBInstanceAutomatedBackupsInput
		arg2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	}
	describeDBInstanceAutomatedBackupsPagesReturns struct {
		result1 error
	}
	describeDBInstanceAutomatedBackupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBInstanceAutomatedBackupsPagesWithContextStub        func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, ...request.Option) error
	describeDBInstanceAutomatedBackupsPagesWithContextMutex       sync.RWMutex
	describeDBInstanceAutomatedBackupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstanceAutomatedBackupsInput
		arg3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBInstanceAutomatedBackupsPagesWithContextReturns struct {
		result1 error
	}
	describeDBInstanceAutomatedBackupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBInstanceAutomatedBackupsRequestStub        func(*rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput)
	describeDBInstanceAutomatedBackupsRequestMutex       sync.RWMutex
	describeDBInstanceAutomatedBackupsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}
	describeDBInstanceAutomatedBackupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstanceAutomatedBackupsOutput
	}
	describeDBInstanceAutomatedBackupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstanceAutomatedBackupsOutput
	}
	DescribeDBInstanceAutomatedBackupsWithContextStub        func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)
	describeDBInstanceAutomatedBackupsWithContextMutex       sync.RWMutex
	describeDBInstanceAutomatedBackupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstanceAutomatedBackupsInput
		arg3 []request.Option
	}
	describeDBInstanceAutomatedBackupsWithContextReturns struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}
	describeDBInstanceAutomatedBackupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}
	DescribeDBInstancesStub        func(*rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error)
	describeDBInstancesMutex       sync.RWMutex
	describeDBInstancesArgsForCall []struct {
		arg1 *rds.DescribeDBInstancesInput
	}
	describeDBInstancesReturns struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}
	describeDBInstancesReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}
	DescribeDBInstancesPagesStub        func(*rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool) error
	describeDBInstancesPagesMutex       sync.RWMutex
	describeDBInstancesPagesArgsForCall []struct {
		arg1 *rds.DescribeDBInstancesInput
		arg2 func(*rds.DescribeDBInstancesOutput, bool) bool
	}
	describeDBInstancesPagesReturns struct {
		result1 error
	}
	describeDBInstancesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBInstancesPagesWithContextStub        func(context.Context, *rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool, ...request.Option) error
	describeDBInstancesPagesWithContextMutex       sync.RWMutex
	describeDBInstancesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 func(*rds.DescribeDBInstancesOutput, bool) bool
		arg4 []request.Option
	}
	describeDBInstancesPagesWithContextReturns struct {
		result1 error
	}
	describeDBInstancesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBInstancesRequestStub        func(*rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput)
	describeDBInstancesRequestMutex       sync.RWMutex
	describeDBInstancesRequestArgsForCall []struct {
		arg1 *rds.DescribeDBInstancesInput
	}
	describeDBInstancesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstancesOutput
	}
	describeDBInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstancesOutput
	}
	DescribeDBInstancesWithContextStub        func(context.Context, *rds.DescribeDBInstancesInput, ...request.Option) (*rds.DescribeDBInstancesOutput, error)
	describeDBInstancesWithContextMutex       sync.RWMutex
	describeDBInstancesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 []request.Option
	}
	describeDBInstancesWithContextReturns struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}
	describeDBInstancesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}
	DescribeDBLogFilesStub        func(*rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error)
	describeDBLogFilesMutex       sync.RWMutex
	describeDBLogFilesArgsForCall []struct {
		arg1 *rds.DescribeDBLogFilesInput
	}
	describeDBLogFilesReturns struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}
	describeDBLogFilesReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}
	DescribeDBLogFilesPagesStub        func(*rds.DescribeDBLogFilesInput, func(*rds.DescribeDBLogFilesOutput, bool) bool) error
	describeDBLogFilesPagesMutex       sync.RWMutex
	describeDBLogFilesPagesArgsForCall []struct {
		arg1 *rds.DescribeDBLogFilesInput
		arg2 func(*rds.DescribeDBLogFilesOutput, bool) bool
	}
	describeDBLogFilesPagesReturns struct {
		result1 error
	}
	describeDBLogFilesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBLogFilesPagesWithContextStub        func(context.Context, *rds.DescribeDBLogFilesInput, func(*rds.DescribeDBLogFilesOutput, bool) bool, ...request.Option) error
	describeDBLogFilesPagesWithContextMutex       sync.RWMutex
	describeDBLogFilesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBLogFilesInput
		arg3 func(*rds.DescribeDBLogFilesOutput, bool) bool
		arg4 []request.Option
	}
	describeDBLogFilesPagesWithContextReturns struct {
		result1 error
	}
	describeDBLogFilesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBLogFilesRequestStub        func(*rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput)
	describeDBLogFilesRequestMutex       sync.RWMutex
	describeDBLogFilesRequestArgsForCall []struct {
		arg1 *rds.DescribeDBLogFilesInput
	}
	describeDBLogFilesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBLogFilesOutput
	}
	describeDBLogFilesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBLogFilesOutput
	}
	DescribeDBLogFilesWithContextStub        func(context.Context, *rds.DescribeDBLogFilesInput, ...request.Option) (*rds.DescribeDBLogFilesOutput, error)
	describeDBLogFilesWithContextMutex       sync.RWMutex
	describeDBLogFilesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBLogFilesInput
		arg3 []request.Option
	}
	describeDBLogFilesWithContextReturns struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}
	describeDBLogFilesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}
	DescribeDBParameterGroupsStub        func(*rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error)
	describeDBParameterGroupsMutex       sync.RWMutex
	describeDBParameterGroupsArgsForCall []struct {
		arg1 *rds.DescribeDBParameterGroupsInput
	}
	describeDBParameterGroupsReturns struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}
	describeDBParameterGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}
	DescribeDBParameterGroupsPagesStub        func(*rds.DescribeDBParameterGroupsInput, func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error
	describeDBParameterGroupsPagesMutex       sync.RWMutex
	describeDBParameterGroupsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBParameterGroupsInput
		arg2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	}
	describeDBParameterGroupsPagesReturns struct {
		result1 error
	}
	describeDBParameterGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBParameterGroupsPagesWithContextStub        func(context.Context, *rds.DescribeDBParameterGroupsInput, func(*rds.DescribeDBParameterGroupsOutput, bool) bool, ...request.Option) error
	describeDBParameterGroupsPagesWithContextMutex       sync.RWMutex
	describeDBParameterGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParameterGroupsInput
		arg3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBParameterGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeDBParameterGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBParameterGroupsRequestStub        func(*rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput)
	describeDBParameterGroupsRequestMutex       sync.RWMutex
	describeDBParameterGroupsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBParameterGroupsInput
	}
	describeDBParameterGroupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBParameterGroupsOutput
	}
	describeDBParameterGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBParameterGroupsOutput
	}
	DescribeDBParameterGroupsWithContextStub        func(context.Context, *rds.DescribeDBParameterGroupsInput, ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error)
	describeDBParameterGroupsWithContextMutex       sync.RWMutex
	describeDBParameterGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParameterGroupsInput
		arg3 []request.Option
	}
	describeDBParameterGroupsWithContextReturns struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}
	describeDBParameterGroupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}
	DescribeDBParametersStub        func(*rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error)
	describeDBParametersMutex       sync.RWMutex
	describeDBParametersArgsForCall []struct {
		arg1 *rds.DescribeDBParametersInput
	}
	describeDBParametersReturns struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}
	describeDBParametersReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}
	DescribeDBParametersPagesStub        func(*rds.DescribeDBParametersInput, func(*rds.DescribeDBParametersOutput, bool) bool) error
	describeDBParametersPagesMutex       sync.RWMutex
	describeDBParametersPagesArgsForCall []struct {
		arg1 *rds.DescribeDBParametersInput
		arg2 func(*rds.DescribeDBParametersOutput, bool) bool
	}
	describeDBParametersPagesReturns struct {
		result1 error
	}
	describeDBParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBParametersPagesWithContextStub        func(context.Context, *rds.DescribeDBParametersInput, func(*rds.DescribeDBParametersOutput, bool) bool, ...request.Option) error
	describeDBParametersPagesWithContextMutex       sync.RWMutex
	describeDBParametersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParametersInput
		arg3 func(*rds.DescribeDBParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeDBParametersPagesWithContextReturns struct {
		result1 error
	}
	describeDBParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBParametersRequestStub        func(*rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput)
	describeDBParametersRequestMutex       sync.RWMutex
	describeDBParametersRequestArgsForCall []struct {
		arg1 *rds.DescribeDBParametersInput
	}
	describeDBParametersRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBParametersOutput
	}
	describeDBParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBParametersOutput
	}
	DescribeDBParametersWithContextStub        func(context.Context, *rds.DescribeDBParametersInput, ...request.Option) (*rds.DescribeDBParametersOutput, error)
	describeDBParametersWithContextMutex       sync.RWMutex
	describeDBParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParametersInput
		arg3 []request.Option
	}
	describeDBParametersWithContextReturns struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}
	describeDBParametersWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}
	DescribeDBProxiesStub        func(*rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error)
	describeDBProxiesMutex       sync.RWMutex
	describeDBProxiesArgsForCall []struct {
		arg1 *rds.DescribeDBProxiesInput
	}
	describeDBProxiesReturns struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}
	describeDBProxiesReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}
	DescribeDBProxiesPagesStub        func(*rds.DescribeDBProxiesInput, func(*rds.DescribeDBProxiesOutput, bool) bool) error
	describeDBProxiesPagesMutex       sync.RWMutex
	describeDBProxiesPagesArgsForCall []struct {
		arg1 *rds.DescribeDBProxiesInput
		arg2 func(*rds.DescribeDBProxiesOutput, bool) bool
	}
	describeDBProxiesPagesReturns struct {
		result1 error
	}
	describeDBProxiesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBProxiesPagesWithContextStub        func(context.Context, *rds.DescribeDBProxiesInput, func(*rds.DescribeDBProxiesOutput, bool) bool, ...request.Option) error
	describeDBProxiesPagesWithContextMutex       sync.RWMutex
	describeDBProxiesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxiesInput
		arg3 func(*rds.DescribeDBProxiesOutput, bool) bool
		arg4 []request.Option
	}
	describeDBProxiesPagesWithContextReturns struct {
		result1 error
	}
	describeDBProxiesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBProxiesRequestStub        func(*rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput)
	describeDBProxiesRequestMutex       sync.RWMutex
	describeDBProxiesRequestArgsForCall []struct {
		arg1 *rds.DescribeDBProxiesInput
	}
	describeDBProxiesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxiesOutput
	}
	describeDBProxiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxiesOutput
	}
	DescribeDBProxiesWithContextStub        func(context.Context, *rds.DescribeDBProxiesInput, ...request.Option) (*rds.DescribeDBProxiesOutput, error)
	describeDBProxiesWithContextMutex       sync.RWMutex
	describeDBProxiesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxiesInput
		arg3 []request.Option
	}
	describeDBProxiesWithContextReturns struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}
	describeDBProxiesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}
	DescribeDBProxyTargetGroupsStub        func(*rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error)
	describeDBProxyTargetGroupsMutex       sync.RWMutex
	describeDBProxyTargetGroupsArgsForCall []struct {
		arg1 *rds.DescribeDBProxyTargetGroupsInput
	}
	describeDBProxyTargetGroupsReturns struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}
	describeDBProxyTargetGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}
	DescribeDBProxyTargetGroupsPagesStub        func(*rds.DescribeDBProxyTargetGroupsInput, func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error
	describeDBProxyTargetGroupsPagesMutex       sync.RWMutex
	describeDBProxyTargetGroupsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBProxyTargetGroupsInput
		arg2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	}
	describeDBProxyTargetGroupsPagesReturns struct {
		result1 error
	}
	describeDBProxyTargetGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBProxyTargetGroupsPagesWithContextStub        func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, ...request.Option) error
	describeDBProxyTargetGroupsPagesWithContextMutex       sync.RWMutex
	describeDBProxyTargetGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetGroupsInput
		arg3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBProxyTargetGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeDBProxyTargetGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBProxyTargetGroupsRequestStub        func(*rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput)
	describeDBProxyTargetGroupsRequestMutex       sync.RWMutex
	describeDBProxyTargetGroupsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBProxyTargetGroupsInput
	}
	describeDBProxyTargetGroupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetGroupsOutput
	}
	describeDBProxyTargetGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetGroupsOutput
	}
	DescribeDBProxyTargetGroupsWithContextStub        func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error)
	describeDBProxyTargetGroupsWithContextMutex       sync.RWMutex
	describeDBProxyTargetGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetGroupsInput
		arg3 []request.Option
	}
	describeDBProxyTargetGroupsWithContextReturns struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}
	describeDBProxyTargetGroupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}
	DescribeDBProxyTargetsStub        func(*rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error)
	describeDBProxyTargetsMutex       sync.RWMutex
	describeDBProxyTargetsArgsForCall []struct {
		arg1 *rds.DescribeDBProxyTargetsInput
	}
	describeDBProxyTargetsReturns struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}
	describeDBProxyTargetsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}
	DescribeDBProxyTargetsPagesStub        func(*rds.DescribeDBProxyTargetsInput, func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error
	describeDBProxyTargetsPagesMutex       sync.RWMutex
	describeDBProxyTargetsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBProxyTargetsInput
		arg2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	}
	describeDBProxyTargetsPagesReturns struct {
		result1 error
	}
	describeDBProxyTargetsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBProxyTargetsPagesWithContextStub        func(context.Context, *rds.DescribeDBProxyTargetsInput, func(*rds.DescribeDBProxyTargetsOutput, bool) bool, ...request.Option) error
	describeDBProxyTargetsPagesWithContextMutex       sync.RWMutex
	describeDBProxyTargetsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetsInput
		arg3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBProxyTargetsPagesWithContextReturns struct {
		result1 error
	}
	describeDBProxyTargetsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBProxyTargetsRequestStub        func(*rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput)
	describeDBProxyTargetsRequestMutex       sync.RWMutex
	describeDBProxyTargetsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBProxyTargetsInput
	}
	describeDBProxyTargetsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetsOutput
	}
	describeDBProxyTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetsOutput
	}
	DescribeDBProxyTargetsWithContextStub        func(context.Context, *rds.DescribeDBProxyTargetsInput, ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error)
	describeDBProxyTargetsWithContextMutex       sync.RWMutex
	describeDBProxyTargetsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetsInput
		arg3 []request.Option
	}
	describeDBProxyTargetsWithContextReturns struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}
	describeDBProxyTargetsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}
	DescribeDBSecurityGroupsStub        func(*rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error)
	describeDBSecurityGroupsMutex       sync.RWMutex
	describeDBSecurityGroupsArgsForCall []struct {
		arg1 *rds.DescribeDBSecurityGroupsInput
	}
	describeDBSecurityGroupsReturns struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}
	describeDBSecurityGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}
	DescribeDBSecurityGroupsPagesStub        func(*rds.DescribeDBSecurityGroupsInput, func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error
	describeDBSecurityGroupsPagesMutex       sync.RWMutex
	describeDBSecurityGroupsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBSecurityGroupsInput
		arg2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	}
	describeDBSecurityGroupsPagesReturns struct {
		result1 error
	}
	describeDBSecurityGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBSecurityGroupsPagesWithContextStub        func(context.Context, *rds.DescribeDBSecurityGroupsInput, func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, ...request.Option) error
	describeDBSecurityGroupsPagesWithContextMutex       sync.RWMutex
	describeDBSecurityGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSecurityGroupsInput
		arg3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBSecurityGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeDBSecurityGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBSecurityGroupsRequestStub        func(*rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput)
	describeDBSecurityGroupsRequestMutex       sync.RWMutex
	describeDBSecurityGroupsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBSecurityGroupsInput
	}
	describeDBSecurityGroupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBSecurityGroupsOutput
	}
	describeDBSecurityGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBSecurityGroupsOutput
	}
	DescribeDBSecurityGroupsWithContextStub        func(context.Context, *rds.DescribeDBSecurityGroupsInput, ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error)
	describeDBSecurityGroupsWithContextMutex       sync.RWMutex
	describeDBSecurityGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSecurityGroupsInput
		arg3 []request.Option
	}
	describeDBSecurityGroupsWithContextReturns struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}
	describeDBSecurityGroupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}
	DescribeDBSnapshotAttributesStub        func(*rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error)
	describeDBSnapshotAttributesMutex       sync.RWMutex
	describeDBSnapshotAttributesArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotAttributesInput
	}
	describeDBSnapshotAttributesReturns struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}
	describeDBSnapshotAttributesReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}
	DescribeDBSnapshotAttributesRequestStub        func(*rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput)
	describeDBSnapshotAttributesRequestMutex       sync.RWMutex
	describeDBSnapshotAttributesRequestArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotAttributesInput
	}
	describeDBSnapshotAttributesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotAttributesOutput
	}
	describeDBSnapshotAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotAttributesOutput
	}
	DescribeDBSnapshotAttributesWithContextStub        func(context.Context, *rds.DescribeDBSnapshotAttributesInput, ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error)
	describeDBSnapshotAttributesWithContextMutex       sync.RWMutex
	describeDBSnapshotAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotAttributesInput
		arg3 []request.Option
	}
	describeDBSnapshotAttributesWithContextReturns struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}
	describeDBSnapshotAttributesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}
	DescribeDBSnapshotsStub        func(*rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error)
	describeDBSnapshotsMutex       sync.RWMutex
	describeDBSnapshotsArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}
	describeDBSnapshotsReturns struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}
	describeDBSnapshotsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}
	DescribeDBSnapshotsPagesStub        func(*rds.DescribeDBSnapshotsInput, func(*rds.DescribeDBSnapshotsOutput, bool) bool) error
	describeDBSnapshotsPagesMutex       sync.RWMutex
	describeDBSnapshotsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotsInput
		arg2 func(*rds.DescribeDBSnapshotsOutput, bool) bool
	}
	describeDBSnapshotsPagesReturns struct {
		result1 error
	}
	describeDBSnapshotsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBSnapshotsPagesWithContextStub        func(context.Context, *rds.DescribeDBSnapshotsInput, func(*rds.DescribeDBSnapshotsOutput, bool) bool, ...request.Option) error
	describeDBSnapshotsPagesWithContextMutex       sync.RWMutex
	describeDBSnapshotsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 func(*rds.DescribeDBSnapshotsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeDBSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBSnapshotsRequestStub        func(*rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput)
	describeDBSnapshotsRequestMutex       sync.RWMutex
	describeDBSnapshotsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}
	describeDBSnapshotsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotsOutput
	}
	describeDBSnapshotsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotsOutput
	}
	DescribeDBSnapshotsWithContextStub        func(context.Context, *rds.DescribeDBSnapshotsInput, ...request.Option) (*rds.DescribeDBSnapshotsOutput, error)
	describeDBSnapshotsWithContextMutex       sync.RWMutex
	describeDBSnapshotsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 []request.Option
	}
	describeDBSnapshotsWithContextReturns struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}
	describeDBSnapshotsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}
	DescribeDBSubnetGroupsStub        func(*rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error)
	describeDBSubnetGroupsMutex       sync.RWMutex
	describeDBSubnetGroupsArgsForCall []struct {
		arg1 *rds.DescribeDBSubnetGroupsInput
	}
	describeDBSubnetGroupsReturns struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}
	describeDBSubnetGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}
	DescribeDBSubnetGroupsPagesStub        func(*rds.DescribeDBSubnetGroupsInput, func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error
	describeDBSubnetGroupsPagesMutex       sync.RWMutex
	describeDBSubnetGroupsPagesArgsForCall []struct {
		arg1 *rds.DescribeDBSubnetGroupsInput
		arg2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	}
	describeDBSubnetGroupsPagesReturns struct {
		result1 error
	}
	describeDBSubnetGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBSubnetGroupsPagesWithContextStub        func(context.Context, *rds.DescribeDBSubnetGroupsInput, func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, ...request.Option) error
	describeDBSubnetGroupsPagesWithContextMutex       sync.RWMutex
	describeDBSubnetGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSubnetGroupsInput
		arg3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeDBSubnetGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeDBSubnetGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeDBSubnetGroupsRequestStub        func(*rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput)
	describeDBSubnetGroupsRequestMutex       sync.RWMutex
	describeDBSubnetGroupsRequestArgsForCall []struct {
		arg1 *rds.DescribeDBSubnetGroupsInput
	}
	describeDBSubnetGroupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeDBSubnetGroupsOutput
	}
	describeDBSubnetGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeDBSubnetGroupsOutput
	}
	DescribeDBSubnetGroupsWithContextStub        func(context.Context, *rds.DescribeDBSubnetGroupsInput, ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error)
	describeDBSubnetGroupsWithContextMutex       sync.RWMutex
	describeDBSubnetGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSubnetGroupsInput
		arg3 []request.Option
	}
	describeDBSubnetGroupsWithContextReturns struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}
	describeDBSubnetGroupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}
	DescribeEngineDefaultClusterParametersStub        func(*rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error)
	describeEngineDefaultClusterParametersMutex       sync.RWMutex
	describeEngineDefaultClusterParametersArgsForCall []struct {
		arg1 *rds.DescribeEngineDefaultClusterParametersInput
	}
	describeEngineDefaultClusterParametersReturns struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}
	describeEngineDefaultClusterParametersReturnsOnCall map[int]struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}
	DescribeEngineDefaultClusterParametersRequestStub        func(*rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput)
	describeEngineDefaultClusterParametersRequestMutex       sync.RWMutex
	describeEngineDefaultClusterParametersRequestArgsForCall []struct {
		arg1 *rds.DescribeEngineDefaultClusterParametersInput
	}
	describeEngineDefaultClusterParametersRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultClusterParametersOutput
	}
	describeEngineDefaultClusterParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultClusterParametersOutput
	}
	DescribeEngineDefaultClusterParametersWithContextStub        func(context.Context, *rds.DescribeEngineDefaultClusterParametersInput, ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error)
	describeEngineDefaultClusterParametersWithContextMutex       sync.RWMutex
	describeEngineDefaultClusterParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEngineDefaultClusterParametersInput
		arg3 []request.Option
	}
	describeEngineDefaultClusterParametersWithContextReturns struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}
	describeEngineDefaultClusterParametersWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}
	DescribeEngineDefaultParametersStub        func(*rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error)
	describeEngineDefaultParametersMutex       sync.RWMutex
	describeEngineDefaultParametersArgsForCall []struct {
		arg1 *rds.DescribeEngineDefaultParametersInput
	}
	describeEngineDefaultParametersReturns struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}
	describeEngineDefaultParametersReturnsOnCall map[int]struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}
	DescribeEngineDefaultParametersPagesStub        func(*rds.DescribeEngineDefaultParametersInput, func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error
	describeEngineDefaultParametersPagesMutex       sync.RWMutex
	describeEngineDefaultParametersPagesArgsForCall []struct {
		arg1 *rds.DescribeEngineDefaultParametersInput
		arg2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	}
	describeEngineDefaultParametersPagesReturns struct {
		result1 error
	}
	describeEngineDefaultParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEngineDefaultParametersPagesWithContextStub        func(context.Context, *rds.DescribeEngineDefaultParametersInput, func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, ...request.Option) error
	describeEngineDefaultParametersPagesWithContextMutex       sync.RWMutex
	describeEngineDefaultParametersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEngineDefaultParametersInput
		arg3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeEngineDefaultParametersPagesWithContextReturns struct {
		result1 error
	}
	describeEngineDefaultParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEngineDefaultParametersRequestStub        func(*rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput)
	describeEngineDefaultParametersRequestMutex       sync.RWMutex
	describeEngineDefaultParametersRequestArgsForCall []struct {
		arg1 *rds.DescribeEngineDefaultParametersInput
	}
	describeEngineDefaultParametersRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultParametersOutput
	}
	describeEngineDefaultParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultParametersOutput
	}
	DescribeEngineDefaultParametersWithContextStub        func(context.Context, *rds.DescribeEngineDefaultParametersInput, ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error)
	describeEngineDefaultParametersWithContextMutex       sync.RWMutex
	describeEngineDefaultParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEngineDefaultParametersInput
		arg3 []request.Option
	}
	describeEngineDefaultParametersWithContextReturns struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}
	describeEngineDefaultParametersWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}
	DescribeEventCategoriesStub        func(*rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error)
	describeEventCategoriesMutex       sync.RWMutex
	describeEventCategoriesArgsForCall []struct {
		arg1 *rds.DescribeEventCategoriesInput
	}
	describeEventCategoriesReturns struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}
	describeEventCategoriesReturnsOnCall map[int]struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}
	DescribeEventCategoriesRequestStub        func(*rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput)
	describeEventCategoriesRequestMutex       sync.RWMutex
	describeEventCategoriesRequestArgsForCall []struct {
		arg1 *rds.DescribeEventCategoriesInput
	}
	describeEventCategoriesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeEventCategoriesOutput
	}
	describeEventCategoriesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeEventCategoriesOutput
	}
	DescribeEventCategoriesWithContextStub        func(context.Context, *rds.DescribeEventCategoriesInput, ...request.Option) (*rds.DescribeEventCategoriesOutput, error)
	describeEventCategoriesWithContextMutex       sync.RWMutex
	describeEventCategoriesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEventCategoriesInput
		arg3 []request.Option
	}
	describeEventCategoriesWithContextReturns struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}
	describeEventCategoriesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}
	DescribeEventSubscriptionsStub        func(*rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error)
	describeEventSubscriptionsMutex       sync.RWMutex
	describeEventSubscriptionsArgsForCall []struct {
		arg1 *rds.DescribeEventSubscriptionsInput
	}
	describeEventSubscriptionsReturns struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}
	describeEventSubscriptionsReturnsOnCall map[int]struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}
	DescribeEventSubscriptionsPagesStub        func(*rds.DescribeEventSubscriptionsInput, func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error
	describeEventSubscriptionsPagesMutex       sync.RWMutex
	describeEventSubscriptionsPagesArgsForCall []struct {
		arg1 *rds.DescribeEventSubscriptionsInput
		arg2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	}
	describeEventSubscriptionsPagesReturns struct {
		result1 error
	}
	describeEventSubscriptionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventSubscriptionsPagesWithContextStub        func(context.Context, *rds.DescribeEventSubscriptionsInput, func(*rds.DescribeEventSubscriptionsOutput, bool) bool, ...request.Option) error
	describeEventSubscriptionsPagesWithContextMutex       sync.RWMutex
	describeEventSubscriptionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEventSubscriptionsInput
		arg3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		arg4 []request.Option
	}
	describeEventSubscriptionsPagesWithContextReturns struct {
		result1 error
	}
	describeEventSubscriptionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventSubscriptionsRequestStub        func(*rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput)
	describeEventSubscriptionsRequestMutex       sync.RWMutex
	describeEventSubscriptionsRequestArgsForCall []struct {
		arg1 *rds.DescribeEventSubscriptionsInput
	}
	describeEventSubscriptionsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeEventSubscriptionsOutput
	}
	describeEventSubscriptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeEventSubscriptionsOutput
	}
	DescribeEventSubscriptionsWithContextStub        func(context.Context, *rds.DescribeEventSubscriptionsInput, ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error)
	describeEventSubscriptionsWithContextMutex       sync.RWMutex
	describeEventSubscriptionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEventSubscriptionsInput
		arg3 []request.Option
	}
	describeEventSubscriptionsWithContextReturns struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}
	describeEventSubscriptionsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}
	DescribeEventsStub        func(*rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error)
	describeEventsMutex       sync.RWMutex
	describeEventsArgsForCall []struct {
		arg1 *rds.DescribeEventsInput
	}
	describeEventsReturns struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}
	describeEventsReturnsOnCall map[int]struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}
	DescribeEventsPagesStub        func(*rds.DescribeEventsInput, func(*rds.DescribeEventsOutput, bool) bool) error
	describeEventsPagesMutex       sync.RWMutex
	describeEventsPagesArgsForCall []struct {
		arg1 *rds.DescribeEventsInput
		arg2 func(*rds.DescribeEventsOutput, bool) bool
	}
	describeEventsPagesReturns struct {
		result1 error
	}
	describeEventsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsPagesWithContextStub        func(context.Context, *rds.DescribeEventsInput, func(*rds.DescribeEventsOutput, bool) bool, ...request.Option) error
	describeEventsPagesWithContextMutex       sync.RWMutex
	describeEventsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEventsInput
		arg3 func(*rds.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}
	describeEventsPagesWithContextReturns struct {
		result1 error
	}
	describeEventsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsRequestStub        func(*rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput)
	describeEventsRequestMutex       sync.RWMutex
	describeEventsRequestArgsForCall []struct {
		arg1 *rds.DescribeEventsInput
	}
	describeEventsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeEventsOutput
	}
	describeEventsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeEventsOutput
	}
	DescribeEventsWithContextStub        func(context.Context, *rds.DescribeEventsInput, ...request.Option) (*rds.DescribeEventsOutput, error)
	describeEventsWithContextMutex       sync.RWMutex
	describeEventsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeEventsInput
		arg3 []request.Option
	}
	describeEventsWithContextReturns struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}
	describeEventsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}
	DescribeExportTasksStub        func(*rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error)
	describeExportTasksMutex       sync.RWMutex
	describeExportTasksArgsForCall []struct {
		arg1 *rds.DescribeExportTasksInput
	}
	describeExportTasksReturns struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}
	describeExportTasksReturnsOnCall map[int]struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}
	DescribeExportTasksPagesStub        func(*rds.DescribeExportTasksInput, func(*rds.DescribeExportTasksOutput, bool) bool) error
	describeExportTasksPagesMutex       sync.RWMutex
	describeExportTasksPagesArgsForCall []struct {
		arg1 *rds.DescribeExportTasksInput
		arg2 func(*rds.DescribeExportTasksOutput, bool) bool
	}
	describeExportTasksPagesReturns struct {
		result1 error
	}
	describeExportTasksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeExportTasksPagesWithContextStub        func(context.Context, *rds.DescribeExportTasksInput, func(*rds.DescribeExportTasksOutput, bool) bool, ...request.Option) error
	describeExportTasksPagesWithContextMutex       sync.RWMutex
	describeExportTasksPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeExportTasksInput
		arg3 func(*rds.DescribeExportTasksOutput, bool) bool
		arg4 []request.Option
	}
	describeExportTasksPagesWithContextReturns struct {
		result1 error
	}
	describeExportTasksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeExportTasksRequestStub        func(*rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput)
	describeExportTasksRequestMutex       sync.RWMutex
	describeExportTasksRequestArgsForCall []struct {
		arg1 *rds.DescribeExportTasksInput
	}
	describeExportTasksRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeExportTasksOutput
	}
	describeExportTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeExportTasksOutput
	}
	DescribeExportTasksWithContextStub        func(context.Context, *rds.DescribeExportTasksInput, ...request.Option) (*rds.DescribeExportTasksOutput, error)
	describeExportTasksWithContextMutex       sync.RWMutex
	describeExportTasksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeExportTasksInput
		arg3 []request.Option
	}
	describeExportTasksWithContextReturns struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}
	describeExportTasksWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}
	DescribeGlobalClustersStub        func(*rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error)
	describeGlobalClustersMutex       sync.RWMutex
	describeGlobalClustersArgsForCall []struct {
		arg1 *rds.DescribeGlobalClustersInput
	}
	describeGlobalClustersReturns struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}
	describeGlobalClustersReturnsOnCall map[int]struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}
	DescribeGlobalClustersPagesStub        func(*rds.DescribeGlobalClustersInput, func(*rds.DescribeGlobalClustersOutput, bool) bool) error
	describeGlobalClustersPagesMutex       sync.RWMutex
	describeGlobalClustersPagesArgsForCall []struct {
		arg1 *rds.DescribeGlobalClustersInput
		arg2 func(*rds.DescribeGlobalClustersOutput, bool) bool
	}
	describeGlobalClustersPagesReturns struct {
		result1 error
	}
	describeGlobalClustersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeGlobalClustersPagesWithContextStub        func(context.Context, *rds.DescribeGlobalClustersInput, func(*rds.DescribeGlobalClustersOutput, bool) bool, ...request.Option) error
	describeGlobalClustersPagesWithContextMutex       sync.RWMutex
	describeGlobalClustersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeGlobalClustersInput
		arg3 func(*rds.DescribeGlobalClustersOutput, bool) bool
		arg4 []request.Option
	}
	describeGlobalClustersPagesWithContextReturns struct {
		result1 error
	}
	describeGlobalClustersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeGlobalClustersRequestStub        func(*rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput)
	describeGlobalClustersRequestMutex       sync.RWMutex
	describeGlobalClustersRequestArgsForCall []struct {
		arg1 *rds.DescribeGlobalClustersInput
	}
	describeGlobalClustersRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeGlobalClustersOutput
	}
	describeGlobalClustersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeGlobalClustersOutput
	}
	DescribeGlobalClustersWithContextStub        func(context.Context, *rds.DescribeGlobalClustersInput, ...request.Option) (*rds.DescribeGlobalClustersOutput, error)
	describeGlobalClustersWithContextMutex       sync.RWMutex
	describeGlobalClustersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeGlobalClustersInput
		arg3 []request.Option
	}
	describeGlobalClustersWithContextReturns struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}
	describeGlobalClustersWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}
	DescribeInstallationMediaStub        func(*rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error)
	describeInstallationMediaMutex       sync.RWMutex
	describeInstallationMediaArgsForCall []struct {
		arg1 *rds.DescribeInstallationMediaInput
	}
	describeInstallationMediaReturns struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}
	describeInstallationMediaReturnsOnCall map[int]struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}
	DescribeInstallationMediaPagesStub        func(*rds.DescribeInstallationMediaInput, func(*rds.DescribeInstallationMediaOutput, bool) bool) error
	describeInstallationMediaPagesMutex       sync.RWMutex
	describeInstallationMediaPagesArgsForCall []struct {
		arg1 *rds.DescribeInstallationMediaInput
		arg2 func(*rds.DescribeInstallationMediaOutput, bool) bool
	}
	describeInstallationMediaPagesReturns struct {
		result1 error
	}
	describeInstallationMediaPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstallationMediaPagesWithContextStub        func(context.Context, *rds.DescribeInstallationMediaInput, func(*rds.DescribeInstallationMediaOutput, bool) bool, ...request.Option) error
	describeInstallationMediaPagesWithContextMutex       sync.RWMutex
	describeInstallationMediaPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeInstallationMediaInput
		arg3 func(*rds.DescribeInstallationMediaOutput, bool) bool
		arg4 []request.Option
	}
	describeInstallationMediaPagesWithContextReturns struct {
		result1 error
	}
	describeInstallationMediaPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstallationMediaRequestStub        func(*rds.DescribeInstallationMediaInput) (*request.Request, *rds.DescribeInstallationMediaOutput)
	describeInstallationMediaRequestMutex       sync.RWMutex
	describeInstallationMediaRequestArgsForCall []struct {
		arg1 *rds.DescribeInstallationMediaInput
	}
	describeInstallationMediaRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeInstallationMediaOutput
	}
	describeInstallationMediaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeInstallationMediaOutput
	}
	DescribeInstallationMediaWithContextStub        func(context.Context, *rds.DescribeInstallationMediaInput, ...request.Option) (*rds.DescribeInstallationMediaOutput, error)
	describeInstallationMediaWithContextMutex       sync.RWMutex
	describeInstallationMediaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeInstallationMediaInput
		arg3 []request.Option
	}
	describeInstallationMediaWithContextReturns struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}
	describeInstallationMediaWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}
	DescribeOptionGroupOptionsStub        func(*rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error)
	describeOptionGroupOptionsMutex       sync.RWMutex
	describeOptionGroupOptionsArgsForCall []struct {
		arg1 *rds.DescribeOptionGroupOptionsInput
	}
	describeOptionGroupOptionsReturns struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}
	describeOptionGroupOptionsReturnsOnCall map[int]struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}
	DescribeOptionGroupOptionsPagesStub        func(*rds.DescribeOptionGroupOptionsInput, func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error
	describeOptionGroupOptionsPagesMutex       sync.RWMutex
	describeOptionGroupOptionsPagesArgsForCall []struct {
		arg1 *rds.DescribeOptionGroupOptionsInput
		arg2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	}
	describeOptionGroupOptionsPagesReturns struct {
		result1 error
	}
	describeOptionGroupOptionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOptionGroupOptionsPagesWithContextStub        func(context.Context, *rds.DescribeOptionGroupOptionsInput, func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, ...request.Option) error
	describeOptionGroupOptionsPagesWithContextMutex       sync.RWMutex
	describeOptionGroupOptionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupOptionsInput
		arg3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		arg4 []request.Option
	}
	describeOptionGroupOptionsPagesWithContextReturns struct {
		result1 error
	}
	describeOptionGroupOptionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOptionGroupOptionsRequestStub        func(*rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput)
	describeOptionGroupOptionsRequestMutex       sync.RWMutex
	describeOptionGroupOptionsRequestArgsForCall []struct {
		arg1 *rds.DescribeOptionGroupOptionsInput
	}
	describeOptionGroupOptionsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupOptionsOutput
	}
	describeOptionGroupOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupOptionsOutput
	}
	DescribeOptionGroupOptionsWithContextStub        func(context.Context, *rds.DescribeOptionGroupOptionsInput, ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error)
	describeOptionGroupOptionsWithContextMutex       sync.RWMutex
	describeOptionGroupOptionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupOptionsInput
		arg3 []request.Option
	}
	describeOptionGroupOptionsWithContextReturns struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}
	describeOptionGroupOptionsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}
	DescribeOptionGroupsStub        func(*rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error)
	describeOptionGroupsMutex       sync.RWMutex
	describeOptionGroupsArgsForCall []struct {
		arg1 *rds.DescribeOptionGroupsInput
	}
	describeOptionGroupsReturns struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}
	describeOptionGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}
	DescribeOptionGroupsPagesStub        func(*rds.DescribeOptionGroupsInput, func(*rds.DescribeOptionGroupsOutput, bool) bool) error
	describeOptionGroupsPagesMutex       sync.RWMutex
	describeOptionGroupsPagesArgsForCall []struct {
		arg1 *rds.DescribeOptionGroupsInput
		arg2 func(*rds.DescribeOptionGroupsOutput, bool) bool
	}
	describeOptionGroupsPagesReturns struct {
		result1 error
	}
	describeOptionGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOptionGroupsPagesWithContextStub        func(context.Context, *rds.DescribeOptionGroupsInput, func(*rds.DescribeOptionGroupsOutput, bool) bool, ...request.Option) error
	describeOptionGroupsPagesWithContextMutex       sync.RWMutex
	describeOptionGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupsInput
		arg3 func(*rds.DescribeOptionGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeOptionGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeOptionGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOptionGroupsRequestStub        func(*rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput)
	describeOptionGroupsRequestMutex       sync.RWMutex
	describeOptionGroupsRequestArgsForCall []struct {
		arg1 *rds.DescribeOptionGroupsInput
	}
	describeOptionGroupsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupsOutput
	}
	describeOptionGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupsOutput
	}
	DescribeOptionGroupsWithContextStub        func(context.Context, *rds.DescribeOptionGroupsInput, ...request.Option) (*rds.DescribeOptionGroupsOutput, error)
	describeOptionGroupsWithContextMutex       sync.RWMutex
	describeOptionGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupsInput
		arg3 []request.Option
	}
	describeOptionGroupsWithContextReturns struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}
	describeOptionGroupsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}
	DescribeOrderableDBInstanceOptionsStub        func(*rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)
	describeOrderableDBInstanceOptionsMutex       sync.RWMutex
	describeOrderableDBInstanceOptionsArgsForCall []struct {
		arg1 *rds.DescribeOrderableDBInstanceOptionsInput
	}
	describeOrderableDBInstanceOptionsReturns struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}
	describeOrderableDBInstanceOptionsReturnsOnCall map[int]struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}
	DescribeOrderableDBInstanceOptionsPagesStub        func(*rds.DescribeOrderableDBInstanceOptionsInput, func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error
	describeOrderableDBInstanceOptionsPagesMutex       sync.RWMutex
	describeOrderableDBInstanceOptionsPagesArgsForCall []struct {
		arg1 *rds.DescribeOrderableDBInstanceOptionsInput
		arg2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	}
	describeOrderableDBInstanceOptionsPagesReturns struct {
		result1 error
	}
	describeOrderableDBInstanceOptionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOrderableDBInstanceOptionsPagesWithContextStub        func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, ...request.Option) error
	describeOrderableDBInstanceOptionsPagesWithContextMutex       sync.RWMutex
	describeOrderableDBInstanceOptionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeOrderableDBInstanceOptionsInput
		arg3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		arg4 []request.Option
	}
	describeOrderableDBInstanceOptionsPagesWithContextReturns struct {
		result1 error
	}
	describeOrderableDBInstanceOptionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOrderableDBInstanceOptionsRequestStub        func(*rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput)
	describeOrderableDBInstanceOptionsRequestMutex       sync.RWMutex
	describeOrderableDBInstanceOptionsRequestArgsForCall []struct {
		arg1 *rds.DescribeOrderableDBInstanceOptionsInput
	}
	describeOrderableDBInstanceOptionsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeOrderableDBInstanceOptionsOutput
	}
	describeOrderableDBInstanceOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeOrderableDBInstanceOptionsOutput
	}
	DescribeOrderableDBInstanceOptionsWithContextStub        func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)
	describeOrderableDBInstanceOptionsWithContextMutex       sync.RWMutex
	describeOrderableDBInstanceOptionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeOrderableDBInstanceOptionsInput
		arg3 []request.Option
	}
	describeOrderableDBInstanceOptionsWithContextReturns struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}
	describeOrderableDBInstanceOptionsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}
	DescribePendingMaintenanceActionsStub        func(*rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error)
	describePendingMaintenanceActionsMutex       sync.RWMutex
	describePendingMaintenanceActionsArgsForCall []struct {
		arg1 *rds.DescribePendingMaintenanceActionsInput
	}
	describePendingMaintenanceActionsReturns struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}
	describePendingMaintenanceActionsReturnsOnCall map[int]struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}
	DescribePendingMaintenanceActionsPagesStub        func(*rds.DescribePendingMaintenanceActionsInput, func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) error
	describePendingMaintenanceActionsPagesMutex       sync.RWMutex
	describePendingMaintenanceActionsPagesArgsForCall []struct {
		arg1 *rds.DescribePendingMaintenanceActionsInput
		arg2 func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
	}
	describePendingMaintenanceActionsPagesReturns struct {
		result1 error
	}
	describePendingMaintenanceActionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePendingMaintenanceActionsPagesWithContextStub        func(context.Context, *rds.DescribePendingMaintenanceActionsInput, func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, ...request.Option) error
	describePendingMaintenanceActionsPagesWithContextMutex       sync.RWMutex
	describePendingMaintenanceActionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribePendingMaintenanceActionsInput
		arg3 func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
		arg4 []request.Option
	}
	describePendingMaintenanceActionsPagesWithContextReturns struct {
		result1 error
	}
	describePendingMaintenanceActionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePendingMaintenanceActionsRequestStub        func(*rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput)
	describePendingMaintenanceActionsRequestMutex       sync.RWMutex
	describePendingMaintenanceActionsRequestArgsForCall []struct {
		arg1 *rds.DescribePendingMaintenanceActionsInput
	}
	describePendingMaintenanceActionsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribePendingMaintenanceActionsOutput
	}
	describePendingMaintenanceActionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribePendingMaintenanceActionsOutput
	}
	DescribePendingMaintenanceActionsWithContextStub        func(context.Context, *rds.DescribePendingMaintenanceActionsInput, ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error)
	describePendingMaintenanceActionsWithContextMutex       sync.RWMutex
	describePendingMaintenanceActionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribePendingMaintenanceActionsInput
		arg3 []request.Option
	}
	describePendingMaintenanceActionsWithContextReturns struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}
	describePendingMaintenanceActionsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}
	DescribeReservedDBInstancesStub        func(*rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error)
	describeReservedDBInstancesMutex       sync.RWMutex
	describeReservedDBInstancesArgsForCall []struct {
		arg1 *rds.DescribeReservedDBInstancesInput
	}
	describeReservedDBInstancesReturns struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}
	describeReservedDBInstancesReturnsOnCall map[int]struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}
	DescribeReservedDBInstancesOfferingsStub        func(*rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)
	describeReservedDBInstancesOfferingsMutex       sync.RWMutex
	describeReservedDBInstancesOfferingsArgsForCall []struct {
		arg1 *rds.DescribeReservedDBInstancesOfferingsInput
	}
	describeReservedDBInstancesOfferingsReturns struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}
	describeReservedDBInstancesOfferingsReturnsOnCall map[int]struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}
	DescribeReservedDBInstancesOfferingsPagesStub        func(*rds.DescribeReservedDBInstancesOfferingsInput, func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error
	describeReservedDBInstancesOfferingsPagesMutex       sync.RWMutex
	describeReservedDBInstancesOfferingsPagesArgsForCall []struct {
		arg1 *rds.DescribeReservedDBInstancesOfferingsInput
		arg2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	}
	describeReservedDBInstancesOfferingsPagesReturns struct {
		result1 error
	}
	describeReservedDBInstancesOfferingsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedDBInstancesOfferingsPagesWithContextStub        func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, ...request.Option) error
	describeReservedDBInstancesOfferingsPagesWithContextMutex       sync.RWMutex
	describeReservedDBInstancesOfferingsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesOfferingsInput
		arg3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedDBInstancesOfferingsPagesWithContextReturns struct {
		result1 error
	}
	describeReservedDBInstancesOfferingsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedDBInstancesOfferingsRequestStub        func(*rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput)
	describeReservedDBInstancesOfferingsRequestMutex       sync.RWMutex
	describeReservedDBInstancesOfferingsRequestArgsForCall []struct {
		arg1 *rds.DescribeReservedDBInstancesOfferingsInput
	}
	describeReservedDBInstancesOfferingsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOfferingsOutput
	}
	describeReservedDBInstancesOfferingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOfferingsOutput
	}
	DescribeReservedDBInstancesOfferingsWithContextStub        func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)
	describeReservedDBInstancesOfferingsWithContextMutex       sync.RWMutex
	describeReservedDBInstancesOfferingsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesOfferingsInput
		arg3 []request.Option
	}
	describeReservedDBInstancesOfferingsWithContextReturns struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}
	describeReservedDBInstancesOfferingsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}
	DescribeReservedDBInstancesPagesStub        func(*rds.DescribeReservedDBInstancesInput, func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error
	describeReservedDBInstancesPagesMutex       sync.RWMutex
	describeReservedDBInstancesPagesArgsForCall []struct {
		arg1 *rds.DescribeReservedDBInstancesInput
		arg2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	}
	describeReservedDBInstancesPagesReturns struct {
		result1 error
	}
	describeReservedDBInstancesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedDBInstancesPagesWithContextStub        func(context.Context, *rds.DescribeReservedDBInstancesInput, func(*rds.DescribeReservedDBInstancesOutput, bool) bool, ...request.Option) error
	describeReservedDBInstancesPagesWithContextMutex       sync.RWMutex
	describeReservedDBInstancesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesInput
		arg3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedDBInstancesPagesWithContextReturns struct {
		result1 error
	}
	describeReservedDBInstancesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedDBInstancesRequestStub        func(*rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput)
	describeReservedDBInstancesRequestMutex       sync.RWMutex
	describeReservedDBInstancesRequestArgsForCall []struct {
		arg1 *rds.DescribeReservedDBInstancesInput
	}
	describeReservedDBInstancesRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOutput
	}
	describeReservedDBInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOutput
	}
	DescribeReservedDBInstancesWithContextStub        func(context.Context, *rds.DescribeReservedDBInstancesInput, ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error)
	describeReservedDBInstancesWithContextMutex       sync.RWMutex
	describeReservedDBInstancesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesInput
		arg3 []request.Option
	}
	describeReservedDBInstancesWithContextReturns struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}
	describeReservedDBInstancesWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}
	DescribeSourceRegionsStub        func(*rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error)
	describeSourceRegionsMutex       sync.RWMutex
	describeSourceRegionsArgsForCall []struct {
		arg1 *rds.DescribeSourceRegionsInput
	}
	describeSourceRegionsReturns struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}
	describeSourceRegionsReturnsOnCall map[int]struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}
	DescribeSourceRegionsPagesStub        func(*rds.DescribeSourceRegionsInput, func(*rds.DescribeSourceRegionsOutput, bool) bool) error
	describeSourceRegionsPagesMutex       sync.RWMutex
	describeSourceRegionsPagesArgsForCall []struct {
		arg1 *rds.DescribeSourceRegionsInput
		arg2 func(*rds.DescribeSourceRegionsOutput, bool) bool
	}
	describeSourceRegionsPagesReturns struct {
		result1 error
	}
	describeSourceRegionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSourceRegionsPagesWithContextStub        func(context.Context, *rds.DescribeSourceRegionsInput, func(*rds.DescribeSourceRegionsOutput, bool) bool, ...request.Option) error
	describeSourceRegionsPagesWithContextMutex       sync.RWMutex
	describeSourceRegionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeSourceRegionsInput
		arg3 func(*rds.DescribeSourceRegionsOutput, bool) bool
		arg4 []request.Option
	}
	describeSourceRegionsPagesWithContextReturns struct {
		result1 error
	}
	describeSourceRegionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSourceRegionsRequestStub        func(*rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput)
	describeSourceRegionsRequestMutex       sync.RWMutex
	describeSourceRegionsRequestArgsForCall []struct {
		arg1 *rds.DescribeSourceRegionsInput
	}
	describeSourceRegionsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeSourceRegionsOutput
	}
	describeSourceRegionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeSourceRegionsOutput
	}
	DescribeSourceRegionsWithContextStub        func(context.Context, *rds.DescribeSourceRegionsInput, ...request.Option) (*rds.DescribeSourceRegionsOutput, error)
	describeSourceRegionsWithContextMutex       sync.RWMutex
	describeSourceRegionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeSourceRegionsInput
		arg3 []request.Option
	}
	describeSourceRegionsWithContextReturns struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}
	describeSourceRegionsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}
	DescribeValidDBInstanceModificationsStub        func(*rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error)
	describeValidDBInstanceModificationsMutex       sync.RWMutex
	describeValidDBInstanceModificationsArgsForCall []struct {
		arg1 *rds.DescribeValidDBInstanceModificationsInput
	}
	describeValidDBInstanceModificationsReturns struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}
	describeValidDBInstanceModificationsReturnsOnCall map[int]struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}
	DescribeValidDBInstanceModificationsRequestStub        func(*rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput)
	describeValidDBInstanceModificationsRequestMutex       sync.RWMutex
	describeValidDBInstanceModificationsRequestArgsForCall []struct {
		arg1 *rds.DescribeValidDBInstanceModificationsInput
	}
	describeValidDBInstanceModificationsRequestReturns struct {
		result1 *request.Request
		result2 *rds.DescribeValidDBInstanceModificationsOutput
	}
	describeValidDBInstanceModificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DescribeValidDBInstanceModificationsOutput
	}
	DescribeValidDBInstanceModificationsWithContextStub        func(context.Context, *rds.DescribeValidDBInstanceModificationsInput, ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error)
	describeValidDBInstanceModificationsWithContextMutex       sync.RWMutex
	describeValidDBInstanceModificationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeValidDBInstanceModificationsInput
		arg3 []request.Option
	}
	describeValidDBInstanceModificationsWithContextReturns struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}
	describeValidDBInstanceModificationsWithContextReturnsOnCall map[int]struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}
	DownloadDBLogFilePortionStub        func(*rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error)
	downloadDBLogFilePortionMutex       sync.RWMutex
	downloadDBLogFilePortionArgsForCall []struct {
		arg1 *rds.DownloadDBLogFilePortionInput
	}
	downloadDBLogFilePortionReturns struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}
	downloadDBLogFilePortionReturnsOnCall map[int]struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}
	DownloadDBLogFilePortionPagesStub        func(*rds.DownloadDBLogFilePortionInput, func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error
	downloadDBLogFilePortionPagesMutex       sync.RWMutex
	downloadDBLogFilePortionPagesArgsForCall []struct {
		arg1 *rds.DownloadDBLogFilePortionInput
		arg2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	}
	downloadDBLogFilePortionPagesReturns struct {
		result1 error
	}
	downloadDBLogFilePortionPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadDBLogFilePortionPagesWithContextStub        func(context.Context, *rds.DownloadDBLogFilePortionInput, func(*rds.DownloadDBLogFilePortionOutput, bool) bool, ...request.Option) error
	downloadDBLogFilePortionPagesWithContextMutex       sync.RWMutex
	downloadDBLogFilePortionPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DownloadDBLogFilePortionInput
		arg3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		arg4 []request.Option
	}
	downloadDBLogFilePortionPagesWithContextReturns struct {
		result1 error
	}
	downloadDBLogFilePortionPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadDBLogFilePortionRequestStub        func(*rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput)
	downloadDBLogFilePortionRequestMutex       sync.RWMutex
	downloadDBLogFilePortionRequestArgsForCall []struct {
		arg1 *rds.DownloadDBLogFilePortionInput
	}
	downloadDBLogFilePortionRequestReturns struct {
		result1 *request.Request
		result2 *rds.DownloadDBLogFilePortionOutput
	}
	downloadDBLogFilePortionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DownloadDBLogFilePortionOutput
	}
	DownloadDBLogFilePortionWithContextStub        func(context.Context, *rds.DownloadDBLogFilePortionInput, ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error)
	downloadDBLogFilePortionWithContextMutex       sync.RWMutex
	downloadDBLogFilePortionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DownloadDBLogFilePortionInput
		arg3 []request.Option
	}
	downloadDBLogFilePortionWithContextReturns struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}
	downloadDBLogFilePortionWithContextReturnsOnCall map[int]struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}
	FailoverDBClusterStub        func(*rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error)
	failoverDBClusterMutex       sync.RWMutex
	failoverDBClusterArgsForCall []struct {
		arg1 *rds.FailoverDBClusterInput
	}
	failoverDBClusterReturns struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}
	failoverDBClusterReturnsOnCall map[int]struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}
	FailoverDBClusterRequestStub        func(*rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput)
	failoverDBClusterRequestMutex       sync.RWMutex
	failoverDBClusterRequestArgsForCall []struct {
		arg1 *rds.FailoverDBClusterInput
	}
	failoverDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.FailoverDBClusterOutput
	}
	failoverDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.FailoverDBClusterOutput
	}
	FailoverDBClusterWithContextStub        func(context.Context, *rds.FailoverDBClusterInput, ...request.Option) (*rds.FailoverDBClusterOutput, error)
	failoverDBClusterWithContextMutex       sync.RWMutex
	failoverDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.FailoverDBClusterInput
		arg3 []request.Option
	}
	failoverDBClusterWithContextReturns struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}
	failoverDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}
	ImportInstallationMediaStub        func(*rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error)
	importInstallationMediaMutex       sync.RWMutex
	importInstallationMediaArgsForCall []struct {
		arg1 *rds.ImportInstallationMediaInput
	}
	importInstallationMediaReturns struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}
	importInstallationMediaReturnsOnCall map[int]struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}
	ImportInstallationMediaRequestStub        func(*rds.ImportInstallationMediaInput) (*request.Request, *rds.ImportInstallationMediaOutput)
	importInstallationMediaRequestMutex       sync.RWMutex
	importInstallationMediaRequestArgsForCall []struct {
		arg1 *rds.ImportInstallationMediaInput
	}
	importInstallationMediaRequestReturns struct {
		result1 *request.Request
		result2 *rds.ImportInstallationMediaOutput
	}
	importInstallationMediaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ImportInstallationMediaOutput
	}
	ImportInstallationMediaWithContextStub        func(context.Context, *rds.ImportInstallationMediaInput, ...request.Option) (*rds.ImportInstallationMediaOutput, error)
	importInstallationMediaWithContextMutex       sync.RWMutex
	importInstallationMediaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ImportInstallationMediaInput
		arg3 []request.Option
	}
	importInstallationMediaWithContextReturns struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}
	importInstallationMediaWithContextReturnsOnCall map[int]struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}
	ListTagsForResourceStub        func(*rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *rds.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *rds.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *rds.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ListTagsForResourceOutput
	}
	ListTagsForResourceWithContextStub        func(context.Context, *rds.ListTagsForResourceInput, ...request.Option) (*rds.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}
	ModifyCertificatesStub        func(*rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error)
	modifyCertificatesMutex       sync.RWMutex
	modifyCertificatesArgsForCall []struct {
		arg1 *rds.ModifyCertificatesInput
	}
	modifyCertificatesReturns struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}
	modifyCertificatesReturnsOnCall map[int]struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}
	ModifyCertificatesRequestStub        func(*rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput)
	modifyCertificatesRequestMutex       sync.RWMutex
	modifyCertificatesRequestArgsForCall []struct {
		arg1 *rds.ModifyCertificatesInput
	}
	modifyCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyCertificatesOutput
	}
	modifyCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyCertificatesOutput
	}
	ModifyCertificatesWithContextStub        func(context.Context, *rds.ModifyCertificatesInput, ...request.Option) (*rds.ModifyCertificatesOutput, error)
	modifyCertificatesWithContextMutex       sync.RWMutex
	modifyCertificatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyCertificatesInput
		arg3 []request.Option
	}
	modifyCertificatesWithContextReturns struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}
	modifyCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}
	ModifyCurrentDBClusterCapacityStub        func(*rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error)
	modifyCurrentDBClusterCapacityMutex       sync.RWMutex
	modifyCurrentDBClusterCapacityArgsForCall []struct {
		arg1 *rds.ModifyCurrentDBClusterCapacityInput
	}
	modifyCurrentDBClusterCapacityReturns struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}
	modifyCurrentDBClusterCapacityReturnsOnCall map[int]struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}
	ModifyCurrentDBClusterCapacityRequestStub        func(*rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput)
	modifyCurrentDBClusterCapacityRequestMutex       sync.RWMutex
	modifyCurrentDBClusterCapacityRequestArgsForCall []struct {
		arg1 *rds.ModifyCurrentDBClusterCapacityInput
	}
	modifyCurrentDBClusterCapacityRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyCurrentDBClusterCapacityOutput
	}
	modifyCurrentDBClusterCapacityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyCurrentDBClusterCapacityOutput
	}
	ModifyCurrentDBClusterCapacityWithContextStub        func(context.Context, *rds.ModifyCurrentDBClusterCapacityInput, ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error)
	modifyCurrentDBClusterCapacityWithContextMutex       sync.RWMutex
	modifyCurrentDBClusterCapacityWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyCurrentDBClusterCapacityInput
		arg3 []request.Option
	}
	modifyCurrentDBClusterCapacityWithContextReturns struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}
	modifyCurrentDBClusterCapacityWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}
	ModifyDBClusterStub        func(*rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error)
	modifyDBClusterMutex       sync.RWMutex
	modifyDBClusterArgsForCall []struct {
		arg1 *rds.ModifyDBClusterInput
	}
	modifyDBClusterReturns struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}
	modifyDBClusterReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}
	ModifyDBClusterEndpointStub        func(*rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error)
	modifyDBClusterEndpointMutex       sync.RWMutex
	modifyDBClusterEndpointArgsForCall []struct {
		arg1 *rds.ModifyDBClusterEndpointInput
	}
	modifyDBClusterEndpointReturns struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}
	modifyDBClusterEndpointReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}
	ModifyDBClusterEndpointRequestStub        func(*rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput)
	modifyDBClusterEndpointRequestMutex       sync.RWMutex
	modifyDBClusterEndpointRequestArgsForCall []struct {
		arg1 *rds.ModifyDBClusterEndpointInput
	}
	modifyDBClusterEndpointRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterEndpointOutput
	}
	modifyDBClusterEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterEndpointOutput
	}
	ModifyDBClusterEndpointWithContextStub        func(context.Context, *rds.ModifyDBClusterEndpointInput, ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error)
	modifyDBClusterEndpointWithContextMutex       sync.RWMutex
	modifyDBClusterEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterEndpointInput
		arg3 []request.Option
	}
	modifyDBClusterEndpointWithContextReturns struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}
	modifyDBClusterEndpointWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}
	ModifyDBClusterParameterGroupStub        func(*rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)
	modifyDBClusterParameterGroupMutex       sync.RWMutex
	modifyDBClusterParameterGroupArgsForCall []struct {
		arg1 *rds.ModifyDBClusterParameterGroupInput
	}
	modifyDBClusterParameterGroupReturns struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	modifyDBClusterParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	ModifyDBClusterParameterGroupRequestStub        func(*rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)
	modifyDBClusterParameterGroupRequestMutex       sync.RWMutex
	modifyDBClusterParameterGroupRequestArgsForCall []struct {
		arg1 *rds.ModifyDBClusterParameterGroupInput
	}
	modifyDBClusterParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}
	modifyDBClusterParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}
	ModifyDBClusterParameterGroupWithContextStub        func(context.Context, *rds.ModifyDBClusterParameterGroupInput, ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)
	modifyDBClusterParameterGroupWithContextMutex       sync.RWMutex
	modifyDBClusterParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterParameterGroupInput
		arg3 []request.Option
	}
	modifyDBClusterParameterGroupWithContextReturns struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	modifyDBClusterParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	ModifyDBClusterRequestStub        func(*rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput)
	modifyDBClusterRequestMutex       sync.RWMutex
	modifyDBClusterRequestArgsForCall []struct {
		arg1 *rds.ModifyDBClusterInput
	}
	modifyDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterOutput
	}
	modifyDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterOutput
	}
	ModifyDBClusterSnapshotAttributeStub        func(*rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)
	modifyDBClusterSnapshotAttributeMutex       sync.RWMutex
	modifyDBClusterSnapshotAttributeArgsForCall []struct {
		arg1 *rds.ModifyDBClusterSnapshotAttributeInput
	}
	modifyDBClusterSnapshotAttributeReturns struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}
	modifyDBClusterSnapshotAttributeReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}
	ModifyDBClusterSnapshotAttributeRequestStub        func(*rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput)
	modifyDBClusterSnapshotAttributeRequestMutex       sync.RWMutex
	modifyDBClusterSnapshotAttributeRequestArgsForCall []struct {
		arg1 *rds.ModifyDBClusterSnapshotAttributeInput
	}
	modifyDBClusterSnapshotAttributeRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterSnapshotAttributeOutput
	}
	modifyDBClusterSnapshotAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterSnapshotAttributeOutput
	}
	ModifyDBClusterSnapshotAttributeWithContextStub        func(context.Context, *rds.ModifyDBClusterSnapshotAttributeInput, ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)
	modifyDBClusterSnapshotAttributeWithContextMutex       sync.RWMutex
	modifyDBClusterSnapshotAttributeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterSnapshotAttributeInput
		arg3 []request.Option
	}
	modifyDBClusterSnapshotAttributeWithContextReturns struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}
	modifyDBClusterSnapshotAttributeWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}
	ModifyDBClusterWithContextStub        func(context.Context, *rds.ModifyDBClusterInput, ...request.Option) (*rds.ModifyDBClusterOutput, error)
	modifyDBClusterWithContextMutex       sync.RWMutex
	modifyDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterInput
		arg3 []request.Option
	}
	modifyDBClusterWithContextReturns struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}
	modifyDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}
	ModifyDBInstanceStub        func(*rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error)
	modifyDBInstanceMutex       sync.RWMutex
	modifyDBInstanceArgsForCall []struct {
		arg1 *rds.ModifyDBInstanceInput
	}
	modifyDBInstanceReturns struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}
	modifyDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}
	ModifyDBInstanceRequestStub        func(*rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput)
	modifyDBInstanceRequestMutex       sync.RWMutex
	modifyDBInstanceRequestArgsForCall []struct {
		arg1 *rds.ModifyDBInstanceInput
	}
	modifyDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBInstanceOutput
	}
	modifyDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBInstanceOutput
	}
	ModifyDBInstanceWithContextStub        func(context.Context, *rds.ModifyDBInstanceInput, ...request.Option) (*rds.ModifyDBInstanceOutput, error)
	modifyDBInstanceWithContextMutex       sync.RWMutex
	modifyDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBInstanceInput
		arg3 []request.Option
	}
	modifyDBInstanceWithContextReturns struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}
	modifyDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}
	ModifyDBParameterGroupStub        func(*rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)
	modifyDBParameterGroupMutex       sync.RWMutex
	modifyDBParameterGroupArgsForCall []struct {
		arg1 *rds.ModifyDBParameterGroupInput
	}
	modifyDBParameterGroupReturns struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	modifyDBParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	ModifyDBParameterGroupRequestStub        func(*rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)
	modifyDBParameterGroupRequestMutex       sync.RWMutex
	modifyDBParameterGroupRequestArgsForCall []struct {
		arg1 *rds.ModifyDBParameterGroupInput
	}
	modifyDBParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}
	modifyDBParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}
	ModifyDBParameterGroupWithContextStub        func(context.Context, *rds.ModifyDBParameterGroupInput, ...request.Option) (*rds.DBParameterGroupNameMessage, error)
	modifyDBParameterGroupWithContextMutex       sync.RWMutex
	modifyDBParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBParameterGroupInput
		arg3 []request.Option
	}
	modifyDBParameterGroupWithContextReturns struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	modifyDBParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	ModifyDBProxyStub        func(*rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error)
	modifyDBProxyMutex       sync.RWMutex
	modifyDBProxyArgsForCall []struct {
		arg1 *rds.ModifyDBProxyInput
	}
	modifyDBProxyReturns struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}
	modifyDBProxyReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}
	ModifyDBProxyRequestStub        func(*rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput)
	modifyDBProxyRequestMutex       sync.RWMutex
	modifyDBProxyRequestArgsForCall []struct {
		arg1 *rds.ModifyDBProxyInput
	}
	modifyDBProxyRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyOutput
	}
	modifyDBProxyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyOutput
	}
	ModifyDBProxyTargetGroupStub        func(*rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error)
	modifyDBProxyTargetGroupMutex       sync.RWMutex
	modifyDBProxyTargetGroupArgsForCall []struct {
		arg1 *rds.ModifyDBProxyTargetGroupInput
	}
	modifyDBProxyTargetGroupReturns struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}
	modifyDBProxyTargetGroupReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}
	ModifyDBProxyTargetGroupRequestStub        func(*rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput)
	modifyDBProxyTargetGroupRequestMutex       sync.RWMutex
	modifyDBProxyTargetGroupRequestArgsForCall []struct {
		arg1 *rds.ModifyDBProxyTargetGroupInput
	}
	modifyDBProxyTargetGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyTargetGroupOutput
	}
	modifyDBProxyTargetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyTargetGroupOutput
	}
	ModifyDBProxyTargetGroupWithContextStub        func(context.Context, *rds.ModifyDBProxyTargetGroupInput, ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error)
	modifyDBProxyTargetGroupWithContextMutex       sync.RWMutex
	modifyDBProxyTargetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBProxyTargetGroupInput
		arg3 []request.Option
	}
	modifyDBProxyTargetGroupWithContextReturns struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}
	modifyDBProxyTargetGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}
	ModifyDBProxyWithContextStub        func(context.Context, *rds.ModifyDBProxyInput, ...request.Option) (*rds.ModifyDBProxyOutput, error)
	modifyDBProxyWithContextMutex       sync.RWMutex
	modifyDBProxyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBProxyInput
		arg3 []request.Option
	}
	modifyDBProxyWithContextReturns struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}
	modifyDBProxyWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}
	ModifyDBSnapshotStub        func(*rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error)
	modifyDBSnapshotMutex       sync.RWMutex
	modifyDBSnapshotArgsForCall []struct {
		arg1 *rds.ModifyDBSnapshotInput
	}
	modifyDBSnapshotReturns struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}
	modifyDBSnapshotReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}
	ModifyDBSnapshotAttributeStub        func(*rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error)
	modifyDBSnapshotAttributeMutex       sync.RWMutex
	modifyDBSnapshotAttributeArgsForCall []struct {
		arg1 *rds.ModifyDBSnapshotAttributeInput
	}
	modifyDBSnapshotAttributeReturns struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}
	modifyDBSnapshotAttributeReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}
	ModifyDBSnapshotAttributeRequestStub        func(*rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput)
	modifyDBSnapshotAttributeRequestMutex       sync.RWMutex
	modifyDBSnapshotAttributeRequestArgsForCall []struct {
		arg1 *rds.ModifyDBSnapshotAttributeInput
	}
	modifyDBSnapshotAttributeRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotAttributeOutput
	}
	modifyDBSnapshotAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotAttributeOutput
	}
	ModifyDBSnapshotAttributeWithContextStub        func(context.Context, *rds.ModifyDBSnapshotAttributeInput, ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error)
	modifyDBSnapshotAttributeWithContextMutex       sync.RWMutex
	modifyDBSnapshotAttributeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBSnapshotAttributeInput
		arg3 []request.Option
	}
	modifyDBSnapshotAttributeWithContextReturns struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}
	modifyDBSnapshotAttributeWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}
	ModifyDBSnapshotRequestStub        func(*rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput)
	modifyDBSnapshotRequestMutex       sync.RWMutex
	modifyDBSnapshotRequestArgsForCall []struct {
		arg1 *rds.ModifyDBSnapshotInput
	}
	modifyDBSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotOutput
	}
	modifyDBSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotOutput
	}
	ModifyDBSnapshotWithContextStub        func(context.Context, *rds.ModifyDBSnapshotInput, ...request.Option) (*rds.ModifyDBSnapshotOutput, error)
	modifyDBSnapshotWithContextMutex       sync.RWMutex
	modifyDBSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBSnapshotInput
		arg3 []request.Option
	}
	modifyDBSnapshotWithContextReturns struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}
	modifyDBSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}
	ModifyDBSubnetGroupStub        func(*rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error)
	modifyDBSubnetGroupMutex       sync.RWMutex
	modifyDBSubnetGroupArgsForCall []struct {
		arg1 *rds.ModifyDBSubnetGroupInput
	}
	modifyDBSubnetGroupReturns struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}
	modifyDBSubnetGroupReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}
	ModifyDBSubnetGroupRequestStub        func(*rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput)
	modifyDBSubnetGroupRequestMutex       sync.RWMutex
	modifyDBSubnetGroupRequestArgsForCall []struct {
		arg1 *rds.ModifyDBSubnetGroupInput
	}
	modifyDBSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyDBSubnetGroupOutput
	}
	modifyDBSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyDBSubnetGroupOutput
	}
	ModifyDBSubnetGroupWithContextStub        func(context.Context, *rds.ModifyDBSubnetGroupInput, ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error)
	modifyDBSubnetGroupWithContextMutex       sync.RWMutex
	modifyDBSubnetGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyDBSubnetGroupInput
		arg3 []request.Option
	}
	modifyDBSubnetGroupWithContextReturns struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}
	modifyDBSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}
	ModifyEventSubscriptionStub        func(*rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error)
	modifyEventSubscriptionMutex       sync.RWMutex
	modifyEventSubscriptionArgsForCall []struct {
		arg1 *rds.ModifyEventSubscriptionInput
	}
	modifyEventSubscriptionReturns struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}
	modifyEventSubscriptionReturnsOnCall map[int]struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}
	ModifyEventSubscriptionRequestStub        func(*rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput)
	modifyEventSubscriptionRequestMutex       sync.RWMutex
	modifyEventSubscriptionRequestArgsForCall []struct {
		arg1 *rds.ModifyEventSubscriptionInput
	}
	modifyEventSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyEventSubscriptionOutput
	}
	modifyEventSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyEventSubscriptionOutput
	}
	ModifyEventSubscriptionWithContextStub        func(context.Context, *rds.ModifyEventSubscriptionInput, ...request.Option) (*rds.ModifyEventSubscriptionOutput, error)
	modifyEventSubscriptionWithContextMutex       sync.RWMutex
	modifyEventSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyEventSubscriptionInput
		arg3 []request.Option
	}
	modifyEventSubscriptionWithContextReturns struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}
	modifyEventSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}
	ModifyGlobalClusterStub        func(*rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error)
	modifyGlobalClusterMutex       sync.RWMutex
	modifyGlobalClusterArgsForCall []struct {
		arg1 *rds.ModifyGlobalClusterInput
	}
	modifyGlobalClusterReturns struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}
	modifyGlobalClusterReturnsOnCall map[int]struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}
	ModifyGlobalClusterRequestStub        func(*rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput)
	modifyGlobalClusterRequestMutex       sync.RWMutex
	modifyGlobalClusterRequestArgsForCall []struct {
		arg1 *rds.ModifyGlobalClusterInput
	}
	modifyGlobalClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyGlobalClusterOutput
	}
	modifyGlobalClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyGlobalClusterOutput
	}
	ModifyGlobalClusterWithContextStub        func(context.Context, *rds.ModifyGlobalClusterInput, ...request.Option) (*rds.ModifyGlobalClusterOutput, error)
	modifyGlobalClusterWithContextMutex       sync.RWMutex
	modifyGlobalClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyGlobalClusterInput
		arg3 []request.Option
	}
	modifyGlobalClusterWithContextReturns struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}
	modifyGlobalClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}
	ModifyOptionGroupStub        func(*rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error)
	modifyOptionGroupMutex       sync.RWMutex
	modifyOptionGroupArgsForCall []struct {
		arg1 *rds.ModifyOptionGroupInput
	}
	modifyOptionGroupReturns struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}
	modifyOptionGroupReturnsOnCall map[int]struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}
	ModifyOptionGroupRequestStub        func(*rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput)
	modifyOptionGroupRequestMutex       sync.RWMutex
	modifyOptionGroupRequestArgsForCall []struct {
		arg1 *rds.ModifyOptionGroupInput
	}
	modifyOptionGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.ModifyOptionGroupOutput
	}
	modifyOptionGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.ModifyOptionGroupOutput
	}
	ModifyOptionGroupWithContextStub        func(context.Context, *rds.ModifyOptionGroupInput, ...request.Option) (*rds.ModifyOptionGroupOutput, error)
	modifyOptionGroupWithContextMutex       sync.RWMutex
	modifyOptionGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ModifyOptionGroupInput
		arg3 []request.Option
	}
	modifyOptionGroupWithContextReturns struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}
	modifyOptionGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}
	PromoteReadReplicaStub        func(*rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error)
	promoteReadReplicaMutex       sync.RWMutex
	promoteReadReplicaArgsForCall []struct {
		arg1 *rds.PromoteReadReplicaInput
	}
	promoteReadReplicaReturns struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}
	promoteReadReplicaReturnsOnCall map[int]struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}
	PromoteReadReplicaDBClusterStub        func(*rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error)
	promoteReadReplicaDBClusterMutex       sync.RWMutex
	promoteReadReplicaDBClusterArgsForCall []struct {
		arg1 *rds.PromoteReadReplicaDBClusterInput
	}
	promoteReadReplicaDBClusterReturns struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}
	promoteReadReplicaDBClusterReturnsOnCall map[int]struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}
	PromoteReadReplicaDBClusterRequestStub        func(*rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput)
	promoteReadReplicaDBClusterRequestMutex       sync.RWMutex
	promoteReadReplicaDBClusterRequestArgsForCall []struct {
		arg1 *rds.PromoteReadReplicaDBClusterInput
	}
	promoteReadReplicaDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaDBClusterOutput
	}
	promoteReadReplicaDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaDBClusterOutput
	}
	PromoteReadReplicaDBClusterWithContextStub        func(context.Context, *rds.PromoteReadReplicaDBClusterInput, ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error)
	promoteReadReplicaDBClusterWithContextMutex       sync.RWMutex
	promoteReadReplicaDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.PromoteReadReplicaDBClusterInput
		arg3 []request.Option
	}
	promoteReadReplicaDBClusterWithContextReturns struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}
	promoteReadReplicaDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}
	PromoteReadReplicaRequestStub        func(*rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput)
	promoteReadReplicaRequestMutex       sync.RWMutex
	promoteReadReplicaRequestArgsForCall []struct {
		arg1 *rds.PromoteReadReplicaInput
	}
	promoteReadReplicaRequestReturns struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaOutput
	}
	promoteReadReplicaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaOutput
	}
	PromoteReadReplicaWithContextStub        func(context.Context, *rds.PromoteReadReplicaInput, ...request.Option) (*rds.PromoteReadReplicaOutput, error)
	promoteReadReplicaWithContextMutex       sync.RWMutex
	promoteReadReplicaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.PromoteReadReplicaInput
		arg3 []request.Option
	}
	promoteReadReplicaWithContextReturns struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}
	promoteReadReplicaWithContextReturnsOnCall map[int]struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}
	PurchaseReservedDBInstancesOfferingStub        func(*rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)
	purchaseReservedDBInstancesOfferingMutex       sync.RWMutex
	purchaseReservedDBInstancesOfferingArgsForCall []struct {
		arg1 *rds.PurchaseReservedDBInstancesOfferingInput
	}
	purchaseReservedDBInstancesOfferingReturns struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}
	purchaseReservedDBInstancesOfferingReturnsOnCall map[int]struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}
	PurchaseReservedDBInstancesOfferingRequestStub        func(*rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput)
	purchaseReservedDBInstancesOfferingRequestMutex       sync.RWMutex
	purchaseReservedDBInstancesOfferingRequestArgsForCall []struct {
		arg1 *rds.PurchaseReservedDBInstancesOfferingInput
	}
	purchaseReservedDBInstancesOfferingRequestReturns struct {
		result1 *request.Request
		result2 *rds.PurchaseReservedDBInstancesOfferingOutput
	}
	purchaseReservedDBInstancesOfferingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.PurchaseReservedDBInstancesOfferingOutput
	}
	PurchaseReservedDBInstancesOfferingWithContextStub        func(context.Context, *rds.PurchaseReservedDBInstancesOfferingInput, ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)
	purchaseReservedDBInstancesOfferingWithContextMutex       sync.RWMutex
	purchaseReservedDBInstancesOfferingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.PurchaseReservedDBInstancesOfferingInput
		arg3 []request.Option
	}
	purchaseReservedDBInstancesOfferingWithContextReturns struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}
	purchaseReservedDBInstancesOfferingWithContextReturnsOnCall map[int]struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}
	RebootDBInstanceStub        func(*rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error)
	rebootDBInstanceMutex       sync.RWMutex
	rebootDBInstanceArgsForCall []struct {
		arg1 *rds.RebootDBInstanceInput
	}
	rebootDBInstanceReturns struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}
	rebootDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}
	RebootDBInstanceRequestStub        func(*rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput)
	rebootDBInstanceRequestMutex       sync.RWMutex
	rebootDBInstanceRequestArgsForCall []struct {
		arg1 *rds.RebootDBInstanceInput
	}
	rebootDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.RebootDBInstanceOutput
	}
	rebootDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RebootDBInstanceOutput
	}
	RebootDBInstanceWithContextStub        func(context.Context, *rds.RebootDBInstanceInput, ...request.Option) (*rds.RebootDBInstanceOutput, error)
	rebootDBInstanceWithContextMutex       sync.RWMutex
	rebootDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RebootDBInstanceInput
		arg3 []request.Option
	}
	rebootDBInstanceWithContextReturns struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}
	rebootDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}
	RegisterDBProxyTargetsStub        func(*rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error)
	registerDBProxyTargetsMutex       sync.RWMutex
	registerDBProxyTargetsArgsForCall []struct {
		arg1 *rds.RegisterDBProxyTargetsInput
	}
	registerDBProxyTargetsReturns struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}
	registerDBProxyTargetsReturnsOnCall map[int]struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}
	RegisterDBProxyTargetsRequestStub        func(*rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput)
	registerDBProxyTargetsRequestMutex       sync.RWMutex
	registerDBProxyTargetsRequestArgsForCall []struct {
		arg1 *rds.RegisterDBProxyTargetsInput
	}
	registerDBProxyTargetsRequestReturns struct {
		result1 *request.Request
		result2 *rds.RegisterDBProxyTargetsOutput
	}
	registerDBProxyTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RegisterDBProxyTargetsOutput
	}
	RegisterDBProxyTargetsWithContextStub        func(context.Context, *rds.RegisterDBProxyTargetsInput, ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error)
	registerDBProxyTargetsWithContextMutex       sync.RWMutex
	registerDBProxyTargetsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RegisterDBProxyTargetsInput
		arg3 []request.Option
	}
	registerDBProxyTargetsWithContextReturns struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}
	registerDBProxyTargetsWithContextReturnsOnCall map[int]struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}
	RemoveFromGlobalClusterStub        func(*rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error)
	removeFromGlobalClusterMutex       sync.RWMutex
	removeFromGlobalClusterArgsForCall []struct {
		arg1 *rds.RemoveFromGlobalClusterInput
	}
	removeFromGlobalClusterReturns struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}
	removeFromGlobalClusterReturnsOnCall map[int]struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}
	RemoveFromGlobalClusterRequestStub        func(*rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput)
	removeFromGlobalClusterRequestMutex       sync.RWMutex
	removeFromGlobalClusterRequestArgsForCall []struct {
		arg1 *rds.RemoveFromGlobalClusterInput
	}
	removeFromGlobalClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.RemoveFromGlobalClusterOutput
	}
	removeFromGlobalClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RemoveFromGlobalClusterOutput
	}
	RemoveFromGlobalClusterWithContextStub        func(context.Context, *rds.RemoveFromGlobalClusterInput, ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error)
	removeFromGlobalClusterWithContextMutex       sync.RWMutex
	removeFromGlobalClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RemoveFromGlobalClusterInput
		arg3 []request.Option
	}
	removeFromGlobalClusterWithContextReturns struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}
	removeFromGlobalClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}
	RemoveRoleFromDBClusterStub        func(*rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error)
	removeRoleFromDBClusterMutex       sync.RWMutex
	removeRoleFromDBClusterArgsForCall []struct {
		arg1 *rds.RemoveRoleFromDBClusterInput
	}
	removeRoleFromDBClusterReturns struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}
	removeRoleFromDBClusterReturnsOnCall map[int]struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}
	RemoveRoleFromDBClusterRequestStub        func(*rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput)
	removeRoleFromDBClusterRequestMutex       sync.RWMutex
	removeRoleFromDBClusterRequestArgsForCall []struct {
		arg1 *rds.RemoveRoleFromDBClusterInput
	}
	removeRoleFromDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBClusterOutput
	}
	removeRoleFromDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBClusterOutput
	}
	RemoveRoleFromDBClusterWithContextStub        func(context.Context, *rds.RemoveRoleFromDBClusterInput, ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error)
	removeRoleFromDBClusterWithContextMutex       sync.RWMutex
	removeRoleFromDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RemoveRoleFromDBClusterInput
		arg3 []request.Option
	}
	removeRoleFromDBClusterWithContextReturns struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}
	removeRoleFromDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}
	RemoveRoleFromDBInstanceStub        func(*rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error)
	removeRoleFromDBInstanceMutex       sync.RWMutex
	removeRoleFromDBInstanceArgsForCall []struct {
		arg1 *rds.RemoveRoleFromDBInstanceInput
	}
	removeRoleFromDBInstanceReturns struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}
	removeRoleFromDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}
	RemoveRoleFromDBInstanceRequestStub        func(*rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput)
	removeRoleFromDBInstanceRequestMutex       sync.RWMutex
	removeRoleFromDBInstanceRequestArgsForCall []struct {
		arg1 *rds.RemoveRoleFromDBInstanceInput
	}
	removeRoleFromDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBInstanceOutput
	}
	removeRoleFromDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBInstanceOutput
	}
	RemoveRoleFromDBInstanceWithContextStub        func(context.Context, *rds.RemoveRoleFromDBInstanceInput, ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error)
	removeRoleFromDBInstanceWithContextMutex       sync.RWMutex
	removeRoleFromDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RemoveRoleFromDBInstanceInput
		arg3 []request.Option
	}
	removeRoleFromDBInstanceWithContextReturns struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}
	removeRoleFromDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}
	RemoveSourceIdentifierFromSubscriptionStub        func(*rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)
	removeSourceIdentifierFromSubscriptionMutex       sync.RWMutex
	removeSourceIdentifierFromSubscriptionArgsForCall []struct {
		arg1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}
	removeSourceIdentifierFromSubscriptionReturns struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}
	removeSourceIdentifierFromSubscriptionReturnsOnCall map[int]struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}
	RemoveSourceIdentifierFromSubscriptionRequestStub        func(*rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput)
	removeSourceIdentifierFromSubscriptionRequestMutex       sync.RWMutex
	removeSourceIdentifierFromSubscriptionRequestArgsForCall []struct {
		arg1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}
	removeSourceIdentifierFromSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput
	}
	removeSourceIdentifierFromSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput
	}
	RemoveSourceIdentifierFromSubscriptionWithContextStub        func(context.Context, *rds.RemoveSourceIdentifierFromSubscriptionInput, ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)
	removeSourceIdentifierFromSubscriptionWithContextMutex       sync.RWMutex
	removeSourceIdentifierFromSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RemoveSourceIdentifierFromSubscriptionInput
		arg3 []request.Option
	}
	removeSourceIdentifierFromSubscriptionWithContextReturns struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}
	removeSourceIdentifierFromSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}
	RemoveTagsFromResourceStub        func(*rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error)
	removeTagsFromResourceMutex       sync.RWMutex
	removeTagsFromResourceArgsForCall []struct {
		arg1 *rds.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceReturns struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}
	removeTagsFromResourceReturnsOnCall map[int]struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}
	RemoveTagsFromResourceRequestStub        func(*rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput)
	removeTagsFromResourceRequestMutex       sync.RWMutex
	removeTagsFromResourceRequestArgsForCall []struct {
		arg1 *rds.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceRequestReturns struct {
		result1 *request.Request
		result2 *rds.RemoveTagsFromResourceOutput
	}
	removeTagsFromResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RemoveTagsFromResourceOutput
	}
	RemoveTagsFromResourceWithContextStub        func(context.Context, *rds.RemoveTagsFromResourceInput, ...request.Option) (*rds.RemoveTagsFromResourceOutput, error)
	removeTagsFromResourceWithContextMutex       sync.RWMutex
	removeTagsFromResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RemoveTagsFromResourceInput
		arg3 []request.Option
	}
	removeTagsFromResourceWithContextReturns struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}
	removeTagsFromResourceWithContextReturnsOnCall map[int]struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}
	ResetDBClusterParameterGroupStub        func(*rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)
	resetDBClusterParameterGroupMutex       sync.RWMutex
	resetDBClusterParameterGroupArgsForCall []struct {
		arg1 *rds.ResetDBClusterParameterGroupInput
	}
	resetDBClusterParameterGroupReturns struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	resetDBClusterParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	ResetDBClusterParameterGroupRequestStub        func(*rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)
	resetDBClusterParameterGroupRequestMutex       sync.RWMutex
	resetDBClusterParameterGroupRequestArgsForCall []struct {
		arg1 *rds.ResetDBClusterParameterGroupInput
	}
	resetDBClusterParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}
	resetDBClusterParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}
	ResetDBClusterParameterGroupWithContextStub        func(context.Context, *rds.ResetDBClusterParameterGroupInput, ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)
	resetDBClusterParameterGroupWithContextMutex       sync.RWMutex
	resetDBClusterParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ResetDBClusterParameterGroupInput
		arg3 []request.Option
	}
	resetDBClusterParameterGroupWithContextReturns struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	resetDBClusterParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}
	ResetDBParameterGroupStub        func(*rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)
	resetDBParameterGroupMutex       sync.RWMutex
	resetDBParameterGroupArgsForCall []struct {
		arg1 *rds.ResetDBParameterGroupInput
	}
	resetDBParameterGroupReturns struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	resetDBParameterGroupReturnsOnCall map[int]struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	ResetDBParameterGroupRequestStub        func(*rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)
	resetDBParameterGroupRequestMutex       sync.RWMutex
	resetDBParameterGroupRequestArgsForCall []struct {
		arg1 *rds.ResetDBParameterGroupInput
	}
	resetDBParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}
	resetDBParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}
	ResetDBParameterGroupWithContextStub        func(context.Context, *rds.ResetDBParameterGroupInput, ...request.Option) (*rds.DBParameterGroupNameMessage, error)
	resetDBParameterGroupWithContextMutex       sync.RWMutex
	resetDBParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.ResetDBParameterGroupInput
		arg3 []request.Option
	}
	resetDBParameterGroupWithContextReturns struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	resetDBParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}
	RestoreDBClusterFromS3Stub        func(*rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error)
	restoreDBClusterFromS3Mutex       sync.RWMutex
	restoreDBClusterFromS3ArgsForCall []struct {
		arg1 *rds.RestoreDBClusterFromS3Input
	}
	restoreDBClusterFromS3Returns struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}
	restoreDBClusterFromS3ReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}
	RestoreDBClusterFromS3RequestStub        func(*rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output)
	restoreDBClusterFromS3RequestMutex       sync.RWMutex
	restoreDBClusterFromS3RequestArgsForCall []struct {
		arg1 *rds.RestoreDBClusterFromS3Input
	}
	restoreDBClusterFromS3RequestReturns struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromS3Output
	}
	restoreDBClusterFromS3RequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromS3Output
	}
	RestoreDBClusterFromS3WithContextStub        func(context.Context, *rds.RestoreDBClusterFromS3Input, ...request.Option) (*rds.RestoreDBClusterFromS3Output, error)
	restoreDBClusterFromS3WithContextMutex       sync.RWMutex
	restoreDBClusterFromS3WithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RestoreDBClusterFromS3Input
		arg3 []request.Option
	}
	restoreDBClusterFromS3WithContextReturns struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}
	restoreDBClusterFromS3WithContextReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}
	RestoreDBClusterFromSnapshotStub        func(*rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error)
	restoreDBClusterFromSnapshotMutex       sync.RWMutex
	restoreDBClusterFromSnapshotArgsForCall []struct {
		arg1 *rds.RestoreDBClusterFromSnapshotInput
	}
	restoreDBClusterFromSnapshotReturns struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}
	restoreDBClusterFromSnapshotReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}
	RestoreDBClusterFromSnapshotRequestStub        func(*rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput)
	restoreDBClusterFromSnapshotRequestMutex       sync.RWMutex
	restoreDBClusterFromSnapshotRequestArgsForCall []struct {
		arg1 *rds.RestoreDBClusterFromSnapshotInput
	}
	restoreDBClusterFromSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromSnapshotOutput
	}
	restoreDBClusterFromSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromSnapshotOutput
	}
	RestoreDBClusterFromSnapshotWithContextStub        func(context.Context, *rds.RestoreDBClusterFromSnapshotInput, ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error)
	restoreDBClusterFromSnapshotWithContextMutex       sync.RWMutex
	restoreDBClusterFromSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RestoreDBClusterFromSnapshotInput
		arg3 []request.Option
	}
	restoreDBClusterFromSnapshotWithContextReturns struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}
	restoreDBClusterFromSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}
	RestoreDBClusterToPointInTimeStub        func(*rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error)
	restoreDBClusterToPointInTimeMutex       sync.RWMutex
	restoreDBClusterToPointInTimeArgsForCall []struct {
		arg1 *rds.RestoreDBClusterToPointInTimeInput
	}
	restoreDBClusterToPointInTimeReturns struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}
	restoreDBClusterToPointInTimeReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}
	RestoreDBClusterToPointInTimeRequestStub        func(*rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput)
	restoreDBClusterToPointInTimeRequestMutex       sync.RWMutex
	restoreDBClusterToPointInTimeRequestArgsForCall []struct {
		arg1 *rds.RestoreDBClusterToPointInTimeInput
	}
	restoreDBClusterToPointInTimeRequestReturns struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterToPointInTimeOutput
	}
	restoreDBClusterToPointInTimeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterToPointInTimeOutput
	}
	RestoreDBClusterToPointInTimeWithContextStub        func(context.Context, *rds.RestoreDBClusterToPointInTimeInput, ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error)
	restoreDBClusterToPointInTimeWithContextMutex       sync.RWMutex
	restoreDBClusterToPointInTimeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RestoreDBClusterToPointInTimeInput
		arg3 []request.Option
	}
	restoreDBClusterToPointInTimeWithContextReturns struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}
	restoreDBClusterToPointInTimeWithContextReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}
	RestoreDBInstanceFromDBSnapshotStub        func(*rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)
	restoreDBInstanceFromDBSnapshotMutex       sync.RWMutex
	restoreDBInstanceFromDBSnapshotArgsForCall []struct {
		arg1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}
	restoreDBInstanceFromDBSnapshotReturns struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}
	restoreDBInstanceFromDBSnapshotReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}
	RestoreDBInstanceFromDBSnapshotRequestStub        func(*rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput)
	restoreDBInstanceFromDBSnapshotRequestMutex       sync.RWMutex
	restoreDBInstanceFromDBSnapshotRequestArgsForCall []struct {
		arg1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}
	restoreDBInstanceFromDBSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromDBSnapshotOutput
	}
	restoreDBInstanceFromDBSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromDBSnapshotOutput
	}
	RestoreDBInstanceFromDBSnapshotWithContextStub        func(context.Context, *rds.RestoreDBInstanceFromDBSnapshotInput, ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)
	restoreDBInstanceFromDBSnapshotWithContextMutex       sync.RWMutex
	restoreDBInstanceFromDBSnapshotWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RestoreDBInstanceFromDBSnapshotInput
		arg3 []request.Option
	}
	restoreDBInstanceFromDBSnapshotWithContextReturns struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}
	restoreDBInstanceFromDBSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}
	RestoreDBInstanceFromS3Stub        func(*rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error)
	restoreDBInstanceFromS3Mutex       sync.RWMutex
	restoreDBInstanceFromS3ArgsForCall []struct {
		arg1 *rds.RestoreDBInstanceFromS3Input
	}
	restoreDBInstanceFromS3Returns struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}
	restoreDBInstanceFromS3ReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}
	RestoreDBInstanceFromS3RequestStub        func(*rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output)
	restoreDBInstanceFromS3RequestMutex       sync.RWMutex
	restoreDBInstanceFromS3RequestArgsForCall []struct {
		arg1 *rds.RestoreDBInstanceFromS3Input
	}
	restoreDBInstanceFromS3RequestReturns struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromS3Output
	}
	restoreDBInstanceFromS3RequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromS3Output
	}
	RestoreDBInstanceFromS3WithContextStub        func(context.Context, *rds.RestoreDBInstanceFromS3Input, ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error)
	restoreDBInstanceFromS3WithContextMutex       sync.RWMutex
	restoreDBInstanceFromS3WithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RestoreDBInstanceFromS3Input
		arg3 []request.Option
	}
	restoreDBInstanceFromS3WithContextReturns struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}
	restoreDBInstanceFromS3WithContextReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}
	RestoreDBInstanceToPointInTimeStub        func(*rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error)
	restoreDBInstanceToPointInTimeMutex       sync.RWMutex
	restoreDBInstanceToPointInTimeArgsForCall []struct {
		arg1 *rds.RestoreDBInstanceToPointInTimeInput
	}
	restoreDBInstanceToPointInTimeReturns struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}
	restoreDBInstanceToPointInTimeReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}
	RestoreDBInstanceToPointInTimeRequestStub        func(*rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput)
	restoreDBInstanceToPointInTimeRequestMutex       sync.RWMutex
	restoreDBInstanceToPointInTimeRequestArgsForCall []struct {
		arg1 *rds.RestoreDBInstanceToPointInTimeInput
	}
	restoreDBInstanceToPointInTimeRequestReturns struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceToPointInTimeOutput
	}
	restoreDBInstanceToPointInTimeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceToPointInTimeOutput
	}
	RestoreDBInstanceToPointInTimeWithContextStub        func(context.Context, *rds.RestoreDBInstanceToPointInTimeInput, ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error)
	restoreDBInstanceToPointInTimeWithContextMutex       sync.RWMutex
	restoreDBInstanceToPointInTimeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RestoreDBInstanceToPointInTimeInput
		arg3 []request.Option
	}
	restoreDBInstanceToPointInTimeWithContextReturns struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}
	restoreDBInstanceToPointInTimeWithContextReturnsOnCall map[int]struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}
	RevokeDBSecurityGroupIngressStub        func(*rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error)
	revokeDBSecurityGroupIngressMutex       sync.RWMutex
	revokeDBSecurityGroupIngressArgsForCall []struct {
		arg1 *rds.RevokeDBSecurityGroupIngressInput
	}
	revokeDBSecurityGroupIngressReturns struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}
	revokeDBSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}
	RevokeDBSecurityGroupIngressRequestStub        func(*rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput)
	revokeDBSecurityGroupIngressRequestMutex       sync.RWMutex
	revokeDBSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *rds.RevokeDBSecurityGroupIngressInput
	}
	revokeDBSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *rds.RevokeDBSecurityGroupIngressOutput
	}
	revokeDBSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.RevokeDBSecurityGroupIngressOutput
	}
	RevokeDBSecurityGroupIngressWithContextStub        func(context.Context, *rds.RevokeDBSecurityGroupIngressInput, ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error)
	revokeDBSecurityGroupIngressWithContextMutex       sync.RWMutex
	revokeDBSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.RevokeDBSecurityGroupIngressInput
		arg3 []request.Option
	}
	revokeDBSecurityGroupIngressWithContextReturns struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}
	revokeDBSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}
	StartActivityStreamStub        func(*rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error)
	startActivityStreamMutex       sync.RWMutex
	startActivityStreamArgsForCall []struct {
		arg1 *rds.StartActivityStreamInput
	}
	startActivityStreamReturns struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}
	startActivityStreamReturnsOnCall map[int]struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}
	StartActivityStreamRequestStub        func(*rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput)
	startActivityStreamRequestMutex       sync.RWMutex
	startActivityStreamRequestArgsForCall []struct {
		arg1 *rds.StartActivityStreamInput
	}
	startActivityStreamRequestReturns struct {
		result1 *request.Request
		result2 *rds.StartActivityStreamOutput
	}
	startActivityStreamRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StartActivityStreamOutput
	}
	StartActivityStreamWithContextStub        func(context.Context, *rds.StartActivityStreamInput, ...request.Option) (*rds.StartActivityStreamOutput, error)
	startActivityStreamWithContextMutex       sync.RWMutex
	startActivityStreamWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StartActivityStreamInput
		arg3 []request.Option
	}
	startActivityStreamWithContextReturns struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}
	startActivityStreamWithContextReturnsOnCall map[int]struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}
	StartDBClusterStub        func(*rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error)
	startDBClusterMutex       sync.RWMutex
	startDBClusterArgsForCall []struct {
		arg1 *rds.StartDBClusterInput
	}
	startDBClusterReturns struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}
	startDBClusterReturnsOnCall map[int]struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}
	StartDBClusterRequestStub        func(*rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput)
	startDBClusterRequestMutex       sync.RWMutex
	startDBClusterRequestArgsForCall []struct {
		arg1 *rds.StartDBClusterInput
	}
	startDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.StartDBClusterOutput
	}
	startDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StartDBClusterOutput
	}
	StartDBClusterWithContextStub        func(context.Context, *rds.StartDBClusterInput, ...request.Option) (*rds.StartDBClusterOutput, error)
	startDBClusterWithContextMutex       sync.RWMutex
	startDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StartDBClusterInput
		arg3 []request.Option
	}
	startDBClusterWithContextReturns struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}
	startDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}
	StartDBInstanceStub        func(*rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error)
	startDBInstanceMutex       sync.RWMutex
	startDBInstanceArgsForCall []struct {
		arg1 *rds.StartDBInstanceInput
	}
	startDBInstanceReturns struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}
	startDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}
	StartDBInstanceRequestStub        func(*rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput)
	startDBInstanceRequestMutex       sync.RWMutex
	startDBInstanceRequestArgsForCall []struct {
		arg1 *rds.StartDBInstanceInput
	}
	startDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.StartDBInstanceOutput
	}
	startDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StartDBInstanceOutput
	}
	StartDBInstanceWithContextStub        func(context.Context, *rds.StartDBInstanceInput, ...request.Option) (*rds.StartDBInstanceOutput, error)
	startDBInstanceWithContextMutex       sync.RWMutex
	startDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StartDBInstanceInput
		arg3 []request.Option
	}
	startDBInstanceWithContextReturns struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}
	startDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}
	StartExportTaskStub        func(*rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error)
	startExportTaskMutex       sync.RWMutex
	startExportTaskArgsForCall []struct {
		arg1 *rds.StartExportTaskInput
	}
	startExportTaskReturns struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}
	startExportTaskReturnsOnCall map[int]struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}
	StartExportTaskRequestStub        func(*rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput)
	startExportTaskRequestMutex       sync.RWMutex
	startExportTaskRequestArgsForCall []struct {
		arg1 *rds.StartExportTaskInput
	}
	startExportTaskRequestReturns struct {
		result1 *request.Request
		result2 *rds.StartExportTaskOutput
	}
	startExportTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StartExportTaskOutput
	}
	StartExportTaskWithContextStub        func(context.Context, *rds.StartExportTaskInput, ...request.Option) (*rds.StartExportTaskOutput, error)
	startExportTaskWithContextMutex       sync.RWMutex
	startExportTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StartExportTaskInput
		arg3 []request.Option
	}
	startExportTaskWithContextReturns struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}
	startExportTaskWithContextReturnsOnCall map[int]struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}
	StopActivityStreamStub        func(*rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error)
	stopActivityStreamMutex       sync.RWMutex
	stopActivityStreamArgsForCall []struct {
		arg1 *rds.StopActivityStreamInput
	}
	stopActivityStreamReturns struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}
	stopActivityStreamReturnsOnCall map[int]struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}
	StopActivityStreamRequestStub        func(*rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput)
	stopActivityStreamRequestMutex       sync.RWMutex
	stopActivityStreamRequestArgsForCall []struct {
		arg1 *rds.StopActivityStreamInput
	}
	stopActivityStreamRequestReturns struct {
		result1 *request.Request
		result2 *rds.StopActivityStreamOutput
	}
	stopActivityStreamRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StopActivityStreamOutput
	}
	StopActivityStreamWithContextStub        func(context.Context, *rds.StopActivityStreamInput, ...request.Option) (*rds.StopActivityStreamOutput, error)
	stopActivityStreamWithContextMutex       sync.RWMutex
	stopActivityStreamWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StopActivityStreamInput
		arg3 []request.Option
	}
	stopActivityStreamWithContextReturns struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}
	stopActivityStreamWithContextReturnsOnCall map[int]struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}
	StopDBClusterStub        func(*rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error)
	stopDBClusterMutex       sync.RWMutex
	stopDBClusterArgsForCall []struct {
		arg1 *rds.StopDBClusterInput
	}
	stopDBClusterReturns struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}
	stopDBClusterReturnsOnCall map[int]struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}
	StopDBClusterRequestStub        func(*rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput)
	stopDBClusterRequestMutex       sync.RWMutex
	stopDBClusterRequestArgsForCall []struct {
		arg1 *rds.StopDBClusterInput
	}
	stopDBClusterRequestReturns struct {
		result1 *request.Request
		result2 *rds.StopDBClusterOutput
	}
	stopDBClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StopDBClusterOutput
	}
	StopDBClusterWithContextStub        func(context.Context, *rds.StopDBClusterInput, ...request.Option) (*rds.StopDBClusterOutput, error)
	stopDBClusterWithContextMutex       sync.RWMutex
	stopDBClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StopDBClusterInput
		arg3 []request.Option
	}
	stopDBClusterWithContextReturns struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}
	stopDBClusterWithContextReturnsOnCall map[int]struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}
	StopDBInstanceStub        func(*rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error)
	stopDBInstanceMutex       sync.RWMutex
	stopDBInstanceArgsForCall []struct {
		arg1 *rds.StopDBInstanceInput
	}
	stopDBInstanceReturns struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}
	stopDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}
	StopDBInstanceRequestStub        func(*rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput)
	stopDBInstanceRequestMutex       sync.RWMutex
	stopDBInstanceRequestArgsForCall []struct {
		arg1 *rds.StopDBInstanceInput
	}
	stopDBInstanceRequestReturns struct {
		result1 *request.Request
		result2 *rds.StopDBInstanceOutput
	}
	stopDBInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *rds.StopDBInstanceOutput
	}
	StopDBInstanceWithContextStub        func(context.Context, *rds.StopDBInstanceInput, ...request.Option) (*rds.StopDBInstanceOutput, error)
	stopDBInstanceWithContextMutex       sync.RWMutex
	stopDBInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.StopDBInstanceInput
		arg3 []request.Option
	}
	stopDBInstanceWithContextReturns struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}
	stopDBInstanceWithContextReturnsOnCall map[int]struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}
	WaitUntilDBClusterSnapshotAvailableStub        func(*rds.DescribeDBClusterSnapshotsInput) error
	waitUntilDBClusterSnapshotAvailableMutex       sync.RWMutex
	waitUntilDBClusterSnapshotAvailableArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}
	waitUntilDBClusterSnapshotAvailableReturns struct {
		result1 error
	}
	waitUntilDBClusterSnapshotAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBClusterSnapshotAvailableWithContextStub        func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...request.WaiterOption) error
	waitUntilDBClusterSnapshotAvailableWithContextMutex       sync.RWMutex
	waitUntilDBClusterSnapshotAvailableWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 []request.WaiterOption
	}
	waitUntilDBClusterSnapshotAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilDBClusterSnapshotAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBClusterSnapshotDeletedStub        func(*rds.DescribeDBClusterSnapshotsInput) error
	waitUntilDBClusterSnapshotDeletedMutex       sync.RWMutex
	waitUntilDBClusterSnapshotDeletedArgsForCall []struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}
	waitUntilDBClusterSnapshotDeletedReturns struct {
		result1 error
	}
	waitUntilDBClusterSnapshotDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBClusterSnapshotDeletedWithContextStub        func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...request.WaiterOption) error
	waitUntilDBClusterSnapshotDeletedWithContextMutex       sync.RWMutex
	waitUntilDBClusterSnapshotDeletedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 []request.WaiterOption
	}
	waitUntilDBClusterSnapshotDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilDBClusterSnapshotDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBInstanceAvailableStub        func(*rds.DescribeDBInstancesInput) error
	waitUntilDBInstanceAvailableMutex       sync.RWMutex
	waitUntilDBInstanceAvailableArgsForCall []struct {
		arg1 *rds.DescribeDBInstancesInput
	}
	waitUntilDBInstanceAvailableReturns struct {
		result1 error
	}
	waitUntilDBInstanceAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBInstanceAvailableWithContextStub        func(context.Context, *rds.DescribeDBInstancesInput, ...request.WaiterOption) error
	waitUntilDBInstanceAvailableWithContextMutex       sync.RWMutex
	waitUntilDBInstanceAvailableWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 []request.WaiterOption
	}
	waitUntilDBInstanceAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilDBInstanceAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBInstanceDeletedStub        func(*rds.DescribeDBInstancesInput) error
	waitUntilDBInstanceDeletedMutex       sync.RWMutex
	waitUntilDBInstanceDeletedArgsForCall []struct {
		arg1 *rds.DescribeDBInstancesInput
	}
	waitUntilDBInstanceDeletedReturns struct {
		result1 error
	}
	waitUntilDBInstanceDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBInstanceDeletedWithContextStub        func(context.Context, *rds.DescribeDBInstancesInput, ...request.WaiterOption) error
	waitUntilDBInstanceDeletedWithContextMutex       sync.RWMutex
	waitUntilDBInstanceDeletedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 []request.WaiterOption
	}
	waitUntilDBInstanceDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilDBInstanceDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBSnapshotAvailableStub        func(*rds.DescribeDBSnapshotsInput) error
	waitUntilDBSnapshotAvailableMutex       sync.RWMutex
	waitUntilDBSnapshotAvailableArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}
	waitUntilDBSnapshotAvailableReturns struct {
		result1 error
	}
	waitUntilDBSnapshotAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBSnapshotAvailableWithContextStub        func(context.Context, *rds.DescribeDBSnapshotsInput, ...request.WaiterOption) error
	waitUntilDBSnapshotAvailableWithContextMutex       sync.RWMutex
	waitUntilDBSnapshotAvailableWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 []request.WaiterOption
	}
	waitUntilDBSnapshotAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilDBSnapshotAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBSnapshotDeletedStub        func(*rds.DescribeDBSnapshotsInput) error
	waitUntilDBSnapshotDeletedMutex       sync.RWMutex
	waitUntilDBSnapshotDeletedArgsForCall []struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}
	waitUntilDBSnapshotDeletedReturns struct {
		result1 error
	}
	waitUntilDBSnapshotDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDBSnapshotDeletedWithContextStub        func(context.Context, *rds.DescribeDBSnapshotsInput, ...request.WaiterOption) error
	waitUntilDBSnapshotDeletedWithContextMutex       sync.RWMutex
	waitUntilDBSnapshotDeletedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 []request.WaiterOption
	}
	waitUntilDBSnapshotDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilDBSnapshotDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRDSAPI) AddRoleToDBCluster(arg1 *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
	fake.addRoleToDBClusterMutex.Lock()
	ret, specificReturn := fake.addRoleToDBClusterReturnsOnCall[len(fake.addRoleToDBClusterArgsForCall)]
	fake.addRoleToDBClusterArgsForCall = append(fake.addRoleToDBClusterArgsForCall, struct {
		arg1 *rds.AddRoleToDBClusterInput
	}{arg1})
	stub := fake.AddRoleToDBClusterStub
	fakeReturns := fake.addRoleToDBClusterReturns
	fake.recordInvocation("AddRoleToDBCluster", []interface{}{arg1})
	fake.addRoleToDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddRoleToDBClusterCallCount() int {
	fake.addRoleToDBClusterMutex.RLock()
	defer fake.addRoleToDBClusterMutex.RUnlock()
	return len(fake.addRoleToDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) AddRoleToDBClusterCalls(stub func(*rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error)) {
	fake.addRoleToDBClusterMutex.Lock()
	defer fake.addRoleToDBClusterMutex.Unlock()
	fake.AddRoleToDBClusterStub = stub
}

func (fake *FakeRDSAPI) AddRoleToDBClusterArgsForCall(i int) *rds.AddRoleToDBClusterInput {
	fake.addRoleToDBClusterMutex.RLock()
	defer fake.addRoleToDBClusterMutex.RUnlock()
	argsForCall := fake.addRoleToDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddRoleToDBClusterReturns(result1 *rds.AddRoleToDBClusterOutput, result2 error) {
	fake.addRoleToDBClusterMutex.Lock()
	defer fake.addRoleToDBClusterMutex.Unlock()
	fake.AddRoleToDBClusterStub = nil
	fake.addRoleToDBClusterReturns = struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBClusterReturnsOnCall(i int, result1 *rds.AddRoleToDBClusterOutput, result2 error) {
	fake.addRoleToDBClusterMutex.Lock()
	defer fake.addRoleToDBClusterMutex.Unlock()
	fake.AddRoleToDBClusterStub = nil
	if fake.addRoleToDBClusterReturnsOnCall == nil {
		fake.addRoleToDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.AddRoleToDBClusterOutput
			result2 error
		})
	}
	fake.addRoleToDBClusterReturnsOnCall[i] = struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBClusterRequest(arg1 *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput) {
	fake.addRoleToDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.addRoleToDBClusterRequestReturnsOnCall[len(fake.addRoleToDBClusterRequestArgsForCall)]
	fake.addRoleToDBClusterRequestArgsForCall = append(fake.addRoleToDBClusterRequestArgsForCall, struct {
		arg1 *rds.AddRoleToDBClusterInput
	}{arg1})
	stub := fake.AddRoleToDBClusterRequestStub
	fakeReturns := fake.addRoleToDBClusterRequestReturns
	fake.recordInvocation("AddRoleToDBClusterRequest", []interface{}{arg1})
	fake.addRoleToDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddRoleToDBClusterRequestCallCount() int {
	fake.addRoleToDBClusterRequestMutex.RLock()
	defer fake.addRoleToDBClusterRequestMutex.RUnlock()
	return len(fake.addRoleToDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) AddRoleToDBClusterRequestCalls(stub func(*rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput)) {
	fake.addRoleToDBClusterRequestMutex.Lock()
	defer fake.addRoleToDBClusterRequestMutex.Unlock()
	fake.AddRoleToDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) AddRoleToDBClusterRequestArgsForCall(i int) *rds.AddRoleToDBClusterInput {
	fake.addRoleToDBClusterRequestMutex.RLock()
	defer fake.addRoleToDBClusterRequestMutex.RUnlock()
	argsForCall := fake.addRoleToDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddRoleToDBClusterRequestReturns(result1 *request.Request, result2 *rds.AddRoleToDBClusterOutput) {
	fake.addRoleToDBClusterRequestMutex.Lock()
	defer fake.addRoleToDBClusterRequestMutex.Unlock()
	fake.AddRoleToDBClusterRequestStub = nil
	fake.addRoleToDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.AddRoleToDBClusterOutput) {
	fake.addRoleToDBClusterRequestMutex.Lock()
	defer fake.addRoleToDBClusterRequestMutex.Unlock()
	fake.AddRoleToDBClusterRequestStub = nil
	if fake.addRoleToDBClusterRequestReturnsOnCall == nil {
		fake.addRoleToDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.AddRoleToDBClusterOutput
		})
	}
	fake.addRoleToDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBClusterWithContext(arg1 context.Context, arg2 *rds.AddRoleToDBClusterInput, arg3 ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {
	fake.addRoleToDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.addRoleToDBClusterWithContextReturnsOnCall[len(fake.addRoleToDBClusterWithContextArgsForCall)]
	fake.addRoleToDBClusterWithContextArgsForCall = append(fake.addRoleToDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.AddRoleToDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddRoleToDBClusterWithContextStub
	fakeReturns := fake.addRoleToDBClusterWithContextReturns
	fake.recordInvocation("AddRoleToDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.addRoleToDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddRoleToDBClusterWithContextCallCount() int {
	fake.addRoleToDBClusterWithContextMutex.RLock()
	defer fake.addRoleToDBClusterWithContextMutex.RUnlock()
	return len(fake.addRoleToDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) AddRoleToDBClusterWithContextCalls(stub func(context.Context, *rds.AddRoleToDBClusterInput, ...request.Option) (*rds.AddRoleToDBClusterOutput, error)) {
	fake.addRoleToDBClusterWithContextMutex.Lock()
	defer fake.addRoleToDBClusterWithContextMutex.Unlock()
	fake.AddRoleToDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) AddRoleToDBClusterWithContextArgsForCall(i int) (context.Context, *rds.AddRoleToDBClusterInput, []request.Option) {
	fake.addRoleToDBClusterWithContextMutex.RLock()
	defer fake.addRoleToDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.addRoleToDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) AddRoleToDBClusterWithContextReturns(result1 *rds.AddRoleToDBClusterOutput, result2 error) {
	fake.addRoleToDBClusterWithContextMutex.Lock()
	defer fake.addRoleToDBClusterWithContextMutex.Unlock()
	fake.AddRoleToDBClusterWithContextStub = nil
	fake.addRoleToDBClusterWithContextReturns = struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBClusterWithContextReturnsOnCall(i int, result1 *rds.AddRoleToDBClusterOutput, result2 error) {
	fake.addRoleToDBClusterWithContextMutex.Lock()
	defer fake.addRoleToDBClusterWithContextMutex.Unlock()
	fake.AddRoleToDBClusterWithContextStub = nil
	if fake.addRoleToDBClusterWithContextReturnsOnCall == nil {
		fake.addRoleToDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.AddRoleToDBClusterOutput
			result2 error
		})
	}
	fake.addRoleToDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.AddRoleToDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBInstance(arg1 *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
	fake.addRoleToDBInstanceMutex.Lock()
	ret, specificReturn := fake.addRoleToDBInstanceReturnsOnCall[len(fake.addRoleToDBInstanceArgsForCall)]
	fake.addRoleToDBInstanceArgsForCall = append(fake.addRoleToDBInstanceArgsForCall, struct {
		arg1 *rds.AddRoleToDBInstanceInput
	}{arg1})
	stub := fake.AddRoleToDBInstanceStub
	fakeReturns := fake.addRoleToDBInstanceReturns
	fake.recordInvocation("AddRoleToDBInstance", []interface{}{arg1})
	fake.addRoleToDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceCallCount() int {
	fake.addRoleToDBInstanceMutex.RLock()
	defer fake.addRoleToDBInstanceMutex.RUnlock()
	return len(fake.addRoleToDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceCalls(stub func(*rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error)) {
	fake.addRoleToDBInstanceMutex.Lock()
	defer fake.addRoleToDBInstanceMutex.Unlock()
	fake.AddRoleToDBInstanceStub = stub
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceArgsForCall(i int) *rds.AddRoleToDBInstanceInput {
	fake.addRoleToDBInstanceMutex.RLock()
	defer fake.addRoleToDBInstanceMutex.RUnlock()
	argsForCall := fake.addRoleToDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceReturns(result1 *rds.AddRoleToDBInstanceOutput, result2 error) {
	fake.addRoleToDBInstanceMutex.Lock()
	defer fake.addRoleToDBInstanceMutex.Unlock()
	fake.AddRoleToDBInstanceStub = nil
	fake.addRoleToDBInstanceReturns = struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceReturnsOnCall(i int, result1 *rds.AddRoleToDBInstanceOutput, result2 error) {
	fake.addRoleToDBInstanceMutex.Lock()
	defer fake.addRoleToDBInstanceMutex.Unlock()
	fake.AddRoleToDBInstanceStub = nil
	if fake.addRoleToDBInstanceReturnsOnCall == nil {
		fake.addRoleToDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.AddRoleToDBInstanceOutput
			result2 error
		})
	}
	fake.addRoleToDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceRequest(arg1 *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput) {
	fake.addRoleToDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.addRoleToDBInstanceRequestReturnsOnCall[len(fake.addRoleToDBInstanceRequestArgsForCall)]
	fake.addRoleToDBInstanceRequestArgsForCall = append(fake.addRoleToDBInstanceRequestArgsForCall, struct {
		arg1 *rds.AddRoleToDBInstanceInput
	}{arg1})
	stub := fake.AddRoleToDBInstanceRequestStub
	fakeReturns := fake.addRoleToDBInstanceRequestReturns
	fake.recordInvocation("AddRoleToDBInstanceRequest", []interface{}{arg1})
	fake.addRoleToDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceRequestCallCount() int {
	fake.addRoleToDBInstanceRequestMutex.RLock()
	defer fake.addRoleToDBInstanceRequestMutex.RUnlock()
	return len(fake.addRoleToDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceRequestCalls(stub func(*rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput)) {
	fake.addRoleToDBInstanceRequestMutex.Lock()
	defer fake.addRoleToDBInstanceRequestMutex.Unlock()
	fake.AddRoleToDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceRequestArgsForCall(i int) *rds.AddRoleToDBInstanceInput {
	fake.addRoleToDBInstanceRequestMutex.RLock()
	defer fake.addRoleToDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.addRoleToDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceRequestReturns(result1 *request.Request, result2 *rds.AddRoleToDBInstanceOutput) {
	fake.addRoleToDBInstanceRequestMutex.Lock()
	defer fake.addRoleToDBInstanceRequestMutex.Unlock()
	fake.AddRoleToDBInstanceRequestStub = nil
	fake.addRoleToDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.AddRoleToDBInstanceOutput) {
	fake.addRoleToDBInstanceRequestMutex.Lock()
	defer fake.addRoleToDBInstanceRequestMutex.Unlock()
	fake.AddRoleToDBInstanceRequestStub = nil
	if fake.addRoleToDBInstanceRequestReturnsOnCall == nil {
		fake.addRoleToDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.AddRoleToDBInstanceOutput
		})
	}
	fake.addRoleToDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.AddRoleToDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceWithContext(arg1 context.Context, arg2 *rds.AddRoleToDBInstanceInput, arg3 ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {
	fake.addRoleToDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.addRoleToDBInstanceWithContextReturnsOnCall[len(fake.addRoleToDBInstanceWithContextArgsForCall)]
	fake.addRoleToDBInstanceWithContextArgsForCall = append(fake.addRoleToDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.AddRoleToDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddRoleToDBInstanceWithContextStub
	fakeReturns := fake.addRoleToDBInstanceWithContextReturns
	fake.recordInvocation("AddRoleToDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.addRoleToDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceWithContextCallCount() int {
	fake.addRoleToDBInstanceWithContextMutex.RLock()
	defer fake.addRoleToDBInstanceWithContextMutex.RUnlock()
	return len(fake.addRoleToDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceWithContextCalls(stub func(context.Context, *rds.AddRoleToDBInstanceInput, ...request.Option) (*rds.AddRoleToDBInstanceOutput, error)) {
	fake.addRoleToDBInstanceWithContextMutex.Lock()
	defer fake.addRoleToDBInstanceWithContextMutex.Unlock()
	fake.AddRoleToDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.AddRoleToDBInstanceInput, []request.Option) {
	fake.addRoleToDBInstanceWithContextMutex.RLock()
	defer fake.addRoleToDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.addRoleToDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceWithContextReturns(result1 *rds.AddRoleToDBInstanceOutput, result2 error) {
	fake.addRoleToDBInstanceWithContextMutex.Lock()
	defer fake.addRoleToDBInstanceWithContextMutex.Unlock()
	fake.AddRoleToDBInstanceWithContextStub = nil
	fake.addRoleToDBInstanceWithContextReturns = struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddRoleToDBInstanceWithContextReturnsOnCall(i int, result1 *rds.AddRoleToDBInstanceOutput, result2 error) {
	fake.addRoleToDBInstanceWithContextMutex.Lock()
	defer fake.addRoleToDBInstanceWithContextMutex.Unlock()
	fake.AddRoleToDBInstanceWithContextStub = nil
	if fake.addRoleToDBInstanceWithContextReturnsOnCall == nil {
		fake.addRoleToDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.AddRoleToDBInstanceOutput
			result2 error
		})
	}
	fake.addRoleToDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.AddRoleToDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscription(arg1 *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	fake.addSourceIdentifierToSubscriptionMutex.Lock()
	ret, specificReturn := fake.addSourceIdentifierToSubscriptionReturnsOnCall[len(fake.addSourceIdentifierToSubscriptionArgsForCall)]
	fake.addSourceIdentifierToSubscriptionArgsForCall = append(fake.addSourceIdentifierToSubscriptionArgsForCall, struct {
		arg1 *rds.AddSourceIdentifierToSubscriptionInput
	}{arg1})
	stub := fake.AddSourceIdentifierToSubscriptionStub
	fakeReturns := fake.addSourceIdentifierToSubscriptionReturns
	fake.recordInvocation("AddSourceIdentifierToSubscription", []interface{}{arg1})
	fake.addSourceIdentifierToSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionCallCount() int {
	fake.addSourceIdentifierToSubscriptionMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionMutex.RUnlock()
	return len(fake.addSourceIdentifierToSubscriptionArgsForCall)
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionCalls(stub func(*rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error)) {
	fake.addSourceIdentifierToSubscriptionMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionStub = stub
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionArgsForCall(i int) *rds.AddSourceIdentifierToSubscriptionInput {
	fake.addSourceIdentifierToSubscriptionMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionMutex.RUnlock()
	argsForCall := fake.addSourceIdentifierToSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionReturns(result1 *rds.AddSourceIdentifierToSubscriptionOutput, result2 error) {
	fake.addSourceIdentifierToSubscriptionMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionStub = nil
	fake.addSourceIdentifierToSubscriptionReturns = struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionReturnsOnCall(i int, result1 *rds.AddSourceIdentifierToSubscriptionOutput, result2 error) {
	fake.addSourceIdentifierToSubscriptionMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionStub = nil
	if fake.addSourceIdentifierToSubscriptionReturnsOnCall == nil {
		fake.addSourceIdentifierToSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *rds.AddSourceIdentifierToSubscriptionOutput
			result2 error
		})
	}
	fake.addSourceIdentifierToSubscriptionReturnsOnCall[i] = struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionRequest(arg1 *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput) {
	fake.addSourceIdentifierToSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.addSourceIdentifierToSubscriptionRequestReturnsOnCall[len(fake.addSourceIdentifierToSubscriptionRequestArgsForCall)]
	fake.addSourceIdentifierToSubscriptionRequestArgsForCall = append(fake.addSourceIdentifierToSubscriptionRequestArgsForCall, struct {
		arg1 *rds.AddSourceIdentifierToSubscriptionInput
	}{arg1})
	stub := fake.AddSourceIdentifierToSubscriptionRequestStub
	fakeReturns := fake.addSourceIdentifierToSubscriptionRequestReturns
	fake.recordInvocation("AddSourceIdentifierToSubscriptionRequest", []interface{}{arg1})
	fake.addSourceIdentifierToSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionRequestCallCount() int {
	fake.addSourceIdentifierToSubscriptionRequestMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionRequestMutex.RUnlock()
	return len(fake.addSourceIdentifierToSubscriptionRequestArgsForCall)
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionRequestCalls(stub func(*rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput)) {
	fake.addSourceIdentifierToSubscriptionRequestMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionRequestMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionRequestStub = stub
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionRequestArgsForCall(i int) *rds.AddSourceIdentifierToSubscriptionInput {
	fake.addSourceIdentifierToSubscriptionRequestMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.addSourceIdentifierToSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionRequestReturns(result1 *request.Request, result2 *rds.AddSourceIdentifierToSubscriptionOutput) {
	fake.addSourceIdentifierToSubscriptionRequestMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionRequestMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionRequestStub = nil
	fake.addSourceIdentifierToSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.AddSourceIdentifierToSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.AddSourceIdentifierToSubscriptionOutput) {
	fake.addSourceIdentifierToSubscriptionRequestMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionRequestMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionRequestStub = nil
	if fake.addSourceIdentifierToSubscriptionRequestReturnsOnCall == nil {
		fake.addSourceIdentifierToSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.AddSourceIdentifierToSubscriptionOutput
		})
	}
	fake.addSourceIdentifierToSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.AddSourceIdentifierToSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionWithContext(arg1 context.Context, arg2 *rds.AddSourceIdentifierToSubscriptionInput, arg3 ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	fake.addSourceIdentifierToSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.addSourceIdentifierToSubscriptionWithContextReturnsOnCall[len(fake.addSourceIdentifierToSubscriptionWithContextArgsForCall)]
	fake.addSourceIdentifierToSubscriptionWithContextArgsForCall = append(fake.addSourceIdentifierToSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.AddSourceIdentifierToSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddSourceIdentifierToSubscriptionWithContextStub
	fakeReturns := fake.addSourceIdentifierToSubscriptionWithContextReturns
	fake.recordInvocation("AddSourceIdentifierToSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.addSourceIdentifierToSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionWithContextCallCount() int {
	fake.addSourceIdentifierToSubscriptionWithContextMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionWithContextMutex.RUnlock()
	return len(fake.addSourceIdentifierToSubscriptionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionWithContextCalls(stub func(context.Context, *rds.AddSourceIdentifierToSubscriptionInput, ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error)) {
	fake.addSourceIdentifierToSubscriptionWithContextMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionWithContextMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionWithContextStub = stub
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionWithContextArgsForCall(i int) (context.Context, *rds.AddSourceIdentifierToSubscriptionInput, []request.Option) {
	fake.addSourceIdentifierToSubscriptionWithContextMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.addSourceIdentifierToSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionWithContextReturns(result1 *rds.AddSourceIdentifierToSubscriptionOutput, result2 error) {
	fake.addSourceIdentifierToSubscriptionWithContextMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionWithContextMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionWithContextStub = nil
	fake.addSourceIdentifierToSubscriptionWithContextReturns = struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddSourceIdentifierToSubscriptionWithContextReturnsOnCall(i int, result1 *rds.AddSourceIdentifierToSubscriptionOutput, result2 error) {
	fake.addSourceIdentifierToSubscriptionWithContextMutex.Lock()
	defer fake.addSourceIdentifierToSubscriptionWithContextMutex.Unlock()
	fake.AddSourceIdentifierToSubscriptionWithContextStub = nil
	if fake.addSourceIdentifierToSubscriptionWithContextReturnsOnCall == nil {
		fake.addSourceIdentifierToSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.AddSourceIdentifierToSubscriptionOutput
			result2 error
		})
	}
	fake.addSourceIdentifierToSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *rds.AddSourceIdentifierToSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddTagsToResource(arg1 *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
	fake.addTagsToResourceMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceReturnsOnCall[len(fake.addTagsToResourceArgsForCall)]
	fake.addTagsToResourceArgsForCall = append(fake.addTagsToResourceArgsForCall, struct {
		arg1 *rds.AddTagsToResourceInput
	}{arg1})
	stub := fake.AddTagsToResourceStub
	fakeReturns := fake.addTagsToResourceReturns
	fake.recordInvocation("AddTagsToResource", []interface{}{arg1})
	fake.addTagsToResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddTagsToResourceCallCount() int {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	return len(fake.addTagsToResourceArgsForCall)
}

func (fake *FakeRDSAPI) AddTagsToResourceCalls(stub func(*rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error)) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = stub
}

func (fake *FakeRDSAPI) AddTagsToResourceArgsForCall(i int) *rds.AddTagsToResourceInput {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	argsForCall := fake.addTagsToResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddTagsToResourceReturns(result1 *rds.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = nil
	fake.addTagsToResourceReturns = struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddTagsToResourceReturnsOnCall(i int, result1 *rds.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = nil
	if fake.addTagsToResourceReturnsOnCall == nil {
		fake.addTagsToResourceReturnsOnCall = make(map[int]struct {
			result1 *rds.AddTagsToResourceOutput
			result2 error
		})
	}
	fake.addTagsToResourceReturnsOnCall[i] = struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddTagsToResourceRequest(arg1 *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput) {
	fake.addTagsToResourceRequestMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceRequestReturnsOnCall[len(fake.addTagsToResourceRequestArgsForCall)]
	fake.addTagsToResourceRequestArgsForCall = append(fake.addTagsToResourceRequestArgsForCall, struct {
		arg1 *rds.AddTagsToResourceInput
	}{arg1})
	stub := fake.AddTagsToResourceRequestStub
	fakeReturns := fake.addTagsToResourceRequestReturns
	fake.recordInvocation("AddTagsToResourceRequest", []interface{}{arg1})
	fake.addTagsToResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddTagsToResourceRequestCallCount() int {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	return len(fake.addTagsToResourceRequestArgsForCall)
}

func (fake *FakeRDSAPI) AddTagsToResourceRequestCalls(stub func(*rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput)) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = stub
}

func (fake *FakeRDSAPI) AddTagsToResourceRequestArgsForCall(i int) *rds.AddTagsToResourceInput {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	argsForCall := fake.addTagsToResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AddTagsToResourceRequestReturns(result1 *request.Request, result2 *rds.AddTagsToResourceOutput) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = nil
	fake.addTagsToResourceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.AddTagsToResourceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddTagsToResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.AddTagsToResourceOutput) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = nil
	if fake.addTagsToResourceRequestReturnsOnCall == nil {
		fake.addTagsToResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.AddTagsToResourceOutput
		})
	}
	fake.addTagsToResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.AddTagsToResourceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddTagsToResourceWithContext(arg1 context.Context, arg2 *rds.AddTagsToResourceInput, arg3 ...request.Option) (*rds.AddTagsToResourceOutput, error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceWithContextReturnsOnCall[len(fake.addTagsToResourceWithContextArgsForCall)]
	fake.addTagsToResourceWithContextArgsForCall = append(fake.addTagsToResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.AddTagsToResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddTagsToResourceWithContextStub
	fakeReturns := fake.addTagsToResourceWithContextReturns
	fake.recordInvocation("AddTagsToResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.addTagsToResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AddTagsToResourceWithContextCallCount() int {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	return len(fake.addTagsToResourceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) AddTagsToResourceWithContextCalls(stub func(context.Context, *rds.AddTagsToResourceInput, ...request.Option) (*rds.AddTagsToResourceOutput, error)) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = stub
}

func (fake *FakeRDSAPI) AddTagsToResourceWithContextArgsForCall(i int) (context.Context, *rds.AddTagsToResourceInput, []request.Option) {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	argsForCall := fake.addTagsToResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) AddTagsToResourceWithContextReturns(result1 *rds.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	fake.addTagsToResourceWithContextReturns = struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AddTagsToResourceWithContextReturnsOnCall(i int, result1 *rds.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	if fake.addTagsToResourceWithContextReturnsOnCall == nil {
		fake.addTagsToResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.AddTagsToResourceOutput
			result2 error
		})
	}
	fake.addTagsToResourceWithContextReturnsOnCall[i] = struct {
		result1 *rds.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceAction(arg1 *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	fake.applyPendingMaintenanceActionMutex.Lock()
	ret, specificReturn := fake.applyPendingMaintenanceActionReturnsOnCall[len(fake.applyPendingMaintenanceActionArgsForCall)]
	fake.applyPendingMaintenanceActionArgsForCall = append(fake.applyPendingMaintenanceActionArgsForCall, struct {
		arg1 *rds.ApplyPendingMaintenanceActionInput
	}{arg1})
	stub := fake.ApplyPendingMaintenanceActionStub
	fakeReturns := fake.applyPendingMaintenanceActionReturns
	fake.recordInvocation("ApplyPendingMaintenanceAction", []interface{}{arg1})
	fake.applyPendingMaintenanceActionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionCallCount() int {
	fake.applyPendingMaintenanceActionMutex.RLock()
	defer fake.applyPendingMaintenanceActionMutex.RUnlock()
	return len(fake.applyPendingMaintenanceActionArgsForCall)
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionCalls(stub func(*rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error)) {
	fake.applyPendingMaintenanceActionMutex.Lock()
	defer fake.applyPendingMaintenanceActionMutex.Unlock()
	fake.ApplyPendingMaintenanceActionStub = stub
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionArgsForCall(i int) *rds.ApplyPendingMaintenanceActionInput {
	fake.applyPendingMaintenanceActionMutex.RLock()
	defer fake.applyPendingMaintenanceActionMutex.RUnlock()
	argsForCall := fake.applyPendingMaintenanceActionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionReturns(result1 *rds.ApplyPendingMaintenanceActionOutput, result2 error) {
	fake.applyPendingMaintenanceActionMutex.Lock()
	defer fake.applyPendingMaintenanceActionMutex.Unlock()
	fake.ApplyPendingMaintenanceActionStub = nil
	fake.applyPendingMaintenanceActionReturns = struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionReturnsOnCall(i int, result1 *rds.ApplyPendingMaintenanceActionOutput, result2 error) {
	fake.applyPendingMaintenanceActionMutex.Lock()
	defer fake.applyPendingMaintenanceActionMutex.Unlock()
	fake.ApplyPendingMaintenanceActionStub = nil
	if fake.applyPendingMaintenanceActionReturnsOnCall == nil {
		fake.applyPendingMaintenanceActionReturnsOnCall = make(map[int]struct {
			result1 *rds.ApplyPendingMaintenanceActionOutput
			result2 error
		})
	}
	fake.applyPendingMaintenanceActionReturnsOnCall[i] = struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionRequest(arg1 *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput) {
	fake.applyPendingMaintenanceActionRequestMutex.Lock()
	ret, specificReturn := fake.applyPendingMaintenanceActionRequestReturnsOnCall[len(fake.applyPendingMaintenanceActionRequestArgsForCall)]
	fake.applyPendingMaintenanceActionRequestArgsForCall = append(fake.applyPendingMaintenanceActionRequestArgsForCall, struct {
		arg1 *rds.ApplyPendingMaintenanceActionInput
	}{arg1})
	stub := fake.ApplyPendingMaintenanceActionRequestStub
	fakeReturns := fake.applyPendingMaintenanceActionRequestReturns
	fake.recordInvocation("ApplyPendingMaintenanceActionRequest", []interface{}{arg1})
	fake.applyPendingMaintenanceActionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionRequestCallCount() int {
	fake.applyPendingMaintenanceActionRequestMutex.RLock()
	defer fake.applyPendingMaintenanceActionRequestMutex.RUnlock()
	return len(fake.applyPendingMaintenanceActionRequestArgsForCall)
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionRequestCalls(stub func(*rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput)) {
	fake.applyPendingMaintenanceActionRequestMutex.Lock()
	defer fake.applyPendingMaintenanceActionRequestMutex.Unlock()
	fake.ApplyPendingMaintenanceActionRequestStub = stub
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionRequestArgsForCall(i int) *rds.ApplyPendingMaintenanceActionInput {
	fake.applyPendingMaintenanceActionRequestMutex.RLock()
	defer fake.applyPendingMaintenanceActionRequestMutex.RUnlock()
	argsForCall := fake.applyPendingMaintenanceActionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionRequestReturns(result1 *request.Request, result2 *rds.ApplyPendingMaintenanceActionOutput) {
	fake.applyPendingMaintenanceActionRequestMutex.Lock()
	defer fake.applyPendingMaintenanceActionRequestMutex.Unlock()
	fake.ApplyPendingMaintenanceActionRequestStub = nil
	fake.applyPendingMaintenanceActionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ApplyPendingMaintenanceActionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ApplyPendingMaintenanceActionOutput) {
	fake.applyPendingMaintenanceActionRequestMutex.Lock()
	defer fake.applyPendingMaintenanceActionRequestMutex.Unlock()
	fake.ApplyPendingMaintenanceActionRequestStub = nil
	if fake.applyPendingMaintenanceActionRequestReturnsOnCall == nil {
		fake.applyPendingMaintenanceActionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ApplyPendingMaintenanceActionOutput
		})
	}
	fake.applyPendingMaintenanceActionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ApplyPendingMaintenanceActionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionWithContext(arg1 context.Context, arg2 *rds.ApplyPendingMaintenanceActionInput, arg3 ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	fake.applyPendingMaintenanceActionWithContextMutex.Lock()
	ret, specificReturn := fake.applyPendingMaintenanceActionWithContextReturnsOnCall[len(fake.applyPendingMaintenanceActionWithContextArgsForCall)]
	fake.applyPendingMaintenanceActionWithContextArgsForCall = append(fake.applyPendingMaintenanceActionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ApplyPendingMaintenanceActionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ApplyPendingMaintenanceActionWithContextStub
	fakeReturns := fake.applyPendingMaintenanceActionWithContextReturns
	fake.recordInvocation("ApplyPendingMaintenanceActionWithContext", []interface{}{arg1, arg2, arg3})
	fake.applyPendingMaintenanceActionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionWithContextCallCount() int {
	fake.applyPendingMaintenanceActionWithContextMutex.RLock()
	defer fake.applyPendingMaintenanceActionWithContextMutex.RUnlock()
	return len(fake.applyPendingMaintenanceActionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionWithContextCalls(stub func(context.Context, *rds.ApplyPendingMaintenanceActionInput, ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error)) {
	fake.applyPendingMaintenanceActionWithContextMutex.Lock()
	defer fake.applyPendingMaintenanceActionWithContextMutex.Unlock()
	fake.ApplyPendingMaintenanceActionWithContextStub = stub
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionWithContextArgsForCall(i int) (context.Context, *rds.ApplyPendingMaintenanceActionInput, []request.Option) {
	fake.applyPendingMaintenanceActionWithContextMutex.RLock()
	defer fake.applyPendingMaintenanceActionWithContextMutex.RUnlock()
	argsForCall := fake.applyPendingMaintenanceActionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionWithContextReturns(result1 *rds.ApplyPendingMaintenanceActionOutput, result2 error) {
	fake.applyPendingMaintenanceActionWithContextMutex.Lock()
	defer fake.applyPendingMaintenanceActionWithContextMutex.Unlock()
	fake.ApplyPendingMaintenanceActionWithContextStub = nil
	fake.applyPendingMaintenanceActionWithContextReturns = struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ApplyPendingMaintenanceActionWithContextReturnsOnCall(i int, result1 *rds.ApplyPendingMaintenanceActionOutput, result2 error) {
	fake.applyPendingMaintenanceActionWithContextMutex.Lock()
	defer fake.applyPendingMaintenanceActionWithContextMutex.Unlock()
	fake.ApplyPendingMaintenanceActionWithContextStub = nil
	if fake.applyPendingMaintenanceActionWithContextReturnsOnCall == nil {
		fake.applyPendingMaintenanceActionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ApplyPendingMaintenanceActionOutput
			result2 error
		})
	}
	fake.applyPendingMaintenanceActionWithContextReturnsOnCall[i] = struct {
		result1 *rds.ApplyPendingMaintenanceActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngress(arg1 *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	fake.authorizeDBSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.authorizeDBSecurityGroupIngressReturnsOnCall[len(fake.authorizeDBSecurityGroupIngressArgsForCall)]
	fake.authorizeDBSecurityGroupIngressArgsForCall = append(fake.authorizeDBSecurityGroupIngressArgsForCall, struct {
		arg1 *rds.AuthorizeDBSecurityGroupIngressInput
	}{arg1})
	stub := fake.AuthorizeDBSecurityGroupIngressStub
	fakeReturns := fake.authorizeDBSecurityGroupIngressReturns
	fake.recordInvocation("AuthorizeDBSecurityGroupIngress", []interface{}{arg1})
	fake.authorizeDBSecurityGroupIngressMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressCallCount() int {
	fake.authorizeDBSecurityGroupIngressMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressMutex.RUnlock()
	return len(fake.authorizeDBSecurityGroupIngressArgsForCall)
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressCalls(stub func(*rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)) {
	fake.authorizeDBSecurityGroupIngressMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressStub = stub
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressArgsForCall(i int) *rds.AuthorizeDBSecurityGroupIngressInput {
	fake.authorizeDBSecurityGroupIngressMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressMutex.RUnlock()
	argsForCall := fake.authorizeDBSecurityGroupIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressReturns(result1 *rds.AuthorizeDBSecurityGroupIngressOutput, result2 error) {
	fake.authorizeDBSecurityGroupIngressMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressStub = nil
	fake.authorizeDBSecurityGroupIngressReturns = struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressReturnsOnCall(i int, result1 *rds.AuthorizeDBSecurityGroupIngressOutput, result2 error) {
	fake.authorizeDBSecurityGroupIngressMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressStub = nil
	if fake.authorizeDBSecurityGroupIngressReturnsOnCall == nil {
		fake.authorizeDBSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *rds.AuthorizeDBSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeDBSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressRequest(arg1 *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput) {
	fake.authorizeDBSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.authorizeDBSecurityGroupIngressRequestReturnsOnCall[len(fake.authorizeDBSecurityGroupIngressRequestArgsForCall)]
	fake.authorizeDBSecurityGroupIngressRequestArgsForCall = append(fake.authorizeDBSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *rds.AuthorizeDBSecurityGroupIngressInput
	}{arg1})
	stub := fake.AuthorizeDBSecurityGroupIngressRequestStub
	fakeReturns := fake.authorizeDBSecurityGroupIngressRequestReturns
	fake.recordInvocation("AuthorizeDBSecurityGroupIngressRequest", []interface{}{arg1})
	fake.authorizeDBSecurityGroupIngressRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressRequestCallCount() int {
	fake.authorizeDBSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.authorizeDBSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressRequestCalls(stub func(*rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput)) {
	fake.authorizeDBSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressRequestStub = stub
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressRequestArgsForCall(i int) *rds.AuthorizeDBSecurityGroupIngressInput {
	fake.authorizeDBSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressRequestMutex.RUnlock()
	argsForCall := fake.authorizeDBSecurityGroupIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *rds.AuthorizeDBSecurityGroupIngressOutput) {
	fake.authorizeDBSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressRequestStub = nil
	fake.authorizeDBSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *rds.AuthorizeDBSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.AuthorizeDBSecurityGroupIngressOutput) {
	fake.authorizeDBSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressRequestStub = nil
	if fake.authorizeDBSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.authorizeDBSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.AuthorizeDBSecurityGroupIngressOutput
		})
	}
	fake.authorizeDBSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.AuthorizeDBSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressWithContext(arg1 context.Context, arg2 *rds.AuthorizeDBSecurityGroupIngressInput, arg3 ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	fake.authorizeDBSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeDBSecurityGroupIngressWithContextReturnsOnCall[len(fake.authorizeDBSecurityGroupIngressWithContextArgsForCall)]
	fake.authorizeDBSecurityGroupIngressWithContextArgsForCall = append(fake.authorizeDBSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.AuthorizeDBSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AuthorizeDBSecurityGroupIngressWithContextStub
	fakeReturns := fake.authorizeDBSecurityGroupIngressWithContextReturns
	fake.recordInvocation("AuthorizeDBSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.authorizeDBSecurityGroupIngressWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressWithContextCallCount() int {
	fake.authorizeDBSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.authorizeDBSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressWithContextCalls(stub func(context.Context, *rds.AuthorizeDBSecurityGroupIngressInput, ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)) {
	fake.authorizeDBSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressWithContextArgsForCall(i int) (context.Context, *rds.AuthorizeDBSecurityGroupIngressInput, []request.Option) {
	fake.authorizeDBSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.authorizeDBSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressWithContextReturns(result1 *rds.AuthorizeDBSecurityGroupIngressOutput, result2 error) {
	fake.authorizeDBSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressWithContextStub = nil
	fake.authorizeDBSecurityGroupIngressWithContextReturns = struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) AuthorizeDBSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *rds.AuthorizeDBSecurityGroupIngressOutput, result2 error) {
	fake.authorizeDBSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeDBSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeDBSecurityGroupIngressWithContextStub = nil
	if fake.authorizeDBSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.authorizeDBSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.AuthorizeDBSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeDBSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *rds.AuthorizeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) BacktrackDBCluster(arg1 *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
	fake.backtrackDBClusterMutex.Lock()
	ret, specificReturn := fake.backtrackDBClusterReturnsOnCall[len(fake.backtrackDBClusterArgsForCall)]
	fake.backtrackDBClusterArgsForCall = append(fake.backtrackDBClusterArgsForCall, struct {
		arg1 *rds.BacktrackDBClusterInput
	}{arg1})
	stub := fake.BacktrackDBClusterStub
	fakeReturns := fake.backtrackDBClusterReturns
	fake.recordInvocation("BacktrackDBCluster", []interface{}{arg1})
	fake.backtrackDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) BacktrackDBClusterCallCount() int {
	fake.backtrackDBClusterMutex.RLock()
	defer fake.backtrackDBClusterMutex.RUnlock()
	return len(fake.backtrackDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) BacktrackDBClusterCalls(stub func(*rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error)) {
	fake.backtrackDBClusterMutex.Lock()
	defer fake.backtrackDBClusterMutex.Unlock()
	fake.BacktrackDBClusterStub = stub
}

func (fake *FakeRDSAPI) BacktrackDBClusterArgsForCall(i int) *rds.BacktrackDBClusterInput {
	fake.backtrackDBClusterMutex.RLock()
	defer fake.backtrackDBClusterMutex.RUnlock()
	argsForCall := fake.backtrackDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) BacktrackDBClusterReturns(result1 *rds.BacktrackDBClusterOutput, result2 error) {
	fake.backtrackDBClusterMutex.Lock()
	defer fake.backtrackDBClusterMutex.Unlock()
	fake.BacktrackDBClusterStub = nil
	fake.backtrackDBClusterReturns = struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) BacktrackDBClusterReturnsOnCall(i int, result1 *rds.BacktrackDBClusterOutput, result2 error) {
	fake.backtrackDBClusterMutex.Lock()
	defer fake.backtrackDBClusterMutex.Unlock()
	fake.BacktrackDBClusterStub = nil
	if fake.backtrackDBClusterReturnsOnCall == nil {
		fake.backtrackDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.BacktrackDBClusterOutput
			result2 error
		})
	}
	fake.backtrackDBClusterReturnsOnCall[i] = struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) BacktrackDBClusterRequest(arg1 *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput) {
	fake.backtrackDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.backtrackDBClusterRequestReturnsOnCall[len(fake.backtrackDBClusterRequestArgsForCall)]
	fake.backtrackDBClusterRequestArgsForCall = append(fake.backtrackDBClusterRequestArgsForCall, struct {
		arg1 *rds.BacktrackDBClusterInput
	}{arg1})
	stub := fake.BacktrackDBClusterRequestStub
	fakeReturns := fake.backtrackDBClusterRequestReturns
	fake.recordInvocation("BacktrackDBClusterRequest", []interface{}{arg1})
	fake.backtrackDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) BacktrackDBClusterRequestCallCount() int {
	fake.backtrackDBClusterRequestMutex.RLock()
	defer fake.backtrackDBClusterRequestMutex.RUnlock()
	return len(fake.backtrackDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) BacktrackDBClusterRequestCalls(stub func(*rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput)) {
	fake.backtrackDBClusterRequestMutex.Lock()
	defer fake.backtrackDBClusterRequestMutex.Unlock()
	fake.BacktrackDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) BacktrackDBClusterRequestArgsForCall(i int) *rds.BacktrackDBClusterInput {
	fake.backtrackDBClusterRequestMutex.RLock()
	defer fake.backtrackDBClusterRequestMutex.RUnlock()
	argsForCall := fake.backtrackDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) BacktrackDBClusterRequestReturns(result1 *request.Request, result2 *rds.BacktrackDBClusterOutput) {
	fake.backtrackDBClusterRequestMutex.Lock()
	defer fake.backtrackDBClusterRequestMutex.Unlock()
	fake.BacktrackDBClusterRequestStub = nil
	fake.backtrackDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.BacktrackDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) BacktrackDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.BacktrackDBClusterOutput) {
	fake.backtrackDBClusterRequestMutex.Lock()
	defer fake.backtrackDBClusterRequestMutex.Unlock()
	fake.BacktrackDBClusterRequestStub = nil
	if fake.backtrackDBClusterRequestReturnsOnCall == nil {
		fake.backtrackDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.BacktrackDBClusterOutput
		})
	}
	fake.backtrackDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.BacktrackDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) BacktrackDBClusterWithContext(arg1 context.Context, arg2 *rds.BacktrackDBClusterInput, arg3 ...request.Option) (*rds.BacktrackDBClusterOutput, error) {
	fake.backtrackDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.backtrackDBClusterWithContextReturnsOnCall[len(fake.backtrackDBClusterWithContextArgsForCall)]
	fake.backtrackDBClusterWithContextArgsForCall = append(fake.backtrackDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.BacktrackDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.BacktrackDBClusterWithContextStub
	fakeReturns := fake.backtrackDBClusterWithContextReturns
	fake.recordInvocation("BacktrackDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.backtrackDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) BacktrackDBClusterWithContextCallCount() int {
	fake.backtrackDBClusterWithContextMutex.RLock()
	defer fake.backtrackDBClusterWithContextMutex.RUnlock()
	return len(fake.backtrackDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) BacktrackDBClusterWithContextCalls(stub func(context.Context, *rds.BacktrackDBClusterInput, ...request.Option) (*rds.BacktrackDBClusterOutput, error)) {
	fake.backtrackDBClusterWithContextMutex.Lock()
	defer fake.backtrackDBClusterWithContextMutex.Unlock()
	fake.BacktrackDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) BacktrackDBClusterWithContextArgsForCall(i int) (context.Context, *rds.BacktrackDBClusterInput, []request.Option) {
	fake.backtrackDBClusterWithContextMutex.RLock()
	defer fake.backtrackDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.backtrackDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) BacktrackDBClusterWithContextReturns(result1 *rds.BacktrackDBClusterOutput, result2 error) {
	fake.backtrackDBClusterWithContextMutex.Lock()
	defer fake.backtrackDBClusterWithContextMutex.Unlock()
	fake.BacktrackDBClusterWithContextStub = nil
	fake.backtrackDBClusterWithContextReturns = struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) BacktrackDBClusterWithContextReturnsOnCall(i int, result1 *rds.BacktrackDBClusterOutput, result2 error) {
	fake.backtrackDBClusterWithContextMutex.Lock()
	defer fake.backtrackDBClusterWithContextMutex.Unlock()
	fake.BacktrackDBClusterWithContextStub = nil
	if fake.backtrackDBClusterWithContextReturnsOnCall == nil {
		fake.backtrackDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.BacktrackDBClusterOutput
			result2 error
		})
	}
	fake.backtrackDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.BacktrackDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CancelExportTask(arg1 *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
	fake.cancelExportTaskMutex.Lock()
	ret, specificReturn := fake.cancelExportTaskReturnsOnCall[len(fake.cancelExportTaskArgsForCall)]
	fake.cancelExportTaskArgsForCall = append(fake.cancelExportTaskArgsForCall, struct {
		arg1 *rds.CancelExportTaskInput
	}{arg1})
	stub := fake.CancelExportTaskStub
	fakeReturns := fake.cancelExportTaskReturns
	fake.recordInvocation("CancelExportTask", []interface{}{arg1})
	fake.cancelExportTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CancelExportTaskCallCount() int {
	fake.cancelExportTaskMutex.RLock()
	defer fake.cancelExportTaskMutex.RUnlock()
	return len(fake.cancelExportTaskArgsForCall)
}

func (fake *FakeRDSAPI) CancelExportTaskCalls(stub func(*rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error)) {
	fake.cancelExportTaskMutex.Lock()
	defer fake.cancelExportTaskMutex.Unlock()
	fake.CancelExportTaskStub = stub
}

func (fake *FakeRDSAPI) CancelExportTaskArgsForCall(i int) *rds.CancelExportTaskInput {
	fake.cancelExportTaskMutex.RLock()
	defer fake.cancelExportTaskMutex.RUnlock()
	argsForCall := fake.cancelExportTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CancelExportTaskReturns(result1 *rds.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskMutex.Lock()
	defer fake.cancelExportTaskMutex.Unlock()
	fake.CancelExportTaskStub = nil
	fake.cancelExportTaskReturns = struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CancelExportTaskReturnsOnCall(i int, result1 *rds.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskMutex.Lock()
	defer fake.cancelExportTaskMutex.Unlock()
	fake.CancelExportTaskStub = nil
	if fake.cancelExportTaskReturnsOnCall == nil {
		fake.cancelExportTaskReturnsOnCall = make(map[int]struct {
			result1 *rds.CancelExportTaskOutput
			result2 error
		})
	}
	fake.cancelExportTaskReturnsOnCall[i] = struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CancelExportTaskRequest(arg1 *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput) {
	fake.cancelExportTaskRequestMutex.Lock()
	ret, specificReturn := fake.cancelExportTaskRequestReturnsOnCall[len(fake.cancelExportTaskRequestArgsForCall)]
	fake.cancelExportTaskRequestArgsForCall = append(fake.cancelExportTaskRequestArgsForCall, struct {
		arg1 *rds.CancelExportTaskInput
	}{arg1})
	stub := fake.CancelExportTaskRequestStub
	fakeReturns := fake.cancelExportTaskRequestReturns
	fake.recordInvocation("CancelExportTaskRequest", []interface{}{arg1})
	fake.cancelExportTaskRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CancelExportTaskRequestCallCount() int {
	fake.cancelExportTaskRequestMutex.RLock()
	defer fake.cancelExportTaskRequestMutex.RUnlock()
	return len(fake.cancelExportTaskRequestArgsForCall)
}

func (fake *FakeRDSAPI) CancelExportTaskRequestCalls(stub func(*rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput)) {
	fake.cancelExportTaskRequestMutex.Lock()
	defer fake.cancelExportTaskRequestMutex.Unlock()
	fake.CancelExportTaskRequestStub = stub
}

func (fake *FakeRDSAPI) CancelExportTaskRequestArgsForCall(i int) *rds.CancelExportTaskInput {
	fake.cancelExportTaskRequestMutex.RLock()
	defer fake.cancelExportTaskRequestMutex.RUnlock()
	argsForCall := fake.cancelExportTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CancelExportTaskRequestReturns(result1 *request.Request, result2 *rds.CancelExportTaskOutput) {
	fake.cancelExportTaskRequestMutex.Lock()
	defer fake.cancelExportTaskRequestMutex.Unlock()
	fake.CancelExportTaskRequestStub = nil
	fake.cancelExportTaskRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CancelExportTaskOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CancelExportTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CancelExportTaskOutput) {
	fake.cancelExportTaskRequestMutex.Lock()
	defer fake.cancelExportTaskRequestMutex.Unlock()
	fake.CancelExportTaskRequestStub = nil
	if fake.cancelExportTaskRequestReturnsOnCall == nil {
		fake.cancelExportTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CancelExportTaskOutput
		})
	}
	fake.cancelExportTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CancelExportTaskOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CancelExportTaskWithContext(arg1 context.Context, arg2 *rds.CancelExportTaskInput, arg3 ...request.Option) (*rds.CancelExportTaskOutput, error) {
	fake.cancelExportTaskWithContextMutex.Lock()
	ret, specificReturn := fake.cancelExportTaskWithContextReturnsOnCall[len(fake.cancelExportTaskWithContextArgsForCall)]
	fake.cancelExportTaskWithContextArgsForCall = append(fake.cancelExportTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CancelExportTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CancelExportTaskWithContextStub
	fakeReturns := fake.cancelExportTaskWithContextReturns
	fake.recordInvocation("CancelExportTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelExportTaskWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CancelExportTaskWithContextCallCount() int {
	fake.cancelExportTaskWithContextMutex.RLock()
	defer fake.cancelExportTaskWithContextMutex.RUnlock()
	return len(fake.cancelExportTaskWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CancelExportTaskWithContextCalls(stub func(context.Context, *rds.CancelExportTaskInput, ...request.Option) (*rds.CancelExportTaskOutput, error)) {
	fake.cancelExportTaskWithContextMutex.Lock()
	defer fake.cancelExportTaskWithContextMutex.Unlock()
	fake.CancelExportTaskWithContextStub = stub
}

func (fake *FakeRDSAPI) CancelExportTaskWithContextArgsForCall(i int) (context.Context, *rds.CancelExportTaskInput, []request.Option) {
	fake.cancelExportTaskWithContextMutex.RLock()
	defer fake.cancelExportTaskWithContextMutex.RUnlock()
	argsForCall := fake.cancelExportTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CancelExportTaskWithContextReturns(result1 *rds.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskWithContextMutex.Lock()
	defer fake.cancelExportTaskWithContextMutex.Unlock()
	fake.CancelExportTaskWithContextStub = nil
	fake.cancelExportTaskWithContextReturns = struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CancelExportTaskWithContextReturnsOnCall(i int, result1 *rds.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskWithContextMutex.Lock()
	defer fake.cancelExportTaskWithContextMutex.Unlock()
	fake.CancelExportTaskWithContextStub = nil
	if fake.cancelExportTaskWithContextReturnsOnCall == nil {
		fake.cancelExportTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CancelExportTaskOutput
			result2 error
		})
	}
	fake.cancelExportTaskWithContextReturnsOnCall[i] = struct {
		result1 *rds.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroup(arg1 *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
	fake.copyDBClusterParameterGroupMutex.Lock()
	ret, specificReturn := fake.copyDBClusterParameterGroupReturnsOnCall[len(fake.copyDBClusterParameterGroupArgsForCall)]
	fake.copyDBClusterParameterGroupArgsForCall = append(fake.copyDBClusterParameterGroupArgsForCall, struct {
		arg1 *rds.CopyDBClusterParameterGroupInput
	}{arg1})
	stub := fake.CopyDBClusterParameterGroupStub
	fakeReturns := fake.copyDBClusterParameterGroupReturns
	fake.recordInvocation("CopyDBClusterParameterGroup", []interface{}{arg1})
	fake.copyDBClusterParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupCallCount() int {
	fake.copyDBClusterParameterGroupMutex.RLock()
	defer fake.copyDBClusterParameterGroupMutex.RUnlock()
	return len(fake.copyDBClusterParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupCalls(stub func(*rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error)) {
	fake.copyDBClusterParameterGroupMutex.Lock()
	defer fake.copyDBClusterParameterGroupMutex.Unlock()
	fake.CopyDBClusterParameterGroupStub = stub
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupArgsForCall(i int) *rds.CopyDBClusterParameterGroupInput {
	fake.copyDBClusterParameterGroupMutex.RLock()
	defer fake.copyDBClusterParameterGroupMutex.RUnlock()
	argsForCall := fake.copyDBClusterParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupReturns(result1 *rds.CopyDBClusterParameterGroupOutput, result2 error) {
	fake.copyDBClusterParameterGroupMutex.Lock()
	defer fake.copyDBClusterParameterGroupMutex.Unlock()
	fake.CopyDBClusterParameterGroupStub = nil
	fake.copyDBClusterParameterGroupReturns = struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupReturnsOnCall(i int, result1 *rds.CopyDBClusterParameterGroupOutput, result2 error) {
	fake.copyDBClusterParameterGroupMutex.Lock()
	defer fake.copyDBClusterParameterGroupMutex.Unlock()
	fake.CopyDBClusterParameterGroupStub = nil
	if fake.copyDBClusterParameterGroupReturnsOnCall == nil {
		fake.copyDBClusterParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBClusterParameterGroupOutput
			result2 error
		})
	}
	fake.copyDBClusterParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupRequest(arg1 *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput) {
	fake.copyDBClusterParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.copyDBClusterParameterGroupRequestReturnsOnCall[len(fake.copyDBClusterParameterGroupRequestArgsForCall)]
	fake.copyDBClusterParameterGroupRequestArgsForCall = append(fake.copyDBClusterParameterGroupRequestArgsForCall, struct {
		arg1 *rds.CopyDBClusterParameterGroupInput
	}{arg1})
	stub := fake.CopyDBClusterParameterGroupRequestStub
	fakeReturns := fake.copyDBClusterParameterGroupRequestReturns
	fake.recordInvocation("CopyDBClusterParameterGroupRequest", []interface{}{arg1})
	fake.copyDBClusterParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupRequestCallCount() int {
	fake.copyDBClusterParameterGroupRequestMutex.RLock()
	defer fake.copyDBClusterParameterGroupRequestMutex.RUnlock()
	return len(fake.copyDBClusterParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupRequestCalls(stub func(*rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput)) {
	fake.copyDBClusterParameterGroupRequestMutex.Lock()
	defer fake.copyDBClusterParameterGroupRequestMutex.Unlock()
	fake.CopyDBClusterParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupRequestArgsForCall(i int) *rds.CopyDBClusterParameterGroupInput {
	fake.copyDBClusterParameterGroupRequestMutex.RLock()
	defer fake.copyDBClusterParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.copyDBClusterParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupRequestReturns(result1 *request.Request, result2 *rds.CopyDBClusterParameterGroupOutput) {
	fake.copyDBClusterParameterGroupRequestMutex.Lock()
	defer fake.copyDBClusterParameterGroupRequestMutex.Unlock()
	fake.CopyDBClusterParameterGroupRequestStub = nil
	fake.copyDBClusterParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CopyDBClusterParameterGroupOutput) {
	fake.copyDBClusterParameterGroupRequestMutex.Lock()
	defer fake.copyDBClusterParameterGroupRequestMutex.Unlock()
	fake.CopyDBClusterParameterGroupRequestStub = nil
	if fake.copyDBClusterParameterGroupRequestReturnsOnCall == nil {
		fake.copyDBClusterParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CopyDBClusterParameterGroupOutput
		})
	}
	fake.copyDBClusterParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupWithContext(arg1 context.Context, arg2 *rds.CopyDBClusterParameterGroupInput, arg3 ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {
	fake.copyDBClusterParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.copyDBClusterParameterGroupWithContextReturnsOnCall[len(fake.copyDBClusterParameterGroupWithContextArgsForCall)]
	fake.copyDBClusterParameterGroupWithContextArgsForCall = append(fake.copyDBClusterParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CopyDBClusterParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CopyDBClusterParameterGroupWithContextStub
	fakeReturns := fake.copyDBClusterParameterGroupWithContextReturns
	fake.recordInvocation("CopyDBClusterParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyDBClusterParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupWithContextCallCount() int {
	fake.copyDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.copyDBClusterParameterGroupWithContextMutex.RUnlock()
	return len(fake.copyDBClusterParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupWithContextCalls(stub func(context.Context, *rds.CopyDBClusterParameterGroupInput, ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error)) {
	fake.copyDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.copyDBClusterParameterGroupWithContextMutex.Unlock()
	fake.CopyDBClusterParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.CopyDBClusterParameterGroupInput, []request.Option) {
	fake.copyDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.copyDBClusterParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.copyDBClusterParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupWithContextReturns(result1 *rds.CopyDBClusterParameterGroupOutput, result2 error) {
	fake.copyDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.copyDBClusterParameterGroupWithContextMutex.Unlock()
	fake.CopyDBClusterParameterGroupWithContextStub = nil
	fake.copyDBClusterParameterGroupWithContextReturns = struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterParameterGroupWithContextReturnsOnCall(i int, result1 *rds.CopyDBClusterParameterGroupOutput, result2 error) {
	fake.copyDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.copyDBClusterParameterGroupWithContextMutex.Unlock()
	fake.CopyDBClusterParameterGroupWithContextStub = nil
	if fake.copyDBClusterParameterGroupWithContextReturnsOnCall == nil {
		fake.copyDBClusterParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBClusterParameterGroupOutput
			result2 error
		})
	}
	fake.copyDBClusterParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CopyDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshot(arg1 *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
	fake.copyDBClusterSnapshotMutex.Lock()
	ret, specificReturn := fake.copyDBClusterSnapshotReturnsOnCall[len(fake.copyDBClusterSnapshotArgsForCall)]
	fake.copyDBClusterSnapshotArgsForCall = append(fake.copyDBClusterSnapshotArgsForCall, struct {
		arg1 *rds.CopyDBClusterSnapshotInput
	}{arg1})
	stub := fake.CopyDBClusterSnapshotStub
	fakeReturns := fake.copyDBClusterSnapshotReturns
	fake.recordInvocation("CopyDBClusterSnapshot", []interface{}{arg1})
	fake.copyDBClusterSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotCallCount() int {
	fake.copyDBClusterSnapshotMutex.RLock()
	defer fake.copyDBClusterSnapshotMutex.RUnlock()
	return len(fake.copyDBClusterSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotCalls(stub func(*rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error)) {
	fake.copyDBClusterSnapshotMutex.Lock()
	defer fake.copyDBClusterSnapshotMutex.Unlock()
	fake.CopyDBClusterSnapshotStub = stub
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotArgsForCall(i int) *rds.CopyDBClusterSnapshotInput {
	fake.copyDBClusterSnapshotMutex.RLock()
	defer fake.copyDBClusterSnapshotMutex.RUnlock()
	argsForCall := fake.copyDBClusterSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotReturns(result1 *rds.CopyDBClusterSnapshotOutput, result2 error) {
	fake.copyDBClusterSnapshotMutex.Lock()
	defer fake.copyDBClusterSnapshotMutex.Unlock()
	fake.CopyDBClusterSnapshotStub = nil
	fake.copyDBClusterSnapshotReturns = struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotReturnsOnCall(i int, result1 *rds.CopyDBClusterSnapshotOutput, result2 error) {
	fake.copyDBClusterSnapshotMutex.Lock()
	defer fake.copyDBClusterSnapshotMutex.Unlock()
	fake.CopyDBClusterSnapshotStub = nil
	if fake.copyDBClusterSnapshotReturnsOnCall == nil {
		fake.copyDBClusterSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBClusterSnapshotOutput
			result2 error
		})
	}
	fake.copyDBClusterSnapshotReturnsOnCall[i] = struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotRequest(arg1 *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput) {
	fake.copyDBClusterSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.copyDBClusterSnapshotRequestReturnsOnCall[len(fake.copyDBClusterSnapshotRequestArgsForCall)]
	fake.copyDBClusterSnapshotRequestArgsForCall = append(fake.copyDBClusterSnapshotRequestArgsForCall, struct {
		arg1 *rds.CopyDBClusterSnapshotInput
	}{arg1})
	stub := fake.CopyDBClusterSnapshotRequestStub
	fakeReturns := fake.copyDBClusterSnapshotRequestReturns
	fake.recordInvocation("CopyDBClusterSnapshotRequest", []interface{}{arg1})
	fake.copyDBClusterSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotRequestCallCount() int {
	fake.copyDBClusterSnapshotRequestMutex.RLock()
	defer fake.copyDBClusterSnapshotRequestMutex.RUnlock()
	return len(fake.copyDBClusterSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotRequestCalls(stub func(*rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput)) {
	fake.copyDBClusterSnapshotRequestMutex.Lock()
	defer fake.copyDBClusterSnapshotRequestMutex.Unlock()
	fake.CopyDBClusterSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotRequestArgsForCall(i int) *rds.CopyDBClusterSnapshotInput {
	fake.copyDBClusterSnapshotRequestMutex.RLock()
	defer fake.copyDBClusterSnapshotRequestMutex.RUnlock()
	argsForCall := fake.copyDBClusterSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotRequestReturns(result1 *request.Request, result2 *rds.CopyDBClusterSnapshotOutput) {
	fake.copyDBClusterSnapshotRequestMutex.Lock()
	defer fake.copyDBClusterSnapshotRequestMutex.Unlock()
	fake.CopyDBClusterSnapshotRequestStub = nil
	fake.copyDBClusterSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CopyDBClusterSnapshotOutput) {
	fake.copyDBClusterSnapshotRequestMutex.Lock()
	defer fake.copyDBClusterSnapshotRequestMutex.Unlock()
	fake.CopyDBClusterSnapshotRequestStub = nil
	if fake.copyDBClusterSnapshotRequestReturnsOnCall == nil {
		fake.copyDBClusterSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CopyDBClusterSnapshotOutput
		})
	}
	fake.copyDBClusterSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CopyDBClusterSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotWithContext(arg1 context.Context, arg2 *rds.CopyDBClusterSnapshotInput, arg3 ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {
	fake.copyDBClusterSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.copyDBClusterSnapshotWithContextReturnsOnCall[len(fake.copyDBClusterSnapshotWithContextArgsForCall)]
	fake.copyDBClusterSnapshotWithContextArgsForCall = append(fake.copyDBClusterSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CopyDBClusterSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CopyDBClusterSnapshotWithContextStub
	fakeReturns := fake.copyDBClusterSnapshotWithContextReturns
	fake.recordInvocation("CopyDBClusterSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyDBClusterSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotWithContextCallCount() int {
	fake.copyDBClusterSnapshotWithContextMutex.RLock()
	defer fake.copyDBClusterSnapshotWithContextMutex.RUnlock()
	return len(fake.copyDBClusterSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotWithContextCalls(stub func(context.Context, *rds.CopyDBClusterSnapshotInput, ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error)) {
	fake.copyDBClusterSnapshotWithContextMutex.Lock()
	defer fake.copyDBClusterSnapshotWithContextMutex.Unlock()
	fake.CopyDBClusterSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotWithContextArgsForCall(i int) (context.Context, *rds.CopyDBClusterSnapshotInput, []request.Option) {
	fake.copyDBClusterSnapshotWithContextMutex.RLock()
	defer fake.copyDBClusterSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.copyDBClusterSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotWithContextReturns(result1 *rds.CopyDBClusterSnapshotOutput, result2 error) {
	fake.copyDBClusterSnapshotWithContextMutex.Lock()
	defer fake.copyDBClusterSnapshotWithContextMutex.Unlock()
	fake.CopyDBClusterSnapshotWithContextStub = nil
	fake.copyDBClusterSnapshotWithContextReturns = struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBClusterSnapshotWithContextReturnsOnCall(i int, result1 *rds.CopyDBClusterSnapshotOutput, result2 error) {
	fake.copyDBClusterSnapshotWithContextMutex.Lock()
	defer fake.copyDBClusterSnapshotWithContextMutex.Unlock()
	fake.CopyDBClusterSnapshotWithContextStub = nil
	if fake.copyDBClusterSnapshotWithContextReturnsOnCall == nil {
		fake.copyDBClusterSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBClusterSnapshotOutput
			result2 error
		})
	}
	fake.copyDBClusterSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.CopyDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBParameterGroup(arg1 *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
	fake.copyDBParameterGroupMutex.Lock()
	ret, specificReturn := fake.copyDBParameterGroupReturnsOnCall[len(fake.copyDBParameterGroupArgsForCall)]
	fake.copyDBParameterGroupArgsForCall = append(fake.copyDBParameterGroupArgsForCall, struct {
		arg1 *rds.CopyDBParameterGroupInput
	}{arg1})
	stub := fake.CopyDBParameterGroupStub
	fakeReturns := fake.copyDBParameterGroupReturns
	fake.recordInvocation("CopyDBParameterGroup", []interface{}{arg1})
	fake.copyDBParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBParameterGroupCallCount() int {
	fake.copyDBParameterGroupMutex.RLock()
	defer fake.copyDBParameterGroupMutex.RUnlock()
	return len(fake.copyDBParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBParameterGroupCalls(stub func(*rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error)) {
	fake.copyDBParameterGroupMutex.Lock()
	defer fake.copyDBParameterGroupMutex.Unlock()
	fake.CopyDBParameterGroupStub = stub
}

func (fake *FakeRDSAPI) CopyDBParameterGroupArgsForCall(i int) *rds.CopyDBParameterGroupInput {
	fake.copyDBParameterGroupMutex.RLock()
	defer fake.copyDBParameterGroupMutex.RUnlock()
	argsForCall := fake.copyDBParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBParameterGroupReturns(result1 *rds.CopyDBParameterGroupOutput, result2 error) {
	fake.copyDBParameterGroupMutex.Lock()
	defer fake.copyDBParameterGroupMutex.Unlock()
	fake.CopyDBParameterGroupStub = nil
	fake.copyDBParameterGroupReturns = struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBParameterGroupReturnsOnCall(i int, result1 *rds.CopyDBParameterGroupOutput, result2 error) {
	fake.copyDBParameterGroupMutex.Lock()
	defer fake.copyDBParameterGroupMutex.Unlock()
	fake.CopyDBParameterGroupStub = nil
	if fake.copyDBParameterGroupReturnsOnCall == nil {
		fake.copyDBParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBParameterGroupOutput
			result2 error
		})
	}
	fake.copyDBParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBParameterGroupRequest(arg1 *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput) {
	fake.copyDBParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.copyDBParameterGroupRequestReturnsOnCall[len(fake.copyDBParameterGroupRequestArgsForCall)]
	fake.copyDBParameterGroupRequestArgsForCall = append(fake.copyDBParameterGroupRequestArgsForCall, struct {
		arg1 *rds.CopyDBParameterGroupInput
	}{arg1})
	stub := fake.CopyDBParameterGroupRequestStub
	fakeReturns := fake.copyDBParameterGroupRequestReturns
	fake.recordInvocation("CopyDBParameterGroupRequest", []interface{}{arg1})
	fake.copyDBParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBParameterGroupRequestCallCount() int {
	fake.copyDBParameterGroupRequestMutex.RLock()
	defer fake.copyDBParameterGroupRequestMutex.RUnlock()
	return len(fake.copyDBParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBParameterGroupRequestCalls(stub func(*rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput)) {
	fake.copyDBParameterGroupRequestMutex.Lock()
	defer fake.copyDBParameterGroupRequestMutex.Unlock()
	fake.CopyDBParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CopyDBParameterGroupRequestArgsForCall(i int) *rds.CopyDBParameterGroupInput {
	fake.copyDBParameterGroupRequestMutex.RLock()
	defer fake.copyDBParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.copyDBParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBParameterGroupRequestReturns(result1 *request.Request, result2 *rds.CopyDBParameterGroupOutput) {
	fake.copyDBParameterGroupRequestMutex.Lock()
	defer fake.copyDBParameterGroupRequestMutex.Unlock()
	fake.CopyDBParameterGroupRequestStub = nil
	fake.copyDBParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CopyDBParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CopyDBParameterGroupOutput) {
	fake.copyDBParameterGroupRequestMutex.Lock()
	defer fake.copyDBParameterGroupRequestMutex.Unlock()
	fake.CopyDBParameterGroupRequestStub = nil
	if fake.copyDBParameterGroupRequestReturnsOnCall == nil {
		fake.copyDBParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CopyDBParameterGroupOutput
		})
	}
	fake.copyDBParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CopyDBParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBParameterGroupWithContext(arg1 context.Context, arg2 *rds.CopyDBParameterGroupInput, arg3 ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {
	fake.copyDBParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.copyDBParameterGroupWithContextReturnsOnCall[len(fake.copyDBParameterGroupWithContextArgsForCall)]
	fake.copyDBParameterGroupWithContextArgsForCall = append(fake.copyDBParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CopyDBParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CopyDBParameterGroupWithContextStub
	fakeReturns := fake.copyDBParameterGroupWithContextReturns
	fake.recordInvocation("CopyDBParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyDBParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBParameterGroupWithContextCallCount() int {
	fake.copyDBParameterGroupWithContextMutex.RLock()
	defer fake.copyDBParameterGroupWithContextMutex.RUnlock()
	return len(fake.copyDBParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBParameterGroupWithContextCalls(stub func(context.Context, *rds.CopyDBParameterGroupInput, ...request.Option) (*rds.CopyDBParameterGroupOutput, error)) {
	fake.copyDBParameterGroupWithContextMutex.Lock()
	defer fake.copyDBParameterGroupWithContextMutex.Unlock()
	fake.CopyDBParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CopyDBParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.CopyDBParameterGroupInput, []request.Option) {
	fake.copyDBParameterGroupWithContextMutex.RLock()
	defer fake.copyDBParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.copyDBParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CopyDBParameterGroupWithContextReturns(result1 *rds.CopyDBParameterGroupOutput, result2 error) {
	fake.copyDBParameterGroupWithContextMutex.Lock()
	defer fake.copyDBParameterGroupWithContextMutex.Unlock()
	fake.CopyDBParameterGroupWithContextStub = nil
	fake.copyDBParameterGroupWithContextReturns = struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBParameterGroupWithContextReturnsOnCall(i int, result1 *rds.CopyDBParameterGroupOutput, result2 error) {
	fake.copyDBParameterGroupWithContextMutex.Lock()
	defer fake.copyDBParameterGroupWithContextMutex.Unlock()
	fake.CopyDBParameterGroupWithContextStub = nil
	if fake.copyDBParameterGroupWithContextReturnsOnCall == nil {
		fake.copyDBParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBParameterGroupOutput
			result2 error
		})
	}
	fake.copyDBParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CopyDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBSnapshot(arg1 *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
	fake.copyDBSnapshotMutex.Lock()
	ret, specificReturn := fake.copyDBSnapshotReturnsOnCall[len(fake.copyDBSnapshotArgsForCall)]
	fake.copyDBSnapshotArgsForCall = append(fake.copyDBSnapshotArgsForCall, struct {
		arg1 *rds.CopyDBSnapshotInput
	}{arg1})
	stub := fake.CopyDBSnapshotStub
	fakeReturns := fake.copyDBSnapshotReturns
	fake.recordInvocation("CopyDBSnapshot", []interface{}{arg1})
	fake.copyDBSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBSnapshotCallCount() int {
	fake.copyDBSnapshotMutex.RLock()
	defer fake.copyDBSnapshotMutex.RUnlock()
	return len(fake.copyDBSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBSnapshotCalls(stub func(*rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error)) {
	fake.copyDBSnapshotMutex.Lock()
	defer fake.copyDBSnapshotMutex.Unlock()
	fake.CopyDBSnapshotStub = stub
}

func (fake *FakeRDSAPI) CopyDBSnapshotArgsForCall(i int) *rds.CopyDBSnapshotInput {
	fake.copyDBSnapshotMutex.RLock()
	defer fake.copyDBSnapshotMutex.RUnlock()
	argsForCall := fake.copyDBSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBSnapshotReturns(result1 *rds.CopyDBSnapshotOutput, result2 error) {
	fake.copyDBSnapshotMutex.Lock()
	defer fake.copyDBSnapshotMutex.Unlock()
	fake.CopyDBSnapshotStub = nil
	fake.copyDBSnapshotReturns = struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBSnapshotReturnsOnCall(i int, result1 *rds.CopyDBSnapshotOutput, result2 error) {
	fake.copyDBSnapshotMutex.Lock()
	defer fake.copyDBSnapshotMutex.Unlock()
	fake.CopyDBSnapshotStub = nil
	if fake.copyDBSnapshotReturnsOnCall == nil {
		fake.copyDBSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBSnapshotOutput
			result2 error
		})
	}
	fake.copyDBSnapshotReturnsOnCall[i] = struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBSnapshotRequest(arg1 *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput) {
	fake.copyDBSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.copyDBSnapshotRequestReturnsOnCall[len(fake.copyDBSnapshotRequestArgsForCall)]
	fake.copyDBSnapshotRequestArgsForCall = append(fake.copyDBSnapshotRequestArgsForCall, struct {
		arg1 *rds.CopyDBSnapshotInput
	}{arg1})
	stub := fake.CopyDBSnapshotRequestStub
	fakeReturns := fake.copyDBSnapshotRequestReturns
	fake.recordInvocation("CopyDBSnapshotRequest", []interface{}{arg1})
	fake.copyDBSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBSnapshotRequestCallCount() int {
	fake.copyDBSnapshotRequestMutex.RLock()
	defer fake.copyDBSnapshotRequestMutex.RUnlock()
	return len(fake.copyDBSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBSnapshotRequestCalls(stub func(*rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput)) {
	fake.copyDBSnapshotRequestMutex.Lock()
	defer fake.copyDBSnapshotRequestMutex.Unlock()
	fake.CopyDBSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) CopyDBSnapshotRequestArgsForCall(i int) *rds.CopyDBSnapshotInput {
	fake.copyDBSnapshotRequestMutex.RLock()
	defer fake.copyDBSnapshotRequestMutex.RUnlock()
	argsForCall := fake.copyDBSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyDBSnapshotRequestReturns(result1 *request.Request, result2 *rds.CopyDBSnapshotOutput) {
	fake.copyDBSnapshotRequestMutex.Lock()
	defer fake.copyDBSnapshotRequestMutex.Unlock()
	fake.CopyDBSnapshotRequestStub = nil
	fake.copyDBSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CopyDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CopyDBSnapshotOutput) {
	fake.copyDBSnapshotRequestMutex.Lock()
	defer fake.copyDBSnapshotRequestMutex.Unlock()
	fake.CopyDBSnapshotRequestStub = nil
	if fake.copyDBSnapshotRequestReturnsOnCall == nil {
		fake.copyDBSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CopyDBSnapshotOutput
		})
	}
	fake.copyDBSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CopyDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBSnapshotWithContext(arg1 context.Context, arg2 *rds.CopyDBSnapshotInput, arg3 ...request.Option) (*rds.CopyDBSnapshotOutput, error) {
	fake.copyDBSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.copyDBSnapshotWithContextReturnsOnCall[len(fake.copyDBSnapshotWithContextArgsForCall)]
	fake.copyDBSnapshotWithContextArgsForCall = append(fake.copyDBSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CopyDBSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CopyDBSnapshotWithContextStub
	fakeReturns := fake.copyDBSnapshotWithContextReturns
	fake.recordInvocation("CopyDBSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyDBSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyDBSnapshotWithContextCallCount() int {
	fake.copyDBSnapshotWithContextMutex.RLock()
	defer fake.copyDBSnapshotWithContextMutex.RUnlock()
	return len(fake.copyDBSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CopyDBSnapshotWithContextCalls(stub func(context.Context, *rds.CopyDBSnapshotInput, ...request.Option) (*rds.CopyDBSnapshotOutput, error)) {
	fake.copyDBSnapshotWithContextMutex.Lock()
	defer fake.copyDBSnapshotWithContextMutex.Unlock()
	fake.CopyDBSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) CopyDBSnapshotWithContextArgsForCall(i int) (context.Context, *rds.CopyDBSnapshotInput, []request.Option) {
	fake.copyDBSnapshotWithContextMutex.RLock()
	defer fake.copyDBSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.copyDBSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CopyDBSnapshotWithContextReturns(result1 *rds.CopyDBSnapshotOutput, result2 error) {
	fake.copyDBSnapshotWithContextMutex.Lock()
	defer fake.copyDBSnapshotWithContextMutex.Unlock()
	fake.CopyDBSnapshotWithContextStub = nil
	fake.copyDBSnapshotWithContextReturns = struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyDBSnapshotWithContextReturnsOnCall(i int, result1 *rds.CopyDBSnapshotOutput, result2 error) {
	fake.copyDBSnapshotWithContextMutex.Lock()
	defer fake.copyDBSnapshotWithContextMutex.Unlock()
	fake.CopyDBSnapshotWithContextStub = nil
	if fake.copyDBSnapshotWithContextReturnsOnCall == nil {
		fake.copyDBSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyDBSnapshotOutput
			result2 error
		})
	}
	fake.copyDBSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.CopyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyOptionGroup(arg1 *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
	fake.copyOptionGroupMutex.Lock()
	ret, specificReturn := fake.copyOptionGroupReturnsOnCall[len(fake.copyOptionGroupArgsForCall)]
	fake.copyOptionGroupArgsForCall = append(fake.copyOptionGroupArgsForCall, struct {
		arg1 *rds.CopyOptionGroupInput
	}{arg1})
	stub := fake.CopyOptionGroupStub
	fakeReturns := fake.copyOptionGroupReturns
	fake.recordInvocation("CopyOptionGroup", []interface{}{arg1})
	fake.copyOptionGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyOptionGroupCallCount() int {
	fake.copyOptionGroupMutex.RLock()
	defer fake.copyOptionGroupMutex.RUnlock()
	return len(fake.copyOptionGroupArgsForCall)
}

func (fake *FakeRDSAPI) CopyOptionGroupCalls(stub func(*rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error)) {
	fake.copyOptionGroupMutex.Lock()
	defer fake.copyOptionGroupMutex.Unlock()
	fake.CopyOptionGroupStub = stub
}

func (fake *FakeRDSAPI) CopyOptionGroupArgsForCall(i int) *rds.CopyOptionGroupInput {
	fake.copyOptionGroupMutex.RLock()
	defer fake.copyOptionGroupMutex.RUnlock()
	argsForCall := fake.copyOptionGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyOptionGroupReturns(result1 *rds.CopyOptionGroupOutput, result2 error) {
	fake.copyOptionGroupMutex.Lock()
	defer fake.copyOptionGroupMutex.Unlock()
	fake.CopyOptionGroupStub = nil
	fake.copyOptionGroupReturns = struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyOptionGroupReturnsOnCall(i int, result1 *rds.CopyOptionGroupOutput, result2 error) {
	fake.copyOptionGroupMutex.Lock()
	defer fake.copyOptionGroupMutex.Unlock()
	fake.CopyOptionGroupStub = nil
	if fake.copyOptionGroupReturnsOnCall == nil {
		fake.copyOptionGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyOptionGroupOutput
			result2 error
		})
	}
	fake.copyOptionGroupReturnsOnCall[i] = struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyOptionGroupRequest(arg1 *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput) {
	fake.copyOptionGroupRequestMutex.Lock()
	ret, specificReturn := fake.copyOptionGroupRequestReturnsOnCall[len(fake.copyOptionGroupRequestArgsForCall)]
	fake.copyOptionGroupRequestArgsForCall = append(fake.copyOptionGroupRequestArgsForCall, struct {
		arg1 *rds.CopyOptionGroupInput
	}{arg1})
	stub := fake.CopyOptionGroupRequestStub
	fakeReturns := fake.copyOptionGroupRequestReturns
	fake.recordInvocation("CopyOptionGroupRequest", []interface{}{arg1})
	fake.copyOptionGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyOptionGroupRequestCallCount() int {
	fake.copyOptionGroupRequestMutex.RLock()
	defer fake.copyOptionGroupRequestMutex.RUnlock()
	return len(fake.copyOptionGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CopyOptionGroupRequestCalls(stub func(*rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput)) {
	fake.copyOptionGroupRequestMutex.Lock()
	defer fake.copyOptionGroupRequestMutex.Unlock()
	fake.CopyOptionGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CopyOptionGroupRequestArgsForCall(i int) *rds.CopyOptionGroupInput {
	fake.copyOptionGroupRequestMutex.RLock()
	defer fake.copyOptionGroupRequestMutex.RUnlock()
	argsForCall := fake.copyOptionGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CopyOptionGroupRequestReturns(result1 *request.Request, result2 *rds.CopyOptionGroupOutput) {
	fake.copyOptionGroupRequestMutex.Lock()
	defer fake.copyOptionGroupRequestMutex.Unlock()
	fake.CopyOptionGroupRequestStub = nil
	fake.copyOptionGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CopyOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyOptionGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CopyOptionGroupOutput) {
	fake.copyOptionGroupRequestMutex.Lock()
	defer fake.copyOptionGroupRequestMutex.Unlock()
	fake.CopyOptionGroupRequestStub = nil
	if fake.copyOptionGroupRequestReturnsOnCall == nil {
		fake.copyOptionGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CopyOptionGroupOutput
		})
	}
	fake.copyOptionGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CopyOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyOptionGroupWithContext(arg1 context.Context, arg2 *rds.CopyOptionGroupInput, arg3 ...request.Option) (*rds.CopyOptionGroupOutput, error) {
	fake.copyOptionGroupWithContextMutex.Lock()
	ret, specificReturn := fake.copyOptionGroupWithContextReturnsOnCall[len(fake.copyOptionGroupWithContextArgsForCall)]
	fake.copyOptionGroupWithContextArgsForCall = append(fake.copyOptionGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CopyOptionGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CopyOptionGroupWithContextStub
	fakeReturns := fake.copyOptionGroupWithContextReturns
	fake.recordInvocation("CopyOptionGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyOptionGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CopyOptionGroupWithContextCallCount() int {
	fake.copyOptionGroupWithContextMutex.RLock()
	defer fake.copyOptionGroupWithContextMutex.RUnlock()
	return len(fake.copyOptionGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CopyOptionGroupWithContextCalls(stub func(context.Context, *rds.CopyOptionGroupInput, ...request.Option) (*rds.CopyOptionGroupOutput, error)) {
	fake.copyOptionGroupWithContextMutex.Lock()
	defer fake.copyOptionGroupWithContextMutex.Unlock()
	fake.CopyOptionGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CopyOptionGroupWithContextArgsForCall(i int) (context.Context, *rds.CopyOptionGroupInput, []request.Option) {
	fake.copyOptionGroupWithContextMutex.RLock()
	defer fake.copyOptionGroupWithContextMutex.RUnlock()
	argsForCall := fake.copyOptionGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CopyOptionGroupWithContextReturns(result1 *rds.CopyOptionGroupOutput, result2 error) {
	fake.copyOptionGroupWithContextMutex.Lock()
	defer fake.copyOptionGroupWithContextMutex.Unlock()
	fake.CopyOptionGroupWithContextStub = nil
	fake.copyOptionGroupWithContextReturns = struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CopyOptionGroupWithContextReturnsOnCall(i int, result1 *rds.CopyOptionGroupOutput, result2 error) {
	fake.copyOptionGroupWithContextMutex.Lock()
	defer fake.copyOptionGroupWithContextMutex.Unlock()
	fake.CopyOptionGroupWithContextStub = nil
	if fake.copyOptionGroupWithContextReturnsOnCall == nil {
		fake.copyOptionGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CopyOptionGroupOutput
			result2 error
		})
	}
	fake.copyOptionGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CopyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZone(arg1 *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	fake.createCustomAvailabilityZoneMutex.Lock()
	ret, specificReturn := fake.createCustomAvailabilityZoneReturnsOnCall[len(fake.createCustomAvailabilityZoneArgsForCall)]
	fake.createCustomAvailabilityZoneArgsForCall = append(fake.createCustomAvailabilityZoneArgsForCall, struct {
		arg1 *rds.CreateCustomAvailabilityZoneInput
	}{arg1})
	stub := fake.CreateCustomAvailabilityZoneStub
	fakeReturns := fake.createCustomAvailabilityZoneReturns
	fake.recordInvocation("CreateCustomAvailabilityZone", []interface{}{arg1})
	fake.createCustomAvailabilityZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneCallCount() int {
	fake.createCustomAvailabilityZoneMutex.RLock()
	defer fake.createCustomAvailabilityZoneMutex.RUnlock()
	return len(fake.createCustomAvailabilityZoneArgsForCall)
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneCalls(stub func(*rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error)) {
	fake.createCustomAvailabilityZoneMutex.Lock()
	defer fake.createCustomAvailabilityZoneMutex.Unlock()
	fake.CreateCustomAvailabilityZoneStub = stub
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneArgsForCall(i int) *rds.CreateCustomAvailabilityZoneInput {
	fake.createCustomAvailabilityZoneMutex.RLock()
	defer fake.createCustomAvailabilityZoneMutex.RUnlock()
	argsForCall := fake.createCustomAvailabilityZoneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneReturns(result1 *rds.CreateCustomAvailabilityZoneOutput, result2 error) {
	fake.createCustomAvailabilityZoneMutex.Lock()
	defer fake.createCustomAvailabilityZoneMutex.Unlock()
	fake.CreateCustomAvailabilityZoneStub = nil
	fake.createCustomAvailabilityZoneReturns = struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneReturnsOnCall(i int, result1 *rds.CreateCustomAvailabilityZoneOutput, result2 error) {
	fake.createCustomAvailabilityZoneMutex.Lock()
	defer fake.createCustomAvailabilityZoneMutex.Unlock()
	fake.CreateCustomAvailabilityZoneStub = nil
	if fake.createCustomAvailabilityZoneReturnsOnCall == nil {
		fake.createCustomAvailabilityZoneReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateCustomAvailabilityZoneOutput
			result2 error
		})
	}
	fake.createCustomAvailabilityZoneReturnsOnCall[i] = struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneRequest(arg1 *rds.CreateCustomAvailabilityZoneInput) (*request.Request, *rds.CreateCustomAvailabilityZoneOutput) {
	fake.createCustomAvailabilityZoneRequestMutex.Lock()
	ret, specificReturn := fake.createCustomAvailabilityZoneRequestReturnsOnCall[len(fake.createCustomAvailabilityZoneRequestArgsForCall)]
	fake.createCustomAvailabilityZoneRequestArgsForCall = append(fake.createCustomAvailabilityZoneRequestArgsForCall, struct {
		arg1 *rds.CreateCustomAvailabilityZoneInput
	}{arg1})
	stub := fake.CreateCustomAvailabilityZoneRequestStub
	fakeReturns := fake.createCustomAvailabilityZoneRequestReturns
	fake.recordInvocation("CreateCustomAvailabilityZoneRequest", []interface{}{arg1})
	fake.createCustomAvailabilityZoneRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneRequestCallCount() int {
	fake.createCustomAvailabilityZoneRequestMutex.RLock()
	defer fake.createCustomAvailabilityZoneRequestMutex.RUnlock()
	return len(fake.createCustomAvailabilityZoneRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneRequestCalls(stub func(*rds.CreateCustomAvailabilityZoneInput) (*request.Request, *rds.CreateCustomAvailabilityZoneOutput)) {
	fake.createCustomAvailabilityZoneRequestMutex.Lock()
	defer fake.createCustomAvailabilityZoneRequestMutex.Unlock()
	fake.CreateCustomAvailabilityZoneRequestStub = stub
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneRequestArgsForCall(i int) *rds.CreateCustomAvailabilityZoneInput {
	fake.createCustomAvailabilityZoneRequestMutex.RLock()
	defer fake.createCustomAvailabilityZoneRequestMutex.RUnlock()
	argsForCall := fake.createCustomAvailabilityZoneRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneRequestReturns(result1 *request.Request, result2 *rds.CreateCustomAvailabilityZoneOutput) {
	fake.createCustomAvailabilityZoneRequestMutex.Lock()
	defer fake.createCustomAvailabilityZoneRequestMutex.Unlock()
	fake.CreateCustomAvailabilityZoneRequestStub = nil
	fake.createCustomAvailabilityZoneRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateCustomAvailabilityZoneOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateCustomAvailabilityZoneOutput) {
	fake.createCustomAvailabilityZoneRequestMutex.Lock()
	defer fake.createCustomAvailabilityZoneRequestMutex.Unlock()
	fake.CreateCustomAvailabilityZoneRequestStub = nil
	if fake.createCustomAvailabilityZoneRequestReturnsOnCall == nil {
		fake.createCustomAvailabilityZoneRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateCustomAvailabilityZoneOutput
		})
	}
	fake.createCustomAvailabilityZoneRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateCustomAvailabilityZoneOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneWithContext(arg1 context.Context, arg2 *rds.CreateCustomAvailabilityZoneInput, arg3 ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	fake.createCustomAvailabilityZoneWithContextMutex.Lock()
	ret, specificReturn := fake.createCustomAvailabilityZoneWithContextReturnsOnCall[len(fake.createCustomAvailabilityZoneWithContextArgsForCall)]
	fake.createCustomAvailabilityZoneWithContextArgsForCall = append(fake.createCustomAvailabilityZoneWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateCustomAvailabilityZoneInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCustomAvailabilityZoneWithContextStub
	fakeReturns := fake.createCustomAvailabilityZoneWithContextReturns
	fake.recordInvocation("CreateCustomAvailabilityZoneWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCustomAvailabilityZoneWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneWithContextCallCount() int {
	fake.createCustomAvailabilityZoneWithContextMutex.RLock()
	defer fake.createCustomAvailabilityZoneWithContextMutex.RUnlock()
	return len(fake.createCustomAvailabilityZoneWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneWithContextCalls(stub func(context.Context, *rds.CreateCustomAvailabilityZoneInput, ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error)) {
	fake.createCustomAvailabilityZoneWithContextMutex.Lock()
	defer fake.createCustomAvailabilityZoneWithContextMutex.Unlock()
	fake.CreateCustomAvailabilityZoneWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneWithContextArgsForCall(i int) (context.Context, *rds.CreateCustomAvailabilityZoneInput, []request.Option) {
	fake.createCustomAvailabilityZoneWithContextMutex.RLock()
	defer fake.createCustomAvailabilityZoneWithContextMutex.RUnlock()
	argsForCall := fake.createCustomAvailabilityZoneWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneWithContextReturns(result1 *rds.CreateCustomAvailabilityZoneOutput, result2 error) {
	fake.createCustomAvailabilityZoneWithContextMutex.Lock()
	defer fake.createCustomAvailabilityZoneWithContextMutex.Unlock()
	fake.CreateCustomAvailabilityZoneWithContextStub = nil
	fake.createCustomAvailabilityZoneWithContextReturns = struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateCustomAvailabilityZoneWithContextReturnsOnCall(i int, result1 *rds.CreateCustomAvailabilityZoneOutput, result2 error) {
	fake.createCustomAvailabilityZoneWithContextMutex.Lock()
	defer fake.createCustomAvailabilityZoneWithContextMutex.Unlock()
	fake.CreateCustomAvailabilityZoneWithContextStub = nil
	if fake.createCustomAvailabilityZoneWithContextReturnsOnCall == nil {
		fake.createCustomAvailabilityZoneWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateCustomAvailabilityZoneOutput
			result2 error
		})
	}
	fake.createCustomAvailabilityZoneWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBCluster(arg1 *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
	fake.createDBClusterMutex.Lock()
	ret, specificReturn := fake.createDBClusterReturnsOnCall[len(fake.createDBClusterArgsForCall)]
	fake.createDBClusterArgsForCall = append(fake.createDBClusterArgsForCall, struct {
		arg1 *rds.CreateDBClusterInput
	}{arg1})
	stub := fake.CreateDBClusterStub
	fakeReturns := fake.createDBClusterReturns
	fake.recordInvocation("CreateDBCluster", []interface{}{arg1})
	fake.createDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterCallCount() int {
	fake.createDBClusterMutex.RLock()
	defer fake.createDBClusterMutex.RUnlock()
	return len(fake.createDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterCalls(stub func(*rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error)) {
	fake.createDBClusterMutex.Lock()
	defer fake.createDBClusterMutex.Unlock()
	fake.CreateDBClusterStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterArgsForCall(i int) *rds.CreateDBClusterInput {
	fake.createDBClusterMutex.RLock()
	defer fake.createDBClusterMutex.RUnlock()
	argsForCall := fake.createDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterReturns(result1 *rds.CreateDBClusterOutput, result2 error) {
	fake.createDBClusterMutex.Lock()
	defer fake.createDBClusterMutex.Unlock()
	fake.CreateDBClusterStub = nil
	fake.createDBClusterReturns = struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterReturnsOnCall(i int, result1 *rds.CreateDBClusterOutput, result2 error) {
	fake.createDBClusterMutex.Lock()
	defer fake.createDBClusterMutex.Unlock()
	fake.CreateDBClusterStub = nil
	if fake.createDBClusterReturnsOnCall == nil {
		fake.createDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterOutput
			result2 error
		})
	}
	fake.createDBClusterReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterEndpoint(arg1 *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
	fake.createDBClusterEndpointMutex.Lock()
	ret, specificReturn := fake.createDBClusterEndpointReturnsOnCall[len(fake.createDBClusterEndpointArgsForCall)]
	fake.createDBClusterEndpointArgsForCall = append(fake.createDBClusterEndpointArgsForCall, struct {
		arg1 *rds.CreateDBClusterEndpointInput
	}{arg1})
	stub := fake.CreateDBClusterEndpointStub
	fakeReturns := fake.createDBClusterEndpointReturns
	fake.recordInvocation("CreateDBClusterEndpoint", []interface{}{arg1})
	fake.createDBClusterEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointCallCount() int {
	fake.createDBClusterEndpointMutex.RLock()
	defer fake.createDBClusterEndpointMutex.RUnlock()
	return len(fake.createDBClusterEndpointArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointCalls(stub func(*rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error)) {
	fake.createDBClusterEndpointMutex.Lock()
	defer fake.createDBClusterEndpointMutex.Unlock()
	fake.CreateDBClusterEndpointStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointArgsForCall(i int) *rds.CreateDBClusterEndpointInput {
	fake.createDBClusterEndpointMutex.RLock()
	defer fake.createDBClusterEndpointMutex.RUnlock()
	argsForCall := fake.createDBClusterEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointReturns(result1 *rds.CreateDBClusterEndpointOutput, result2 error) {
	fake.createDBClusterEndpointMutex.Lock()
	defer fake.createDBClusterEndpointMutex.Unlock()
	fake.CreateDBClusterEndpointStub = nil
	fake.createDBClusterEndpointReturns = struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointReturnsOnCall(i int, result1 *rds.CreateDBClusterEndpointOutput, result2 error) {
	fake.createDBClusterEndpointMutex.Lock()
	defer fake.createDBClusterEndpointMutex.Unlock()
	fake.CreateDBClusterEndpointStub = nil
	if fake.createDBClusterEndpointReturnsOnCall == nil {
		fake.createDBClusterEndpointReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterEndpointOutput
			result2 error
		})
	}
	fake.createDBClusterEndpointReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointRequest(arg1 *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput) {
	fake.createDBClusterEndpointRequestMutex.Lock()
	ret, specificReturn := fake.createDBClusterEndpointRequestReturnsOnCall[len(fake.createDBClusterEndpointRequestArgsForCall)]
	fake.createDBClusterEndpointRequestArgsForCall = append(fake.createDBClusterEndpointRequestArgsForCall, struct {
		arg1 *rds.CreateDBClusterEndpointInput
	}{arg1})
	stub := fake.CreateDBClusterEndpointRequestStub
	fakeReturns := fake.createDBClusterEndpointRequestReturns
	fake.recordInvocation("CreateDBClusterEndpointRequest", []interface{}{arg1})
	fake.createDBClusterEndpointRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointRequestCallCount() int {
	fake.createDBClusterEndpointRequestMutex.RLock()
	defer fake.createDBClusterEndpointRequestMutex.RUnlock()
	return len(fake.createDBClusterEndpointRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointRequestCalls(stub func(*rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput)) {
	fake.createDBClusterEndpointRequestMutex.Lock()
	defer fake.createDBClusterEndpointRequestMutex.Unlock()
	fake.CreateDBClusterEndpointRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointRequestArgsForCall(i int) *rds.CreateDBClusterEndpointInput {
	fake.createDBClusterEndpointRequestMutex.RLock()
	defer fake.createDBClusterEndpointRequestMutex.RUnlock()
	argsForCall := fake.createDBClusterEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointRequestReturns(result1 *request.Request, result2 *rds.CreateDBClusterEndpointOutput) {
	fake.createDBClusterEndpointRequestMutex.Lock()
	defer fake.createDBClusterEndpointRequestMutex.Unlock()
	fake.CreateDBClusterEndpointRequestStub = nil
	fake.createDBClusterEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterEndpointOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBClusterEndpointOutput) {
	fake.createDBClusterEndpointRequestMutex.Lock()
	defer fake.createDBClusterEndpointRequestMutex.Unlock()
	fake.CreateDBClusterEndpointRequestStub = nil
	if fake.createDBClusterEndpointRequestReturnsOnCall == nil {
		fake.createDBClusterEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBClusterEndpointOutput
		})
	}
	fake.createDBClusterEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterEndpointOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointWithContext(arg1 context.Context, arg2 *rds.CreateDBClusterEndpointInput, arg3 ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {
	fake.createDBClusterEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.createDBClusterEndpointWithContextReturnsOnCall[len(fake.createDBClusterEndpointWithContextArgsForCall)]
	fake.createDBClusterEndpointWithContextArgsForCall = append(fake.createDBClusterEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBClusterEndpointWithContextStub
	fakeReturns := fake.createDBClusterEndpointWithContextReturns
	fake.recordInvocation("CreateDBClusterEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBClusterEndpointWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointWithContextCallCount() int {
	fake.createDBClusterEndpointWithContextMutex.RLock()
	defer fake.createDBClusterEndpointWithContextMutex.RUnlock()
	return len(fake.createDBClusterEndpointWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointWithContextCalls(stub func(context.Context, *rds.CreateDBClusterEndpointInput, ...request.Option) (*rds.CreateDBClusterEndpointOutput, error)) {
	fake.createDBClusterEndpointWithContextMutex.Lock()
	defer fake.createDBClusterEndpointWithContextMutex.Unlock()
	fake.CreateDBClusterEndpointWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointWithContextArgsForCall(i int) (context.Context, *rds.CreateDBClusterEndpointInput, []request.Option) {
	fake.createDBClusterEndpointWithContextMutex.RLock()
	defer fake.createDBClusterEndpointWithContextMutex.RUnlock()
	argsForCall := fake.createDBClusterEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointWithContextReturns(result1 *rds.CreateDBClusterEndpointOutput, result2 error) {
	fake.createDBClusterEndpointWithContextMutex.Lock()
	defer fake.createDBClusterEndpointWithContextMutex.Unlock()
	fake.CreateDBClusterEndpointWithContextStub = nil
	fake.createDBClusterEndpointWithContextReturns = struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterEndpointWithContextReturnsOnCall(i int, result1 *rds.CreateDBClusterEndpointOutput, result2 error) {
	fake.createDBClusterEndpointWithContextMutex.Lock()
	defer fake.createDBClusterEndpointWithContextMutex.Unlock()
	fake.CreateDBClusterEndpointWithContextStub = nil
	if fake.createDBClusterEndpointWithContextReturnsOnCall == nil {
		fake.createDBClusterEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterEndpointOutput
			result2 error
		})
	}
	fake.createDBClusterEndpointWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroup(arg1 *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
	fake.createDBClusterParameterGroupMutex.Lock()
	ret, specificReturn := fake.createDBClusterParameterGroupReturnsOnCall[len(fake.createDBClusterParameterGroupArgsForCall)]
	fake.createDBClusterParameterGroupArgsForCall = append(fake.createDBClusterParameterGroupArgsForCall, struct {
		arg1 *rds.CreateDBClusterParameterGroupInput
	}{arg1})
	stub := fake.CreateDBClusterParameterGroupStub
	fakeReturns := fake.createDBClusterParameterGroupReturns
	fake.recordInvocation("CreateDBClusterParameterGroup", []interface{}{arg1})
	fake.createDBClusterParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupCallCount() int {
	fake.createDBClusterParameterGroupMutex.RLock()
	defer fake.createDBClusterParameterGroupMutex.RUnlock()
	return len(fake.createDBClusterParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupCalls(stub func(*rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error)) {
	fake.createDBClusterParameterGroupMutex.Lock()
	defer fake.createDBClusterParameterGroupMutex.Unlock()
	fake.CreateDBClusterParameterGroupStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupArgsForCall(i int) *rds.CreateDBClusterParameterGroupInput {
	fake.createDBClusterParameterGroupMutex.RLock()
	defer fake.createDBClusterParameterGroupMutex.RUnlock()
	argsForCall := fake.createDBClusterParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupReturns(result1 *rds.CreateDBClusterParameterGroupOutput, result2 error) {
	fake.createDBClusterParameterGroupMutex.Lock()
	defer fake.createDBClusterParameterGroupMutex.Unlock()
	fake.CreateDBClusterParameterGroupStub = nil
	fake.createDBClusterParameterGroupReturns = struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupReturnsOnCall(i int, result1 *rds.CreateDBClusterParameterGroupOutput, result2 error) {
	fake.createDBClusterParameterGroupMutex.Lock()
	defer fake.createDBClusterParameterGroupMutex.Unlock()
	fake.CreateDBClusterParameterGroupStub = nil
	if fake.createDBClusterParameterGroupReturnsOnCall == nil {
		fake.createDBClusterParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterParameterGroupOutput
			result2 error
		})
	}
	fake.createDBClusterParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupRequest(arg1 *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput) {
	fake.createDBClusterParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.createDBClusterParameterGroupRequestReturnsOnCall[len(fake.createDBClusterParameterGroupRequestArgsForCall)]
	fake.createDBClusterParameterGroupRequestArgsForCall = append(fake.createDBClusterParameterGroupRequestArgsForCall, struct {
		arg1 *rds.CreateDBClusterParameterGroupInput
	}{arg1})
	stub := fake.CreateDBClusterParameterGroupRequestStub
	fakeReturns := fake.createDBClusterParameterGroupRequestReturns
	fake.recordInvocation("CreateDBClusterParameterGroupRequest", []interface{}{arg1})
	fake.createDBClusterParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupRequestCallCount() int {
	fake.createDBClusterParameterGroupRequestMutex.RLock()
	defer fake.createDBClusterParameterGroupRequestMutex.RUnlock()
	return len(fake.createDBClusterParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupRequestCalls(stub func(*rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput)) {
	fake.createDBClusterParameterGroupRequestMutex.Lock()
	defer fake.createDBClusterParameterGroupRequestMutex.Unlock()
	fake.CreateDBClusterParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupRequestArgsForCall(i int) *rds.CreateDBClusterParameterGroupInput {
	fake.createDBClusterParameterGroupRequestMutex.RLock()
	defer fake.createDBClusterParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.createDBClusterParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupRequestReturns(result1 *request.Request, result2 *rds.CreateDBClusterParameterGroupOutput) {
	fake.createDBClusterParameterGroupRequestMutex.Lock()
	defer fake.createDBClusterParameterGroupRequestMutex.Unlock()
	fake.CreateDBClusterParameterGroupRequestStub = nil
	fake.createDBClusterParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBClusterParameterGroupOutput) {
	fake.createDBClusterParameterGroupRequestMutex.Lock()
	defer fake.createDBClusterParameterGroupRequestMutex.Unlock()
	fake.CreateDBClusterParameterGroupRequestStub = nil
	if fake.createDBClusterParameterGroupRequestReturnsOnCall == nil {
		fake.createDBClusterParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBClusterParameterGroupOutput
		})
	}
	fake.createDBClusterParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupWithContext(arg1 context.Context, arg2 *rds.CreateDBClusterParameterGroupInput, arg3 ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {
	fake.createDBClusterParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createDBClusterParameterGroupWithContextReturnsOnCall[len(fake.createDBClusterParameterGroupWithContextArgsForCall)]
	fake.createDBClusterParameterGroupWithContextArgsForCall = append(fake.createDBClusterParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBClusterParameterGroupWithContextStub
	fakeReturns := fake.createDBClusterParameterGroupWithContextReturns
	fake.recordInvocation("CreateDBClusterParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBClusterParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupWithContextCallCount() int {
	fake.createDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.createDBClusterParameterGroupWithContextMutex.RUnlock()
	return len(fake.createDBClusterParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupWithContextCalls(stub func(context.Context, *rds.CreateDBClusterParameterGroupInput, ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error)) {
	fake.createDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.createDBClusterParameterGroupWithContextMutex.Unlock()
	fake.CreateDBClusterParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.CreateDBClusterParameterGroupInput, []request.Option) {
	fake.createDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.createDBClusterParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.createDBClusterParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupWithContextReturns(result1 *rds.CreateDBClusterParameterGroupOutput, result2 error) {
	fake.createDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.createDBClusterParameterGroupWithContextMutex.Unlock()
	fake.CreateDBClusterParameterGroupWithContextStub = nil
	fake.createDBClusterParameterGroupWithContextReturns = struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterParameterGroupWithContextReturnsOnCall(i int, result1 *rds.CreateDBClusterParameterGroupOutput, result2 error) {
	fake.createDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.createDBClusterParameterGroupWithContextMutex.Unlock()
	fake.CreateDBClusterParameterGroupWithContextStub = nil
	if fake.createDBClusterParameterGroupWithContextReturnsOnCall == nil {
		fake.createDBClusterParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterParameterGroupOutput
			result2 error
		})
	}
	fake.createDBClusterParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterRequest(arg1 *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput) {
	fake.createDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.createDBClusterRequestReturnsOnCall[len(fake.createDBClusterRequestArgsForCall)]
	fake.createDBClusterRequestArgsForCall = append(fake.createDBClusterRequestArgsForCall, struct {
		arg1 *rds.CreateDBClusterInput
	}{arg1})
	stub := fake.CreateDBClusterRequestStub
	fakeReturns := fake.createDBClusterRequestReturns
	fake.recordInvocation("CreateDBClusterRequest", []interface{}{arg1})
	fake.createDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterRequestCallCount() int {
	fake.createDBClusterRequestMutex.RLock()
	defer fake.createDBClusterRequestMutex.RUnlock()
	return len(fake.createDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterRequestCalls(stub func(*rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput)) {
	fake.createDBClusterRequestMutex.Lock()
	defer fake.createDBClusterRequestMutex.Unlock()
	fake.CreateDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterRequestArgsForCall(i int) *rds.CreateDBClusterInput {
	fake.createDBClusterRequestMutex.RLock()
	defer fake.createDBClusterRequestMutex.RUnlock()
	argsForCall := fake.createDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterRequestReturns(result1 *request.Request, result2 *rds.CreateDBClusterOutput) {
	fake.createDBClusterRequestMutex.Lock()
	defer fake.createDBClusterRequestMutex.Unlock()
	fake.CreateDBClusterRequestStub = nil
	fake.createDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBClusterOutput) {
	fake.createDBClusterRequestMutex.Lock()
	defer fake.createDBClusterRequestMutex.Unlock()
	fake.CreateDBClusterRequestStub = nil
	if fake.createDBClusterRequestReturnsOnCall == nil {
		fake.createDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBClusterOutput
		})
	}
	fake.createDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshot(arg1 *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
	fake.createDBClusterSnapshotMutex.Lock()
	ret, specificReturn := fake.createDBClusterSnapshotReturnsOnCall[len(fake.createDBClusterSnapshotArgsForCall)]
	fake.createDBClusterSnapshotArgsForCall = append(fake.createDBClusterSnapshotArgsForCall, struct {
		arg1 *rds.CreateDBClusterSnapshotInput
	}{arg1})
	stub := fake.CreateDBClusterSnapshotStub
	fakeReturns := fake.createDBClusterSnapshotReturns
	fake.recordInvocation("CreateDBClusterSnapshot", []interface{}{arg1})
	fake.createDBClusterSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotCallCount() int {
	fake.createDBClusterSnapshotMutex.RLock()
	defer fake.createDBClusterSnapshotMutex.RUnlock()
	return len(fake.createDBClusterSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotCalls(stub func(*rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error)) {
	fake.createDBClusterSnapshotMutex.Lock()
	defer fake.createDBClusterSnapshotMutex.Unlock()
	fake.CreateDBClusterSnapshotStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotArgsForCall(i int) *rds.CreateDBClusterSnapshotInput {
	fake.createDBClusterSnapshotMutex.RLock()
	defer fake.createDBClusterSnapshotMutex.RUnlock()
	argsForCall := fake.createDBClusterSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotReturns(result1 *rds.CreateDBClusterSnapshotOutput, result2 error) {
	fake.createDBClusterSnapshotMutex.Lock()
	defer fake.createDBClusterSnapshotMutex.Unlock()
	fake.CreateDBClusterSnapshotStub = nil
	fake.createDBClusterSnapshotReturns = struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotReturnsOnCall(i int, result1 *rds.CreateDBClusterSnapshotOutput, result2 error) {
	fake.createDBClusterSnapshotMutex.Lock()
	defer fake.createDBClusterSnapshotMutex.Unlock()
	fake.CreateDBClusterSnapshotStub = nil
	if fake.createDBClusterSnapshotReturnsOnCall == nil {
		fake.createDBClusterSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterSnapshotOutput
			result2 error
		})
	}
	fake.createDBClusterSnapshotReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotRequest(arg1 *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput) {
	fake.createDBClusterSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.createDBClusterSnapshotRequestReturnsOnCall[len(fake.createDBClusterSnapshotRequestArgsForCall)]
	fake.createDBClusterSnapshotRequestArgsForCall = append(fake.createDBClusterSnapshotRequestArgsForCall, struct {
		arg1 *rds.CreateDBClusterSnapshotInput
	}{arg1})
	stub := fake.CreateDBClusterSnapshotRequestStub
	fakeReturns := fake.createDBClusterSnapshotRequestReturns
	fake.recordInvocation("CreateDBClusterSnapshotRequest", []interface{}{arg1})
	fake.createDBClusterSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotRequestCallCount() int {
	fake.createDBClusterSnapshotRequestMutex.RLock()
	defer fake.createDBClusterSnapshotRequestMutex.RUnlock()
	return len(fake.createDBClusterSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotRequestCalls(stub func(*rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput)) {
	fake.createDBClusterSnapshotRequestMutex.Lock()
	defer fake.createDBClusterSnapshotRequestMutex.Unlock()
	fake.CreateDBClusterSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotRequestArgsForCall(i int) *rds.CreateDBClusterSnapshotInput {
	fake.createDBClusterSnapshotRequestMutex.RLock()
	defer fake.createDBClusterSnapshotRequestMutex.RUnlock()
	argsForCall := fake.createDBClusterSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotRequestReturns(result1 *request.Request, result2 *rds.CreateDBClusterSnapshotOutput) {
	fake.createDBClusterSnapshotRequestMutex.Lock()
	defer fake.createDBClusterSnapshotRequestMutex.Unlock()
	fake.CreateDBClusterSnapshotRequestStub = nil
	fake.createDBClusterSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBClusterSnapshotOutput) {
	fake.createDBClusterSnapshotRequestMutex.Lock()
	defer fake.createDBClusterSnapshotRequestMutex.Unlock()
	fake.CreateDBClusterSnapshotRequestStub = nil
	if fake.createDBClusterSnapshotRequestReturnsOnCall == nil {
		fake.createDBClusterSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBClusterSnapshotOutput
		})
	}
	fake.createDBClusterSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBClusterSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotWithContext(arg1 context.Context, arg2 *rds.CreateDBClusterSnapshotInput, arg3 ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {
	fake.createDBClusterSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.createDBClusterSnapshotWithContextReturnsOnCall[len(fake.createDBClusterSnapshotWithContextArgsForCall)]
	fake.createDBClusterSnapshotWithContextArgsForCall = append(fake.createDBClusterSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBClusterSnapshotWithContextStub
	fakeReturns := fake.createDBClusterSnapshotWithContextReturns
	fake.recordInvocation("CreateDBClusterSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBClusterSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotWithContextCallCount() int {
	fake.createDBClusterSnapshotWithContextMutex.RLock()
	defer fake.createDBClusterSnapshotWithContextMutex.RUnlock()
	return len(fake.createDBClusterSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotWithContextCalls(stub func(context.Context, *rds.CreateDBClusterSnapshotInput, ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error)) {
	fake.createDBClusterSnapshotWithContextMutex.Lock()
	defer fake.createDBClusterSnapshotWithContextMutex.Unlock()
	fake.CreateDBClusterSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotWithContextArgsForCall(i int) (context.Context, *rds.CreateDBClusterSnapshotInput, []request.Option) {
	fake.createDBClusterSnapshotWithContextMutex.RLock()
	defer fake.createDBClusterSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.createDBClusterSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotWithContextReturns(result1 *rds.CreateDBClusterSnapshotOutput, result2 error) {
	fake.createDBClusterSnapshotWithContextMutex.Lock()
	defer fake.createDBClusterSnapshotWithContextMutex.Unlock()
	fake.CreateDBClusterSnapshotWithContextStub = nil
	fake.createDBClusterSnapshotWithContextReturns = struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterSnapshotWithContextReturnsOnCall(i int, result1 *rds.CreateDBClusterSnapshotOutput, result2 error) {
	fake.createDBClusterSnapshotWithContextMutex.Lock()
	defer fake.createDBClusterSnapshotWithContextMutex.Unlock()
	fake.CreateDBClusterSnapshotWithContextStub = nil
	if fake.createDBClusterSnapshotWithContextReturnsOnCall == nil {
		fake.createDBClusterSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterSnapshotOutput
			result2 error
		})
	}
	fake.createDBClusterSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterWithContext(arg1 context.Context, arg2 *rds.CreateDBClusterInput, arg3 ...request.Option) (*rds.CreateDBClusterOutput, error) {
	fake.createDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.createDBClusterWithContextReturnsOnCall[len(fake.createDBClusterWithContextArgsForCall)]
	fake.createDBClusterWithContextArgsForCall = append(fake.createDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBClusterWithContextStub
	fakeReturns := fake.createDBClusterWithContextReturns
	fake.recordInvocation("CreateDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBClusterWithContextCallCount() int {
	fake.createDBClusterWithContextMutex.RLock()
	defer fake.createDBClusterWithContextMutex.RUnlock()
	return len(fake.createDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBClusterWithContextCalls(stub func(context.Context, *rds.CreateDBClusterInput, ...request.Option) (*rds.CreateDBClusterOutput, error)) {
	fake.createDBClusterWithContextMutex.Lock()
	defer fake.createDBClusterWithContextMutex.Unlock()
	fake.CreateDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBClusterWithContextArgsForCall(i int) (context.Context, *rds.CreateDBClusterInput, []request.Option) {
	fake.createDBClusterWithContextMutex.RLock()
	defer fake.createDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.createDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBClusterWithContextReturns(result1 *rds.CreateDBClusterOutput, result2 error) {
	fake.createDBClusterWithContextMutex.Lock()
	defer fake.createDBClusterWithContextMutex.Unlock()
	fake.CreateDBClusterWithContextStub = nil
	fake.createDBClusterWithContextReturns = struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBClusterWithContextReturnsOnCall(i int, result1 *rds.CreateDBClusterOutput, result2 error) {
	fake.createDBClusterWithContextMutex.Lock()
	defer fake.createDBClusterWithContextMutex.Unlock()
	fake.CreateDBClusterWithContextStub = nil
	if fake.createDBClusterWithContextReturnsOnCall == nil {
		fake.createDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBClusterOutput
			result2 error
		})
	}
	fake.createDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstance(arg1 *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	fake.createDBInstanceMutex.Lock()
	ret, specificReturn := fake.createDBInstanceReturnsOnCall[len(fake.createDBInstanceArgsForCall)]
	fake.createDBInstanceArgsForCall = append(fake.createDBInstanceArgsForCall, struct {
		arg1 *rds.CreateDBInstanceInput
	}{arg1})
	stub := fake.CreateDBInstanceStub
	fakeReturns := fake.createDBInstanceReturns
	fake.recordInvocation("CreateDBInstance", []interface{}{arg1})
	fake.createDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBInstanceCallCount() int {
	fake.createDBInstanceMutex.RLock()
	defer fake.createDBInstanceMutex.RUnlock()
	return len(fake.createDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBInstanceCalls(stub func(*rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error)) {
	fake.createDBInstanceMutex.Lock()
	defer fake.createDBInstanceMutex.Unlock()
	fake.CreateDBInstanceStub = stub
}

func (fake *FakeRDSAPI) CreateDBInstanceArgsForCall(i int) *rds.CreateDBInstanceInput {
	fake.createDBInstanceMutex.RLock()
	defer fake.createDBInstanceMutex.RUnlock()
	argsForCall := fake.createDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBInstanceReturns(result1 *rds.CreateDBInstanceOutput, result2 error) {
	fake.createDBInstanceMutex.Lock()
	defer fake.createDBInstanceMutex.Unlock()
	fake.CreateDBInstanceStub = nil
	fake.createDBInstanceReturns = struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReturnsOnCall(i int, result1 *rds.CreateDBInstanceOutput, result2 error) {
	fake.createDBInstanceMutex.Lock()
	defer fake.createDBInstanceMutex.Unlock()
	fake.CreateDBInstanceStub = nil
	if fake.createDBInstanceReturnsOnCall == nil {
		fake.createDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBInstanceOutput
			result2 error
		})
	}
	fake.createDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplica(arg1 *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	fake.createDBInstanceReadReplicaMutex.Lock()
	ret, specificReturn := fake.createDBInstanceReadReplicaReturnsOnCall[len(fake.createDBInstanceReadReplicaArgsForCall)]
	fake.createDBInstanceReadReplicaArgsForCall = append(fake.createDBInstanceReadReplicaArgsForCall, struct {
		arg1 *rds.CreateDBInstanceReadReplicaInput
	}{arg1})
	stub := fake.CreateDBInstanceReadReplicaStub
	fakeReturns := fake.createDBInstanceReadReplicaReturns
	fake.recordInvocation("CreateDBInstanceReadReplica", []interface{}{arg1})
	fake.createDBInstanceReadReplicaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaCallCount() int {
	fake.createDBInstanceReadReplicaMutex.RLock()
	defer fake.createDBInstanceReadReplicaMutex.RUnlock()
	return len(fake.createDBInstanceReadReplicaArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaCalls(stub func(*rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error)) {
	fake.createDBInstanceReadReplicaMutex.Lock()
	defer fake.createDBInstanceReadReplicaMutex.Unlock()
	fake.CreateDBInstanceReadReplicaStub = stub
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaArgsForCall(i int) *rds.CreateDBInstanceReadReplicaInput {
	fake.createDBInstanceReadReplicaMutex.RLock()
	defer fake.createDBInstanceReadReplicaMutex.RUnlock()
	argsForCall := fake.createDBInstanceReadReplicaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaReturns(result1 *rds.CreateDBInstanceReadReplicaOutput, result2 error) {
	fake.createDBInstanceReadReplicaMutex.Lock()
	defer fake.createDBInstanceReadReplicaMutex.Unlock()
	fake.CreateDBInstanceReadReplicaStub = nil
	fake.createDBInstanceReadReplicaReturns = struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaReturnsOnCall(i int, result1 *rds.CreateDBInstanceReadReplicaOutput, result2 error) {
	fake.createDBInstanceReadReplicaMutex.Lock()
	defer fake.createDBInstanceReadReplicaMutex.Unlock()
	fake.CreateDBInstanceReadReplicaStub = nil
	if fake.createDBInstanceReadReplicaReturnsOnCall == nil {
		fake.createDBInstanceReadReplicaReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBInstanceReadReplicaOutput
			result2 error
		})
	}
	fake.createDBInstanceReadReplicaReturnsOnCall[i] = struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaRequest(arg1 *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput) {
	fake.createDBInstanceReadReplicaRequestMutex.Lock()
	ret, specificReturn := fake.createDBInstanceReadReplicaRequestReturnsOnCall[len(fake.createDBInstanceReadReplicaRequestArgsForCall)]
	fake.createDBInstanceReadReplicaRequestArgsForCall = append(fake.createDBInstanceReadReplicaRequestArgsForCall, struct {
		arg1 *rds.CreateDBInstanceReadReplicaInput
	}{arg1})
	stub := fake.CreateDBInstanceReadReplicaRequestStub
	fakeReturns := fake.createDBInstanceReadReplicaRequestReturns
	fake.recordInvocation("CreateDBInstanceReadReplicaRequest", []interface{}{arg1})
	fake.createDBInstanceReadReplicaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaRequestCallCount() int {
	fake.createDBInstanceReadReplicaRequestMutex.RLock()
	defer fake.createDBInstanceReadReplicaRequestMutex.RUnlock()
	return len(fake.createDBInstanceReadReplicaRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaRequestCalls(stub func(*rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput)) {
	fake.createDBInstanceReadReplicaRequestMutex.Lock()
	defer fake.createDBInstanceReadReplicaRequestMutex.Unlock()
	fake.CreateDBInstanceReadReplicaRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaRequestArgsForCall(i int) *rds.CreateDBInstanceReadReplicaInput {
	fake.createDBInstanceReadReplicaRequestMutex.RLock()
	defer fake.createDBInstanceReadReplicaRequestMutex.RUnlock()
	argsForCall := fake.createDBInstanceReadReplicaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaRequestReturns(result1 *request.Request, result2 *rds.CreateDBInstanceReadReplicaOutput) {
	fake.createDBInstanceReadReplicaRequestMutex.Lock()
	defer fake.createDBInstanceReadReplicaRequestMutex.Unlock()
	fake.CreateDBInstanceReadReplicaRequestStub = nil
	fake.createDBInstanceReadReplicaRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceReadReplicaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBInstanceReadReplicaOutput) {
	fake.createDBInstanceReadReplicaRequestMutex.Lock()
	defer fake.createDBInstanceReadReplicaRequestMutex.Unlock()
	fake.CreateDBInstanceReadReplicaRequestStub = nil
	if fake.createDBInstanceReadReplicaRequestReturnsOnCall == nil {
		fake.createDBInstanceReadReplicaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBInstanceReadReplicaOutput
		})
	}
	fake.createDBInstanceReadReplicaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceReadReplicaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaWithContext(arg1 context.Context, arg2 *rds.CreateDBInstanceReadReplicaInput, arg3 ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	fake.createDBInstanceReadReplicaWithContextMutex.Lock()
	ret, specificReturn := fake.createDBInstanceReadReplicaWithContextReturnsOnCall[len(fake.createDBInstanceReadReplicaWithContextArgsForCall)]
	fake.createDBInstanceReadReplicaWithContextArgsForCall = append(fake.createDBInstanceReadReplicaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBInstanceReadReplicaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBInstanceReadReplicaWithContextStub
	fakeReturns := fake.createDBInstanceReadReplicaWithContextReturns
	fake.recordInvocation("CreateDBInstanceReadReplicaWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBInstanceReadReplicaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaWithContextCallCount() int {
	fake.createDBInstanceReadReplicaWithContextMutex.RLock()
	defer fake.createDBInstanceReadReplicaWithContextMutex.RUnlock()
	return len(fake.createDBInstanceReadReplicaWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaWithContextCalls(stub func(context.Context, *rds.CreateDBInstanceReadReplicaInput, ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error)) {
	fake.createDBInstanceReadReplicaWithContextMutex.Lock()
	defer fake.createDBInstanceReadReplicaWithContextMutex.Unlock()
	fake.CreateDBInstanceReadReplicaWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaWithContextArgsForCall(i int) (context.Context, *rds.CreateDBInstanceReadReplicaInput, []request.Option) {
	fake.createDBInstanceReadReplicaWithContextMutex.RLock()
	defer fake.createDBInstanceReadReplicaWithContextMutex.RUnlock()
	argsForCall := fake.createDBInstanceReadReplicaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaWithContextReturns(result1 *rds.CreateDBInstanceReadReplicaOutput, result2 error) {
	fake.createDBInstanceReadReplicaWithContextMutex.Lock()
	defer fake.createDBInstanceReadReplicaWithContextMutex.Unlock()
	fake.CreateDBInstanceReadReplicaWithContextStub = nil
	fake.createDBInstanceReadReplicaWithContextReturns = struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceReadReplicaWithContextReturnsOnCall(i int, result1 *rds.CreateDBInstanceReadReplicaOutput, result2 error) {
	fake.createDBInstanceReadReplicaWithContextMutex.Lock()
	defer fake.createDBInstanceReadReplicaWithContextMutex.Unlock()
	fake.CreateDBInstanceReadReplicaWithContextStub = nil
	if fake.createDBInstanceReadReplicaWithContextReturnsOnCall == nil {
		fake.createDBInstanceReadReplicaWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBInstanceReadReplicaOutput
			result2 error
		})
	}
	fake.createDBInstanceReadReplicaWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBInstanceReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceRequest(arg1 *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput) {
	fake.createDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.createDBInstanceRequestReturnsOnCall[len(fake.createDBInstanceRequestArgsForCall)]
	fake.createDBInstanceRequestArgsForCall = append(fake.createDBInstanceRequestArgsForCall, struct {
		arg1 *rds.CreateDBInstanceInput
	}{arg1})
	stub := fake.CreateDBInstanceRequestStub
	fakeReturns := fake.createDBInstanceRequestReturns
	fake.recordInvocation("CreateDBInstanceRequest", []interface{}{arg1})
	fake.createDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBInstanceRequestCallCount() int {
	fake.createDBInstanceRequestMutex.RLock()
	defer fake.createDBInstanceRequestMutex.RUnlock()
	return len(fake.createDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBInstanceRequestCalls(stub func(*rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput)) {
	fake.createDBInstanceRequestMutex.Lock()
	defer fake.createDBInstanceRequestMutex.Unlock()
	fake.CreateDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBInstanceRequestArgsForCall(i int) *rds.CreateDBInstanceInput {
	fake.createDBInstanceRequestMutex.RLock()
	defer fake.createDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.createDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBInstanceRequestReturns(result1 *request.Request, result2 *rds.CreateDBInstanceOutput) {
	fake.createDBInstanceRequestMutex.Lock()
	defer fake.createDBInstanceRequestMutex.Unlock()
	fake.CreateDBInstanceRequestStub = nil
	fake.createDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBInstanceOutput) {
	fake.createDBInstanceRequestMutex.Lock()
	defer fake.createDBInstanceRequestMutex.Unlock()
	fake.CreateDBInstanceRequestStub = nil
	if fake.createDBInstanceRequestReturnsOnCall == nil {
		fake.createDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBInstanceOutput
		})
	}
	fake.createDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceWithContext(arg1 context.Context, arg2 *rds.CreateDBInstanceInput, arg3 ...request.Option) (*rds.CreateDBInstanceOutput, error) {
	fake.createDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.createDBInstanceWithContextReturnsOnCall[len(fake.createDBInstanceWithContextArgsForCall)]
	fake.createDBInstanceWithContextArgsForCall = append(fake.createDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBInstanceWithContextStub
	fakeReturns := fake.createDBInstanceWithContextReturns
	fake.recordInvocation("CreateDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBInstanceWithContextCallCount() int {
	fake.createDBInstanceWithContextMutex.RLock()
	defer fake.createDBInstanceWithContextMutex.RUnlock()
	return len(fake.createDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBInstanceWithContextCalls(stub func(context.Context, *rds.CreateDBInstanceInput, ...request.Option) (*rds.CreateDBInstanceOutput, error)) {
	fake.createDBInstanceWithContextMutex.Lock()
	defer fake.createDBInstanceWithContextMutex.Unlock()
	fake.CreateDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.CreateDBInstanceInput, []request.Option) {
	fake.createDBInstanceWithContextMutex.RLock()
	defer fake.createDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.createDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBInstanceWithContextReturns(result1 *rds.CreateDBInstanceOutput, result2 error) {
	fake.createDBInstanceWithContextMutex.Lock()
	defer fake.createDBInstanceWithContextMutex.Unlock()
	fake.CreateDBInstanceWithContextStub = nil
	fake.createDBInstanceWithContextReturns = struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBInstanceWithContextReturnsOnCall(i int, result1 *rds.CreateDBInstanceOutput, result2 error) {
	fake.createDBInstanceWithContextMutex.Lock()
	defer fake.createDBInstanceWithContextMutex.Unlock()
	fake.CreateDBInstanceWithContextStub = nil
	if fake.createDBInstanceWithContextReturnsOnCall == nil {
		fake.createDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBInstanceOutput
			result2 error
		})
	}
	fake.createDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBParameterGroup(arg1 *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
	fake.createDBParameterGroupMutex.Lock()
	ret, specificReturn := fake.createDBParameterGroupReturnsOnCall[len(fake.createDBParameterGroupArgsForCall)]
	fake.createDBParameterGroupArgsForCall = append(fake.createDBParameterGroupArgsForCall, struct {
		arg1 *rds.CreateDBParameterGroupInput
	}{arg1})
	stub := fake.CreateDBParameterGroupStub
	fakeReturns := fake.createDBParameterGroupReturns
	fake.recordInvocation("CreateDBParameterGroup", []interface{}{arg1})
	fake.createDBParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBParameterGroupCallCount() int {
	fake.createDBParameterGroupMutex.RLock()
	defer fake.createDBParameterGroupMutex.RUnlock()
	return len(fake.createDBParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBParameterGroupCalls(stub func(*rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error)) {
	fake.createDBParameterGroupMutex.Lock()
	defer fake.createDBParameterGroupMutex.Unlock()
	fake.CreateDBParameterGroupStub = stub
}

func (fake *FakeRDSAPI) CreateDBParameterGroupArgsForCall(i int) *rds.CreateDBParameterGroupInput {
	fake.createDBParameterGroupMutex.RLock()
	defer fake.createDBParameterGroupMutex.RUnlock()
	argsForCall := fake.createDBParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBParameterGroupReturns(result1 *rds.CreateDBParameterGroupOutput, result2 error) {
	fake.createDBParameterGroupMutex.Lock()
	defer fake.createDBParameterGroupMutex.Unlock()
	fake.CreateDBParameterGroupStub = nil
	fake.createDBParameterGroupReturns = struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBParameterGroupReturnsOnCall(i int, result1 *rds.CreateDBParameterGroupOutput, result2 error) {
	fake.createDBParameterGroupMutex.Lock()
	defer fake.createDBParameterGroupMutex.Unlock()
	fake.CreateDBParameterGroupStub = nil
	if fake.createDBParameterGroupReturnsOnCall == nil {
		fake.createDBParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBParameterGroupOutput
			result2 error
		})
	}
	fake.createDBParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBParameterGroupRequest(arg1 *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput) {
	fake.createDBParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.createDBParameterGroupRequestReturnsOnCall[len(fake.createDBParameterGroupRequestArgsForCall)]
	fake.createDBParameterGroupRequestArgsForCall = append(fake.createDBParameterGroupRequestArgsForCall, struct {
		arg1 *rds.CreateDBParameterGroupInput
	}{arg1})
	stub := fake.CreateDBParameterGroupRequestStub
	fakeReturns := fake.createDBParameterGroupRequestReturns
	fake.recordInvocation("CreateDBParameterGroupRequest", []interface{}{arg1})
	fake.createDBParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBParameterGroupRequestCallCount() int {
	fake.createDBParameterGroupRequestMutex.RLock()
	defer fake.createDBParameterGroupRequestMutex.RUnlock()
	return len(fake.createDBParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBParameterGroupRequestCalls(stub func(*rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput)) {
	fake.createDBParameterGroupRequestMutex.Lock()
	defer fake.createDBParameterGroupRequestMutex.Unlock()
	fake.CreateDBParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBParameterGroupRequestArgsForCall(i int) *rds.CreateDBParameterGroupInput {
	fake.createDBParameterGroupRequestMutex.RLock()
	defer fake.createDBParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.createDBParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBParameterGroupRequestReturns(result1 *request.Request, result2 *rds.CreateDBParameterGroupOutput) {
	fake.createDBParameterGroupRequestMutex.Lock()
	defer fake.createDBParameterGroupRequestMutex.Unlock()
	fake.CreateDBParameterGroupRequestStub = nil
	fake.createDBParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBParameterGroupOutput) {
	fake.createDBParameterGroupRequestMutex.Lock()
	defer fake.createDBParameterGroupRequestMutex.Unlock()
	fake.CreateDBParameterGroupRequestStub = nil
	if fake.createDBParameterGroupRequestReturnsOnCall == nil {
		fake.createDBParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBParameterGroupOutput
		})
	}
	fake.createDBParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBParameterGroupWithContext(arg1 context.Context, arg2 *rds.CreateDBParameterGroupInput, arg3 ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {
	fake.createDBParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createDBParameterGroupWithContextReturnsOnCall[len(fake.createDBParameterGroupWithContextArgsForCall)]
	fake.createDBParameterGroupWithContextArgsForCall = append(fake.createDBParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBParameterGroupWithContextStub
	fakeReturns := fake.createDBParameterGroupWithContextReturns
	fake.recordInvocation("CreateDBParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBParameterGroupWithContextCallCount() int {
	fake.createDBParameterGroupWithContextMutex.RLock()
	defer fake.createDBParameterGroupWithContextMutex.RUnlock()
	return len(fake.createDBParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBParameterGroupWithContextCalls(stub func(context.Context, *rds.CreateDBParameterGroupInput, ...request.Option) (*rds.CreateDBParameterGroupOutput, error)) {
	fake.createDBParameterGroupWithContextMutex.Lock()
	defer fake.createDBParameterGroupWithContextMutex.Unlock()
	fake.CreateDBParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.CreateDBParameterGroupInput, []request.Option) {
	fake.createDBParameterGroupWithContextMutex.RLock()
	defer fake.createDBParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.createDBParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBParameterGroupWithContextReturns(result1 *rds.CreateDBParameterGroupOutput, result2 error) {
	fake.createDBParameterGroupWithContextMutex.Lock()
	defer fake.createDBParameterGroupWithContextMutex.Unlock()
	fake.CreateDBParameterGroupWithContextStub = nil
	fake.createDBParameterGroupWithContextReturns = struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBParameterGroupWithContextReturnsOnCall(i int, result1 *rds.CreateDBParameterGroupOutput, result2 error) {
	fake.createDBParameterGroupWithContextMutex.Lock()
	defer fake.createDBParameterGroupWithContextMutex.Unlock()
	fake.CreateDBParameterGroupWithContextStub = nil
	if fake.createDBParameterGroupWithContextReturnsOnCall == nil {
		fake.createDBParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBParameterGroupOutput
			result2 error
		})
	}
	fake.createDBParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBProxy(arg1 *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
	fake.createDBProxyMutex.Lock()
	ret, specificReturn := fake.createDBProxyReturnsOnCall[len(fake.createDBProxyArgsForCall)]
	fake.createDBProxyArgsForCall = append(fake.createDBProxyArgsForCall, struct {
		arg1 *rds.CreateDBProxyInput
	}{arg1})
	stub := fake.CreateDBProxyStub
	fakeReturns := fake.createDBProxyReturns
	fake.recordInvocation("CreateDBProxy", []interface{}{arg1})
	fake.createDBProxyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBProxyCallCount() int {
	fake.createDBProxyMutex.RLock()
	defer fake.createDBProxyMutex.RUnlock()
	return len(fake.createDBProxyArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBProxyCalls(stub func(*rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error)) {
	fake.createDBProxyMutex.Lock()
	defer fake.createDBProxyMutex.Unlock()
	fake.CreateDBProxyStub = stub
}

func (fake *FakeRDSAPI) CreateDBProxyArgsForCall(i int) *rds.CreateDBProxyInput {
	fake.createDBProxyMutex.RLock()
	defer fake.createDBProxyMutex.RUnlock()
	argsForCall := fake.createDBProxyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBProxyReturns(result1 *rds.CreateDBProxyOutput, result2 error) {
	fake.createDBProxyMutex.Lock()
	defer fake.createDBProxyMutex.Unlock()
	fake.CreateDBProxyStub = nil
	fake.createDBProxyReturns = struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBProxyReturnsOnCall(i int, result1 *rds.CreateDBProxyOutput, result2 error) {
	fake.createDBProxyMutex.Lock()
	defer fake.createDBProxyMutex.Unlock()
	fake.CreateDBProxyStub = nil
	if fake.createDBProxyReturnsOnCall == nil {
		fake.createDBProxyReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBProxyOutput
			result2 error
		})
	}
	fake.createDBProxyReturnsOnCall[i] = struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBProxyRequest(arg1 *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput) {
	fake.createDBProxyRequestMutex.Lock()
	ret, specificReturn := fake.createDBProxyRequestReturnsOnCall[len(fake.createDBProxyRequestArgsForCall)]
	fake.createDBProxyRequestArgsForCall = append(fake.createDBProxyRequestArgsForCall, struct {
		arg1 *rds.CreateDBProxyInput
	}{arg1})
	stub := fake.CreateDBProxyRequestStub
	fakeReturns := fake.createDBProxyRequestReturns
	fake.recordInvocation("CreateDBProxyRequest", []interface{}{arg1})
	fake.createDBProxyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBProxyRequestCallCount() int {
	fake.createDBProxyRequestMutex.RLock()
	defer fake.createDBProxyRequestMutex.RUnlock()
	return len(fake.createDBProxyRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBProxyRequestCalls(stub func(*rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput)) {
	fake.createDBProxyRequestMutex.Lock()
	defer fake.createDBProxyRequestMutex.Unlock()
	fake.CreateDBProxyRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBProxyRequestArgsForCall(i int) *rds.CreateDBProxyInput {
	fake.createDBProxyRequestMutex.RLock()
	defer fake.createDBProxyRequestMutex.RUnlock()
	argsForCall := fake.createDBProxyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBProxyRequestReturns(result1 *request.Request, result2 *rds.CreateDBProxyOutput) {
	fake.createDBProxyRequestMutex.Lock()
	defer fake.createDBProxyRequestMutex.Unlock()
	fake.CreateDBProxyRequestStub = nil
	fake.createDBProxyRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBProxyOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBProxyRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBProxyOutput) {
	fake.createDBProxyRequestMutex.Lock()
	defer fake.createDBProxyRequestMutex.Unlock()
	fake.CreateDBProxyRequestStub = nil
	if fake.createDBProxyRequestReturnsOnCall == nil {
		fake.createDBProxyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBProxyOutput
		})
	}
	fake.createDBProxyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBProxyOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBProxyWithContext(arg1 context.Context, arg2 *rds.CreateDBProxyInput, arg3 ...request.Option) (*rds.CreateDBProxyOutput, error) {
	fake.createDBProxyWithContextMutex.Lock()
	ret, specificReturn := fake.createDBProxyWithContextReturnsOnCall[len(fake.createDBProxyWithContextArgsForCall)]
	fake.createDBProxyWithContextArgsForCall = append(fake.createDBProxyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBProxyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBProxyWithContextStub
	fakeReturns := fake.createDBProxyWithContextReturns
	fake.recordInvocation("CreateDBProxyWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBProxyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBProxyWithContextCallCount() int {
	fake.createDBProxyWithContextMutex.RLock()
	defer fake.createDBProxyWithContextMutex.RUnlock()
	return len(fake.createDBProxyWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBProxyWithContextCalls(stub func(context.Context, *rds.CreateDBProxyInput, ...request.Option) (*rds.CreateDBProxyOutput, error)) {
	fake.createDBProxyWithContextMutex.Lock()
	defer fake.createDBProxyWithContextMutex.Unlock()
	fake.CreateDBProxyWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBProxyWithContextArgsForCall(i int) (context.Context, *rds.CreateDBProxyInput, []request.Option) {
	fake.createDBProxyWithContextMutex.RLock()
	defer fake.createDBProxyWithContextMutex.RUnlock()
	argsForCall := fake.createDBProxyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBProxyWithContextReturns(result1 *rds.CreateDBProxyOutput, result2 error) {
	fake.createDBProxyWithContextMutex.Lock()
	defer fake.createDBProxyWithContextMutex.Unlock()
	fake.CreateDBProxyWithContextStub = nil
	fake.createDBProxyWithContextReturns = struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBProxyWithContextReturnsOnCall(i int, result1 *rds.CreateDBProxyOutput, result2 error) {
	fake.createDBProxyWithContextMutex.Lock()
	defer fake.createDBProxyWithContextMutex.Unlock()
	fake.CreateDBProxyWithContextStub = nil
	if fake.createDBProxyWithContextReturnsOnCall == nil {
		fake.createDBProxyWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBProxyOutput
			result2 error
		})
	}
	fake.createDBProxyWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSecurityGroup(arg1 *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
	fake.createDBSecurityGroupMutex.Lock()
	ret, specificReturn := fake.createDBSecurityGroupReturnsOnCall[len(fake.createDBSecurityGroupArgsForCall)]
	fake.createDBSecurityGroupArgsForCall = append(fake.createDBSecurityGroupArgsForCall, struct {
		arg1 *rds.CreateDBSecurityGroupInput
	}{arg1})
	stub := fake.CreateDBSecurityGroupStub
	fakeReturns := fake.createDBSecurityGroupReturns
	fake.recordInvocation("CreateDBSecurityGroup", []interface{}{arg1})
	fake.createDBSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupCallCount() int {
	fake.createDBSecurityGroupMutex.RLock()
	defer fake.createDBSecurityGroupMutex.RUnlock()
	return len(fake.createDBSecurityGroupArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupCalls(stub func(*rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error)) {
	fake.createDBSecurityGroupMutex.Lock()
	defer fake.createDBSecurityGroupMutex.Unlock()
	fake.CreateDBSecurityGroupStub = stub
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupArgsForCall(i int) *rds.CreateDBSecurityGroupInput {
	fake.createDBSecurityGroupMutex.RLock()
	defer fake.createDBSecurityGroupMutex.RUnlock()
	argsForCall := fake.createDBSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupReturns(result1 *rds.CreateDBSecurityGroupOutput, result2 error) {
	fake.createDBSecurityGroupMutex.Lock()
	defer fake.createDBSecurityGroupMutex.Unlock()
	fake.CreateDBSecurityGroupStub = nil
	fake.createDBSecurityGroupReturns = struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupReturnsOnCall(i int, result1 *rds.CreateDBSecurityGroupOutput, result2 error) {
	fake.createDBSecurityGroupMutex.Lock()
	defer fake.createDBSecurityGroupMutex.Unlock()
	fake.CreateDBSecurityGroupStub = nil
	if fake.createDBSecurityGroupReturnsOnCall == nil {
		fake.createDBSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBSecurityGroupOutput
			result2 error
		})
	}
	fake.createDBSecurityGroupReturnsOnCall[i] = struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupRequest(arg1 *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput) {
	fake.createDBSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.createDBSecurityGroupRequestReturnsOnCall[len(fake.createDBSecurityGroupRequestArgsForCall)]
	fake.createDBSecurityGroupRequestArgsForCall = append(fake.createDBSecurityGroupRequestArgsForCall, struct {
		arg1 *rds.CreateDBSecurityGroupInput
	}{arg1})
	stub := fake.CreateDBSecurityGroupRequestStub
	fakeReturns := fake.createDBSecurityGroupRequestReturns
	fake.recordInvocation("CreateDBSecurityGroupRequest", []interface{}{arg1})
	fake.createDBSecurityGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupRequestCallCount() int {
	fake.createDBSecurityGroupRequestMutex.RLock()
	defer fake.createDBSecurityGroupRequestMutex.RUnlock()
	return len(fake.createDBSecurityGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupRequestCalls(stub func(*rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput)) {
	fake.createDBSecurityGroupRequestMutex.Lock()
	defer fake.createDBSecurityGroupRequestMutex.Unlock()
	fake.CreateDBSecurityGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupRequestArgsForCall(i int) *rds.CreateDBSecurityGroupInput {
	fake.createDBSecurityGroupRequestMutex.RLock()
	defer fake.createDBSecurityGroupRequestMutex.RUnlock()
	argsForCall := fake.createDBSecurityGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupRequestReturns(result1 *request.Request, result2 *rds.CreateDBSecurityGroupOutput) {
	fake.createDBSecurityGroupRequestMutex.Lock()
	defer fake.createDBSecurityGroupRequestMutex.Unlock()
	fake.CreateDBSecurityGroupRequestStub = nil
	fake.createDBSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBSecurityGroupOutput) {
	fake.createDBSecurityGroupRequestMutex.Lock()
	defer fake.createDBSecurityGroupRequestMutex.Unlock()
	fake.CreateDBSecurityGroupRequestStub = nil
	if fake.createDBSecurityGroupRequestReturnsOnCall == nil {
		fake.createDBSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBSecurityGroupOutput
		})
	}
	fake.createDBSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupWithContext(arg1 context.Context, arg2 *rds.CreateDBSecurityGroupInput, arg3 ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {
	fake.createDBSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createDBSecurityGroupWithContextReturnsOnCall[len(fake.createDBSecurityGroupWithContextArgsForCall)]
	fake.createDBSecurityGroupWithContextArgsForCall = append(fake.createDBSecurityGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBSecurityGroupWithContextStub
	fakeReturns := fake.createDBSecurityGroupWithContextReturns
	fake.recordInvocation("CreateDBSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBSecurityGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupWithContextCallCount() int {
	fake.createDBSecurityGroupWithContextMutex.RLock()
	defer fake.createDBSecurityGroupWithContextMutex.RUnlock()
	return len(fake.createDBSecurityGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupWithContextCalls(stub func(context.Context, *rds.CreateDBSecurityGroupInput, ...request.Option) (*rds.CreateDBSecurityGroupOutput, error)) {
	fake.createDBSecurityGroupWithContextMutex.Lock()
	defer fake.createDBSecurityGroupWithContextMutex.Unlock()
	fake.CreateDBSecurityGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupWithContextArgsForCall(i int) (context.Context, *rds.CreateDBSecurityGroupInput, []request.Option) {
	fake.createDBSecurityGroupWithContextMutex.RLock()
	defer fake.createDBSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.createDBSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupWithContextReturns(result1 *rds.CreateDBSecurityGroupOutput, result2 error) {
	fake.createDBSecurityGroupWithContextMutex.Lock()
	defer fake.createDBSecurityGroupWithContextMutex.Unlock()
	fake.CreateDBSecurityGroupWithContextStub = nil
	fake.createDBSecurityGroupWithContextReturns = struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSecurityGroupWithContextReturnsOnCall(i int, result1 *rds.CreateDBSecurityGroupOutput, result2 error) {
	fake.createDBSecurityGroupWithContextMutex.Lock()
	defer fake.createDBSecurityGroupWithContextMutex.Unlock()
	fake.CreateDBSecurityGroupWithContextStub = nil
	if fake.createDBSecurityGroupWithContextReturnsOnCall == nil {
		fake.createDBSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBSecurityGroupOutput
			result2 error
		})
	}
	fake.createDBSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSnapshot(arg1 *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
	fake.createDBSnapshotMutex.Lock()
	ret, specificReturn := fake.createDBSnapshotReturnsOnCall[len(fake.createDBSnapshotArgsForCall)]
	fake.createDBSnapshotArgsForCall = append(fake.createDBSnapshotArgsForCall, struct {
		arg1 *rds.CreateDBSnapshotInput
	}{arg1})
	stub := fake.CreateDBSnapshotStub
	fakeReturns := fake.createDBSnapshotReturns
	fake.recordInvocation("CreateDBSnapshot", []interface{}{arg1})
	fake.createDBSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSnapshotCallCount() int {
	fake.createDBSnapshotMutex.RLock()
	defer fake.createDBSnapshotMutex.RUnlock()
	return len(fake.createDBSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSnapshotCalls(stub func(*rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error)) {
	fake.createDBSnapshotMutex.Lock()
	defer fake.createDBSnapshotMutex.Unlock()
	fake.CreateDBSnapshotStub = stub
}

func (fake *FakeRDSAPI) CreateDBSnapshotArgsForCall(i int) *rds.CreateDBSnapshotInput {
	fake.createDBSnapshotMutex.RLock()
	defer fake.createDBSnapshotMutex.RUnlock()
	argsForCall := fake.createDBSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBSnapshotReturns(result1 *rds.CreateDBSnapshotOutput, result2 error) {
	fake.createDBSnapshotMutex.Lock()
	defer fake.createDBSnapshotMutex.Unlock()
	fake.CreateDBSnapshotStub = nil
	fake.createDBSnapshotReturns = struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSnapshotReturnsOnCall(i int, result1 *rds.CreateDBSnapshotOutput, result2 error) {
	fake.createDBSnapshotMutex.Lock()
	defer fake.createDBSnapshotMutex.Unlock()
	fake.CreateDBSnapshotStub = nil
	if fake.createDBSnapshotReturnsOnCall == nil {
		fake.createDBSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBSnapshotOutput
			result2 error
		})
	}
	fake.createDBSnapshotReturnsOnCall[i] = struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSnapshotRequest(arg1 *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput) {
	fake.createDBSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.createDBSnapshotRequestReturnsOnCall[len(fake.createDBSnapshotRequestArgsForCall)]
	fake.createDBSnapshotRequestArgsForCall = append(fake.createDBSnapshotRequestArgsForCall, struct {
		arg1 *rds.CreateDBSnapshotInput
	}{arg1})
	stub := fake.CreateDBSnapshotRequestStub
	fakeReturns := fake.createDBSnapshotRequestReturns
	fake.recordInvocation("CreateDBSnapshotRequest", []interface{}{arg1})
	fake.createDBSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSnapshotRequestCallCount() int {
	fake.createDBSnapshotRequestMutex.RLock()
	defer fake.createDBSnapshotRequestMutex.RUnlock()
	return len(fake.createDBSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSnapshotRequestCalls(stub func(*rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput)) {
	fake.createDBSnapshotRequestMutex.Lock()
	defer fake.createDBSnapshotRequestMutex.Unlock()
	fake.CreateDBSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBSnapshotRequestArgsForCall(i int) *rds.CreateDBSnapshotInput {
	fake.createDBSnapshotRequestMutex.RLock()
	defer fake.createDBSnapshotRequestMutex.RUnlock()
	argsForCall := fake.createDBSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBSnapshotRequestReturns(result1 *request.Request, result2 *rds.CreateDBSnapshotOutput) {
	fake.createDBSnapshotRequestMutex.Lock()
	defer fake.createDBSnapshotRequestMutex.Unlock()
	fake.CreateDBSnapshotRequestStub = nil
	fake.createDBSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBSnapshotOutput) {
	fake.createDBSnapshotRequestMutex.Lock()
	defer fake.createDBSnapshotRequestMutex.Unlock()
	fake.CreateDBSnapshotRequestStub = nil
	if fake.createDBSnapshotRequestReturnsOnCall == nil {
		fake.createDBSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBSnapshotOutput
		})
	}
	fake.createDBSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSnapshotWithContext(arg1 context.Context, arg2 *rds.CreateDBSnapshotInput, arg3 ...request.Option) (*rds.CreateDBSnapshotOutput, error) {
	fake.createDBSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.createDBSnapshotWithContextReturnsOnCall[len(fake.createDBSnapshotWithContextArgsForCall)]
	fake.createDBSnapshotWithContextArgsForCall = append(fake.createDBSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBSnapshotWithContextStub
	fakeReturns := fake.createDBSnapshotWithContextReturns
	fake.recordInvocation("CreateDBSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSnapshotWithContextCallCount() int {
	fake.createDBSnapshotWithContextMutex.RLock()
	defer fake.createDBSnapshotWithContextMutex.RUnlock()
	return len(fake.createDBSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSnapshotWithContextCalls(stub func(context.Context, *rds.CreateDBSnapshotInput, ...request.Option) (*rds.CreateDBSnapshotOutput, error)) {
	fake.createDBSnapshotWithContextMutex.Lock()
	defer fake.createDBSnapshotWithContextMutex.Unlock()
	fake.CreateDBSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBSnapshotWithContextArgsForCall(i int) (context.Context, *rds.CreateDBSnapshotInput, []request.Option) {
	fake.createDBSnapshotWithContextMutex.RLock()
	defer fake.createDBSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.createDBSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBSnapshotWithContextReturns(result1 *rds.CreateDBSnapshotOutput, result2 error) {
	fake.createDBSnapshotWithContextMutex.Lock()
	defer fake.createDBSnapshotWithContextMutex.Unlock()
	fake.CreateDBSnapshotWithContextStub = nil
	fake.createDBSnapshotWithContextReturns = struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSnapshotWithContextReturnsOnCall(i int, result1 *rds.CreateDBSnapshotOutput, result2 error) {
	fake.createDBSnapshotWithContextMutex.Lock()
	defer fake.createDBSnapshotWithContextMutex.Unlock()
	fake.CreateDBSnapshotWithContextStub = nil
	if fake.createDBSnapshotWithContextReturnsOnCall == nil {
		fake.createDBSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBSnapshotOutput
			result2 error
		})
	}
	fake.createDBSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSubnetGroup(arg1 *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
	fake.createDBSubnetGroupMutex.Lock()
	ret, specificReturn := fake.createDBSubnetGroupReturnsOnCall[len(fake.createDBSubnetGroupArgsForCall)]
	fake.createDBSubnetGroupArgsForCall = append(fake.createDBSubnetGroupArgsForCall, struct {
		arg1 *rds.CreateDBSubnetGroupInput
	}{arg1})
	stub := fake.CreateDBSubnetGroupStub
	fakeReturns := fake.createDBSubnetGroupReturns
	fake.recordInvocation("CreateDBSubnetGroup", []interface{}{arg1})
	fake.createDBSubnetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupCallCount() int {
	fake.createDBSubnetGroupMutex.RLock()
	defer fake.createDBSubnetGroupMutex.RUnlock()
	return len(fake.createDBSubnetGroupArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupCalls(stub func(*rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error)) {
	fake.createDBSubnetGroupMutex.Lock()
	defer fake.createDBSubnetGroupMutex.Unlock()
	fake.CreateDBSubnetGroupStub = stub
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupArgsForCall(i int) *rds.CreateDBSubnetGroupInput {
	fake.createDBSubnetGroupMutex.RLock()
	defer fake.createDBSubnetGroupMutex.RUnlock()
	argsForCall := fake.createDBSubnetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupReturns(result1 *rds.CreateDBSubnetGroupOutput, result2 error) {
	fake.createDBSubnetGroupMutex.Lock()
	defer fake.createDBSubnetGroupMutex.Unlock()
	fake.CreateDBSubnetGroupStub = nil
	fake.createDBSubnetGroupReturns = struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupReturnsOnCall(i int, result1 *rds.CreateDBSubnetGroupOutput, result2 error) {
	fake.createDBSubnetGroupMutex.Lock()
	defer fake.createDBSubnetGroupMutex.Unlock()
	fake.CreateDBSubnetGroupStub = nil
	if fake.createDBSubnetGroupReturnsOnCall == nil {
		fake.createDBSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBSubnetGroupOutput
			result2 error
		})
	}
	fake.createDBSubnetGroupReturnsOnCall[i] = struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupRequest(arg1 *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput) {
	fake.createDBSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.createDBSubnetGroupRequestReturnsOnCall[len(fake.createDBSubnetGroupRequestArgsForCall)]
	fake.createDBSubnetGroupRequestArgsForCall = append(fake.createDBSubnetGroupRequestArgsForCall, struct {
		arg1 *rds.CreateDBSubnetGroupInput
	}{arg1})
	stub := fake.CreateDBSubnetGroupRequestStub
	fakeReturns := fake.createDBSubnetGroupRequestReturns
	fake.recordInvocation("CreateDBSubnetGroupRequest", []interface{}{arg1})
	fake.createDBSubnetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupRequestCallCount() int {
	fake.createDBSubnetGroupRequestMutex.RLock()
	defer fake.createDBSubnetGroupRequestMutex.RUnlock()
	return len(fake.createDBSubnetGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupRequestCalls(stub func(*rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput)) {
	fake.createDBSubnetGroupRequestMutex.Lock()
	defer fake.createDBSubnetGroupRequestMutex.Unlock()
	fake.CreateDBSubnetGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupRequestArgsForCall(i int) *rds.CreateDBSubnetGroupInput {
	fake.createDBSubnetGroupRequestMutex.RLock()
	defer fake.createDBSubnetGroupRequestMutex.RUnlock()
	argsForCall := fake.createDBSubnetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupRequestReturns(result1 *request.Request, result2 *rds.CreateDBSubnetGroupOutput) {
	fake.createDBSubnetGroupRequestMutex.Lock()
	defer fake.createDBSubnetGroupRequestMutex.Unlock()
	fake.CreateDBSubnetGroupRequestStub = nil
	fake.createDBSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateDBSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateDBSubnetGroupOutput) {
	fake.createDBSubnetGroupRequestMutex.Lock()
	defer fake.createDBSubnetGroupRequestMutex.Unlock()
	fake.CreateDBSubnetGroupRequestStub = nil
	if fake.createDBSubnetGroupRequestReturnsOnCall == nil {
		fake.createDBSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateDBSubnetGroupOutput
		})
	}
	fake.createDBSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateDBSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupWithContext(arg1 context.Context, arg2 *rds.CreateDBSubnetGroupInput, arg3 ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {
	fake.createDBSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createDBSubnetGroupWithContextReturnsOnCall[len(fake.createDBSubnetGroupWithContextArgsForCall)]
	fake.createDBSubnetGroupWithContextArgsForCall = append(fake.createDBSubnetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateDBSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDBSubnetGroupWithContextStub
	fakeReturns := fake.createDBSubnetGroupWithContextReturns
	fake.recordInvocation("CreateDBSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDBSubnetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupWithContextCallCount() int {
	fake.createDBSubnetGroupWithContextMutex.RLock()
	defer fake.createDBSubnetGroupWithContextMutex.RUnlock()
	return len(fake.createDBSubnetGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupWithContextCalls(stub func(context.Context, *rds.CreateDBSubnetGroupInput, ...request.Option) (*rds.CreateDBSubnetGroupOutput, error)) {
	fake.createDBSubnetGroupWithContextMutex.Lock()
	defer fake.createDBSubnetGroupWithContextMutex.Unlock()
	fake.CreateDBSubnetGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupWithContextArgsForCall(i int) (context.Context, *rds.CreateDBSubnetGroupInput, []request.Option) {
	fake.createDBSubnetGroupWithContextMutex.RLock()
	defer fake.createDBSubnetGroupWithContextMutex.RUnlock()
	argsForCall := fake.createDBSubnetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupWithContextReturns(result1 *rds.CreateDBSubnetGroupOutput, result2 error) {
	fake.createDBSubnetGroupWithContextMutex.Lock()
	defer fake.createDBSubnetGroupWithContextMutex.Unlock()
	fake.CreateDBSubnetGroupWithContextStub = nil
	fake.createDBSubnetGroupWithContextReturns = struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateDBSubnetGroupWithContextReturnsOnCall(i int, result1 *rds.CreateDBSubnetGroupOutput, result2 error) {
	fake.createDBSubnetGroupWithContextMutex.Lock()
	defer fake.createDBSubnetGroupWithContextMutex.Unlock()
	fake.CreateDBSubnetGroupWithContextStub = nil
	if fake.createDBSubnetGroupWithContextReturnsOnCall == nil {
		fake.createDBSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBSubnetGroupOutput
			result2 error
		})
	}
	fake.createDBSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateEventSubscription(arg1 *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
	fake.createEventSubscriptionMutex.Lock()
	ret, specificReturn := fake.createEventSubscriptionReturnsOnCall[len(fake.createEventSubscriptionArgsForCall)]
	fake.createEventSubscriptionArgsForCall = append(fake.createEventSubscriptionArgsForCall, struct {
		arg1 *rds.CreateEventSubscriptionInput
	}{arg1})
	stub := fake.CreateEventSubscriptionStub
	fakeReturns := fake.createEventSubscriptionReturns
	fake.recordInvocation("CreateEventSubscription", []interface{}{arg1})
	fake.createEventSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateEventSubscriptionCallCount() int {
	fake.createEventSubscriptionMutex.RLock()
	defer fake.createEventSubscriptionMutex.RUnlock()
	return len(fake.createEventSubscriptionArgsForCall)
}

func (fake *FakeRDSAPI) CreateEventSubscriptionCalls(stub func(*rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error)) {
	fake.createEventSubscriptionMutex.Lock()
	defer fake.createEventSubscriptionMutex.Unlock()
	fake.CreateEventSubscriptionStub = stub
}

func (fake *FakeRDSAPI) CreateEventSubscriptionArgsForCall(i int) *rds.CreateEventSubscriptionInput {
	fake.createEventSubscriptionMutex.RLock()
	defer fake.createEventSubscriptionMutex.RUnlock()
	argsForCall := fake.createEventSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateEventSubscriptionReturns(result1 *rds.CreateEventSubscriptionOutput, result2 error) {
	fake.createEventSubscriptionMutex.Lock()
	defer fake.createEventSubscriptionMutex.Unlock()
	fake.CreateEventSubscriptionStub = nil
	fake.createEventSubscriptionReturns = struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateEventSubscriptionReturnsOnCall(i int, result1 *rds.CreateEventSubscriptionOutput, result2 error) {
	fake.createEventSubscriptionMutex.Lock()
	defer fake.createEventSubscriptionMutex.Unlock()
	fake.CreateEventSubscriptionStub = nil
	if fake.createEventSubscriptionReturnsOnCall == nil {
		fake.createEventSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateEventSubscriptionOutput
			result2 error
		})
	}
	fake.createEventSubscriptionReturnsOnCall[i] = struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateEventSubscriptionRequest(arg1 *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput) {
	fake.createEventSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.createEventSubscriptionRequestReturnsOnCall[len(fake.createEventSubscriptionRequestArgsForCall)]
	fake.createEventSubscriptionRequestArgsForCall = append(fake.createEventSubscriptionRequestArgsForCall, struct {
		arg1 *rds.CreateEventSubscriptionInput
	}{arg1})
	stub := fake.CreateEventSubscriptionRequestStub
	fakeReturns := fake.createEventSubscriptionRequestReturns
	fake.recordInvocation("CreateEventSubscriptionRequest", []interface{}{arg1})
	fake.createEventSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateEventSubscriptionRequestCallCount() int {
	fake.createEventSubscriptionRequestMutex.RLock()
	defer fake.createEventSubscriptionRequestMutex.RUnlock()
	return len(fake.createEventSubscriptionRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateEventSubscriptionRequestCalls(stub func(*rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput)) {
	fake.createEventSubscriptionRequestMutex.Lock()
	defer fake.createEventSubscriptionRequestMutex.Unlock()
	fake.CreateEventSubscriptionRequestStub = stub
}

func (fake *FakeRDSAPI) CreateEventSubscriptionRequestArgsForCall(i int) *rds.CreateEventSubscriptionInput {
	fake.createEventSubscriptionRequestMutex.RLock()
	defer fake.createEventSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.createEventSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateEventSubscriptionRequestReturns(result1 *request.Request, result2 *rds.CreateEventSubscriptionOutput) {
	fake.createEventSubscriptionRequestMutex.Lock()
	defer fake.createEventSubscriptionRequestMutex.Unlock()
	fake.CreateEventSubscriptionRequestStub = nil
	fake.createEventSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateEventSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateEventSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateEventSubscriptionOutput) {
	fake.createEventSubscriptionRequestMutex.Lock()
	defer fake.createEventSubscriptionRequestMutex.Unlock()
	fake.CreateEventSubscriptionRequestStub = nil
	if fake.createEventSubscriptionRequestReturnsOnCall == nil {
		fake.createEventSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateEventSubscriptionOutput
		})
	}
	fake.createEventSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateEventSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateEventSubscriptionWithContext(arg1 context.Context, arg2 *rds.CreateEventSubscriptionInput, arg3 ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {
	fake.createEventSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.createEventSubscriptionWithContextReturnsOnCall[len(fake.createEventSubscriptionWithContextArgsForCall)]
	fake.createEventSubscriptionWithContextArgsForCall = append(fake.createEventSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateEventSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateEventSubscriptionWithContextStub
	fakeReturns := fake.createEventSubscriptionWithContextReturns
	fake.recordInvocation("CreateEventSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createEventSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateEventSubscriptionWithContextCallCount() int {
	fake.createEventSubscriptionWithContextMutex.RLock()
	defer fake.createEventSubscriptionWithContextMutex.RUnlock()
	return len(fake.createEventSubscriptionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateEventSubscriptionWithContextCalls(stub func(context.Context, *rds.CreateEventSubscriptionInput, ...request.Option) (*rds.CreateEventSubscriptionOutput, error)) {
	fake.createEventSubscriptionWithContextMutex.Lock()
	defer fake.createEventSubscriptionWithContextMutex.Unlock()
	fake.CreateEventSubscriptionWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateEventSubscriptionWithContextArgsForCall(i int) (context.Context, *rds.CreateEventSubscriptionInput, []request.Option) {
	fake.createEventSubscriptionWithContextMutex.RLock()
	defer fake.createEventSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.createEventSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateEventSubscriptionWithContextReturns(result1 *rds.CreateEventSubscriptionOutput, result2 error) {
	fake.createEventSubscriptionWithContextMutex.Lock()
	defer fake.createEventSubscriptionWithContextMutex.Unlock()
	fake.CreateEventSubscriptionWithContextStub = nil
	fake.createEventSubscriptionWithContextReturns = struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateEventSubscriptionWithContextReturnsOnCall(i int, result1 *rds.CreateEventSubscriptionOutput, result2 error) {
	fake.createEventSubscriptionWithContextMutex.Lock()
	defer fake.createEventSubscriptionWithContextMutex.Unlock()
	fake.CreateEventSubscriptionWithContextStub = nil
	if fake.createEventSubscriptionWithContextReturnsOnCall == nil {
		fake.createEventSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateEventSubscriptionOutput
			result2 error
		})
	}
	fake.createEventSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateGlobalCluster(arg1 *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
	fake.createGlobalClusterMutex.Lock()
	ret, specificReturn := fake.createGlobalClusterReturnsOnCall[len(fake.createGlobalClusterArgsForCall)]
	fake.createGlobalClusterArgsForCall = append(fake.createGlobalClusterArgsForCall, struct {
		arg1 *rds.CreateGlobalClusterInput
	}{arg1})
	stub := fake.CreateGlobalClusterStub
	fakeReturns := fake.createGlobalClusterReturns
	fake.recordInvocation("CreateGlobalCluster", []interface{}{arg1})
	fake.createGlobalClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateGlobalClusterCallCount() int {
	fake.createGlobalClusterMutex.RLock()
	defer fake.createGlobalClusterMutex.RUnlock()
	return len(fake.createGlobalClusterArgsForCall)
}

func (fake *FakeRDSAPI) CreateGlobalClusterCalls(stub func(*rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error)) {
	fake.createGlobalClusterMutex.Lock()
	defer fake.createGlobalClusterMutex.Unlock()
	fake.CreateGlobalClusterStub = stub
}

func (fake *FakeRDSAPI) CreateGlobalClusterArgsForCall(i int) *rds.CreateGlobalClusterInput {
	fake.createGlobalClusterMutex.RLock()
	defer fake.createGlobalClusterMutex.RUnlock()
	argsForCall := fake.createGlobalClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateGlobalClusterReturns(result1 *rds.CreateGlobalClusterOutput, result2 error) {
	fake.createGlobalClusterMutex.Lock()
	defer fake.createGlobalClusterMutex.Unlock()
	fake.CreateGlobalClusterStub = nil
	fake.createGlobalClusterReturns = struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateGlobalClusterReturnsOnCall(i int, result1 *rds.CreateGlobalClusterOutput, result2 error) {
	fake.createGlobalClusterMutex.Lock()
	defer fake.createGlobalClusterMutex.Unlock()
	fake.CreateGlobalClusterStub = nil
	if fake.createGlobalClusterReturnsOnCall == nil {
		fake.createGlobalClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateGlobalClusterOutput
			result2 error
		})
	}
	fake.createGlobalClusterReturnsOnCall[i] = struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateGlobalClusterRequest(arg1 *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput) {
	fake.createGlobalClusterRequestMutex.Lock()
	ret, specificReturn := fake.createGlobalClusterRequestReturnsOnCall[len(fake.createGlobalClusterRequestArgsForCall)]
	fake.createGlobalClusterRequestArgsForCall = append(fake.createGlobalClusterRequestArgsForCall, struct {
		arg1 *rds.CreateGlobalClusterInput
	}{arg1})
	stub := fake.CreateGlobalClusterRequestStub
	fakeReturns := fake.createGlobalClusterRequestReturns
	fake.recordInvocation("CreateGlobalClusterRequest", []interface{}{arg1})
	fake.createGlobalClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateGlobalClusterRequestCallCount() int {
	fake.createGlobalClusterRequestMutex.RLock()
	defer fake.createGlobalClusterRequestMutex.RUnlock()
	return len(fake.createGlobalClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateGlobalClusterRequestCalls(stub func(*rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput)) {
	fake.createGlobalClusterRequestMutex.Lock()
	defer fake.createGlobalClusterRequestMutex.Unlock()
	fake.CreateGlobalClusterRequestStub = stub
}

func (fake *FakeRDSAPI) CreateGlobalClusterRequestArgsForCall(i int) *rds.CreateGlobalClusterInput {
	fake.createGlobalClusterRequestMutex.RLock()
	defer fake.createGlobalClusterRequestMutex.RUnlock()
	argsForCall := fake.createGlobalClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateGlobalClusterRequestReturns(result1 *request.Request, result2 *rds.CreateGlobalClusterOutput) {
	fake.createGlobalClusterRequestMutex.Lock()
	defer fake.createGlobalClusterRequestMutex.Unlock()
	fake.CreateGlobalClusterRequestStub = nil
	fake.createGlobalClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateGlobalClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateGlobalClusterOutput) {
	fake.createGlobalClusterRequestMutex.Lock()
	defer fake.createGlobalClusterRequestMutex.Unlock()
	fake.CreateGlobalClusterRequestStub = nil
	if fake.createGlobalClusterRequestReturnsOnCall == nil {
		fake.createGlobalClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateGlobalClusterOutput
		})
	}
	fake.createGlobalClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateGlobalClusterWithContext(arg1 context.Context, arg2 *rds.CreateGlobalClusterInput, arg3 ...request.Option) (*rds.CreateGlobalClusterOutput, error) {
	fake.createGlobalClusterWithContextMutex.Lock()
	ret, specificReturn := fake.createGlobalClusterWithContextReturnsOnCall[len(fake.createGlobalClusterWithContextArgsForCall)]
	fake.createGlobalClusterWithContextArgsForCall = append(fake.createGlobalClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateGlobalClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateGlobalClusterWithContextStub
	fakeReturns := fake.createGlobalClusterWithContextReturns
	fake.recordInvocation("CreateGlobalClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.createGlobalClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateGlobalClusterWithContextCallCount() int {
	fake.createGlobalClusterWithContextMutex.RLock()
	defer fake.createGlobalClusterWithContextMutex.RUnlock()
	return len(fake.createGlobalClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateGlobalClusterWithContextCalls(stub func(context.Context, *rds.CreateGlobalClusterInput, ...request.Option) (*rds.CreateGlobalClusterOutput, error)) {
	fake.createGlobalClusterWithContextMutex.Lock()
	defer fake.createGlobalClusterWithContextMutex.Unlock()
	fake.CreateGlobalClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateGlobalClusterWithContextArgsForCall(i int) (context.Context, *rds.CreateGlobalClusterInput, []request.Option) {
	fake.createGlobalClusterWithContextMutex.RLock()
	defer fake.createGlobalClusterWithContextMutex.RUnlock()
	argsForCall := fake.createGlobalClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateGlobalClusterWithContextReturns(result1 *rds.CreateGlobalClusterOutput, result2 error) {
	fake.createGlobalClusterWithContextMutex.Lock()
	defer fake.createGlobalClusterWithContextMutex.Unlock()
	fake.CreateGlobalClusterWithContextStub = nil
	fake.createGlobalClusterWithContextReturns = struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateGlobalClusterWithContextReturnsOnCall(i int, result1 *rds.CreateGlobalClusterOutput, result2 error) {
	fake.createGlobalClusterWithContextMutex.Lock()
	defer fake.createGlobalClusterWithContextMutex.Unlock()
	fake.CreateGlobalClusterWithContextStub = nil
	if fake.createGlobalClusterWithContextReturnsOnCall == nil {
		fake.createGlobalClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateGlobalClusterOutput
			result2 error
		})
	}
	fake.createGlobalClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateOptionGroup(arg1 *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
	fake.createOptionGroupMutex.Lock()
	ret, specificReturn := fake.createOptionGroupReturnsOnCall[len(fake.createOptionGroupArgsForCall)]
	fake.createOptionGroupArgsForCall = append(fake.createOptionGroupArgsForCall, struct {
		arg1 *rds.CreateOptionGroupInput
	}{arg1})
	stub := fake.CreateOptionGroupStub
	fakeReturns := fake.createOptionGroupReturns
	fake.recordInvocation("CreateOptionGroup", []interface{}{arg1})
	fake.createOptionGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateOptionGroupCallCount() int {
	fake.createOptionGroupMutex.RLock()
	defer fake.createOptionGroupMutex.RUnlock()
	return len(fake.createOptionGroupArgsForCall)
}

func (fake *FakeRDSAPI) CreateOptionGroupCalls(stub func(*rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error)) {
	fake.createOptionGroupMutex.Lock()
	defer fake.createOptionGroupMutex.Unlock()
	fake.CreateOptionGroupStub = stub
}

func (fake *FakeRDSAPI) CreateOptionGroupArgsForCall(i int) *rds.CreateOptionGroupInput {
	fake.createOptionGroupMutex.RLock()
	defer fake.createOptionGroupMutex.RUnlock()
	argsForCall := fake.createOptionGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateOptionGroupReturns(result1 *rds.CreateOptionGroupOutput, result2 error) {
	fake.createOptionGroupMutex.Lock()
	defer fake.createOptionGroupMutex.Unlock()
	fake.CreateOptionGroupStub = nil
	fake.createOptionGroupReturns = struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateOptionGroupReturnsOnCall(i int, result1 *rds.CreateOptionGroupOutput, result2 error) {
	fake.createOptionGroupMutex.Lock()
	defer fake.createOptionGroupMutex.Unlock()
	fake.CreateOptionGroupStub = nil
	if fake.createOptionGroupReturnsOnCall == nil {
		fake.createOptionGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateOptionGroupOutput
			result2 error
		})
	}
	fake.createOptionGroupReturnsOnCall[i] = struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateOptionGroupRequest(arg1 *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput) {
	fake.createOptionGroupRequestMutex.Lock()
	ret, specificReturn := fake.createOptionGroupRequestReturnsOnCall[len(fake.createOptionGroupRequestArgsForCall)]
	fake.createOptionGroupRequestArgsForCall = append(fake.createOptionGroupRequestArgsForCall, struct {
		arg1 *rds.CreateOptionGroupInput
	}{arg1})
	stub := fake.CreateOptionGroupRequestStub
	fakeReturns := fake.createOptionGroupRequestReturns
	fake.recordInvocation("CreateOptionGroupRequest", []interface{}{arg1})
	fake.createOptionGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateOptionGroupRequestCallCount() int {
	fake.createOptionGroupRequestMutex.RLock()
	defer fake.createOptionGroupRequestMutex.RUnlock()
	return len(fake.createOptionGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) CreateOptionGroupRequestCalls(stub func(*rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput)) {
	fake.createOptionGroupRequestMutex.Lock()
	defer fake.createOptionGroupRequestMutex.Unlock()
	fake.CreateOptionGroupRequestStub = stub
}

func (fake *FakeRDSAPI) CreateOptionGroupRequestArgsForCall(i int) *rds.CreateOptionGroupInput {
	fake.createOptionGroupRequestMutex.RLock()
	defer fake.createOptionGroupRequestMutex.RUnlock()
	argsForCall := fake.createOptionGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) CreateOptionGroupRequestReturns(result1 *request.Request, result2 *rds.CreateOptionGroupOutput) {
	fake.createOptionGroupRequestMutex.Lock()
	defer fake.createOptionGroupRequestMutex.Unlock()
	fake.CreateOptionGroupRequestStub = nil
	fake.createOptionGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.CreateOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateOptionGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.CreateOptionGroupOutput) {
	fake.createOptionGroupRequestMutex.Lock()
	defer fake.createOptionGroupRequestMutex.Unlock()
	fake.CreateOptionGroupRequestStub = nil
	if fake.createOptionGroupRequestReturnsOnCall == nil {
		fake.createOptionGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.CreateOptionGroupOutput
		})
	}
	fake.createOptionGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.CreateOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateOptionGroupWithContext(arg1 context.Context, arg2 *rds.CreateOptionGroupInput, arg3 ...request.Option) (*rds.CreateOptionGroupOutput, error) {
	fake.createOptionGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createOptionGroupWithContextReturnsOnCall[len(fake.createOptionGroupWithContextArgsForCall)]
	fake.createOptionGroupWithContextArgsForCall = append(fake.createOptionGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.CreateOptionGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateOptionGroupWithContextStub
	fakeReturns := fake.createOptionGroupWithContextReturns
	fake.recordInvocation("CreateOptionGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createOptionGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) CreateOptionGroupWithContextCallCount() int {
	fake.createOptionGroupWithContextMutex.RLock()
	defer fake.createOptionGroupWithContextMutex.RUnlock()
	return len(fake.createOptionGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) CreateOptionGroupWithContextCalls(stub func(context.Context, *rds.CreateOptionGroupInput, ...request.Option) (*rds.CreateOptionGroupOutput, error)) {
	fake.createOptionGroupWithContextMutex.Lock()
	defer fake.createOptionGroupWithContextMutex.Unlock()
	fake.CreateOptionGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) CreateOptionGroupWithContextArgsForCall(i int) (context.Context, *rds.CreateOptionGroupInput, []request.Option) {
	fake.createOptionGroupWithContextMutex.RLock()
	defer fake.createOptionGroupWithContextMutex.RUnlock()
	argsForCall := fake.createOptionGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) CreateOptionGroupWithContextReturns(result1 *rds.CreateOptionGroupOutput, result2 error) {
	fake.createOptionGroupWithContextMutex.Lock()
	defer fake.createOptionGroupWithContextMutex.Unlock()
	fake.CreateOptionGroupWithContextStub = nil
	fake.createOptionGroupWithContextReturns = struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) CreateOptionGroupWithContextReturnsOnCall(i int, result1 *rds.CreateOptionGroupOutput, result2 error) {
	fake.createOptionGroupWithContextMutex.Lock()
	defer fake.createOptionGroupWithContextMutex.Unlock()
	fake.CreateOptionGroupWithContextStub = nil
	if fake.createOptionGroupWithContextReturnsOnCall == nil {
		fake.createOptionGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateOptionGroupOutput
			result2 error
		})
	}
	fake.createOptionGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.CreateOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZone(arg1 *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	fake.deleteCustomAvailabilityZoneMutex.Lock()
	ret, specificReturn := fake.deleteCustomAvailabilityZoneReturnsOnCall[len(fake.deleteCustomAvailabilityZoneArgsForCall)]
	fake.deleteCustomAvailabilityZoneArgsForCall = append(fake.deleteCustomAvailabilityZoneArgsForCall, struct {
		arg1 *rds.DeleteCustomAvailabilityZoneInput
	}{arg1})
	stub := fake.DeleteCustomAvailabilityZoneStub
	fakeReturns := fake.deleteCustomAvailabilityZoneReturns
	fake.recordInvocation("DeleteCustomAvailabilityZone", []interface{}{arg1})
	fake.deleteCustomAvailabilityZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneCallCount() int {
	fake.deleteCustomAvailabilityZoneMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneMutex.RUnlock()
	return len(fake.deleteCustomAvailabilityZoneArgsForCall)
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneCalls(stub func(*rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error)) {
	fake.deleteCustomAvailabilityZoneMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneStub = stub
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneArgsForCall(i int) *rds.DeleteCustomAvailabilityZoneInput {
	fake.deleteCustomAvailabilityZoneMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneMutex.RUnlock()
	argsForCall := fake.deleteCustomAvailabilityZoneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneReturns(result1 *rds.DeleteCustomAvailabilityZoneOutput, result2 error) {
	fake.deleteCustomAvailabilityZoneMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneStub = nil
	fake.deleteCustomAvailabilityZoneReturns = struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneReturnsOnCall(i int, result1 *rds.DeleteCustomAvailabilityZoneOutput, result2 error) {
	fake.deleteCustomAvailabilityZoneMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneStub = nil
	if fake.deleteCustomAvailabilityZoneReturnsOnCall == nil {
		fake.deleteCustomAvailabilityZoneReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteCustomAvailabilityZoneOutput
			result2 error
		})
	}
	fake.deleteCustomAvailabilityZoneReturnsOnCall[i] = struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneRequest(arg1 *rds.DeleteCustomAvailabilityZoneInput) (*request.Request, *rds.DeleteCustomAvailabilityZoneOutput) {
	fake.deleteCustomAvailabilityZoneRequestMutex.Lock()
	ret, specificReturn := fake.deleteCustomAvailabilityZoneRequestReturnsOnCall[len(fake.deleteCustomAvailabilityZoneRequestArgsForCall)]
	fake.deleteCustomAvailabilityZoneRequestArgsForCall = append(fake.deleteCustomAvailabilityZoneRequestArgsForCall, struct {
		arg1 *rds.DeleteCustomAvailabilityZoneInput
	}{arg1})
	stub := fake.DeleteCustomAvailabilityZoneRequestStub
	fakeReturns := fake.deleteCustomAvailabilityZoneRequestReturns
	fake.recordInvocation("DeleteCustomAvailabilityZoneRequest", []interface{}{arg1})
	fake.deleteCustomAvailabilityZoneRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneRequestCallCount() int {
	fake.deleteCustomAvailabilityZoneRequestMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneRequestMutex.RUnlock()
	return len(fake.deleteCustomAvailabilityZoneRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneRequestCalls(stub func(*rds.DeleteCustomAvailabilityZoneInput) (*request.Request, *rds.DeleteCustomAvailabilityZoneOutput)) {
	fake.deleteCustomAvailabilityZoneRequestMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneRequestMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneRequestArgsForCall(i int) *rds.DeleteCustomAvailabilityZoneInput {
	fake.deleteCustomAvailabilityZoneRequestMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneRequestMutex.RUnlock()
	argsForCall := fake.deleteCustomAvailabilityZoneRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneRequestReturns(result1 *request.Request, result2 *rds.DeleteCustomAvailabilityZoneOutput) {
	fake.deleteCustomAvailabilityZoneRequestMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneRequestMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneRequestStub = nil
	fake.deleteCustomAvailabilityZoneRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteCustomAvailabilityZoneOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteCustomAvailabilityZoneOutput) {
	fake.deleteCustomAvailabilityZoneRequestMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneRequestMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneRequestStub = nil
	if fake.deleteCustomAvailabilityZoneRequestReturnsOnCall == nil {
		fake.deleteCustomAvailabilityZoneRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteCustomAvailabilityZoneOutput
		})
	}
	fake.deleteCustomAvailabilityZoneRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteCustomAvailabilityZoneOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneWithContext(arg1 context.Context, arg2 *rds.DeleteCustomAvailabilityZoneInput, arg3 ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	fake.deleteCustomAvailabilityZoneWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCustomAvailabilityZoneWithContextReturnsOnCall[len(fake.deleteCustomAvailabilityZoneWithContextArgsForCall)]
	fake.deleteCustomAvailabilityZoneWithContextArgsForCall = append(fake.deleteCustomAvailabilityZoneWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteCustomAvailabilityZoneInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCustomAvailabilityZoneWithContextStub
	fakeReturns := fake.deleteCustomAvailabilityZoneWithContextReturns
	fake.recordInvocation("DeleteCustomAvailabilityZoneWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCustomAvailabilityZoneWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneWithContextCallCount() int {
	fake.deleteCustomAvailabilityZoneWithContextMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneWithContextMutex.RUnlock()
	return len(fake.deleteCustomAvailabilityZoneWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneWithContextCalls(stub func(context.Context, *rds.DeleteCustomAvailabilityZoneInput, ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error)) {
	fake.deleteCustomAvailabilityZoneWithContextMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneWithContextMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneWithContextArgsForCall(i int) (context.Context, *rds.DeleteCustomAvailabilityZoneInput, []request.Option) {
	fake.deleteCustomAvailabilityZoneWithContextMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneWithContextMutex.RUnlock()
	argsForCall := fake.deleteCustomAvailabilityZoneWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneWithContextReturns(result1 *rds.DeleteCustomAvailabilityZoneOutput, result2 error) {
	fake.deleteCustomAvailabilityZoneWithContextMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneWithContextMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneWithContextStub = nil
	fake.deleteCustomAvailabilityZoneWithContextReturns = struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteCustomAvailabilityZoneWithContextReturnsOnCall(i int, result1 *rds.DeleteCustomAvailabilityZoneOutput, result2 error) {
	fake.deleteCustomAvailabilityZoneWithContextMutex.Lock()
	defer fake.deleteCustomAvailabilityZoneWithContextMutex.Unlock()
	fake.DeleteCustomAvailabilityZoneWithContextStub = nil
	if fake.deleteCustomAvailabilityZoneWithContextReturnsOnCall == nil {
		fake.deleteCustomAvailabilityZoneWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteCustomAvailabilityZoneOutput
			result2 error
		})
	}
	fake.deleteCustomAvailabilityZoneWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteCustomAvailabilityZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBCluster(arg1 *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
	fake.deleteDBClusterMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterReturnsOnCall[len(fake.deleteDBClusterArgsForCall)]
	fake.deleteDBClusterArgsForCall = append(fake.deleteDBClusterArgsForCall, struct {
		arg1 *rds.DeleteDBClusterInput
	}{arg1})
	stub := fake.DeleteDBClusterStub
	fakeReturns := fake.deleteDBClusterReturns
	fake.recordInvocation("DeleteDBCluster", []interface{}{arg1})
	fake.deleteDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterCallCount() int {
	fake.deleteDBClusterMutex.RLock()
	defer fake.deleteDBClusterMutex.RUnlock()
	return len(fake.deleteDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterCalls(stub func(*rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error)) {
	fake.deleteDBClusterMutex.Lock()
	defer fake.deleteDBClusterMutex.Unlock()
	fake.DeleteDBClusterStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterArgsForCall(i int) *rds.DeleteDBClusterInput {
	fake.deleteDBClusterMutex.RLock()
	defer fake.deleteDBClusterMutex.RUnlock()
	argsForCall := fake.deleteDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterReturns(result1 *rds.DeleteDBClusterOutput, result2 error) {
	fake.deleteDBClusterMutex.Lock()
	defer fake.deleteDBClusterMutex.Unlock()
	fake.DeleteDBClusterStub = nil
	fake.deleteDBClusterReturns = struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterReturnsOnCall(i int, result1 *rds.DeleteDBClusterOutput, result2 error) {
	fake.deleteDBClusterMutex.Lock()
	defer fake.deleteDBClusterMutex.Unlock()
	fake.DeleteDBClusterStub = nil
	if fake.deleteDBClusterReturnsOnCall == nil {
		fake.deleteDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterOutput
			result2 error
		})
	}
	fake.deleteDBClusterReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpoint(arg1 *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
	fake.deleteDBClusterEndpointMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterEndpointReturnsOnCall[len(fake.deleteDBClusterEndpointArgsForCall)]
	fake.deleteDBClusterEndpointArgsForCall = append(fake.deleteDBClusterEndpointArgsForCall, struct {
		arg1 *rds.DeleteDBClusterEndpointInput
	}{arg1})
	stub := fake.DeleteDBClusterEndpointStub
	fakeReturns := fake.deleteDBClusterEndpointReturns
	fake.recordInvocation("DeleteDBClusterEndpoint", []interface{}{arg1})
	fake.deleteDBClusterEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointCallCount() int {
	fake.deleteDBClusterEndpointMutex.RLock()
	defer fake.deleteDBClusterEndpointMutex.RUnlock()
	return len(fake.deleteDBClusterEndpointArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointCalls(stub func(*rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error)) {
	fake.deleteDBClusterEndpointMutex.Lock()
	defer fake.deleteDBClusterEndpointMutex.Unlock()
	fake.DeleteDBClusterEndpointStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointArgsForCall(i int) *rds.DeleteDBClusterEndpointInput {
	fake.deleteDBClusterEndpointMutex.RLock()
	defer fake.deleteDBClusterEndpointMutex.RUnlock()
	argsForCall := fake.deleteDBClusterEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointReturns(result1 *rds.DeleteDBClusterEndpointOutput, result2 error) {
	fake.deleteDBClusterEndpointMutex.Lock()
	defer fake.deleteDBClusterEndpointMutex.Unlock()
	fake.DeleteDBClusterEndpointStub = nil
	fake.deleteDBClusterEndpointReturns = struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointReturnsOnCall(i int, result1 *rds.DeleteDBClusterEndpointOutput, result2 error) {
	fake.deleteDBClusterEndpointMutex.Lock()
	defer fake.deleteDBClusterEndpointMutex.Unlock()
	fake.DeleteDBClusterEndpointStub = nil
	if fake.deleteDBClusterEndpointReturnsOnCall == nil {
		fake.deleteDBClusterEndpointReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterEndpointOutput
			result2 error
		})
	}
	fake.deleteDBClusterEndpointReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointRequest(arg1 *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput) {
	fake.deleteDBClusterEndpointRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterEndpointRequestReturnsOnCall[len(fake.deleteDBClusterEndpointRequestArgsForCall)]
	fake.deleteDBClusterEndpointRequestArgsForCall = append(fake.deleteDBClusterEndpointRequestArgsForCall, struct {
		arg1 *rds.DeleteDBClusterEndpointInput
	}{arg1})
	stub := fake.DeleteDBClusterEndpointRequestStub
	fakeReturns := fake.deleteDBClusterEndpointRequestReturns
	fake.recordInvocation("DeleteDBClusterEndpointRequest", []interface{}{arg1})
	fake.deleteDBClusterEndpointRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointRequestCallCount() int {
	fake.deleteDBClusterEndpointRequestMutex.RLock()
	defer fake.deleteDBClusterEndpointRequestMutex.RUnlock()
	return len(fake.deleteDBClusterEndpointRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointRequestCalls(stub func(*rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput)) {
	fake.deleteDBClusterEndpointRequestMutex.Lock()
	defer fake.deleteDBClusterEndpointRequestMutex.Unlock()
	fake.DeleteDBClusterEndpointRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointRequestArgsForCall(i int) *rds.DeleteDBClusterEndpointInput {
	fake.deleteDBClusterEndpointRequestMutex.RLock()
	defer fake.deleteDBClusterEndpointRequestMutex.RUnlock()
	argsForCall := fake.deleteDBClusterEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointRequestReturns(result1 *request.Request, result2 *rds.DeleteDBClusterEndpointOutput) {
	fake.deleteDBClusterEndpointRequestMutex.Lock()
	defer fake.deleteDBClusterEndpointRequestMutex.Unlock()
	fake.DeleteDBClusterEndpointRequestStub = nil
	fake.deleteDBClusterEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterEndpointOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBClusterEndpointOutput) {
	fake.deleteDBClusterEndpointRequestMutex.Lock()
	defer fake.deleteDBClusterEndpointRequestMutex.Unlock()
	fake.DeleteDBClusterEndpointRequestStub = nil
	if fake.deleteDBClusterEndpointRequestReturnsOnCall == nil {
		fake.deleteDBClusterEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBClusterEndpointOutput
		})
	}
	fake.deleteDBClusterEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterEndpointOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointWithContext(arg1 context.Context, arg2 *rds.DeleteDBClusterEndpointInput, arg3 ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {
	fake.deleteDBClusterEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterEndpointWithContextReturnsOnCall[len(fake.deleteDBClusterEndpointWithContextArgsForCall)]
	fake.deleteDBClusterEndpointWithContextArgsForCall = append(fake.deleteDBClusterEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBClusterEndpointWithContextStub
	fakeReturns := fake.deleteDBClusterEndpointWithContextReturns
	fake.recordInvocation("DeleteDBClusterEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBClusterEndpointWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointWithContextCallCount() int {
	fake.deleteDBClusterEndpointWithContextMutex.RLock()
	defer fake.deleteDBClusterEndpointWithContextMutex.RUnlock()
	return len(fake.deleteDBClusterEndpointWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointWithContextCalls(stub func(context.Context, *rds.DeleteDBClusterEndpointInput, ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error)) {
	fake.deleteDBClusterEndpointWithContextMutex.Lock()
	defer fake.deleteDBClusterEndpointWithContextMutex.Unlock()
	fake.DeleteDBClusterEndpointWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBClusterEndpointInput, []request.Option) {
	fake.deleteDBClusterEndpointWithContextMutex.RLock()
	defer fake.deleteDBClusterEndpointWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBClusterEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointWithContextReturns(result1 *rds.DeleteDBClusterEndpointOutput, result2 error) {
	fake.deleteDBClusterEndpointWithContextMutex.Lock()
	defer fake.deleteDBClusterEndpointWithContextMutex.Unlock()
	fake.DeleteDBClusterEndpointWithContextStub = nil
	fake.deleteDBClusterEndpointWithContextReturns = struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterEndpointWithContextReturnsOnCall(i int, result1 *rds.DeleteDBClusterEndpointOutput, result2 error) {
	fake.deleteDBClusterEndpointWithContextMutex.Lock()
	defer fake.deleteDBClusterEndpointWithContextMutex.Unlock()
	fake.DeleteDBClusterEndpointWithContextStub = nil
	if fake.deleteDBClusterEndpointWithContextReturnsOnCall == nil {
		fake.deleteDBClusterEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterEndpointOutput
			result2 error
		})
	}
	fake.deleteDBClusterEndpointWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroup(arg1 *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	fake.deleteDBClusterParameterGroupMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterParameterGroupReturnsOnCall[len(fake.deleteDBClusterParameterGroupArgsForCall)]
	fake.deleteDBClusterParameterGroupArgsForCall = append(fake.deleteDBClusterParameterGroupArgsForCall, struct {
		arg1 *rds.DeleteDBClusterParameterGroupInput
	}{arg1})
	stub := fake.DeleteDBClusterParameterGroupStub
	fakeReturns := fake.deleteDBClusterParameterGroupReturns
	fake.recordInvocation("DeleteDBClusterParameterGroup", []interface{}{arg1})
	fake.deleteDBClusterParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupCallCount() int {
	fake.deleteDBClusterParameterGroupMutex.RLock()
	defer fake.deleteDBClusterParameterGroupMutex.RUnlock()
	return len(fake.deleteDBClusterParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupCalls(stub func(*rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error)) {
	fake.deleteDBClusterParameterGroupMutex.Lock()
	defer fake.deleteDBClusterParameterGroupMutex.Unlock()
	fake.DeleteDBClusterParameterGroupStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupArgsForCall(i int) *rds.DeleteDBClusterParameterGroupInput {
	fake.deleteDBClusterParameterGroupMutex.RLock()
	defer fake.deleteDBClusterParameterGroupMutex.RUnlock()
	argsForCall := fake.deleteDBClusterParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupReturns(result1 *rds.DeleteDBClusterParameterGroupOutput, result2 error) {
	fake.deleteDBClusterParameterGroupMutex.Lock()
	defer fake.deleteDBClusterParameterGroupMutex.Unlock()
	fake.DeleteDBClusterParameterGroupStub = nil
	fake.deleteDBClusterParameterGroupReturns = struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupReturnsOnCall(i int, result1 *rds.DeleteDBClusterParameterGroupOutput, result2 error) {
	fake.deleteDBClusterParameterGroupMutex.Lock()
	defer fake.deleteDBClusterParameterGroupMutex.Unlock()
	fake.DeleteDBClusterParameterGroupStub = nil
	if fake.deleteDBClusterParameterGroupReturnsOnCall == nil {
		fake.deleteDBClusterParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterParameterGroupOutput
			result2 error
		})
	}
	fake.deleteDBClusterParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupRequest(arg1 *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput) {
	fake.deleteDBClusterParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterParameterGroupRequestReturnsOnCall[len(fake.deleteDBClusterParameterGroupRequestArgsForCall)]
	fake.deleteDBClusterParameterGroupRequestArgsForCall = append(fake.deleteDBClusterParameterGroupRequestArgsForCall, struct {
		arg1 *rds.DeleteDBClusterParameterGroupInput
	}{arg1})
	stub := fake.DeleteDBClusterParameterGroupRequestStub
	fakeReturns := fake.deleteDBClusterParameterGroupRequestReturns
	fake.recordInvocation("DeleteDBClusterParameterGroupRequest", []interface{}{arg1})
	fake.deleteDBClusterParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupRequestCallCount() int {
	fake.deleteDBClusterParameterGroupRequestMutex.RLock()
	defer fake.deleteDBClusterParameterGroupRequestMutex.RUnlock()
	return len(fake.deleteDBClusterParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupRequestCalls(stub func(*rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput)) {
	fake.deleteDBClusterParameterGroupRequestMutex.Lock()
	defer fake.deleteDBClusterParameterGroupRequestMutex.Unlock()
	fake.DeleteDBClusterParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupRequestArgsForCall(i int) *rds.DeleteDBClusterParameterGroupInput {
	fake.deleteDBClusterParameterGroupRequestMutex.RLock()
	defer fake.deleteDBClusterParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteDBClusterParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupRequestReturns(result1 *request.Request, result2 *rds.DeleteDBClusterParameterGroupOutput) {
	fake.deleteDBClusterParameterGroupRequestMutex.Lock()
	defer fake.deleteDBClusterParameterGroupRequestMutex.Unlock()
	fake.DeleteDBClusterParameterGroupRequestStub = nil
	fake.deleteDBClusterParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBClusterParameterGroupOutput) {
	fake.deleteDBClusterParameterGroupRequestMutex.Lock()
	defer fake.deleteDBClusterParameterGroupRequestMutex.Unlock()
	fake.DeleteDBClusterParameterGroupRequestStub = nil
	if fake.deleteDBClusterParameterGroupRequestReturnsOnCall == nil {
		fake.deleteDBClusterParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBClusterParameterGroupOutput
		})
	}
	fake.deleteDBClusterParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupWithContext(arg1 context.Context, arg2 *rds.DeleteDBClusterParameterGroupInput, arg3 ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	fake.deleteDBClusterParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterParameterGroupWithContextReturnsOnCall[len(fake.deleteDBClusterParameterGroupWithContextArgsForCall)]
	fake.deleteDBClusterParameterGroupWithContextArgsForCall = append(fake.deleteDBClusterParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBClusterParameterGroupWithContextStub
	fakeReturns := fake.deleteDBClusterParameterGroupWithContextReturns
	fake.recordInvocation("DeleteDBClusterParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBClusterParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupWithContextCallCount() int {
	fake.deleteDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.deleteDBClusterParameterGroupWithContextMutex.RUnlock()
	return len(fake.deleteDBClusterParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupWithContextCalls(stub func(context.Context, *rds.DeleteDBClusterParameterGroupInput, ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error)) {
	fake.deleteDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.deleteDBClusterParameterGroupWithContextMutex.Unlock()
	fake.DeleteDBClusterParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBClusterParameterGroupInput, []request.Option) {
	fake.deleteDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.deleteDBClusterParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBClusterParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupWithContextReturns(result1 *rds.DeleteDBClusterParameterGroupOutput, result2 error) {
	fake.deleteDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.deleteDBClusterParameterGroupWithContextMutex.Unlock()
	fake.DeleteDBClusterParameterGroupWithContextStub = nil
	fake.deleteDBClusterParameterGroupWithContextReturns = struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterParameterGroupWithContextReturnsOnCall(i int, result1 *rds.DeleteDBClusterParameterGroupOutput, result2 error) {
	fake.deleteDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.deleteDBClusterParameterGroupWithContextMutex.Unlock()
	fake.DeleteDBClusterParameterGroupWithContextStub = nil
	if fake.deleteDBClusterParameterGroupWithContextReturnsOnCall == nil {
		fake.deleteDBClusterParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterParameterGroupOutput
			result2 error
		})
	}
	fake.deleteDBClusterParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterRequest(arg1 *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput) {
	fake.deleteDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterRequestReturnsOnCall[len(fake.deleteDBClusterRequestArgsForCall)]
	fake.deleteDBClusterRequestArgsForCall = append(fake.deleteDBClusterRequestArgsForCall, struct {
		arg1 *rds.DeleteDBClusterInput
	}{arg1})
	stub := fake.DeleteDBClusterRequestStub
	fakeReturns := fake.deleteDBClusterRequestReturns
	fake.recordInvocation("DeleteDBClusterRequest", []interface{}{arg1})
	fake.deleteDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterRequestCallCount() int {
	fake.deleteDBClusterRequestMutex.RLock()
	defer fake.deleteDBClusterRequestMutex.RUnlock()
	return len(fake.deleteDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterRequestCalls(stub func(*rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput)) {
	fake.deleteDBClusterRequestMutex.Lock()
	defer fake.deleteDBClusterRequestMutex.Unlock()
	fake.DeleteDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterRequestArgsForCall(i int) *rds.DeleteDBClusterInput {
	fake.deleteDBClusterRequestMutex.RLock()
	defer fake.deleteDBClusterRequestMutex.RUnlock()
	argsForCall := fake.deleteDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterRequestReturns(result1 *request.Request, result2 *rds.DeleteDBClusterOutput) {
	fake.deleteDBClusterRequestMutex.Lock()
	defer fake.deleteDBClusterRequestMutex.Unlock()
	fake.DeleteDBClusterRequestStub = nil
	fake.deleteDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBClusterOutput) {
	fake.deleteDBClusterRequestMutex.Lock()
	defer fake.deleteDBClusterRequestMutex.Unlock()
	fake.DeleteDBClusterRequestStub = nil
	if fake.deleteDBClusterRequestReturnsOnCall == nil {
		fake.deleteDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBClusterOutput
		})
	}
	fake.deleteDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshot(arg1 *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
	fake.deleteDBClusterSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterSnapshotReturnsOnCall[len(fake.deleteDBClusterSnapshotArgsForCall)]
	fake.deleteDBClusterSnapshotArgsForCall = append(fake.deleteDBClusterSnapshotArgsForCall, struct {
		arg1 *rds.DeleteDBClusterSnapshotInput
	}{arg1})
	stub := fake.DeleteDBClusterSnapshotStub
	fakeReturns := fake.deleteDBClusterSnapshotReturns
	fake.recordInvocation("DeleteDBClusterSnapshot", []interface{}{arg1})
	fake.deleteDBClusterSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotCallCount() int {
	fake.deleteDBClusterSnapshotMutex.RLock()
	defer fake.deleteDBClusterSnapshotMutex.RUnlock()
	return len(fake.deleteDBClusterSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotCalls(stub func(*rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error)) {
	fake.deleteDBClusterSnapshotMutex.Lock()
	defer fake.deleteDBClusterSnapshotMutex.Unlock()
	fake.DeleteDBClusterSnapshotStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotArgsForCall(i int) *rds.DeleteDBClusterSnapshotInput {
	fake.deleteDBClusterSnapshotMutex.RLock()
	defer fake.deleteDBClusterSnapshotMutex.RUnlock()
	argsForCall := fake.deleteDBClusterSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotReturns(result1 *rds.DeleteDBClusterSnapshotOutput, result2 error) {
	fake.deleteDBClusterSnapshotMutex.Lock()
	defer fake.deleteDBClusterSnapshotMutex.Unlock()
	fake.DeleteDBClusterSnapshotStub = nil
	fake.deleteDBClusterSnapshotReturns = struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotReturnsOnCall(i int, result1 *rds.DeleteDBClusterSnapshotOutput, result2 error) {
	fake.deleteDBClusterSnapshotMutex.Lock()
	defer fake.deleteDBClusterSnapshotMutex.Unlock()
	fake.DeleteDBClusterSnapshotStub = nil
	if fake.deleteDBClusterSnapshotReturnsOnCall == nil {
		fake.deleteDBClusterSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterSnapshotOutput
			result2 error
		})
	}
	fake.deleteDBClusterSnapshotReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotRequest(arg1 *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput) {
	fake.deleteDBClusterSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterSnapshotRequestReturnsOnCall[len(fake.deleteDBClusterSnapshotRequestArgsForCall)]
	fake.deleteDBClusterSnapshotRequestArgsForCall = append(fake.deleteDBClusterSnapshotRequestArgsForCall, struct {
		arg1 *rds.DeleteDBClusterSnapshotInput
	}{arg1})
	stub := fake.DeleteDBClusterSnapshotRequestStub
	fakeReturns := fake.deleteDBClusterSnapshotRequestReturns
	fake.recordInvocation("DeleteDBClusterSnapshotRequest", []interface{}{arg1})
	fake.deleteDBClusterSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotRequestCallCount() int {
	fake.deleteDBClusterSnapshotRequestMutex.RLock()
	defer fake.deleteDBClusterSnapshotRequestMutex.RUnlock()
	return len(fake.deleteDBClusterSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotRequestCalls(stub func(*rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput)) {
	fake.deleteDBClusterSnapshotRequestMutex.Lock()
	defer fake.deleteDBClusterSnapshotRequestMutex.Unlock()
	fake.DeleteDBClusterSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotRequestArgsForCall(i int) *rds.DeleteDBClusterSnapshotInput {
	fake.deleteDBClusterSnapshotRequestMutex.RLock()
	defer fake.deleteDBClusterSnapshotRequestMutex.RUnlock()
	argsForCall := fake.deleteDBClusterSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotRequestReturns(result1 *request.Request, result2 *rds.DeleteDBClusterSnapshotOutput) {
	fake.deleteDBClusterSnapshotRequestMutex.Lock()
	defer fake.deleteDBClusterSnapshotRequestMutex.Unlock()
	fake.DeleteDBClusterSnapshotRequestStub = nil
	fake.deleteDBClusterSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBClusterSnapshotOutput) {
	fake.deleteDBClusterSnapshotRequestMutex.Lock()
	defer fake.deleteDBClusterSnapshotRequestMutex.Unlock()
	fake.DeleteDBClusterSnapshotRequestStub = nil
	if fake.deleteDBClusterSnapshotRequestReturnsOnCall == nil {
		fake.deleteDBClusterSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBClusterSnapshotOutput
		})
	}
	fake.deleteDBClusterSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBClusterSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotWithContext(arg1 context.Context, arg2 *rds.DeleteDBClusterSnapshotInput, arg3 ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {
	fake.deleteDBClusterSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterSnapshotWithContextReturnsOnCall[len(fake.deleteDBClusterSnapshotWithContextArgsForCall)]
	fake.deleteDBClusterSnapshotWithContextArgsForCall = append(fake.deleteDBClusterSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBClusterSnapshotWithContextStub
	fakeReturns := fake.deleteDBClusterSnapshotWithContextReturns
	fake.recordInvocation("DeleteDBClusterSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBClusterSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotWithContextCallCount() int {
	fake.deleteDBClusterSnapshotWithContextMutex.RLock()
	defer fake.deleteDBClusterSnapshotWithContextMutex.RUnlock()
	return len(fake.deleteDBClusterSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotWithContextCalls(stub func(context.Context, *rds.DeleteDBClusterSnapshotInput, ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error)) {
	fake.deleteDBClusterSnapshotWithContextMutex.Lock()
	defer fake.deleteDBClusterSnapshotWithContextMutex.Unlock()
	fake.DeleteDBClusterSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBClusterSnapshotInput, []request.Option) {
	fake.deleteDBClusterSnapshotWithContextMutex.RLock()
	defer fake.deleteDBClusterSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBClusterSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotWithContextReturns(result1 *rds.DeleteDBClusterSnapshotOutput, result2 error) {
	fake.deleteDBClusterSnapshotWithContextMutex.Lock()
	defer fake.deleteDBClusterSnapshotWithContextMutex.Unlock()
	fake.DeleteDBClusterSnapshotWithContextStub = nil
	fake.deleteDBClusterSnapshotWithContextReturns = struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterSnapshotWithContextReturnsOnCall(i int, result1 *rds.DeleteDBClusterSnapshotOutput, result2 error) {
	fake.deleteDBClusterSnapshotWithContextMutex.Lock()
	defer fake.deleteDBClusterSnapshotWithContextMutex.Unlock()
	fake.DeleteDBClusterSnapshotWithContextStub = nil
	if fake.deleteDBClusterSnapshotWithContextReturnsOnCall == nil {
		fake.deleteDBClusterSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterSnapshotOutput
			result2 error
		})
	}
	fake.deleteDBClusterSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterWithContext(arg1 context.Context, arg2 *rds.DeleteDBClusterInput, arg3 ...request.Option) (*rds.DeleteDBClusterOutput, error) {
	fake.deleteDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBClusterWithContextReturnsOnCall[len(fake.deleteDBClusterWithContextArgsForCall)]
	fake.deleteDBClusterWithContextArgsForCall = append(fake.deleteDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBClusterWithContextStub
	fakeReturns := fake.deleteDBClusterWithContextReturns
	fake.recordInvocation("DeleteDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBClusterWithContextCallCount() int {
	fake.deleteDBClusterWithContextMutex.RLock()
	defer fake.deleteDBClusterWithContextMutex.RUnlock()
	return len(fake.deleteDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBClusterWithContextCalls(stub func(context.Context, *rds.DeleteDBClusterInput, ...request.Option) (*rds.DeleteDBClusterOutput, error)) {
	fake.deleteDBClusterWithContextMutex.Lock()
	defer fake.deleteDBClusterWithContextMutex.Unlock()
	fake.DeleteDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBClusterWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBClusterInput, []request.Option) {
	fake.deleteDBClusterWithContextMutex.RLock()
	defer fake.deleteDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBClusterWithContextReturns(result1 *rds.DeleteDBClusterOutput, result2 error) {
	fake.deleteDBClusterWithContextMutex.Lock()
	defer fake.deleteDBClusterWithContextMutex.Unlock()
	fake.DeleteDBClusterWithContextStub = nil
	fake.deleteDBClusterWithContextReturns = struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBClusterWithContextReturnsOnCall(i int, result1 *rds.DeleteDBClusterOutput, result2 error) {
	fake.deleteDBClusterWithContextMutex.Lock()
	defer fake.deleteDBClusterWithContextMutex.Unlock()
	fake.DeleteDBClusterWithContextStub = nil
	if fake.deleteDBClusterWithContextReturnsOnCall == nil {
		fake.deleteDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBClusterOutput
			result2 error
		})
	}
	fake.deleteDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstance(arg1 *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
	fake.deleteDBInstanceMutex.Lock()
	ret, specificReturn := fake.deleteDBInstanceReturnsOnCall[len(fake.deleteDBInstanceArgsForCall)]
	fake.deleteDBInstanceArgsForCall = append(fake.deleteDBInstanceArgsForCall, struct {
		arg1 *rds.DeleteDBInstanceInput
	}{arg1})
	stub := fake.DeleteDBInstanceStub
	fakeReturns := fake.deleteDBInstanceReturns
	fake.recordInvocation("DeleteDBInstance", []interface{}{arg1})
	fake.deleteDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBInstanceCallCount() int {
	fake.deleteDBInstanceMutex.RLock()
	defer fake.deleteDBInstanceMutex.RUnlock()
	return len(fake.deleteDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBInstanceCalls(stub func(*rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error)) {
	fake.deleteDBInstanceMutex.Lock()
	defer fake.deleteDBInstanceMutex.Unlock()
	fake.DeleteDBInstanceStub = stub
}

func (fake *FakeRDSAPI) DeleteDBInstanceArgsForCall(i int) *rds.DeleteDBInstanceInput {
	fake.deleteDBInstanceMutex.RLock()
	defer fake.deleteDBInstanceMutex.RUnlock()
	argsForCall := fake.deleteDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBInstanceReturns(result1 *rds.DeleteDBInstanceOutput, result2 error) {
	fake.deleteDBInstanceMutex.Lock()
	defer fake.deleteDBInstanceMutex.Unlock()
	fake.DeleteDBInstanceStub = nil
	fake.deleteDBInstanceReturns = struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceReturnsOnCall(i int, result1 *rds.DeleteDBInstanceOutput, result2 error) {
	fake.deleteDBInstanceMutex.Lock()
	defer fake.deleteDBInstanceMutex.Unlock()
	fake.DeleteDBInstanceStub = nil
	if fake.deleteDBInstanceReturnsOnCall == nil {
		fake.deleteDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBInstanceOutput
			result2 error
		})
	}
	fake.deleteDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackup(arg1 *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	fake.deleteDBInstanceAutomatedBackupMutex.Lock()
	ret, specificReturn := fake.deleteDBInstanceAutomatedBackupReturnsOnCall[len(fake.deleteDBInstanceAutomatedBackupArgsForCall)]
	fake.deleteDBInstanceAutomatedBackupArgsForCall = append(fake.deleteDBInstanceAutomatedBackupArgsForCall, struct {
		arg1 *rds.DeleteDBInstanceAutomatedBackupInput
	}{arg1})
	stub := fake.DeleteDBInstanceAutomatedBackupStub
	fakeReturns := fake.deleteDBInstanceAutomatedBackupReturns
	fake.recordInvocation("DeleteDBInstanceAutomatedBackup", []interface{}{arg1})
	fake.deleteDBInstanceAutomatedBackupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupCallCount() int {
	fake.deleteDBInstanceAutomatedBackupMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupMutex.RUnlock()
	return len(fake.deleteDBInstanceAutomatedBackupArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupCalls(stub func(*rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)) {
	fake.deleteDBInstanceAutomatedBackupMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupStub = stub
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupArgsForCall(i int) *rds.DeleteDBInstanceAutomatedBackupInput {
	fake.deleteDBInstanceAutomatedBackupMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupMutex.RUnlock()
	argsForCall := fake.deleteDBInstanceAutomatedBackupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupReturns(result1 *rds.DeleteDBInstanceAutomatedBackupOutput, result2 error) {
	fake.deleteDBInstanceAutomatedBackupMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupStub = nil
	fake.deleteDBInstanceAutomatedBackupReturns = struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupReturnsOnCall(i int, result1 *rds.DeleteDBInstanceAutomatedBackupOutput, result2 error) {
	fake.deleteDBInstanceAutomatedBackupMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupStub = nil
	if fake.deleteDBInstanceAutomatedBackupReturnsOnCall == nil {
		fake.deleteDBInstanceAutomatedBackupReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBInstanceAutomatedBackupOutput
			result2 error
		})
	}
	fake.deleteDBInstanceAutomatedBackupReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupRequest(arg1 *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput) {
	fake.deleteDBInstanceAutomatedBackupRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBInstanceAutomatedBackupRequestReturnsOnCall[len(fake.deleteDBInstanceAutomatedBackupRequestArgsForCall)]
	fake.deleteDBInstanceAutomatedBackupRequestArgsForCall = append(fake.deleteDBInstanceAutomatedBackupRequestArgsForCall, struct {
		arg1 *rds.DeleteDBInstanceAutomatedBackupInput
	}{arg1})
	stub := fake.DeleteDBInstanceAutomatedBackupRequestStub
	fakeReturns := fake.deleteDBInstanceAutomatedBackupRequestReturns
	fake.recordInvocation("DeleteDBInstanceAutomatedBackupRequest", []interface{}{arg1})
	fake.deleteDBInstanceAutomatedBackupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupRequestCallCount() int {
	fake.deleteDBInstanceAutomatedBackupRequestMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupRequestMutex.RUnlock()
	return len(fake.deleteDBInstanceAutomatedBackupRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupRequestCalls(stub func(*rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput)) {
	fake.deleteDBInstanceAutomatedBackupRequestMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupRequestMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupRequestArgsForCall(i int) *rds.DeleteDBInstanceAutomatedBackupInput {
	fake.deleteDBInstanceAutomatedBackupRequestMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupRequestMutex.RUnlock()
	argsForCall := fake.deleteDBInstanceAutomatedBackupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupRequestReturns(result1 *request.Request, result2 *rds.DeleteDBInstanceAutomatedBackupOutput) {
	fake.deleteDBInstanceAutomatedBackupRequestMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupRequestMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupRequestStub = nil
	fake.deleteDBInstanceAutomatedBackupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceAutomatedBackupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBInstanceAutomatedBackupOutput) {
	fake.deleteDBInstanceAutomatedBackupRequestMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupRequestMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupRequestStub = nil
	if fake.deleteDBInstanceAutomatedBackupRequestReturnsOnCall == nil {
		fake.deleteDBInstanceAutomatedBackupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBInstanceAutomatedBackupOutput
		})
	}
	fake.deleteDBInstanceAutomatedBackupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceAutomatedBackupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupWithContext(arg1 context.Context, arg2 *rds.DeleteDBInstanceAutomatedBackupInput, arg3 ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBInstanceAutomatedBackupWithContextReturnsOnCall[len(fake.deleteDBInstanceAutomatedBackupWithContextArgsForCall)]
	fake.deleteDBInstanceAutomatedBackupWithContextArgsForCall = append(fake.deleteDBInstanceAutomatedBackupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBInstanceAutomatedBackupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBInstanceAutomatedBackupWithContextStub
	fakeReturns := fake.deleteDBInstanceAutomatedBackupWithContextReturns
	fake.recordInvocation("DeleteDBInstanceAutomatedBackupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupWithContextCallCount() int {
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupWithContextMutex.RUnlock()
	return len(fake.deleteDBInstanceAutomatedBackupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupWithContextCalls(stub func(context.Context, *rds.DeleteDBInstanceAutomatedBackupInput, ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)) {
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupWithContextMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBInstanceAutomatedBackupInput, []request.Option) {
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBInstanceAutomatedBackupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupWithContextReturns(result1 *rds.DeleteDBInstanceAutomatedBackupOutput, result2 error) {
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupWithContextMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupWithContextStub = nil
	fake.deleteDBInstanceAutomatedBackupWithContextReturns = struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceAutomatedBackupWithContextReturnsOnCall(i int, result1 *rds.DeleteDBInstanceAutomatedBackupOutput, result2 error) {
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.Lock()
	defer fake.deleteDBInstanceAutomatedBackupWithContextMutex.Unlock()
	fake.DeleteDBInstanceAutomatedBackupWithContextStub = nil
	if fake.deleteDBInstanceAutomatedBackupWithContextReturnsOnCall == nil {
		fake.deleteDBInstanceAutomatedBackupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBInstanceAutomatedBackupOutput
			result2 error
		})
	}
	fake.deleteDBInstanceAutomatedBackupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBInstanceAutomatedBackupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceRequest(arg1 *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput) {
	fake.deleteDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBInstanceRequestReturnsOnCall[len(fake.deleteDBInstanceRequestArgsForCall)]
	fake.deleteDBInstanceRequestArgsForCall = append(fake.deleteDBInstanceRequestArgsForCall, struct {
		arg1 *rds.DeleteDBInstanceInput
	}{arg1})
	stub := fake.DeleteDBInstanceRequestStub
	fakeReturns := fake.deleteDBInstanceRequestReturns
	fake.recordInvocation("DeleteDBInstanceRequest", []interface{}{arg1})
	fake.deleteDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBInstanceRequestCallCount() int {
	fake.deleteDBInstanceRequestMutex.RLock()
	defer fake.deleteDBInstanceRequestMutex.RUnlock()
	return len(fake.deleteDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBInstanceRequestCalls(stub func(*rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput)) {
	fake.deleteDBInstanceRequestMutex.Lock()
	defer fake.deleteDBInstanceRequestMutex.Unlock()
	fake.DeleteDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBInstanceRequestArgsForCall(i int) *rds.DeleteDBInstanceInput {
	fake.deleteDBInstanceRequestMutex.RLock()
	defer fake.deleteDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.deleteDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBInstanceRequestReturns(result1 *request.Request, result2 *rds.DeleteDBInstanceOutput) {
	fake.deleteDBInstanceRequestMutex.Lock()
	defer fake.deleteDBInstanceRequestMutex.Unlock()
	fake.DeleteDBInstanceRequestStub = nil
	fake.deleteDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBInstanceOutput) {
	fake.deleteDBInstanceRequestMutex.Lock()
	defer fake.deleteDBInstanceRequestMutex.Unlock()
	fake.DeleteDBInstanceRequestStub = nil
	if fake.deleteDBInstanceRequestReturnsOnCall == nil {
		fake.deleteDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBInstanceOutput
		})
	}
	fake.deleteDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceWithContext(arg1 context.Context, arg2 *rds.DeleteDBInstanceInput, arg3 ...request.Option) (*rds.DeleteDBInstanceOutput, error) {
	fake.deleteDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBInstanceWithContextReturnsOnCall[len(fake.deleteDBInstanceWithContextArgsForCall)]
	fake.deleteDBInstanceWithContextArgsForCall = append(fake.deleteDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBInstanceWithContextStub
	fakeReturns := fake.deleteDBInstanceWithContextReturns
	fake.recordInvocation("DeleteDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBInstanceWithContextCallCount() int {
	fake.deleteDBInstanceWithContextMutex.RLock()
	defer fake.deleteDBInstanceWithContextMutex.RUnlock()
	return len(fake.deleteDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBInstanceWithContextCalls(stub func(context.Context, *rds.DeleteDBInstanceInput, ...request.Option) (*rds.DeleteDBInstanceOutput, error)) {
	fake.deleteDBInstanceWithContextMutex.Lock()
	defer fake.deleteDBInstanceWithContextMutex.Unlock()
	fake.DeleteDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBInstanceInput, []request.Option) {
	fake.deleteDBInstanceWithContextMutex.RLock()
	defer fake.deleteDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBInstanceWithContextReturns(result1 *rds.DeleteDBInstanceOutput, result2 error) {
	fake.deleteDBInstanceWithContextMutex.Lock()
	defer fake.deleteDBInstanceWithContextMutex.Unlock()
	fake.DeleteDBInstanceWithContextStub = nil
	fake.deleteDBInstanceWithContextReturns = struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBInstanceWithContextReturnsOnCall(i int, result1 *rds.DeleteDBInstanceOutput, result2 error) {
	fake.deleteDBInstanceWithContextMutex.Lock()
	defer fake.deleteDBInstanceWithContextMutex.Unlock()
	fake.DeleteDBInstanceWithContextStub = nil
	if fake.deleteDBInstanceWithContextReturnsOnCall == nil {
		fake.deleteDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBInstanceOutput
			result2 error
		})
	}
	fake.deleteDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBParameterGroup(arg1 *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
	fake.deleteDBParameterGroupMutex.Lock()
	ret, specificReturn := fake.deleteDBParameterGroupReturnsOnCall[len(fake.deleteDBParameterGroupArgsForCall)]
	fake.deleteDBParameterGroupArgsForCall = append(fake.deleteDBParameterGroupArgsForCall, struct {
		arg1 *rds.DeleteDBParameterGroupInput
	}{arg1})
	stub := fake.DeleteDBParameterGroupStub
	fakeReturns := fake.deleteDBParameterGroupReturns
	fake.recordInvocation("DeleteDBParameterGroup", []interface{}{arg1})
	fake.deleteDBParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupCallCount() int {
	fake.deleteDBParameterGroupMutex.RLock()
	defer fake.deleteDBParameterGroupMutex.RUnlock()
	return len(fake.deleteDBParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupCalls(stub func(*rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error)) {
	fake.deleteDBParameterGroupMutex.Lock()
	defer fake.deleteDBParameterGroupMutex.Unlock()
	fake.DeleteDBParameterGroupStub = stub
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupArgsForCall(i int) *rds.DeleteDBParameterGroupInput {
	fake.deleteDBParameterGroupMutex.RLock()
	defer fake.deleteDBParameterGroupMutex.RUnlock()
	argsForCall := fake.deleteDBParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupReturns(result1 *rds.DeleteDBParameterGroupOutput, result2 error) {
	fake.deleteDBParameterGroupMutex.Lock()
	defer fake.deleteDBParameterGroupMutex.Unlock()
	fake.DeleteDBParameterGroupStub = nil
	fake.deleteDBParameterGroupReturns = struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupReturnsOnCall(i int, result1 *rds.DeleteDBParameterGroupOutput, result2 error) {
	fake.deleteDBParameterGroupMutex.Lock()
	defer fake.deleteDBParameterGroupMutex.Unlock()
	fake.DeleteDBParameterGroupStub = nil
	if fake.deleteDBParameterGroupReturnsOnCall == nil {
		fake.deleteDBParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBParameterGroupOutput
			result2 error
		})
	}
	fake.deleteDBParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupRequest(arg1 *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput) {
	fake.deleteDBParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBParameterGroupRequestReturnsOnCall[len(fake.deleteDBParameterGroupRequestArgsForCall)]
	fake.deleteDBParameterGroupRequestArgsForCall = append(fake.deleteDBParameterGroupRequestArgsForCall, struct {
		arg1 *rds.DeleteDBParameterGroupInput
	}{arg1})
	stub := fake.DeleteDBParameterGroupRequestStub
	fakeReturns := fake.deleteDBParameterGroupRequestReturns
	fake.recordInvocation("DeleteDBParameterGroupRequest", []interface{}{arg1})
	fake.deleteDBParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupRequestCallCount() int {
	fake.deleteDBParameterGroupRequestMutex.RLock()
	defer fake.deleteDBParameterGroupRequestMutex.RUnlock()
	return len(fake.deleteDBParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupRequestCalls(stub func(*rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput)) {
	fake.deleteDBParameterGroupRequestMutex.Lock()
	defer fake.deleteDBParameterGroupRequestMutex.Unlock()
	fake.DeleteDBParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupRequestArgsForCall(i int) *rds.DeleteDBParameterGroupInput {
	fake.deleteDBParameterGroupRequestMutex.RLock()
	defer fake.deleteDBParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteDBParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupRequestReturns(result1 *request.Request, result2 *rds.DeleteDBParameterGroupOutput) {
	fake.deleteDBParameterGroupRequestMutex.Lock()
	defer fake.deleteDBParameterGroupRequestMutex.Unlock()
	fake.DeleteDBParameterGroupRequestStub = nil
	fake.deleteDBParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBParameterGroupOutput) {
	fake.deleteDBParameterGroupRequestMutex.Lock()
	defer fake.deleteDBParameterGroupRequestMutex.Unlock()
	fake.DeleteDBParameterGroupRequestStub = nil
	if fake.deleteDBParameterGroupRequestReturnsOnCall == nil {
		fake.deleteDBParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBParameterGroupOutput
		})
	}
	fake.deleteDBParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupWithContext(arg1 context.Context, arg2 *rds.DeleteDBParameterGroupInput, arg3 ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {
	fake.deleteDBParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBParameterGroupWithContextReturnsOnCall[len(fake.deleteDBParameterGroupWithContextArgsForCall)]
	fake.deleteDBParameterGroupWithContextArgsForCall = append(fake.deleteDBParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBParameterGroupWithContextStub
	fakeReturns := fake.deleteDBParameterGroupWithContextReturns
	fake.recordInvocation("DeleteDBParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupWithContextCallCount() int {
	fake.deleteDBParameterGroupWithContextMutex.RLock()
	defer fake.deleteDBParameterGroupWithContextMutex.RUnlock()
	return len(fake.deleteDBParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupWithContextCalls(stub func(context.Context, *rds.DeleteDBParameterGroupInput, ...request.Option) (*rds.DeleteDBParameterGroupOutput, error)) {
	fake.deleteDBParameterGroupWithContextMutex.Lock()
	defer fake.deleteDBParameterGroupWithContextMutex.Unlock()
	fake.DeleteDBParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBParameterGroupInput, []request.Option) {
	fake.deleteDBParameterGroupWithContextMutex.RLock()
	defer fake.deleteDBParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupWithContextReturns(result1 *rds.DeleteDBParameterGroupOutput, result2 error) {
	fake.deleteDBParameterGroupWithContextMutex.Lock()
	defer fake.deleteDBParameterGroupWithContextMutex.Unlock()
	fake.DeleteDBParameterGroupWithContextStub = nil
	fake.deleteDBParameterGroupWithContextReturns = struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBParameterGroupWithContextReturnsOnCall(i int, result1 *rds.DeleteDBParameterGroupOutput, result2 error) {
	fake.deleteDBParameterGroupWithContextMutex.Lock()
	defer fake.deleteDBParameterGroupWithContextMutex.Unlock()
	fake.DeleteDBParameterGroupWithContextStub = nil
	if fake.deleteDBParameterGroupWithContextReturnsOnCall == nil {
		fake.deleteDBParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBParameterGroupOutput
			result2 error
		})
	}
	fake.deleteDBParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBProxy(arg1 *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
	fake.deleteDBProxyMutex.Lock()
	ret, specificReturn := fake.deleteDBProxyReturnsOnCall[len(fake.deleteDBProxyArgsForCall)]
	fake.deleteDBProxyArgsForCall = append(fake.deleteDBProxyArgsForCall, struct {
		arg1 *rds.DeleteDBProxyInput
	}{arg1})
	stub := fake.DeleteDBProxyStub
	fakeReturns := fake.deleteDBProxyReturns
	fake.recordInvocation("DeleteDBProxy", []interface{}{arg1})
	fake.deleteDBProxyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBProxyCallCount() int {
	fake.deleteDBProxyMutex.RLock()
	defer fake.deleteDBProxyMutex.RUnlock()
	return len(fake.deleteDBProxyArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBProxyCalls(stub func(*rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error)) {
	fake.deleteDBProxyMutex.Lock()
	defer fake.deleteDBProxyMutex.Unlock()
	fake.DeleteDBProxyStub = stub
}

func (fake *FakeRDSAPI) DeleteDBProxyArgsForCall(i int) *rds.DeleteDBProxyInput {
	fake.deleteDBProxyMutex.RLock()
	defer fake.deleteDBProxyMutex.RUnlock()
	argsForCall := fake.deleteDBProxyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBProxyReturns(result1 *rds.DeleteDBProxyOutput, result2 error) {
	fake.deleteDBProxyMutex.Lock()
	defer fake.deleteDBProxyMutex.Unlock()
	fake.DeleteDBProxyStub = nil
	fake.deleteDBProxyReturns = struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBProxyReturnsOnCall(i int, result1 *rds.DeleteDBProxyOutput, result2 error) {
	fake.deleteDBProxyMutex.Lock()
	defer fake.deleteDBProxyMutex.Unlock()
	fake.DeleteDBProxyStub = nil
	if fake.deleteDBProxyReturnsOnCall == nil {
		fake.deleteDBProxyReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBProxyOutput
			result2 error
		})
	}
	fake.deleteDBProxyReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBProxyRequest(arg1 *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput) {
	fake.deleteDBProxyRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBProxyRequestReturnsOnCall[len(fake.deleteDBProxyRequestArgsForCall)]
	fake.deleteDBProxyRequestArgsForCall = append(fake.deleteDBProxyRequestArgsForCall, struct {
		arg1 *rds.DeleteDBProxyInput
	}{arg1})
	stub := fake.DeleteDBProxyRequestStub
	fakeReturns := fake.deleteDBProxyRequestReturns
	fake.recordInvocation("DeleteDBProxyRequest", []interface{}{arg1})
	fake.deleteDBProxyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBProxyRequestCallCount() int {
	fake.deleteDBProxyRequestMutex.RLock()
	defer fake.deleteDBProxyRequestMutex.RUnlock()
	return len(fake.deleteDBProxyRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBProxyRequestCalls(stub func(*rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput)) {
	fake.deleteDBProxyRequestMutex.Lock()
	defer fake.deleteDBProxyRequestMutex.Unlock()
	fake.DeleteDBProxyRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBProxyRequestArgsForCall(i int) *rds.DeleteDBProxyInput {
	fake.deleteDBProxyRequestMutex.RLock()
	defer fake.deleteDBProxyRequestMutex.RUnlock()
	argsForCall := fake.deleteDBProxyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBProxyRequestReturns(result1 *request.Request, result2 *rds.DeleteDBProxyOutput) {
	fake.deleteDBProxyRequestMutex.Lock()
	defer fake.deleteDBProxyRequestMutex.Unlock()
	fake.DeleteDBProxyRequestStub = nil
	fake.deleteDBProxyRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBProxyOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBProxyRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBProxyOutput) {
	fake.deleteDBProxyRequestMutex.Lock()
	defer fake.deleteDBProxyRequestMutex.Unlock()
	fake.DeleteDBProxyRequestStub = nil
	if fake.deleteDBProxyRequestReturnsOnCall == nil {
		fake.deleteDBProxyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBProxyOutput
		})
	}
	fake.deleteDBProxyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBProxyOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBProxyWithContext(arg1 context.Context, arg2 *rds.DeleteDBProxyInput, arg3 ...request.Option) (*rds.DeleteDBProxyOutput, error) {
	fake.deleteDBProxyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBProxyWithContextReturnsOnCall[len(fake.deleteDBProxyWithContextArgsForCall)]
	fake.deleteDBProxyWithContextArgsForCall = append(fake.deleteDBProxyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBProxyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBProxyWithContextStub
	fakeReturns := fake.deleteDBProxyWithContextReturns
	fake.recordInvocation("DeleteDBProxyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBProxyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBProxyWithContextCallCount() int {
	fake.deleteDBProxyWithContextMutex.RLock()
	defer fake.deleteDBProxyWithContextMutex.RUnlock()
	return len(fake.deleteDBProxyWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBProxyWithContextCalls(stub func(context.Context, *rds.DeleteDBProxyInput, ...request.Option) (*rds.DeleteDBProxyOutput, error)) {
	fake.deleteDBProxyWithContextMutex.Lock()
	defer fake.deleteDBProxyWithContextMutex.Unlock()
	fake.DeleteDBProxyWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBProxyWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBProxyInput, []request.Option) {
	fake.deleteDBProxyWithContextMutex.RLock()
	defer fake.deleteDBProxyWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBProxyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBProxyWithContextReturns(result1 *rds.DeleteDBProxyOutput, result2 error) {
	fake.deleteDBProxyWithContextMutex.Lock()
	defer fake.deleteDBProxyWithContextMutex.Unlock()
	fake.DeleteDBProxyWithContextStub = nil
	fake.deleteDBProxyWithContextReturns = struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBProxyWithContextReturnsOnCall(i int, result1 *rds.DeleteDBProxyOutput, result2 error) {
	fake.deleteDBProxyWithContextMutex.Lock()
	defer fake.deleteDBProxyWithContextMutex.Unlock()
	fake.DeleteDBProxyWithContextStub = nil
	if fake.deleteDBProxyWithContextReturnsOnCall == nil {
		fake.deleteDBProxyWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBProxyOutput
			result2 error
		})
	}
	fake.deleteDBProxyWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroup(arg1 *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
	fake.deleteDBSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteDBSecurityGroupReturnsOnCall[len(fake.deleteDBSecurityGroupArgsForCall)]
	fake.deleteDBSecurityGroupArgsForCall = append(fake.deleteDBSecurityGroupArgsForCall, struct {
		arg1 *rds.DeleteDBSecurityGroupInput
	}{arg1})
	stub := fake.DeleteDBSecurityGroupStub
	fakeReturns := fake.deleteDBSecurityGroupReturns
	fake.recordInvocation("DeleteDBSecurityGroup", []interface{}{arg1})
	fake.deleteDBSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupCallCount() int {
	fake.deleteDBSecurityGroupMutex.RLock()
	defer fake.deleteDBSecurityGroupMutex.RUnlock()
	return len(fake.deleteDBSecurityGroupArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupCalls(stub func(*rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error)) {
	fake.deleteDBSecurityGroupMutex.Lock()
	defer fake.deleteDBSecurityGroupMutex.Unlock()
	fake.DeleteDBSecurityGroupStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupArgsForCall(i int) *rds.DeleteDBSecurityGroupInput {
	fake.deleteDBSecurityGroupMutex.RLock()
	defer fake.deleteDBSecurityGroupMutex.RUnlock()
	argsForCall := fake.deleteDBSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupReturns(result1 *rds.DeleteDBSecurityGroupOutput, result2 error) {
	fake.deleteDBSecurityGroupMutex.Lock()
	defer fake.deleteDBSecurityGroupMutex.Unlock()
	fake.DeleteDBSecurityGroupStub = nil
	fake.deleteDBSecurityGroupReturns = struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupReturnsOnCall(i int, result1 *rds.DeleteDBSecurityGroupOutput, result2 error) {
	fake.deleteDBSecurityGroupMutex.Lock()
	defer fake.deleteDBSecurityGroupMutex.Unlock()
	fake.DeleteDBSecurityGroupStub = nil
	if fake.deleteDBSecurityGroupReturnsOnCall == nil {
		fake.deleteDBSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteDBSecurityGroupReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupRequest(arg1 *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput) {
	fake.deleteDBSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBSecurityGroupRequestReturnsOnCall[len(fake.deleteDBSecurityGroupRequestArgsForCall)]
	fake.deleteDBSecurityGroupRequestArgsForCall = append(fake.deleteDBSecurityGroupRequestArgsForCall, struct {
		arg1 *rds.DeleteDBSecurityGroupInput
	}{arg1})
	stub := fake.DeleteDBSecurityGroupRequestStub
	fakeReturns := fake.deleteDBSecurityGroupRequestReturns
	fake.recordInvocation("DeleteDBSecurityGroupRequest", []interface{}{arg1})
	fake.deleteDBSecurityGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupRequestCallCount() int {
	fake.deleteDBSecurityGroupRequestMutex.RLock()
	defer fake.deleteDBSecurityGroupRequestMutex.RUnlock()
	return len(fake.deleteDBSecurityGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupRequestCalls(stub func(*rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput)) {
	fake.deleteDBSecurityGroupRequestMutex.Lock()
	defer fake.deleteDBSecurityGroupRequestMutex.Unlock()
	fake.DeleteDBSecurityGroupRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupRequestArgsForCall(i int) *rds.DeleteDBSecurityGroupInput {
	fake.deleteDBSecurityGroupRequestMutex.RLock()
	defer fake.deleteDBSecurityGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteDBSecurityGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupRequestReturns(result1 *request.Request, result2 *rds.DeleteDBSecurityGroupOutput) {
	fake.deleteDBSecurityGroupRequestMutex.Lock()
	defer fake.deleteDBSecurityGroupRequestMutex.Unlock()
	fake.DeleteDBSecurityGroupRequestStub = nil
	fake.deleteDBSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBSecurityGroupOutput) {
	fake.deleteDBSecurityGroupRequestMutex.Lock()
	defer fake.deleteDBSecurityGroupRequestMutex.Unlock()
	fake.DeleteDBSecurityGroupRequestStub = nil
	if fake.deleteDBSecurityGroupRequestReturnsOnCall == nil {
		fake.deleteDBSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBSecurityGroupOutput
		})
	}
	fake.deleteDBSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupWithContext(arg1 context.Context, arg2 *rds.DeleteDBSecurityGroupInput, arg3 ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {
	fake.deleteDBSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBSecurityGroupWithContextReturnsOnCall[len(fake.deleteDBSecurityGroupWithContextArgsForCall)]
	fake.deleteDBSecurityGroupWithContextArgsForCall = append(fake.deleteDBSecurityGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBSecurityGroupWithContextStub
	fakeReturns := fake.deleteDBSecurityGroupWithContextReturns
	fake.recordInvocation("DeleteDBSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBSecurityGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupWithContextCallCount() int {
	fake.deleteDBSecurityGroupWithContextMutex.RLock()
	defer fake.deleteDBSecurityGroupWithContextMutex.RUnlock()
	return len(fake.deleteDBSecurityGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupWithContextCalls(stub func(context.Context, *rds.DeleteDBSecurityGroupInput, ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error)) {
	fake.deleteDBSecurityGroupWithContextMutex.Lock()
	defer fake.deleteDBSecurityGroupWithContextMutex.Unlock()
	fake.DeleteDBSecurityGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBSecurityGroupInput, []request.Option) {
	fake.deleteDBSecurityGroupWithContextMutex.RLock()
	defer fake.deleteDBSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupWithContextReturns(result1 *rds.DeleteDBSecurityGroupOutput, result2 error) {
	fake.deleteDBSecurityGroupWithContextMutex.Lock()
	defer fake.deleteDBSecurityGroupWithContextMutex.Unlock()
	fake.DeleteDBSecurityGroupWithContextStub = nil
	fake.deleteDBSecurityGroupWithContextReturns = struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSecurityGroupWithContextReturnsOnCall(i int, result1 *rds.DeleteDBSecurityGroupOutput, result2 error) {
	fake.deleteDBSecurityGroupWithContextMutex.Lock()
	defer fake.deleteDBSecurityGroupWithContextMutex.Unlock()
	fake.DeleteDBSecurityGroupWithContextStub = nil
	if fake.deleteDBSecurityGroupWithContextReturnsOnCall == nil {
		fake.deleteDBSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteDBSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSnapshot(arg1 *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
	fake.deleteDBSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteDBSnapshotReturnsOnCall[len(fake.deleteDBSnapshotArgsForCall)]
	fake.deleteDBSnapshotArgsForCall = append(fake.deleteDBSnapshotArgsForCall, struct {
		arg1 *rds.DeleteDBSnapshotInput
	}{arg1})
	stub := fake.DeleteDBSnapshotStub
	fakeReturns := fake.deleteDBSnapshotReturns
	fake.recordInvocation("DeleteDBSnapshot", []interface{}{arg1})
	fake.deleteDBSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSnapshotCallCount() int {
	fake.deleteDBSnapshotMutex.RLock()
	defer fake.deleteDBSnapshotMutex.RUnlock()
	return len(fake.deleteDBSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSnapshotCalls(stub func(*rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error)) {
	fake.deleteDBSnapshotMutex.Lock()
	defer fake.deleteDBSnapshotMutex.Unlock()
	fake.DeleteDBSnapshotStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSnapshotArgsForCall(i int) *rds.DeleteDBSnapshotInput {
	fake.deleteDBSnapshotMutex.RLock()
	defer fake.deleteDBSnapshotMutex.RUnlock()
	argsForCall := fake.deleteDBSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBSnapshotReturns(result1 *rds.DeleteDBSnapshotOutput, result2 error) {
	fake.deleteDBSnapshotMutex.Lock()
	defer fake.deleteDBSnapshotMutex.Unlock()
	fake.DeleteDBSnapshotStub = nil
	fake.deleteDBSnapshotReturns = struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSnapshotReturnsOnCall(i int, result1 *rds.DeleteDBSnapshotOutput, result2 error) {
	fake.deleteDBSnapshotMutex.Lock()
	defer fake.deleteDBSnapshotMutex.Unlock()
	fake.DeleteDBSnapshotStub = nil
	if fake.deleteDBSnapshotReturnsOnCall == nil {
		fake.deleteDBSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBSnapshotOutput
			result2 error
		})
	}
	fake.deleteDBSnapshotReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSnapshotRequest(arg1 *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput) {
	fake.deleteDBSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBSnapshotRequestReturnsOnCall[len(fake.deleteDBSnapshotRequestArgsForCall)]
	fake.deleteDBSnapshotRequestArgsForCall = append(fake.deleteDBSnapshotRequestArgsForCall, struct {
		arg1 *rds.DeleteDBSnapshotInput
	}{arg1})
	stub := fake.DeleteDBSnapshotRequestStub
	fakeReturns := fake.deleteDBSnapshotRequestReturns
	fake.recordInvocation("DeleteDBSnapshotRequest", []interface{}{arg1})
	fake.deleteDBSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSnapshotRequestCallCount() int {
	fake.deleteDBSnapshotRequestMutex.RLock()
	defer fake.deleteDBSnapshotRequestMutex.RUnlock()
	return len(fake.deleteDBSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSnapshotRequestCalls(stub func(*rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput)) {
	fake.deleteDBSnapshotRequestMutex.Lock()
	defer fake.deleteDBSnapshotRequestMutex.Unlock()
	fake.DeleteDBSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSnapshotRequestArgsForCall(i int) *rds.DeleteDBSnapshotInput {
	fake.deleteDBSnapshotRequestMutex.RLock()
	defer fake.deleteDBSnapshotRequestMutex.RUnlock()
	argsForCall := fake.deleteDBSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBSnapshotRequestReturns(result1 *request.Request, result2 *rds.DeleteDBSnapshotOutput) {
	fake.deleteDBSnapshotRequestMutex.Lock()
	defer fake.deleteDBSnapshotRequestMutex.Unlock()
	fake.DeleteDBSnapshotRequestStub = nil
	fake.deleteDBSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBSnapshotOutput) {
	fake.deleteDBSnapshotRequestMutex.Lock()
	defer fake.deleteDBSnapshotRequestMutex.Unlock()
	fake.DeleteDBSnapshotRequestStub = nil
	if fake.deleteDBSnapshotRequestReturnsOnCall == nil {
		fake.deleteDBSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBSnapshotOutput
		})
	}
	fake.deleteDBSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSnapshotWithContext(arg1 context.Context, arg2 *rds.DeleteDBSnapshotInput, arg3 ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {
	fake.deleteDBSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBSnapshotWithContextReturnsOnCall[len(fake.deleteDBSnapshotWithContextArgsForCall)]
	fake.deleteDBSnapshotWithContextArgsForCall = append(fake.deleteDBSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBSnapshotWithContextStub
	fakeReturns := fake.deleteDBSnapshotWithContextReturns
	fake.recordInvocation("DeleteDBSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSnapshotWithContextCallCount() int {
	fake.deleteDBSnapshotWithContextMutex.RLock()
	defer fake.deleteDBSnapshotWithContextMutex.RUnlock()
	return len(fake.deleteDBSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSnapshotWithContextCalls(stub func(context.Context, *rds.DeleteDBSnapshotInput, ...request.Option) (*rds.DeleteDBSnapshotOutput, error)) {
	fake.deleteDBSnapshotWithContextMutex.Lock()
	defer fake.deleteDBSnapshotWithContextMutex.Unlock()
	fake.DeleteDBSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSnapshotWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBSnapshotInput, []request.Option) {
	fake.deleteDBSnapshotWithContextMutex.RLock()
	defer fake.deleteDBSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBSnapshotWithContextReturns(result1 *rds.DeleteDBSnapshotOutput, result2 error) {
	fake.deleteDBSnapshotWithContextMutex.Lock()
	defer fake.deleteDBSnapshotWithContextMutex.Unlock()
	fake.DeleteDBSnapshotWithContextStub = nil
	fake.deleteDBSnapshotWithContextReturns = struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSnapshotWithContextReturnsOnCall(i int, result1 *rds.DeleteDBSnapshotOutput, result2 error) {
	fake.deleteDBSnapshotWithContextMutex.Lock()
	defer fake.deleteDBSnapshotWithContextMutex.Unlock()
	fake.DeleteDBSnapshotWithContextStub = nil
	if fake.deleteDBSnapshotWithContextReturnsOnCall == nil {
		fake.deleteDBSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBSnapshotOutput
			result2 error
		})
	}
	fake.deleteDBSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroup(arg1 *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
	fake.deleteDBSubnetGroupMutex.Lock()
	ret, specificReturn := fake.deleteDBSubnetGroupReturnsOnCall[len(fake.deleteDBSubnetGroupArgsForCall)]
	fake.deleteDBSubnetGroupArgsForCall = append(fake.deleteDBSubnetGroupArgsForCall, struct {
		arg1 *rds.DeleteDBSubnetGroupInput
	}{arg1})
	stub := fake.DeleteDBSubnetGroupStub
	fakeReturns := fake.deleteDBSubnetGroupReturns
	fake.recordInvocation("DeleteDBSubnetGroup", []interface{}{arg1})
	fake.deleteDBSubnetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupCallCount() int {
	fake.deleteDBSubnetGroupMutex.RLock()
	defer fake.deleteDBSubnetGroupMutex.RUnlock()
	return len(fake.deleteDBSubnetGroupArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupCalls(stub func(*rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error)) {
	fake.deleteDBSubnetGroupMutex.Lock()
	defer fake.deleteDBSubnetGroupMutex.Unlock()
	fake.DeleteDBSubnetGroupStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupArgsForCall(i int) *rds.DeleteDBSubnetGroupInput {
	fake.deleteDBSubnetGroupMutex.RLock()
	defer fake.deleteDBSubnetGroupMutex.RUnlock()
	argsForCall := fake.deleteDBSubnetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupReturns(result1 *rds.DeleteDBSubnetGroupOutput, result2 error) {
	fake.deleteDBSubnetGroupMutex.Lock()
	defer fake.deleteDBSubnetGroupMutex.Unlock()
	fake.DeleteDBSubnetGroupStub = nil
	fake.deleteDBSubnetGroupReturns = struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupReturnsOnCall(i int, result1 *rds.DeleteDBSubnetGroupOutput, result2 error) {
	fake.deleteDBSubnetGroupMutex.Lock()
	defer fake.deleteDBSubnetGroupMutex.Unlock()
	fake.DeleteDBSubnetGroupStub = nil
	if fake.deleteDBSubnetGroupReturnsOnCall == nil {
		fake.deleteDBSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBSubnetGroupOutput
			result2 error
		})
	}
	fake.deleteDBSubnetGroupReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupRequest(arg1 *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput) {
	fake.deleteDBSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteDBSubnetGroupRequestReturnsOnCall[len(fake.deleteDBSubnetGroupRequestArgsForCall)]
	fake.deleteDBSubnetGroupRequestArgsForCall = append(fake.deleteDBSubnetGroupRequestArgsForCall, struct {
		arg1 *rds.DeleteDBSubnetGroupInput
	}{arg1})
	stub := fake.DeleteDBSubnetGroupRequestStub
	fakeReturns := fake.deleteDBSubnetGroupRequestReturns
	fake.recordInvocation("DeleteDBSubnetGroupRequest", []interface{}{arg1})
	fake.deleteDBSubnetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupRequestCallCount() int {
	fake.deleteDBSubnetGroupRequestMutex.RLock()
	defer fake.deleteDBSubnetGroupRequestMutex.RUnlock()
	return len(fake.deleteDBSubnetGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupRequestCalls(stub func(*rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput)) {
	fake.deleteDBSubnetGroupRequestMutex.Lock()
	defer fake.deleteDBSubnetGroupRequestMutex.Unlock()
	fake.DeleteDBSubnetGroupRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupRequestArgsForCall(i int) *rds.DeleteDBSubnetGroupInput {
	fake.deleteDBSubnetGroupRequestMutex.RLock()
	defer fake.deleteDBSubnetGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteDBSubnetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupRequestReturns(result1 *request.Request, result2 *rds.DeleteDBSubnetGroupOutput) {
	fake.deleteDBSubnetGroupRequestMutex.Lock()
	defer fake.deleteDBSubnetGroupRequestMutex.Unlock()
	fake.DeleteDBSubnetGroupRequestStub = nil
	fake.deleteDBSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteDBSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteDBSubnetGroupOutput) {
	fake.deleteDBSubnetGroupRequestMutex.Lock()
	defer fake.deleteDBSubnetGroupRequestMutex.Unlock()
	fake.DeleteDBSubnetGroupRequestStub = nil
	if fake.deleteDBSubnetGroupRequestReturnsOnCall == nil {
		fake.deleteDBSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteDBSubnetGroupOutput
		})
	}
	fake.deleteDBSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteDBSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupWithContext(arg1 context.Context, arg2 *rds.DeleteDBSubnetGroupInput, arg3 ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {
	fake.deleteDBSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDBSubnetGroupWithContextReturnsOnCall[len(fake.deleteDBSubnetGroupWithContextArgsForCall)]
	fake.deleteDBSubnetGroupWithContextArgsForCall = append(fake.deleteDBSubnetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteDBSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDBSubnetGroupWithContextStub
	fakeReturns := fake.deleteDBSubnetGroupWithContextReturns
	fake.recordInvocation("DeleteDBSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDBSubnetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupWithContextCallCount() int {
	fake.deleteDBSubnetGroupWithContextMutex.RLock()
	defer fake.deleteDBSubnetGroupWithContextMutex.RUnlock()
	return len(fake.deleteDBSubnetGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupWithContextCalls(stub func(context.Context, *rds.DeleteDBSubnetGroupInput, ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error)) {
	fake.deleteDBSubnetGroupWithContextMutex.Lock()
	defer fake.deleteDBSubnetGroupWithContextMutex.Unlock()
	fake.DeleteDBSubnetGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupWithContextArgsForCall(i int) (context.Context, *rds.DeleteDBSubnetGroupInput, []request.Option) {
	fake.deleteDBSubnetGroupWithContextMutex.RLock()
	defer fake.deleteDBSubnetGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteDBSubnetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupWithContextReturns(result1 *rds.DeleteDBSubnetGroupOutput, result2 error) {
	fake.deleteDBSubnetGroupWithContextMutex.Lock()
	defer fake.deleteDBSubnetGroupWithContextMutex.Unlock()
	fake.DeleteDBSubnetGroupWithContextStub = nil
	fake.deleteDBSubnetGroupWithContextReturns = struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteDBSubnetGroupWithContextReturnsOnCall(i int, result1 *rds.DeleteDBSubnetGroupOutput, result2 error) {
	fake.deleteDBSubnetGroupWithContextMutex.Lock()
	defer fake.deleteDBSubnetGroupWithContextMutex.Unlock()
	fake.DeleteDBSubnetGroupWithContextStub = nil
	if fake.deleteDBSubnetGroupWithContextReturnsOnCall == nil {
		fake.deleteDBSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteDBSubnetGroupOutput
			result2 error
		})
	}
	fake.deleteDBSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteEventSubscription(arg1 *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
	fake.deleteEventSubscriptionMutex.Lock()
	ret, specificReturn := fake.deleteEventSubscriptionReturnsOnCall[len(fake.deleteEventSubscriptionArgsForCall)]
	fake.deleteEventSubscriptionArgsForCall = append(fake.deleteEventSubscriptionArgsForCall, struct {
		arg1 *rds.DeleteEventSubscriptionInput
	}{arg1})
	stub := fake.DeleteEventSubscriptionStub
	fakeReturns := fake.deleteEventSubscriptionReturns
	fake.recordInvocation("DeleteEventSubscription", []interface{}{arg1})
	fake.deleteEventSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionCallCount() int {
	fake.deleteEventSubscriptionMutex.RLock()
	defer fake.deleteEventSubscriptionMutex.RUnlock()
	return len(fake.deleteEventSubscriptionArgsForCall)
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionCalls(stub func(*rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error)) {
	fake.deleteEventSubscriptionMutex.Lock()
	defer fake.deleteEventSubscriptionMutex.Unlock()
	fake.DeleteEventSubscriptionStub = stub
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionArgsForCall(i int) *rds.DeleteEventSubscriptionInput {
	fake.deleteEventSubscriptionMutex.RLock()
	defer fake.deleteEventSubscriptionMutex.RUnlock()
	argsForCall := fake.deleteEventSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionReturns(result1 *rds.DeleteEventSubscriptionOutput, result2 error) {
	fake.deleteEventSubscriptionMutex.Lock()
	defer fake.deleteEventSubscriptionMutex.Unlock()
	fake.DeleteEventSubscriptionStub = nil
	fake.deleteEventSubscriptionReturns = struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionReturnsOnCall(i int, result1 *rds.DeleteEventSubscriptionOutput, result2 error) {
	fake.deleteEventSubscriptionMutex.Lock()
	defer fake.deleteEventSubscriptionMutex.Unlock()
	fake.DeleteEventSubscriptionStub = nil
	if fake.deleteEventSubscriptionReturnsOnCall == nil {
		fake.deleteEventSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteEventSubscriptionOutput
			result2 error
		})
	}
	fake.deleteEventSubscriptionReturnsOnCall[i] = struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionRequest(arg1 *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput) {
	fake.deleteEventSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.deleteEventSubscriptionRequestReturnsOnCall[len(fake.deleteEventSubscriptionRequestArgsForCall)]
	fake.deleteEventSubscriptionRequestArgsForCall = append(fake.deleteEventSubscriptionRequestArgsForCall, struct {
		arg1 *rds.DeleteEventSubscriptionInput
	}{arg1})
	stub := fake.DeleteEventSubscriptionRequestStub
	fakeReturns := fake.deleteEventSubscriptionRequestReturns
	fake.recordInvocation("DeleteEventSubscriptionRequest", []interface{}{arg1})
	fake.deleteEventSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionRequestCallCount() int {
	fake.deleteEventSubscriptionRequestMutex.RLock()
	defer fake.deleteEventSubscriptionRequestMutex.RUnlock()
	return len(fake.deleteEventSubscriptionRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionRequestCalls(stub func(*rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput)) {
	fake.deleteEventSubscriptionRequestMutex.Lock()
	defer fake.deleteEventSubscriptionRequestMutex.Unlock()
	fake.DeleteEventSubscriptionRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionRequestArgsForCall(i int) *rds.DeleteEventSubscriptionInput {
	fake.deleteEventSubscriptionRequestMutex.RLock()
	defer fake.deleteEventSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.deleteEventSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionRequestReturns(result1 *request.Request, result2 *rds.DeleteEventSubscriptionOutput) {
	fake.deleteEventSubscriptionRequestMutex.Lock()
	defer fake.deleteEventSubscriptionRequestMutex.Unlock()
	fake.DeleteEventSubscriptionRequestStub = nil
	fake.deleteEventSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteEventSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteEventSubscriptionOutput) {
	fake.deleteEventSubscriptionRequestMutex.Lock()
	defer fake.deleteEventSubscriptionRequestMutex.Unlock()
	fake.DeleteEventSubscriptionRequestStub = nil
	if fake.deleteEventSubscriptionRequestReturnsOnCall == nil {
		fake.deleteEventSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteEventSubscriptionOutput
		})
	}
	fake.deleteEventSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteEventSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionWithContext(arg1 context.Context, arg2 *rds.DeleteEventSubscriptionInput, arg3 ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {
	fake.deleteEventSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteEventSubscriptionWithContextReturnsOnCall[len(fake.deleteEventSubscriptionWithContextArgsForCall)]
	fake.deleteEventSubscriptionWithContextArgsForCall = append(fake.deleteEventSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteEventSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteEventSubscriptionWithContextStub
	fakeReturns := fake.deleteEventSubscriptionWithContextReturns
	fake.recordInvocation("DeleteEventSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteEventSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionWithContextCallCount() int {
	fake.deleteEventSubscriptionWithContextMutex.RLock()
	defer fake.deleteEventSubscriptionWithContextMutex.RUnlock()
	return len(fake.deleteEventSubscriptionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionWithContextCalls(stub func(context.Context, *rds.DeleteEventSubscriptionInput, ...request.Option) (*rds.DeleteEventSubscriptionOutput, error)) {
	fake.deleteEventSubscriptionWithContextMutex.Lock()
	defer fake.deleteEventSubscriptionWithContextMutex.Unlock()
	fake.DeleteEventSubscriptionWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionWithContextArgsForCall(i int) (context.Context, *rds.DeleteEventSubscriptionInput, []request.Option) {
	fake.deleteEventSubscriptionWithContextMutex.RLock()
	defer fake.deleteEventSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.deleteEventSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionWithContextReturns(result1 *rds.DeleteEventSubscriptionOutput, result2 error) {
	fake.deleteEventSubscriptionWithContextMutex.Lock()
	defer fake.deleteEventSubscriptionWithContextMutex.Unlock()
	fake.DeleteEventSubscriptionWithContextStub = nil
	fake.deleteEventSubscriptionWithContextReturns = struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteEventSubscriptionWithContextReturnsOnCall(i int, result1 *rds.DeleteEventSubscriptionOutput, result2 error) {
	fake.deleteEventSubscriptionWithContextMutex.Lock()
	defer fake.deleteEventSubscriptionWithContextMutex.Unlock()
	fake.DeleteEventSubscriptionWithContextStub = nil
	if fake.deleteEventSubscriptionWithContextReturnsOnCall == nil {
		fake.deleteEventSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteEventSubscriptionOutput
			result2 error
		})
	}
	fake.deleteEventSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteGlobalCluster(arg1 *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
	fake.deleteGlobalClusterMutex.Lock()
	ret, specificReturn := fake.deleteGlobalClusterReturnsOnCall[len(fake.deleteGlobalClusterArgsForCall)]
	fake.deleteGlobalClusterArgsForCall = append(fake.deleteGlobalClusterArgsForCall, struct {
		arg1 *rds.DeleteGlobalClusterInput
	}{arg1})
	stub := fake.DeleteGlobalClusterStub
	fakeReturns := fake.deleteGlobalClusterReturns
	fake.recordInvocation("DeleteGlobalCluster", []interface{}{arg1})
	fake.deleteGlobalClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteGlobalClusterCallCount() int {
	fake.deleteGlobalClusterMutex.RLock()
	defer fake.deleteGlobalClusterMutex.RUnlock()
	return len(fake.deleteGlobalClusterArgsForCall)
}

func (fake *FakeRDSAPI) DeleteGlobalClusterCalls(stub func(*rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error)) {
	fake.deleteGlobalClusterMutex.Lock()
	defer fake.deleteGlobalClusterMutex.Unlock()
	fake.DeleteGlobalClusterStub = stub
}

func (fake *FakeRDSAPI) DeleteGlobalClusterArgsForCall(i int) *rds.DeleteGlobalClusterInput {
	fake.deleteGlobalClusterMutex.RLock()
	defer fake.deleteGlobalClusterMutex.RUnlock()
	argsForCall := fake.deleteGlobalClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteGlobalClusterReturns(result1 *rds.DeleteGlobalClusterOutput, result2 error) {
	fake.deleteGlobalClusterMutex.Lock()
	defer fake.deleteGlobalClusterMutex.Unlock()
	fake.DeleteGlobalClusterStub = nil
	fake.deleteGlobalClusterReturns = struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteGlobalClusterReturnsOnCall(i int, result1 *rds.DeleteGlobalClusterOutput, result2 error) {
	fake.deleteGlobalClusterMutex.Lock()
	defer fake.deleteGlobalClusterMutex.Unlock()
	fake.DeleteGlobalClusterStub = nil
	if fake.deleteGlobalClusterReturnsOnCall == nil {
		fake.deleteGlobalClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteGlobalClusterOutput
			result2 error
		})
	}
	fake.deleteGlobalClusterReturnsOnCall[i] = struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteGlobalClusterRequest(arg1 *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput) {
	fake.deleteGlobalClusterRequestMutex.Lock()
	ret, specificReturn := fake.deleteGlobalClusterRequestReturnsOnCall[len(fake.deleteGlobalClusterRequestArgsForCall)]
	fake.deleteGlobalClusterRequestArgsForCall = append(fake.deleteGlobalClusterRequestArgsForCall, struct {
		arg1 *rds.DeleteGlobalClusterInput
	}{arg1})
	stub := fake.DeleteGlobalClusterRequestStub
	fakeReturns := fake.deleteGlobalClusterRequestReturns
	fake.recordInvocation("DeleteGlobalClusterRequest", []interface{}{arg1})
	fake.deleteGlobalClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteGlobalClusterRequestCallCount() int {
	fake.deleteGlobalClusterRequestMutex.RLock()
	defer fake.deleteGlobalClusterRequestMutex.RUnlock()
	return len(fake.deleteGlobalClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteGlobalClusterRequestCalls(stub func(*rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput)) {
	fake.deleteGlobalClusterRequestMutex.Lock()
	defer fake.deleteGlobalClusterRequestMutex.Unlock()
	fake.DeleteGlobalClusterRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteGlobalClusterRequestArgsForCall(i int) *rds.DeleteGlobalClusterInput {
	fake.deleteGlobalClusterRequestMutex.RLock()
	defer fake.deleteGlobalClusterRequestMutex.RUnlock()
	argsForCall := fake.deleteGlobalClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteGlobalClusterRequestReturns(result1 *request.Request, result2 *rds.DeleteGlobalClusterOutput) {
	fake.deleteGlobalClusterRequestMutex.Lock()
	defer fake.deleteGlobalClusterRequestMutex.Unlock()
	fake.DeleteGlobalClusterRequestStub = nil
	fake.deleteGlobalClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteGlobalClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteGlobalClusterOutput) {
	fake.deleteGlobalClusterRequestMutex.Lock()
	defer fake.deleteGlobalClusterRequestMutex.Unlock()
	fake.DeleteGlobalClusterRequestStub = nil
	if fake.deleteGlobalClusterRequestReturnsOnCall == nil {
		fake.deleteGlobalClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteGlobalClusterOutput
		})
	}
	fake.deleteGlobalClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteGlobalClusterWithContext(arg1 context.Context, arg2 *rds.DeleteGlobalClusterInput, arg3 ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {
	fake.deleteGlobalClusterWithContextMutex.Lock()
	ret, specificReturn := fake.deleteGlobalClusterWithContextReturnsOnCall[len(fake.deleteGlobalClusterWithContextArgsForCall)]
	fake.deleteGlobalClusterWithContextArgsForCall = append(fake.deleteGlobalClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteGlobalClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteGlobalClusterWithContextStub
	fakeReturns := fake.deleteGlobalClusterWithContextReturns
	fake.recordInvocation("DeleteGlobalClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteGlobalClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteGlobalClusterWithContextCallCount() int {
	fake.deleteGlobalClusterWithContextMutex.RLock()
	defer fake.deleteGlobalClusterWithContextMutex.RUnlock()
	return len(fake.deleteGlobalClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteGlobalClusterWithContextCalls(stub func(context.Context, *rds.DeleteGlobalClusterInput, ...request.Option) (*rds.DeleteGlobalClusterOutput, error)) {
	fake.deleteGlobalClusterWithContextMutex.Lock()
	defer fake.deleteGlobalClusterWithContextMutex.Unlock()
	fake.DeleteGlobalClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteGlobalClusterWithContextArgsForCall(i int) (context.Context, *rds.DeleteGlobalClusterInput, []request.Option) {
	fake.deleteGlobalClusterWithContextMutex.RLock()
	defer fake.deleteGlobalClusterWithContextMutex.RUnlock()
	argsForCall := fake.deleteGlobalClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteGlobalClusterWithContextReturns(result1 *rds.DeleteGlobalClusterOutput, result2 error) {
	fake.deleteGlobalClusterWithContextMutex.Lock()
	defer fake.deleteGlobalClusterWithContextMutex.Unlock()
	fake.DeleteGlobalClusterWithContextStub = nil
	fake.deleteGlobalClusterWithContextReturns = struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteGlobalClusterWithContextReturnsOnCall(i int, result1 *rds.DeleteGlobalClusterOutput, result2 error) {
	fake.deleteGlobalClusterWithContextMutex.Lock()
	defer fake.deleteGlobalClusterWithContextMutex.Unlock()
	fake.DeleteGlobalClusterWithContextStub = nil
	if fake.deleteGlobalClusterWithContextReturnsOnCall == nil {
		fake.deleteGlobalClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteGlobalClusterOutput
			result2 error
		})
	}
	fake.deleteGlobalClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteInstallationMedia(arg1 *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error) {
	fake.deleteInstallationMediaMutex.Lock()
	ret, specificReturn := fake.deleteInstallationMediaReturnsOnCall[len(fake.deleteInstallationMediaArgsForCall)]
	fake.deleteInstallationMediaArgsForCall = append(fake.deleteInstallationMediaArgsForCall, struct {
		arg1 *rds.DeleteInstallationMediaInput
	}{arg1})
	stub := fake.DeleteInstallationMediaStub
	fakeReturns := fake.deleteInstallationMediaReturns
	fake.recordInvocation("DeleteInstallationMedia", []interface{}{arg1})
	fake.deleteInstallationMediaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteInstallationMediaCallCount() int {
	fake.deleteInstallationMediaMutex.RLock()
	defer fake.deleteInstallationMediaMutex.RUnlock()
	return len(fake.deleteInstallationMediaArgsForCall)
}

func (fake *FakeRDSAPI) DeleteInstallationMediaCalls(stub func(*rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error)) {
	fake.deleteInstallationMediaMutex.Lock()
	defer fake.deleteInstallationMediaMutex.Unlock()
	fake.DeleteInstallationMediaStub = stub
}

func (fake *FakeRDSAPI) DeleteInstallationMediaArgsForCall(i int) *rds.DeleteInstallationMediaInput {
	fake.deleteInstallationMediaMutex.RLock()
	defer fake.deleteInstallationMediaMutex.RUnlock()
	argsForCall := fake.deleteInstallationMediaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteInstallationMediaReturns(result1 *rds.DeleteInstallationMediaOutput, result2 error) {
	fake.deleteInstallationMediaMutex.Lock()
	defer fake.deleteInstallationMediaMutex.Unlock()
	fake.DeleteInstallationMediaStub = nil
	fake.deleteInstallationMediaReturns = struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteInstallationMediaReturnsOnCall(i int, result1 *rds.DeleteInstallationMediaOutput, result2 error) {
	fake.deleteInstallationMediaMutex.Lock()
	defer fake.deleteInstallationMediaMutex.Unlock()
	fake.DeleteInstallationMediaStub = nil
	if fake.deleteInstallationMediaReturnsOnCall == nil {
		fake.deleteInstallationMediaReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteInstallationMediaOutput
			result2 error
		})
	}
	fake.deleteInstallationMediaReturnsOnCall[i] = struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteInstallationMediaRequest(arg1 *rds.DeleteInstallationMediaInput) (*request.Request, *rds.DeleteInstallationMediaOutput) {
	fake.deleteInstallationMediaRequestMutex.Lock()
	ret, specificReturn := fake.deleteInstallationMediaRequestReturnsOnCall[len(fake.deleteInstallationMediaRequestArgsForCall)]
	fake.deleteInstallationMediaRequestArgsForCall = append(fake.deleteInstallationMediaRequestArgsForCall, struct {
		arg1 *rds.DeleteInstallationMediaInput
	}{arg1})
	stub := fake.DeleteInstallationMediaRequestStub
	fakeReturns := fake.deleteInstallationMediaRequestReturns
	fake.recordInvocation("DeleteInstallationMediaRequest", []interface{}{arg1})
	fake.deleteInstallationMediaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteInstallationMediaRequestCallCount() int {
	fake.deleteInstallationMediaRequestMutex.RLock()
	defer fake.deleteInstallationMediaRequestMutex.RUnlock()
	return len(fake.deleteInstallationMediaRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteInstallationMediaRequestCalls(stub func(*rds.DeleteInstallationMediaInput) (*request.Request, *rds.DeleteInstallationMediaOutput)) {
	fake.deleteInstallationMediaRequestMutex.Lock()
	defer fake.deleteInstallationMediaRequestMutex.Unlock()
	fake.DeleteInstallationMediaRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteInstallationMediaRequestArgsForCall(i int) *rds.DeleteInstallationMediaInput {
	fake.deleteInstallationMediaRequestMutex.RLock()
	defer fake.deleteInstallationMediaRequestMutex.RUnlock()
	argsForCall := fake.deleteInstallationMediaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteInstallationMediaRequestReturns(result1 *request.Request, result2 *rds.DeleteInstallationMediaOutput) {
	fake.deleteInstallationMediaRequestMutex.Lock()
	defer fake.deleteInstallationMediaRequestMutex.Unlock()
	fake.DeleteInstallationMediaRequestStub = nil
	fake.deleteInstallationMediaRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteInstallationMediaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteInstallationMediaRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteInstallationMediaOutput) {
	fake.deleteInstallationMediaRequestMutex.Lock()
	defer fake.deleteInstallationMediaRequestMutex.Unlock()
	fake.DeleteInstallationMediaRequestStub = nil
	if fake.deleteInstallationMediaRequestReturnsOnCall == nil {
		fake.deleteInstallationMediaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteInstallationMediaOutput
		})
	}
	fake.deleteInstallationMediaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteInstallationMediaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteInstallationMediaWithContext(arg1 context.Context, arg2 *rds.DeleteInstallationMediaInput, arg3 ...request.Option) (*rds.DeleteInstallationMediaOutput, error) {
	fake.deleteInstallationMediaWithContextMutex.Lock()
	ret, specificReturn := fake.deleteInstallationMediaWithContextReturnsOnCall[len(fake.deleteInstallationMediaWithContextArgsForCall)]
	fake.deleteInstallationMediaWithContextArgsForCall = append(fake.deleteInstallationMediaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteInstallationMediaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteInstallationMediaWithContextStub
	fakeReturns := fake.deleteInstallationMediaWithContextReturns
	fake.recordInvocation("DeleteInstallationMediaWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteInstallationMediaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteInstallationMediaWithContextCallCount() int {
	fake.deleteInstallationMediaWithContextMutex.RLock()
	defer fake.deleteInstallationMediaWithContextMutex.RUnlock()
	return len(fake.deleteInstallationMediaWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteInstallationMediaWithContextCalls(stub func(context.Context, *rds.DeleteInstallationMediaInput, ...request.Option) (*rds.DeleteInstallationMediaOutput, error)) {
	fake.deleteInstallationMediaWithContextMutex.Lock()
	defer fake.deleteInstallationMediaWithContextMutex.Unlock()
	fake.DeleteInstallationMediaWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteInstallationMediaWithContextArgsForCall(i int) (context.Context, *rds.DeleteInstallationMediaInput, []request.Option) {
	fake.deleteInstallationMediaWithContextMutex.RLock()
	defer fake.deleteInstallationMediaWithContextMutex.RUnlock()
	argsForCall := fake.deleteInstallationMediaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteInstallationMediaWithContextReturns(result1 *rds.DeleteInstallationMediaOutput, result2 error) {
	fake.deleteInstallationMediaWithContextMutex.Lock()
	defer fake.deleteInstallationMediaWithContextMutex.Unlock()
	fake.DeleteInstallationMediaWithContextStub = nil
	fake.deleteInstallationMediaWithContextReturns = struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteInstallationMediaWithContextReturnsOnCall(i int, result1 *rds.DeleteInstallationMediaOutput, result2 error) {
	fake.deleteInstallationMediaWithContextMutex.Lock()
	defer fake.deleteInstallationMediaWithContextMutex.Unlock()
	fake.DeleteInstallationMediaWithContextStub = nil
	if fake.deleteInstallationMediaWithContextReturnsOnCall == nil {
		fake.deleteInstallationMediaWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteInstallationMediaOutput
			result2 error
		})
	}
	fake.deleteInstallationMediaWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteOptionGroup(arg1 *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
	fake.deleteOptionGroupMutex.Lock()
	ret, specificReturn := fake.deleteOptionGroupReturnsOnCall[len(fake.deleteOptionGroupArgsForCall)]
	fake.deleteOptionGroupArgsForCall = append(fake.deleteOptionGroupArgsForCall, struct {
		arg1 *rds.DeleteOptionGroupInput
	}{arg1})
	stub := fake.DeleteOptionGroupStub
	fakeReturns := fake.deleteOptionGroupReturns
	fake.recordInvocation("DeleteOptionGroup", []interface{}{arg1})
	fake.deleteOptionGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteOptionGroupCallCount() int {
	fake.deleteOptionGroupMutex.RLock()
	defer fake.deleteOptionGroupMutex.RUnlock()
	return len(fake.deleteOptionGroupArgsForCall)
}

func (fake *FakeRDSAPI) DeleteOptionGroupCalls(stub func(*rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error)) {
	fake.deleteOptionGroupMutex.Lock()
	defer fake.deleteOptionGroupMutex.Unlock()
	fake.DeleteOptionGroupStub = stub
}

func (fake *FakeRDSAPI) DeleteOptionGroupArgsForCall(i int) *rds.DeleteOptionGroupInput {
	fake.deleteOptionGroupMutex.RLock()
	defer fake.deleteOptionGroupMutex.RUnlock()
	argsForCall := fake.deleteOptionGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteOptionGroupReturns(result1 *rds.DeleteOptionGroupOutput, result2 error) {
	fake.deleteOptionGroupMutex.Lock()
	defer fake.deleteOptionGroupMutex.Unlock()
	fake.DeleteOptionGroupStub = nil
	fake.deleteOptionGroupReturns = struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteOptionGroupReturnsOnCall(i int, result1 *rds.DeleteOptionGroupOutput, result2 error) {
	fake.deleteOptionGroupMutex.Lock()
	defer fake.deleteOptionGroupMutex.Unlock()
	fake.DeleteOptionGroupStub = nil
	if fake.deleteOptionGroupReturnsOnCall == nil {
		fake.deleteOptionGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteOptionGroupOutput
			result2 error
		})
	}
	fake.deleteOptionGroupReturnsOnCall[i] = struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteOptionGroupRequest(arg1 *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput) {
	fake.deleteOptionGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteOptionGroupRequestReturnsOnCall[len(fake.deleteOptionGroupRequestArgsForCall)]
	fake.deleteOptionGroupRequestArgsForCall = append(fake.deleteOptionGroupRequestArgsForCall, struct {
		arg1 *rds.DeleteOptionGroupInput
	}{arg1})
	stub := fake.DeleteOptionGroupRequestStub
	fakeReturns := fake.deleteOptionGroupRequestReturns
	fake.recordInvocation("DeleteOptionGroupRequest", []interface{}{arg1})
	fake.deleteOptionGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteOptionGroupRequestCallCount() int {
	fake.deleteOptionGroupRequestMutex.RLock()
	defer fake.deleteOptionGroupRequestMutex.RUnlock()
	return len(fake.deleteOptionGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeleteOptionGroupRequestCalls(stub func(*rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput)) {
	fake.deleteOptionGroupRequestMutex.Lock()
	defer fake.deleteOptionGroupRequestMutex.Unlock()
	fake.DeleteOptionGroupRequestStub = stub
}

func (fake *FakeRDSAPI) DeleteOptionGroupRequestArgsForCall(i int) *rds.DeleteOptionGroupInput {
	fake.deleteOptionGroupRequestMutex.RLock()
	defer fake.deleteOptionGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteOptionGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeleteOptionGroupRequestReturns(result1 *request.Request, result2 *rds.DeleteOptionGroupOutput) {
	fake.deleteOptionGroupRequestMutex.Lock()
	defer fake.deleteOptionGroupRequestMutex.Unlock()
	fake.DeleteOptionGroupRequestStub = nil
	fake.deleteOptionGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeleteOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteOptionGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeleteOptionGroupOutput) {
	fake.deleteOptionGroupRequestMutex.Lock()
	defer fake.deleteOptionGroupRequestMutex.Unlock()
	fake.DeleteOptionGroupRequestStub = nil
	if fake.deleteOptionGroupRequestReturnsOnCall == nil {
		fake.deleteOptionGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeleteOptionGroupOutput
		})
	}
	fake.deleteOptionGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeleteOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteOptionGroupWithContext(arg1 context.Context, arg2 *rds.DeleteOptionGroupInput, arg3 ...request.Option) (*rds.DeleteOptionGroupOutput, error) {
	fake.deleteOptionGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteOptionGroupWithContextReturnsOnCall[len(fake.deleteOptionGroupWithContextArgsForCall)]
	fake.deleteOptionGroupWithContextArgsForCall = append(fake.deleteOptionGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeleteOptionGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteOptionGroupWithContextStub
	fakeReturns := fake.deleteOptionGroupWithContextReturns
	fake.recordInvocation("DeleteOptionGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteOptionGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeleteOptionGroupWithContextCallCount() int {
	fake.deleteOptionGroupWithContextMutex.RLock()
	defer fake.deleteOptionGroupWithContextMutex.RUnlock()
	return len(fake.deleteOptionGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeleteOptionGroupWithContextCalls(stub func(context.Context, *rds.DeleteOptionGroupInput, ...request.Option) (*rds.DeleteOptionGroupOutput, error)) {
	fake.deleteOptionGroupWithContextMutex.Lock()
	defer fake.deleteOptionGroupWithContextMutex.Unlock()
	fake.DeleteOptionGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) DeleteOptionGroupWithContextArgsForCall(i int) (context.Context, *rds.DeleteOptionGroupInput, []request.Option) {
	fake.deleteOptionGroupWithContextMutex.RLock()
	defer fake.deleteOptionGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteOptionGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeleteOptionGroupWithContextReturns(result1 *rds.DeleteOptionGroupOutput, result2 error) {
	fake.deleteOptionGroupWithContextMutex.Lock()
	defer fake.deleteOptionGroupWithContextMutex.Unlock()
	fake.DeleteOptionGroupWithContextStub = nil
	fake.deleteOptionGroupWithContextReturns = struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeleteOptionGroupWithContextReturnsOnCall(i int, result1 *rds.DeleteOptionGroupOutput, result2 error) {
	fake.deleteOptionGroupWithContextMutex.Lock()
	defer fake.deleteOptionGroupWithContextMutex.Unlock()
	fake.DeleteOptionGroupWithContextStub = nil
	if fake.deleteOptionGroupWithContextReturnsOnCall == nil {
		fake.deleteOptionGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeleteOptionGroupOutput
			result2 error
		})
	}
	fake.deleteOptionGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeleteOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargets(arg1 *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
	fake.deregisterDBProxyTargetsMutex.Lock()
	ret, specificReturn := fake.deregisterDBProxyTargetsReturnsOnCall[len(fake.deregisterDBProxyTargetsArgsForCall)]
	fake.deregisterDBProxyTargetsArgsForCall = append(fake.deregisterDBProxyTargetsArgsForCall, struct {
		arg1 *rds.DeregisterDBProxyTargetsInput
	}{arg1})
	stub := fake.DeregisterDBProxyTargetsStub
	fakeReturns := fake.deregisterDBProxyTargetsReturns
	fake.recordInvocation("DeregisterDBProxyTargets", []interface{}{arg1})
	fake.deregisterDBProxyTargetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsCallCount() int {
	fake.deregisterDBProxyTargetsMutex.RLock()
	defer fake.deregisterDBProxyTargetsMutex.RUnlock()
	return len(fake.deregisterDBProxyTargetsArgsForCall)
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsCalls(stub func(*rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error)) {
	fake.deregisterDBProxyTargetsMutex.Lock()
	defer fake.deregisterDBProxyTargetsMutex.Unlock()
	fake.DeregisterDBProxyTargetsStub = stub
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsArgsForCall(i int) *rds.DeregisterDBProxyTargetsInput {
	fake.deregisterDBProxyTargetsMutex.RLock()
	defer fake.deregisterDBProxyTargetsMutex.RUnlock()
	argsForCall := fake.deregisterDBProxyTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsReturns(result1 *rds.DeregisterDBProxyTargetsOutput, result2 error) {
	fake.deregisterDBProxyTargetsMutex.Lock()
	defer fake.deregisterDBProxyTargetsMutex.Unlock()
	fake.DeregisterDBProxyTargetsStub = nil
	fake.deregisterDBProxyTargetsReturns = struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsReturnsOnCall(i int, result1 *rds.DeregisterDBProxyTargetsOutput, result2 error) {
	fake.deregisterDBProxyTargetsMutex.Lock()
	defer fake.deregisterDBProxyTargetsMutex.Unlock()
	fake.DeregisterDBProxyTargetsStub = nil
	if fake.deregisterDBProxyTargetsReturnsOnCall == nil {
		fake.deregisterDBProxyTargetsReturnsOnCall = make(map[int]struct {
			result1 *rds.DeregisterDBProxyTargetsOutput
			result2 error
		})
	}
	fake.deregisterDBProxyTargetsReturnsOnCall[i] = struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsRequest(arg1 *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput) {
	fake.deregisterDBProxyTargetsRequestMutex.Lock()
	ret, specificReturn := fake.deregisterDBProxyTargetsRequestReturnsOnCall[len(fake.deregisterDBProxyTargetsRequestArgsForCall)]
	fake.deregisterDBProxyTargetsRequestArgsForCall = append(fake.deregisterDBProxyTargetsRequestArgsForCall, struct {
		arg1 *rds.DeregisterDBProxyTargetsInput
	}{arg1})
	stub := fake.DeregisterDBProxyTargetsRequestStub
	fakeReturns := fake.deregisterDBProxyTargetsRequestReturns
	fake.recordInvocation("DeregisterDBProxyTargetsRequest", []interface{}{arg1})
	fake.deregisterDBProxyTargetsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsRequestCallCount() int {
	fake.deregisterDBProxyTargetsRequestMutex.RLock()
	defer fake.deregisterDBProxyTargetsRequestMutex.RUnlock()
	return len(fake.deregisterDBProxyTargetsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsRequestCalls(stub func(*rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput)) {
	fake.deregisterDBProxyTargetsRequestMutex.Lock()
	defer fake.deregisterDBProxyTargetsRequestMutex.Unlock()
	fake.DeregisterDBProxyTargetsRequestStub = stub
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsRequestArgsForCall(i int) *rds.DeregisterDBProxyTargetsInput {
	fake.deregisterDBProxyTargetsRequestMutex.RLock()
	defer fake.deregisterDBProxyTargetsRequestMutex.RUnlock()
	argsForCall := fake.deregisterDBProxyTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsRequestReturns(result1 *request.Request, result2 *rds.DeregisterDBProxyTargetsOutput) {
	fake.deregisterDBProxyTargetsRequestMutex.Lock()
	defer fake.deregisterDBProxyTargetsRequestMutex.Unlock()
	fake.DeregisterDBProxyTargetsRequestStub = nil
	fake.deregisterDBProxyTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DeregisterDBProxyTargetsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DeregisterDBProxyTargetsOutput) {
	fake.deregisterDBProxyTargetsRequestMutex.Lock()
	defer fake.deregisterDBProxyTargetsRequestMutex.Unlock()
	fake.DeregisterDBProxyTargetsRequestStub = nil
	if fake.deregisterDBProxyTargetsRequestReturnsOnCall == nil {
		fake.deregisterDBProxyTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DeregisterDBProxyTargetsOutput
		})
	}
	fake.deregisterDBProxyTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DeregisterDBProxyTargetsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsWithContext(arg1 context.Context, arg2 *rds.DeregisterDBProxyTargetsInput, arg3 ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {
	fake.deregisterDBProxyTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterDBProxyTargetsWithContextReturnsOnCall[len(fake.deregisterDBProxyTargetsWithContextArgsForCall)]
	fake.deregisterDBProxyTargetsWithContextArgsForCall = append(fake.deregisterDBProxyTargetsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DeregisterDBProxyTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeregisterDBProxyTargetsWithContextStub
	fakeReturns := fake.deregisterDBProxyTargetsWithContextReturns
	fake.recordInvocation("DeregisterDBProxyTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterDBProxyTargetsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsWithContextCallCount() int {
	fake.deregisterDBProxyTargetsWithContextMutex.RLock()
	defer fake.deregisterDBProxyTargetsWithContextMutex.RUnlock()
	return len(fake.deregisterDBProxyTargetsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsWithContextCalls(stub func(context.Context, *rds.DeregisterDBProxyTargetsInput, ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error)) {
	fake.deregisterDBProxyTargetsWithContextMutex.Lock()
	defer fake.deregisterDBProxyTargetsWithContextMutex.Unlock()
	fake.DeregisterDBProxyTargetsWithContextStub = stub
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsWithContextArgsForCall(i int) (context.Context, *rds.DeregisterDBProxyTargetsInput, []request.Option) {
	fake.deregisterDBProxyTargetsWithContextMutex.RLock()
	defer fake.deregisterDBProxyTargetsWithContextMutex.RUnlock()
	argsForCall := fake.deregisterDBProxyTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsWithContextReturns(result1 *rds.DeregisterDBProxyTargetsOutput, result2 error) {
	fake.deregisterDBProxyTargetsWithContextMutex.Lock()
	defer fake.deregisterDBProxyTargetsWithContextMutex.Unlock()
	fake.DeregisterDBProxyTargetsWithContextStub = nil
	fake.deregisterDBProxyTargetsWithContextReturns = struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DeregisterDBProxyTargetsWithContextReturnsOnCall(i int, result1 *rds.DeregisterDBProxyTargetsOutput, result2 error) {
	fake.deregisterDBProxyTargetsWithContextMutex.Lock()
	defer fake.deregisterDBProxyTargetsWithContextMutex.Unlock()
	fake.DeregisterDBProxyTargetsWithContextStub = nil
	if fake.deregisterDBProxyTargetsWithContextReturnsOnCall == nil {
		fake.deregisterDBProxyTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DeregisterDBProxyTargetsOutput
			result2 error
		})
	}
	fake.deregisterDBProxyTargetsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DeregisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeAccountAttributes(arg1 *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
	fake.describeAccountAttributesMutex.Lock()
	ret, specificReturn := fake.describeAccountAttributesReturnsOnCall[len(fake.describeAccountAttributesArgsForCall)]
	fake.describeAccountAttributesArgsForCall = append(fake.describeAccountAttributesArgsForCall, struct {
		arg1 *rds.DescribeAccountAttributesInput
	}{arg1})
	stub := fake.DescribeAccountAttributesStub
	fakeReturns := fake.describeAccountAttributesReturns
	fake.recordInvocation("DescribeAccountAttributes", []interface{}{arg1})
	fake.describeAccountAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeAccountAttributesCallCount() int {
	fake.describeAccountAttributesMutex.RLock()
	defer fake.describeAccountAttributesMutex.RUnlock()
	return len(fake.describeAccountAttributesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeAccountAttributesCalls(stub func(*rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error)) {
	fake.describeAccountAttributesMutex.Lock()
	defer fake.describeAccountAttributesMutex.Unlock()
	fake.DescribeAccountAttributesStub = stub
}

func (fake *FakeRDSAPI) DescribeAccountAttributesArgsForCall(i int) *rds.DescribeAccountAttributesInput {
	fake.describeAccountAttributesMutex.RLock()
	defer fake.describeAccountAttributesMutex.RUnlock()
	argsForCall := fake.describeAccountAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeAccountAttributesReturns(result1 *rds.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesMutex.Lock()
	defer fake.describeAccountAttributesMutex.Unlock()
	fake.DescribeAccountAttributesStub = nil
	fake.describeAccountAttributesReturns = struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeAccountAttributesReturnsOnCall(i int, result1 *rds.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesMutex.Lock()
	defer fake.describeAccountAttributesMutex.Unlock()
	fake.DescribeAccountAttributesStub = nil
	if fake.describeAccountAttributesReturnsOnCall == nil {
		fake.describeAccountAttributesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeAccountAttributesOutput
			result2 error
		})
	}
	fake.describeAccountAttributesReturnsOnCall[i] = struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeAccountAttributesRequest(arg1 *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput) {
	fake.describeAccountAttributesRequestMutex.Lock()
	ret, specificReturn := fake.describeAccountAttributesRequestReturnsOnCall[len(fake.describeAccountAttributesRequestArgsForCall)]
	fake.describeAccountAttributesRequestArgsForCall = append(fake.describeAccountAttributesRequestArgsForCall, struct {
		arg1 *rds.DescribeAccountAttributesInput
	}{arg1})
	stub := fake.DescribeAccountAttributesRequestStub
	fakeReturns := fake.describeAccountAttributesRequestReturns
	fake.recordInvocation("DescribeAccountAttributesRequest", []interface{}{arg1})
	fake.describeAccountAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeAccountAttributesRequestCallCount() int {
	fake.describeAccountAttributesRequestMutex.RLock()
	defer fake.describeAccountAttributesRequestMutex.RUnlock()
	return len(fake.describeAccountAttributesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeAccountAttributesRequestCalls(stub func(*rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput)) {
	fake.describeAccountAttributesRequestMutex.Lock()
	defer fake.describeAccountAttributesRequestMutex.Unlock()
	fake.DescribeAccountAttributesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeAccountAttributesRequestArgsForCall(i int) *rds.DescribeAccountAttributesInput {
	fake.describeAccountAttributesRequestMutex.RLock()
	defer fake.describeAccountAttributesRequestMutex.RUnlock()
	argsForCall := fake.describeAccountAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeAccountAttributesRequestReturns(result1 *request.Request, result2 *rds.DescribeAccountAttributesOutput) {
	fake.describeAccountAttributesRequestMutex.Lock()
	defer fake.describeAccountAttributesRequestMutex.Unlock()
	fake.DescribeAccountAttributesRequestStub = nil
	fake.describeAccountAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeAccountAttributesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeAccountAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeAccountAttributesOutput) {
	fake.describeAccountAttributesRequestMutex.Lock()
	defer fake.describeAccountAttributesRequestMutex.Unlock()
	fake.DescribeAccountAttributesRequestStub = nil
	if fake.describeAccountAttributesRequestReturnsOnCall == nil {
		fake.describeAccountAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeAccountAttributesOutput
		})
	}
	fake.describeAccountAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeAccountAttributesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeAccountAttributesWithContext(arg1 context.Context, arg2 *rds.DescribeAccountAttributesInput, arg3 ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAccountAttributesWithContextReturnsOnCall[len(fake.describeAccountAttributesWithContextArgsForCall)]
	fake.describeAccountAttributesWithContextArgsForCall = append(fake.describeAccountAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeAccountAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAccountAttributesWithContextStub
	fakeReturns := fake.describeAccountAttributesWithContextReturns
	fake.recordInvocation("DescribeAccountAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAccountAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeAccountAttributesWithContextCallCount() int {
	fake.describeAccountAttributesWithContextMutex.RLock()
	defer fake.describeAccountAttributesWithContextMutex.RUnlock()
	return len(fake.describeAccountAttributesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeAccountAttributesWithContextCalls(stub func(context.Context, *rds.DescribeAccountAttributesInput, ...request.Option) (*rds.DescribeAccountAttributesOutput, error)) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	defer fake.describeAccountAttributesWithContextMutex.Unlock()
	fake.DescribeAccountAttributesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeAccountAttributesWithContextArgsForCall(i int) (context.Context, *rds.DescribeAccountAttributesInput, []request.Option) {
	fake.describeAccountAttributesWithContextMutex.RLock()
	defer fake.describeAccountAttributesWithContextMutex.RUnlock()
	argsForCall := fake.describeAccountAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeAccountAttributesWithContextReturns(result1 *rds.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	defer fake.describeAccountAttributesWithContextMutex.Unlock()
	fake.DescribeAccountAttributesWithContextStub = nil
	fake.describeAccountAttributesWithContextReturns = struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeAccountAttributesWithContextReturnsOnCall(i int, result1 *rds.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	defer fake.describeAccountAttributesWithContextMutex.Unlock()
	fake.DescribeAccountAttributesWithContextStub = nil
	if fake.describeAccountAttributesWithContextReturnsOnCall == nil {
		fake.describeAccountAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeAccountAttributesOutput
			result2 error
		})
	}
	fake.describeAccountAttributesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCertificates(arg1 *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
	fake.describeCertificatesMutex.Lock()
	ret, specificReturn := fake.describeCertificatesReturnsOnCall[len(fake.describeCertificatesArgsForCall)]
	fake.describeCertificatesArgsForCall = append(fake.describeCertificatesArgsForCall, struct {
		arg1 *rds.DescribeCertificatesInput
	}{arg1})
	stub := fake.DescribeCertificatesStub
	fakeReturns := fake.describeCertificatesReturns
	fake.recordInvocation("DescribeCertificates", []interface{}{arg1})
	fake.describeCertificatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeCertificatesCallCount() int {
	fake.describeCertificatesMutex.RLock()
	defer fake.describeCertificatesMutex.RUnlock()
	return len(fake.describeCertificatesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCertificatesCalls(stub func(*rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error)) {
	fake.describeCertificatesMutex.Lock()
	defer fake.describeCertificatesMutex.Unlock()
	fake.DescribeCertificatesStub = stub
}

func (fake *FakeRDSAPI) DescribeCertificatesArgsForCall(i int) *rds.DescribeCertificatesInput {
	fake.describeCertificatesMutex.RLock()
	defer fake.describeCertificatesMutex.RUnlock()
	argsForCall := fake.describeCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeCertificatesReturns(result1 *rds.DescribeCertificatesOutput, result2 error) {
	fake.describeCertificatesMutex.Lock()
	defer fake.describeCertificatesMutex.Unlock()
	fake.DescribeCertificatesStub = nil
	fake.describeCertificatesReturns = struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCertificatesReturnsOnCall(i int, result1 *rds.DescribeCertificatesOutput, result2 error) {
	fake.describeCertificatesMutex.Lock()
	defer fake.describeCertificatesMutex.Unlock()
	fake.DescribeCertificatesStub = nil
	if fake.describeCertificatesReturnsOnCall == nil {
		fake.describeCertificatesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeCertificatesOutput
			result2 error
		})
	}
	fake.describeCertificatesReturnsOnCall[i] = struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCertificatesPages(arg1 *rds.DescribeCertificatesInput, arg2 func(*rds.DescribeCertificatesOutput, bool) bool) error {
	fake.describeCertificatesPagesMutex.Lock()
	ret, specificReturn := fake.describeCertificatesPagesReturnsOnCall[len(fake.describeCertificatesPagesArgsForCall)]
	fake.describeCertificatesPagesArgsForCall = append(fake.describeCertificatesPagesArgsForCall, struct {
		arg1 *rds.DescribeCertificatesInput
		arg2 func(*rds.DescribeCertificatesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCertificatesPagesStub
	fakeReturns := fake.describeCertificatesPagesReturns
	fake.recordInvocation("DescribeCertificatesPages", []interface{}{arg1, arg2})
	fake.describeCertificatesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesCallCount() int {
	fake.describeCertificatesPagesMutex.RLock()
	defer fake.describeCertificatesPagesMutex.RUnlock()
	return len(fake.describeCertificatesPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesCalls(stub func(*rds.DescribeCertificatesInput, func(*rds.DescribeCertificatesOutput, bool) bool) error) {
	fake.describeCertificatesPagesMutex.Lock()
	defer fake.describeCertificatesPagesMutex.Unlock()
	fake.DescribeCertificatesPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesArgsForCall(i int) (*rds.DescribeCertificatesInput, func(*rds.DescribeCertificatesOutput, bool) bool) {
	fake.describeCertificatesPagesMutex.RLock()
	defer fake.describeCertificatesPagesMutex.RUnlock()
	argsForCall := fake.describeCertificatesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesReturns(result1 error) {
	fake.describeCertificatesPagesMutex.Lock()
	defer fake.describeCertificatesPagesMutex.Unlock()
	fake.DescribeCertificatesPagesStub = nil
	fake.describeCertificatesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesReturnsOnCall(i int, result1 error) {
	fake.describeCertificatesPagesMutex.Lock()
	defer fake.describeCertificatesPagesMutex.Unlock()
	fake.DescribeCertificatesPagesStub = nil
	if fake.describeCertificatesPagesReturnsOnCall == nil {
		fake.describeCertificatesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCertificatesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesWithContext(arg1 context.Context, arg2 *rds.DescribeCertificatesInput, arg3 func(*rds.DescribeCertificatesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCertificatesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCertificatesPagesWithContextReturnsOnCall[len(fake.describeCertificatesPagesWithContextArgsForCall)]
	fake.describeCertificatesPagesWithContextArgsForCall = append(fake.describeCertificatesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeCertificatesInput
		arg3 func(*rds.DescribeCertificatesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCertificatesPagesWithContextStub
	fakeReturns := fake.describeCertificatesPagesWithContextReturns
	fake.recordInvocation("DescribeCertificatesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCertificatesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesWithContextCallCount() int {
	fake.describeCertificatesPagesWithContextMutex.RLock()
	defer fake.describeCertificatesPagesWithContextMutex.RUnlock()
	return len(fake.describeCertificatesPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesWithContextCalls(stub func(context.Context, *rds.DescribeCertificatesInput, func(*rds.DescribeCertificatesOutput, bool) bool, ...request.Option) error) {
	fake.describeCertificatesPagesWithContextMutex.Lock()
	defer fake.describeCertificatesPagesWithContextMutex.Unlock()
	fake.DescribeCertificatesPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeCertificatesInput, func(*rds.DescribeCertificatesOutput, bool) bool, []request.Option) {
	fake.describeCertificatesPagesWithContextMutex.RLock()
	defer fake.describeCertificatesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCertificatesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesWithContextReturns(result1 error) {
	fake.describeCertificatesPagesWithContextMutex.Lock()
	defer fake.describeCertificatesPagesWithContextMutex.Unlock()
	fake.DescribeCertificatesPagesWithContextStub = nil
	fake.describeCertificatesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCertificatesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCertificatesPagesWithContextMutex.Lock()
	defer fake.describeCertificatesPagesWithContextMutex.Unlock()
	fake.DescribeCertificatesPagesWithContextStub = nil
	if fake.describeCertificatesPagesWithContextReturnsOnCall == nil {
		fake.describeCertificatesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCertificatesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCertificatesRequest(arg1 *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput) {
	fake.describeCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.describeCertificatesRequestReturnsOnCall[len(fake.describeCertificatesRequestArgsForCall)]
	fake.describeCertificatesRequestArgsForCall = append(fake.describeCertificatesRequestArgsForCall, struct {
		arg1 *rds.DescribeCertificatesInput
	}{arg1})
	stub := fake.DescribeCertificatesRequestStub
	fakeReturns := fake.describeCertificatesRequestReturns
	fake.recordInvocation("DescribeCertificatesRequest", []interface{}{arg1})
	fake.describeCertificatesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeCertificatesRequestCallCount() int {
	fake.describeCertificatesRequestMutex.RLock()
	defer fake.describeCertificatesRequestMutex.RUnlock()
	return len(fake.describeCertificatesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCertificatesRequestCalls(stub func(*rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput)) {
	fake.describeCertificatesRequestMutex.Lock()
	defer fake.describeCertificatesRequestMutex.Unlock()
	fake.DescribeCertificatesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeCertificatesRequestArgsForCall(i int) *rds.DescribeCertificatesInput {
	fake.describeCertificatesRequestMutex.RLock()
	defer fake.describeCertificatesRequestMutex.RUnlock()
	argsForCall := fake.describeCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeCertificatesRequestReturns(result1 *request.Request, result2 *rds.DescribeCertificatesOutput) {
	fake.describeCertificatesRequestMutex.Lock()
	defer fake.describeCertificatesRequestMutex.Unlock()
	fake.DescribeCertificatesRequestStub = nil
	fake.describeCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeCertificatesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeCertificatesOutput) {
	fake.describeCertificatesRequestMutex.Lock()
	defer fake.describeCertificatesRequestMutex.Unlock()
	fake.DescribeCertificatesRequestStub = nil
	if fake.describeCertificatesRequestReturnsOnCall == nil {
		fake.describeCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeCertificatesOutput
		})
	}
	fake.describeCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeCertificatesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCertificatesWithContext(arg1 context.Context, arg2 *rds.DescribeCertificatesInput, arg3 ...request.Option) (*rds.DescribeCertificatesOutput, error) {
	fake.describeCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCertificatesWithContextReturnsOnCall[len(fake.describeCertificatesWithContextArgsForCall)]
	fake.describeCertificatesWithContextArgsForCall = append(fake.describeCertificatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCertificatesWithContextStub
	fakeReturns := fake.describeCertificatesWithContextReturns
	fake.recordInvocation("DescribeCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCertificatesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeCertificatesWithContextCallCount() int {
	fake.describeCertificatesWithContextMutex.RLock()
	defer fake.describeCertificatesWithContextMutex.RUnlock()
	return len(fake.describeCertificatesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCertificatesWithContextCalls(stub func(context.Context, *rds.DescribeCertificatesInput, ...request.Option) (*rds.DescribeCertificatesOutput, error)) {
	fake.describeCertificatesWithContextMutex.Lock()
	defer fake.describeCertificatesWithContextMutex.Unlock()
	fake.DescribeCertificatesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeCertificatesWithContextArgsForCall(i int) (context.Context, *rds.DescribeCertificatesInput, []request.Option) {
	fake.describeCertificatesWithContextMutex.RLock()
	defer fake.describeCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.describeCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeCertificatesWithContextReturns(result1 *rds.DescribeCertificatesOutput, result2 error) {
	fake.describeCertificatesWithContextMutex.Lock()
	defer fake.describeCertificatesWithContextMutex.Unlock()
	fake.DescribeCertificatesWithContextStub = nil
	fake.describeCertificatesWithContextReturns = struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCertificatesWithContextReturnsOnCall(i int, result1 *rds.DescribeCertificatesOutput, result2 error) {
	fake.describeCertificatesWithContextMutex.Lock()
	defer fake.describeCertificatesWithContextMutex.Unlock()
	fake.DescribeCertificatesWithContextStub = nil
	if fake.describeCertificatesWithContextReturnsOnCall == nil {
		fake.describeCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeCertificatesOutput
			result2 error
		})
	}
	fake.describeCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZones(arg1 *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	fake.describeCustomAvailabilityZonesMutex.Lock()
	ret, specificReturn := fake.describeCustomAvailabilityZonesReturnsOnCall[len(fake.describeCustomAvailabilityZonesArgsForCall)]
	fake.describeCustomAvailabilityZonesArgsForCall = append(fake.describeCustomAvailabilityZonesArgsForCall, struct {
		arg1 *rds.DescribeCustomAvailabilityZonesInput
	}{arg1})
	stub := fake.DescribeCustomAvailabilityZonesStub
	fakeReturns := fake.describeCustomAvailabilityZonesReturns
	fake.recordInvocation("DescribeCustomAvailabilityZones", []interface{}{arg1})
	fake.describeCustomAvailabilityZonesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesCallCount() int {
	fake.describeCustomAvailabilityZonesMutex.RLock()
	defer fake.describeCustomAvailabilityZonesMutex.RUnlock()
	return len(fake.describeCustomAvailabilityZonesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesCalls(stub func(*rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error)) {
	fake.describeCustomAvailabilityZonesMutex.Lock()
	defer fake.describeCustomAvailabilityZonesMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesStub = stub
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesArgsForCall(i int) *rds.DescribeCustomAvailabilityZonesInput {
	fake.describeCustomAvailabilityZonesMutex.RLock()
	defer fake.describeCustomAvailabilityZonesMutex.RUnlock()
	argsForCall := fake.describeCustomAvailabilityZonesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesReturns(result1 *rds.DescribeCustomAvailabilityZonesOutput, result2 error) {
	fake.describeCustomAvailabilityZonesMutex.Lock()
	defer fake.describeCustomAvailabilityZonesMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesStub = nil
	fake.describeCustomAvailabilityZonesReturns = struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesReturnsOnCall(i int, result1 *rds.DescribeCustomAvailabilityZonesOutput, result2 error) {
	fake.describeCustomAvailabilityZonesMutex.Lock()
	defer fake.describeCustomAvailabilityZonesMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesStub = nil
	if fake.describeCustomAvailabilityZonesReturnsOnCall == nil {
		fake.describeCustomAvailabilityZonesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeCustomAvailabilityZonesOutput
			result2 error
		})
	}
	fake.describeCustomAvailabilityZonesReturnsOnCall[i] = struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPages(arg1 *rds.DescribeCustomAvailabilityZonesInput, arg2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) error {
	fake.describeCustomAvailabilityZonesPagesMutex.Lock()
	ret, specificReturn := fake.describeCustomAvailabilityZonesPagesReturnsOnCall[len(fake.describeCustomAvailabilityZonesPagesArgsForCall)]
	fake.describeCustomAvailabilityZonesPagesArgsForCall = append(fake.describeCustomAvailabilityZonesPagesArgsForCall, struct {
		arg1 *rds.DescribeCustomAvailabilityZonesInput
		arg2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeCustomAvailabilityZonesPagesStub
	fakeReturns := fake.describeCustomAvailabilityZonesPagesReturns
	fake.recordInvocation("DescribeCustomAvailabilityZonesPages", []interface{}{arg1, arg2})
	fake.describeCustomAvailabilityZonesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesCallCount() int {
	fake.describeCustomAvailabilityZonesPagesMutex.RLock()
	defer fake.describeCustomAvailabilityZonesPagesMutex.RUnlock()
	return len(fake.describeCustomAvailabilityZonesPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesCalls(stub func(*rds.DescribeCustomAvailabilityZonesInput, func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) error) {
	fake.describeCustomAvailabilityZonesPagesMutex.Lock()
	defer fake.describeCustomAvailabilityZonesPagesMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesArgsForCall(i int) (*rds.DescribeCustomAvailabilityZonesInput, func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) {
	fake.describeCustomAvailabilityZonesPagesMutex.RLock()
	defer fake.describeCustomAvailabilityZonesPagesMutex.RUnlock()
	argsForCall := fake.describeCustomAvailabilityZonesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesReturns(result1 error) {
	fake.describeCustomAvailabilityZonesPagesMutex.Lock()
	defer fake.describeCustomAvailabilityZonesPagesMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesPagesStub = nil
	fake.describeCustomAvailabilityZonesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesReturnsOnCall(i int, result1 error) {
	fake.describeCustomAvailabilityZonesPagesMutex.Lock()
	defer fake.describeCustomAvailabilityZonesPagesMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesPagesStub = nil
	if fake.describeCustomAvailabilityZonesPagesReturnsOnCall == nil {
		fake.describeCustomAvailabilityZonesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCustomAvailabilityZonesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesWithContext(arg1 context.Context, arg2 *rds.DescribeCustomAvailabilityZonesInput, arg3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCustomAvailabilityZonesPagesWithContextReturnsOnCall[len(fake.describeCustomAvailabilityZonesPagesWithContextArgsForCall)]
	fake.describeCustomAvailabilityZonesPagesWithContextArgsForCall = append(fake.describeCustomAvailabilityZonesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeCustomAvailabilityZonesInput
		arg3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeCustomAvailabilityZonesPagesWithContextStub
	fakeReturns := fake.describeCustomAvailabilityZonesPagesWithContextReturns
	fake.recordInvocation("DescribeCustomAvailabilityZonesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesWithContextCallCount() int {
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.RLock()
	defer fake.describeCustomAvailabilityZonesPagesWithContextMutex.RUnlock()
	return len(fake.describeCustomAvailabilityZonesPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesWithContextCalls(stub func(context.Context, *rds.DescribeCustomAvailabilityZonesInput, func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, ...request.Option) error) {
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.Lock()
	defer fake.describeCustomAvailabilityZonesPagesWithContextMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeCustomAvailabilityZonesInput, func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, []request.Option) {
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.RLock()
	defer fake.describeCustomAvailabilityZonesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeCustomAvailabilityZonesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesWithContextReturns(result1 error) {
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.Lock()
	defer fake.describeCustomAvailabilityZonesPagesWithContextMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesPagesWithContextStub = nil
	fake.describeCustomAvailabilityZonesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.Lock()
	defer fake.describeCustomAvailabilityZonesPagesWithContextMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesPagesWithContextStub = nil
	if fake.describeCustomAvailabilityZonesPagesWithContextReturnsOnCall == nil {
		fake.describeCustomAvailabilityZonesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCustomAvailabilityZonesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesRequest(arg1 *rds.DescribeCustomAvailabilityZonesInput) (*request.Request, *rds.DescribeCustomAvailabilityZonesOutput) {
	fake.describeCustomAvailabilityZonesRequestMutex.Lock()
	ret, specificReturn := fake.describeCustomAvailabilityZonesRequestReturnsOnCall[len(fake.describeCustomAvailabilityZonesRequestArgsForCall)]
	fake.describeCustomAvailabilityZonesRequestArgsForCall = append(fake.describeCustomAvailabilityZonesRequestArgsForCall, struct {
		arg1 *rds.DescribeCustomAvailabilityZonesInput
	}{arg1})
	stub := fake.DescribeCustomAvailabilityZonesRequestStub
	fakeReturns := fake.describeCustomAvailabilityZonesRequestReturns
	fake.recordInvocation("DescribeCustomAvailabilityZonesRequest", []interface{}{arg1})
	fake.describeCustomAvailabilityZonesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesRequestCallCount() int {
	fake.describeCustomAvailabilityZonesRequestMutex.RLock()
	defer fake.describeCustomAvailabilityZonesRequestMutex.RUnlock()
	return len(fake.describeCustomAvailabilityZonesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesRequestCalls(stub func(*rds.DescribeCustomAvailabilityZonesInput) (*request.Request, *rds.DescribeCustomAvailabilityZonesOutput)) {
	fake.describeCustomAvailabilityZonesRequestMutex.Lock()
	defer fake.describeCustomAvailabilityZonesRequestMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesRequestArgsForCall(i int) *rds.DescribeCustomAvailabilityZonesInput {
	fake.describeCustomAvailabilityZonesRequestMutex.RLock()
	defer fake.describeCustomAvailabilityZonesRequestMutex.RUnlock()
	argsForCall := fake.describeCustomAvailabilityZonesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesRequestReturns(result1 *request.Request, result2 *rds.DescribeCustomAvailabilityZonesOutput) {
	fake.describeCustomAvailabilityZonesRequestMutex.Lock()
	defer fake.describeCustomAvailabilityZonesRequestMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesRequestStub = nil
	fake.describeCustomAvailabilityZonesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeCustomAvailabilityZonesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeCustomAvailabilityZonesOutput) {
	fake.describeCustomAvailabilityZonesRequestMutex.Lock()
	defer fake.describeCustomAvailabilityZonesRequestMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesRequestStub = nil
	if fake.describeCustomAvailabilityZonesRequestReturnsOnCall == nil {
		fake.describeCustomAvailabilityZonesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeCustomAvailabilityZonesOutput
		})
	}
	fake.describeCustomAvailabilityZonesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeCustomAvailabilityZonesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesWithContext(arg1 context.Context, arg2 *rds.DescribeCustomAvailabilityZonesInput, arg3 ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	fake.describeCustomAvailabilityZonesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCustomAvailabilityZonesWithContextReturnsOnCall[len(fake.describeCustomAvailabilityZonesWithContextArgsForCall)]
	fake.describeCustomAvailabilityZonesWithContextArgsForCall = append(fake.describeCustomAvailabilityZonesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeCustomAvailabilityZonesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCustomAvailabilityZonesWithContextStub
	fakeReturns := fake.describeCustomAvailabilityZonesWithContextReturns
	fake.recordInvocation("DescribeCustomAvailabilityZonesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCustomAvailabilityZonesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesWithContextCallCount() int {
	fake.describeCustomAvailabilityZonesWithContextMutex.RLock()
	defer fake.describeCustomAvailabilityZonesWithContextMutex.RUnlock()
	return len(fake.describeCustomAvailabilityZonesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesWithContextCalls(stub func(context.Context, *rds.DescribeCustomAvailabilityZonesInput, ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error)) {
	fake.describeCustomAvailabilityZonesWithContextMutex.Lock()
	defer fake.describeCustomAvailabilityZonesWithContextMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesWithContextArgsForCall(i int) (context.Context, *rds.DescribeCustomAvailabilityZonesInput, []request.Option) {
	fake.describeCustomAvailabilityZonesWithContextMutex.RLock()
	defer fake.describeCustomAvailabilityZonesWithContextMutex.RUnlock()
	argsForCall := fake.describeCustomAvailabilityZonesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesWithContextReturns(result1 *rds.DescribeCustomAvailabilityZonesOutput, result2 error) {
	fake.describeCustomAvailabilityZonesWithContextMutex.Lock()
	defer fake.describeCustomAvailabilityZonesWithContextMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesWithContextStub = nil
	fake.describeCustomAvailabilityZonesWithContextReturns = struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeCustomAvailabilityZonesWithContextReturnsOnCall(i int, result1 *rds.DescribeCustomAvailabilityZonesOutput, result2 error) {
	fake.describeCustomAvailabilityZonesWithContextMutex.Lock()
	defer fake.describeCustomAvailabilityZonesWithContextMutex.Unlock()
	fake.DescribeCustomAvailabilityZonesWithContextStub = nil
	if fake.describeCustomAvailabilityZonesWithContextReturnsOnCall == nil {
		fake.describeCustomAvailabilityZonesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeCustomAvailabilityZonesOutput
			result2 error
		})
	}
	fake.describeCustomAvailabilityZonesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeCustomAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracks(arg1 *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
	fake.describeDBClusterBacktracksMutex.Lock()
	ret, specificReturn := fake.describeDBClusterBacktracksReturnsOnCall[len(fake.describeDBClusterBacktracksArgsForCall)]
	fake.describeDBClusterBacktracksArgsForCall = append(fake.describeDBClusterBacktracksArgsForCall, struct {
		arg1 *rds.DescribeDBClusterBacktracksInput
	}{arg1})
	stub := fake.DescribeDBClusterBacktracksStub
	fakeReturns := fake.describeDBClusterBacktracksReturns
	fake.recordInvocation("DescribeDBClusterBacktracks", []interface{}{arg1})
	fake.describeDBClusterBacktracksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksCallCount() int {
	fake.describeDBClusterBacktracksMutex.RLock()
	defer fake.describeDBClusterBacktracksMutex.RUnlock()
	return len(fake.describeDBClusterBacktracksArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksCalls(stub func(*rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error)) {
	fake.describeDBClusterBacktracksMutex.Lock()
	defer fake.describeDBClusterBacktracksMutex.Unlock()
	fake.DescribeDBClusterBacktracksStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksArgsForCall(i int) *rds.DescribeDBClusterBacktracksInput {
	fake.describeDBClusterBacktracksMutex.RLock()
	defer fake.describeDBClusterBacktracksMutex.RUnlock()
	argsForCall := fake.describeDBClusterBacktracksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksReturns(result1 *rds.DescribeDBClusterBacktracksOutput, result2 error) {
	fake.describeDBClusterBacktracksMutex.Lock()
	defer fake.describeDBClusterBacktracksMutex.Unlock()
	fake.DescribeDBClusterBacktracksStub = nil
	fake.describeDBClusterBacktracksReturns = struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksReturnsOnCall(i int, result1 *rds.DescribeDBClusterBacktracksOutput, result2 error) {
	fake.describeDBClusterBacktracksMutex.Lock()
	defer fake.describeDBClusterBacktracksMutex.Unlock()
	fake.DescribeDBClusterBacktracksStub = nil
	if fake.describeDBClusterBacktracksReturnsOnCall == nil {
		fake.describeDBClusterBacktracksReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterBacktracksOutput
			result2 error
		})
	}
	fake.describeDBClusterBacktracksReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPages(arg1 *rds.DescribeDBClusterBacktracksInput, arg2 func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) error {
	fake.describeDBClusterBacktracksPagesMutex.Lock()
	ret, specificReturn := fake.describeDBClusterBacktracksPagesReturnsOnCall[len(fake.describeDBClusterBacktracksPagesArgsForCall)]
	fake.describeDBClusterBacktracksPagesArgsForCall = append(fake.describeDBClusterBacktracksPagesArgsForCall, struct {
		arg1 *rds.DescribeDBClusterBacktracksInput
		arg2 func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBClusterBacktracksPagesStub
	fakeReturns := fake.describeDBClusterBacktracksPagesReturns
	fake.recordInvocation("DescribeDBClusterBacktracksPages", []interface{}{arg1, arg2})
	fake.describeDBClusterBacktracksPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesCallCount() int {
	fake.describeDBClusterBacktracksPagesMutex.RLock()
	defer fake.describeDBClusterBacktracksPagesMutex.RUnlock()
	return len(fake.describeDBClusterBacktracksPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesCalls(stub func(*rds.DescribeDBClusterBacktracksInput, func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) error) {
	fake.describeDBClusterBacktracksPagesMutex.Lock()
	defer fake.describeDBClusterBacktracksPagesMutex.Unlock()
	fake.DescribeDBClusterBacktracksPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesArgsForCall(i int) (*rds.DescribeDBClusterBacktracksInput, func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) {
	fake.describeDBClusterBacktracksPagesMutex.RLock()
	defer fake.describeDBClusterBacktracksPagesMutex.RUnlock()
	argsForCall := fake.describeDBClusterBacktracksPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesReturns(result1 error) {
	fake.describeDBClusterBacktracksPagesMutex.Lock()
	defer fake.describeDBClusterBacktracksPagesMutex.Unlock()
	fake.DescribeDBClusterBacktracksPagesStub = nil
	fake.describeDBClusterBacktracksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterBacktracksPagesMutex.Lock()
	defer fake.describeDBClusterBacktracksPagesMutex.Unlock()
	fake.DescribeDBClusterBacktracksPagesStub = nil
	if fake.describeDBClusterBacktracksPagesReturnsOnCall == nil {
		fake.describeDBClusterBacktracksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterBacktracksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterBacktracksInput, arg3 func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBClusterBacktracksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterBacktracksPagesWithContextReturnsOnCall[len(fake.describeDBClusterBacktracksPagesWithContextArgsForCall)]
	fake.describeDBClusterBacktracksPagesWithContextArgsForCall = append(fake.describeDBClusterBacktracksPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterBacktracksInput
		arg3 func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBClusterBacktracksPagesWithContextStub
	fakeReturns := fake.describeDBClusterBacktracksPagesWithContextReturns
	fake.recordInvocation("DescribeDBClusterBacktracksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBClusterBacktracksPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesWithContextCallCount() int {
	fake.describeDBClusterBacktracksPagesWithContextMutex.RLock()
	defer fake.describeDBClusterBacktracksPagesWithContextMutex.RUnlock()
	return len(fake.describeDBClusterBacktracksPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterBacktracksInput, func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, ...request.Option) error) {
	fake.describeDBClusterBacktracksPagesWithContextMutex.Lock()
	defer fake.describeDBClusterBacktracksPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterBacktracksPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterBacktracksInput, func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, []request.Option) {
	fake.describeDBClusterBacktracksPagesWithContextMutex.RLock()
	defer fake.describeDBClusterBacktracksPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterBacktracksPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesWithContextReturns(result1 error) {
	fake.describeDBClusterBacktracksPagesWithContextMutex.Lock()
	defer fake.describeDBClusterBacktracksPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterBacktracksPagesWithContextStub = nil
	fake.describeDBClusterBacktracksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterBacktracksPagesWithContextMutex.Lock()
	defer fake.describeDBClusterBacktracksPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterBacktracksPagesWithContextStub = nil
	if fake.describeDBClusterBacktracksPagesWithContextReturnsOnCall == nil {
		fake.describeDBClusterBacktracksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterBacktracksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksRequest(arg1 *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput) {
	fake.describeDBClusterBacktracksRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClusterBacktracksRequestReturnsOnCall[len(fake.describeDBClusterBacktracksRequestArgsForCall)]
	fake.describeDBClusterBacktracksRequestArgsForCall = append(fake.describeDBClusterBacktracksRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClusterBacktracksInput
	}{arg1})
	stub := fake.DescribeDBClusterBacktracksRequestStub
	fakeReturns := fake.describeDBClusterBacktracksRequestReturns
	fake.recordInvocation("DescribeDBClusterBacktracksRequest", []interface{}{arg1})
	fake.describeDBClusterBacktracksRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksRequestCallCount() int {
	fake.describeDBClusterBacktracksRequestMutex.RLock()
	defer fake.describeDBClusterBacktracksRequestMutex.RUnlock()
	return len(fake.describeDBClusterBacktracksRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksRequestCalls(stub func(*rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput)) {
	fake.describeDBClusterBacktracksRequestMutex.Lock()
	defer fake.describeDBClusterBacktracksRequestMutex.Unlock()
	fake.DescribeDBClusterBacktracksRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksRequestArgsForCall(i int) *rds.DescribeDBClusterBacktracksInput {
	fake.describeDBClusterBacktracksRequestMutex.RLock()
	defer fake.describeDBClusterBacktracksRequestMutex.RUnlock()
	argsForCall := fake.describeDBClusterBacktracksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClusterBacktracksOutput) {
	fake.describeDBClusterBacktracksRequestMutex.Lock()
	defer fake.describeDBClusterBacktracksRequestMutex.Unlock()
	fake.DescribeDBClusterBacktracksRequestStub = nil
	fake.describeDBClusterBacktracksRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterBacktracksOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClusterBacktracksOutput) {
	fake.describeDBClusterBacktracksRequestMutex.Lock()
	defer fake.describeDBClusterBacktracksRequestMutex.Unlock()
	fake.DescribeDBClusterBacktracksRequestStub = nil
	if fake.describeDBClusterBacktracksRequestReturnsOnCall == nil {
		fake.describeDBClusterBacktracksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClusterBacktracksOutput
		})
	}
	fake.describeDBClusterBacktracksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterBacktracksOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterBacktracksInput, arg3 ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {
	fake.describeDBClusterBacktracksWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterBacktracksWithContextReturnsOnCall[len(fake.describeDBClusterBacktracksWithContextArgsForCall)]
	fake.describeDBClusterBacktracksWithContextArgsForCall = append(fake.describeDBClusterBacktracksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterBacktracksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClusterBacktracksWithContextStub
	fakeReturns := fake.describeDBClusterBacktracksWithContextReturns
	fake.recordInvocation("DescribeDBClusterBacktracksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClusterBacktracksWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksWithContextCallCount() int {
	fake.describeDBClusterBacktracksWithContextMutex.RLock()
	defer fake.describeDBClusterBacktracksWithContextMutex.RUnlock()
	return len(fake.describeDBClusterBacktracksWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterBacktracksInput, ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error)) {
	fake.describeDBClusterBacktracksWithContextMutex.Lock()
	defer fake.describeDBClusterBacktracksWithContextMutex.Unlock()
	fake.DescribeDBClusterBacktracksWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterBacktracksInput, []request.Option) {
	fake.describeDBClusterBacktracksWithContextMutex.RLock()
	defer fake.describeDBClusterBacktracksWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterBacktracksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksWithContextReturns(result1 *rds.DescribeDBClusterBacktracksOutput, result2 error) {
	fake.describeDBClusterBacktracksWithContextMutex.Lock()
	defer fake.describeDBClusterBacktracksWithContextMutex.Unlock()
	fake.DescribeDBClusterBacktracksWithContextStub = nil
	fake.describeDBClusterBacktracksWithContextReturns = struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterBacktracksWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClusterBacktracksOutput, result2 error) {
	fake.describeDBClusterBacktracksWithContextMutex.Lock()
	defer fake.describeDBClusterBacktracksWithContextMutex.Unlock()
	fake.DescribeDBClusterBacktracksWithContextStub = nil
	if fake.describeDBClusterBacktracksWithContextReturnsOnCall == nil {
		fake.describeDBClusterBacktracksWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterBacktracksOutput
			result2 error
		})
	}
	fake.describeDBClusterBacktracksWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterBacktracksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpoints(arg1 *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
	fake.describeDBClusterEndpointsMutex.Lock()
	ret, specificReturn := fake.describeDBClusterEndpointsReturnsOnCall[len(fake.describeDBClusterEndpointsArgsForCall)]
	fake.describeDBClusterEndpointsArgsForCall = append(fake.describeDBClusterEndpointsArgsForCall, struct {
		arg1 *rds.DescribeDBClusterEndpointsInput
	}{arg1})
	stub := fake.DescribeDBClusterEndpointsStub
	fakeReturns := fake.describeDBClusterEndpointsReturns
	fake.recordInvocation("DescribeDBClusterEndpoints", []interface{}{arg1})
	fake.describeDBClusterEndpointsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsCallCount() int {
	fake.describeDBClusterEndpointsMutex.RLock()
	defer fake.describeDBClusterEndpointsMutex.RUnlock()
	return len(fake.describeDBClusterEndpointsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsCalls(stub func(*rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error)) {
	fake.describeDBClusterEndpointsMutex.Lock()
	defer fake.describeDBClusterEndpointsMutex.Unlock()
	fake.DescribeDBClusterEndpointsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsArgsForCall(i int) *rds.DescribeDBClusterEndpointsInput {
	fake.describeDBClusterEndpointsMutex.RLock()
	defer fake.describeDBClusterEndpointsMutex.RUnlock()
	argsForCall := fake.describeDBClusterEndpointsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsReturns(result1 *rds.DescribeDBClusterEndpointsOutput, result2 error) {
	fake.describeDBClusterEndpointsMutex.Lock()
	defer fake.describeDBClusterEndpointsMutex.Unlock()
	fake.DescribeDBClusterEndpointsStub = nil
	fake.describeDBClusterEndpointsReturns = struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsReturnsOnCall(i int, result1 *rds.DescribeDBClusterEndpointsOutput, result2 error) {
	fake.describeDBClusterEndpointsMutex.Lock()
	defer fake.describeDBClusterEndpointsMutex.Unlock()
	fake.DescribeDBClusterEndpointsStub = nil
	if fake.describeDBClusterEndpointsReturnsOnCall == nil {
		fake.describeDBClusterEndpointsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterEndpointsOutput
			result2 error
		})
	}
	fake.describeDBClusterEndpointsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPages(arg1 *rds.DescribeDBClusterEndpointsInput, arg2 func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) error {
	fake.describeDBClusterEndpointsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBClusterEndpointsPagesReturnsOnCall[len(fake.describeDBClusterEndpointsPagesArgsForCall)]
	fake.describeDBClusterEndpointsPagesArgsForCall = append(fake.describeDBClusterEndpointsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBClusterEndpointsInput
		arg2 func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBClusterEndpointsPagesStub
	fakeReturns := fake.describeDBClusterEndpointsPagesReturns
	fake.recordInvocation("DescribeDBClusterEndpointsPages", []interface{}{arg1, arg2})
	fake.describeDBClusterEndpointsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesCallCount() int {
	fake.describeDBClusterEndpointsPagesMutex.RLock()
	defer fake.describeDBClusterEndpointsPagesMutex.RUnlock()
	return len(fake.describeDBClusterEndpointsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesCalls(stub func(*rds.DescribeDBClusterEndpointsInput, func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) error) {
	fake.describeDBClusterEndpointsPagesMutex.Lock()
	defer fake.describeDBClusterEndpointsPagesMutex.Unlock()
	fake.DescribeDBClusterEndpointsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesArgsForCall(i int) (*rds.DescribeDBClusterEndpointsInput, func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) {
	fake.describeDBClusterEndpointsPagesMutex.RLock()
	defer fake.describeDBClusterEndpointsPagesMutex.RUnlock()
	argsForCall := fake.describeDBClusterEndpointsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesReturns(result1 error) {
	fake.describeDBClusterEndpointsPagesMutex.Lock()
	defer fake.describeDBClusterEndpointsPagesMutex.Unlock()
	fake.DescribeDBClusterEndpointsPagesStub = nil
	fake.describeDBClusterEndpointsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterEndpointsPagesMutex.Lock()
	defer fake.describeDBClusterEndpointsPagesMutex.Unlock()
	fake.DescribeDBClusterEndpointsPagesStub = nil
	if fake.describeDBClusterEndpointsPagesReturnsOnCall == nil {
		fake.describeDBClusterEndpointsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterEndpointsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterEndpointsInput, arg3 func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBClusterEndpointsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterEndpointsPagesWithContextReturnsOnCall[len(fake.describeDBClusterEndpointsPagesWithContextArgsForCall)]
	fake.describeDBClusterEndpointsPagesWithContextArgsForCall = append(fake.describeDBClusterEndpointsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterEndpointsInput
		arg3 func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBClusterEndpointsPagesWithContextStub
	fakeReturns := fake.describeDBClusterEndpointsPagesWithContextReturns
	fake.recordInvocation("DescribeDBClusterEndpointsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBClusterEndpointsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesWithContextCallCount() int {
	fake.describeDBClusterEndpointsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterEndpointsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBClusterEndpointsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterEndpointsInput, func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBClusterEndpointsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterEndpointsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterEndpointsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterEndpointsInput, func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, []request.Option) {
	fake.describeDBClusterEndpointsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterEndpointsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterEndpointsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesWithContextReturns(result1 error) {
	fake.describeDBClusterEndpointsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterEndpointsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterEndpointsPagesWithContextStub = nil
	fake.describeDBClusterEndpointsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterEndpointsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterEndpointsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterEndpointsPagesWithContextStub = nil
	if fake.describeDBClusterEndpointsPagesWithContextReturnsOnCall == nil {
		fake.describeDBClusterEndpointsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterEndpointsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsRequest(arg1 *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput) {
	fake.describeDBClusterEndpointsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClusterEndpointsRequestReturnsOnCall[len(fake.describeDBClusterEndpointsRequestArgsForCall)]
	fake.describeDBClusterEndpointsRequestArgsForCall = append(fake.describeDBClusterEndpointsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClusterEndpointsInput
	}{arg1})
	stub := fake.DescribeDBClusterEndpointsRequestStub
	fakeReturns := fake.describeDBClusterEndpointsRequestReturns
	fake.recordInvocation("DescribeDBClusterEndpointsRequest", []interface{}{arg1})
	fake.describeDBClusterEndpointsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsRequestCallCount() int {
	fake.describeDBClusterEndpointsRequestMutex.RLock()
	defer fake.describeDBClusterEndpointsRequestMutex.RUnlock()
	return len(fake.describeDBClusterEndpointsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsRequestCalls(stub func(*rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput)) {
	fake.describeDBClusterEndpointsRequestMutex.Lock()
	defer fake.describeDBClusterEndpointsRequestMutex.Unlock()
	fake.DescribeDBClusterEndpointsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsRequestArgsForCall(i int) *rds.DescribeDBClusterEndpointsInput {
	fake.describeDBClusterEndpointsRequestMutex.RLock()
	defer fake.describeDBClusterEndpointsRequestMutex.RUnlock()
	argsForCall := fake.describeDBClusterEndpointsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClusterEndpointsOutput) {
	fake.describeDBClusterEndpointsRequestMutex.Lock()
	defer fake.describeDBClusterEndpointsRequestMutex.Unlock()
	fake.DescribeDBClusterEndpointsRequestStub = nil
	fake.describeDBClusterEndpointsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterEndpointsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClusterEndpointsOutput) {
	fake.describeDBClusterEndpointsRequestMutex.Lock()
	defer fake.describeDBClusterEndpointsRequestMutex.Unlock()
	fake.DescribeDBClusterEndpointsRequestStub = nil
	if fake.describeDBClusterEndpointsRequestReturnsOnCall == nil {
		fake.describeDBClusterEndpointsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClusterEndpointsOutput
		})
	}
	fake.describeDBClusterEndpointsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterEndpointsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterEndpointsInput, arg3 ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {
	fake.describeDBClusterEndpointsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterEndpointsWithContextReturnsOnCall[len(fake.describeDBClusterEndpointsWithContextArgsForCall)]
	fake.describeDBClusterEndpointsWithContextArgsForCall = append(fake.describeDBClusterEndpointsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterEndpointsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClusterEndpointsWithContextStub
	fakeReturns := fake.describeDBClusterEndpointsWithContextReturns
	fake.recordInvocation("DescribeDBClusterEndpointsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClusterEndpointsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsWithContextCallCount() int {
	fake.describeDBClusterEndpointsWithContextMutex.RLock()
	defer fake.describeDBClusterEndpointsWithContextMutex.RUnlock()
	return len(fake.describeDBClusterEndpointsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterEndpointsInput, ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error)) {
	fake.describeDBClusterEndpointsWithContextMutex.Lock()
	defer fake.describeDBClusterEndpointsWithContextMutex.Unlock()
	fake.DescribeDBClusterEndpointsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterEndpointsInput, []request.Option) {
	fake.describeDBClusterEndpointsWithContextMutex.RLock()
	defer fake.describeDBClusterEndpointsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterEndpointsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsWithContextReturns(result1 *rds.DescribeDBClusterEndpointsOutput, result2 error) {
	fake.describeDBClusterEndpointsWithContextMutex.Lock()
	defer fake.describeDBClusterEndpointsWithContextMutex.Unlock()
	fake.DescribeDBClusterEndpointsWithContextStub = nil
	fake.describeDBClusterEndpointsWithContextReturns = struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterEndpointsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClusterEndpointsOutput, result2 error) {
	fake.describeDBClusterEndpointsWithContextMutex.Lock()
	defer fake.describeDBClusterEndpointsWithContextMutex.Unlock()
	fake.DescribeDBClusterEndpointsWithContextStub = nil
	if fake.describeDBClusterEndpointsWithContextReturnsOnCall == nil {
		fake.describeDBClusterEndpointsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterEndpointsOutput
			result2 error
		})
	}
	fake.describeDBClusterEndpointsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroups(arg1 *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	fake.describeDBClusterParameterGroupsMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParameterGroupsReturnsOnCall[len(fake.describeDBClusterParameterGroupsArgsForCall)]
	fake.describeDBClusterParameterGroupsArgsForCall = append(fake.describeDBClusterParameterGroupsArgsForCall, struct {
		arg1 *rds.DescribeDBClusterParameterGroupsInput
	}{arg1})
	stub := fake.DescribeDBClusterParameterGroupsStub
	fakeReturns := fake.describeDBClusterParameterGroupsReturns
	fake.recordInvocation("DescribeDBClusterParameterGroups", []interface{}{arg1})
	fake.describeDBClusterParameterGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsCallCount() int {
	fake.describeDBClusterParameterGroupsMutex.RLock()
	defer fake.describeDBClusterParameterGroupsMutex.RUnlock()
	return len(fake.describeDBClusterParameterGroupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsCalls(stub func(*rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error)) {
	fake.describeDBClusterParameterGroupsMutex.Lock()
	defer fake.describeDBClusterParameterGroupsMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsArgsForCall(i int) *rds.DescribeDBClusterParameterGroupsInput {
	fake.describeDBClusterParameterGroupsMutex.RLock()
	defer fake.describeDBClusterParameterGroupsMutex.RUnlock()
	argsForCall := fake.describeDBClusterParameterGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsReturns(result1 *rds.DescribeDBClusterParameterGroupsOutput, result2 error) {
	fake.describeDBClusterParameterGroupsMutex.Lock()
	defer fake.describeDBClusterParameterGroupsMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsStub = nil
	fake.describeDBClusterParameterGroupsReturns = struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsReturnsOnCall(i int, result1 *rds.DescribeDBClusterParameterGroupsOutput, result2 error) {
	fake.describeDBClusterParameterGroupsMutex.Lock()
	defer fake.describeDBClusterParameterGroupsMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsStub = nil
	if fake.describeDBClusterParameterGroupsReturnsOnCall == nil {
		fake.describeDBClusterParameterGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterParameterGroupsOutput
			result2 error
		})
	}
	fake.describeDBClusterParameterGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPages(arg1 *rds.DescribeDBClusterParameterGroupsInput, arg2 func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) error {
	fake.describeDBClusterParameterGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParameterGroupsPagesReturnsOnCall[len(fake.describeDBClusterParameterGroupsPagesArgsForCall)]
	fake.describeDBClusterParameterGroupsPagesArgsForCall = append(fake.describeDBClusterParameterGroupsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBClusterParameterGroupsInput
		arg2 func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBClusterParameterGroupsPagesStub
	fakeReturns := fake.describeDBClusterParameterGroupsPagesReturns
	fake.recordInvocation("DescribeDBClusterParameterGroupsPages", []interface{}{arg1, arg2})
	fake.describeDBClusterParameterGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesCallCount() int {
	fake.describeDBClusterParameterGroupsPagesMutex.RLock()
	defer fake.describeDBClusterParameterGroupsPagesMutex.RUnlock()
	return len(fake.describeDBClusterParameterGroupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesCalls(stub func(*rds.DescribeDBClusterParameterGroupsInput, func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) error) {
	fake.describeDBClusterParameterGroupsPagesMutex.Lock()
	defer fake.describeDBClusterParameterGroupsPagesMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesArgsForCall(i int) (*rds.DescribeDBClusterParameterGroupsInput, func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) {
	fake.describeDBClusterParameterGroupsPagesMutex.RLock()
	defer fake.describeDBClusterParameterGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeDBClusterParameterGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesReturns(result1 error) {
	fake.describeDBClusterParameterGroupsPagesMutex.Lock()
	defer fake.describeDBClusterParameterGroupsPagesMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsPagesStub = nil
	fake.describeDBClusterParameterGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterParameterGroupsPagesMutex.Lock()
	defer fake.describeDBClusterParameterGroupsPagesMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsPagesStub = nil
	if fake.describeDBClusterParameterGroupsPagesReturnsOnCall == nil {
		fake.describeDBClusterParameterGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterParameterGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterParameterGroupsInput, arg3 func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParameterGroupsPagesWithContextReturnsOnCall[len(fake.describeDBClusterParameterGroupsPagesWithContextArgsForCall)]
	fake.describeDBClusterParameterGroupsPagesWithContextArgsForCall = append(fake.describeDBClusterParameterGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParameterGroupsInput
		arg3 func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBClusterParameterGroupsPagesWithContextStub
	fakeReturns := fake.describeDBClusterParameterGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeDBClusterParameterGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesWithContextCallCount() int {
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterParameterGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBClusterParameterGroupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterParameterGroupsInput, func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, []request.Option) {
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterParameterGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterParameterGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesWithContextReturns(result1 error) {
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsPagesWithContextStub = nil
	fake.describeDBClusterParameterGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsPagesWithContextStub = nil
	if fake.describeDBClusterParameterGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeDBClusterParameterGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterParameterGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsRequest(arg1 *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput) {
	fake.describeDBClusterParameterGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParameterGroupsRequestReturnsOnCall[len(fake.describeDBClusterParameterGroupsRequestArgsForCall)]
	fake.describeDBClusterParameterGroupsRequestArgsForCall = append(fake.describeDBClusterParameterGroupsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClusterParameterGroupsInput
	}{arg1})
	stub := fake.DescribeDBClusterParameterGroupsRequestStub
	fakeReturns := fake.describeDBClusterParameterGroupsRequestReturns
	fake.recordInvocation("DescribeDBClusterParameterGroupsRequest", []interface{}{arg1})
	fake.describeDBClusterParameterGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsRequestCallCount() int {
	fake.describeDBClusterParameterGroupsRequestMutex.RLock()
	defer fake.describeDBClusterParameterGroupsRequestMutex.RUnlock()
	return len(fake.describeDBClusterParameterGroupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsRequestCalls(stub func(*rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput)) {
	fake.describeDBClusterParameterGroupsRequestMutex.Lock()
	defer fake.describeDBClusterParameterGroupsRequestMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsRequestArgsForCall(i int) *rds.DescribeDBClusterParameterGroupsInput {
	fake.describeDBClusterParameterGroupsRequestMutex.RLock()
	defer fake.describeDBClusterParameterGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeDBClusterParameterGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClusterParameterGroupsOutput) {
	fake.describeDBClusterParameterGroupsRequestMutex.Lock()
	defer fake.describeDBClusterParameterGroupsRequestMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsRequestStub = nil
	fake.describeDBClusterParameterGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClusterParameterGroupsOutput) {
	fake.describeDBClusterParameterGroupsRequestMutex.Lock()
	defer fake.describeDBClusterParameterGroupsRequestMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsRequestStub = nil
	if fake.describeDBClusterParameterGroupsRequestReturnsOnCall == nil {
		fake.describeDBClusterParameterGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClusterParameterGroupsOutput
		})
	}
	fake.describeDBClusterParameterGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterParameterGroupsInput, arg3 ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	fake.describeDBClusterParameterGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParameterGroupsWithContextReturnsOnCall[len(fake.describeDBClusterParameterGroupsWithContextArgsForCall)]
	fake.describeDBClusterParameterGroupsWithContextArgsForCall = append(fake.describeDBClusterParameterGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParameterGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClusterParameterGroupsWithContextStub
	fakeReturns := fake.describeDBClusterParameterGroupsWithContextReturns
	fake.recordInvocation("DescribeDBClusterParameterGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClusterParameterGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsWithContextCallCount() int {
	fake.describeDBClusterParameterGroupsWithContextMutex.RLock()
	defer fake.describeDBClusterParameterGroupsWithContextMutex.RUnlock()
	return len(fake.describeDBClusterParameterGroupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error)) {
	fake.describeDBClusterParameterGroupsWithContextMutex.Lock()
	defer fake.describeDBClusterParameterGroupsWithContextMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterParameterGroupsInput, []request.Option) {
	fake.describeDBClusterParameterGroupsWithContextMutex.RLock()
	defer fake.describeDBClusterParameterGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterParameterGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsWithContextReturns(result1 *rds.DescribeDBClusterParameterGroupsOutput, result2 error) {
	fake.describeDBClusterParameterGroupsWithContextMutex.Lock()
	defer fake.describeDBClusterParameterGroupsWithContextMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsWithContextStub = nil
	fake.describeDBClusterParameterGroupsWithContextReturns = struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameterGroupsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClusterParameterGroupsOutput, result2 error) {
	fake.describeDBClusterParameterGroupsWithContextMutex.Lock()
	defer fake.describeDBClusterParameterGroupsWithContextMutex.Unlock()
	fake.DescribeDBClusterParameterGroupsWithContextStub = nil
	if fake.describeDBClusterParameterGroupsWithContextReturnsOnCall == nil {
		fake.describeDBClusterParameterGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterParameterGroupsOutput
			result2 error
		})
	}
	fake.describeDBClusterParameterGroupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParameters(arg1 *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
	fake.describeDBClusterParametersMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParametersReturnsOnCall[len(fake.describeDBClusterParametersArgsForCall)]
	fake.describeDBClusterParametersArgsForCall = append(fake.describeDBClusterParametersArgsForCall, struct {
		arg1 *rds.DescribeDBClusterParametersInput
	}{arg1})
	stub := fake.DescribeDBClusterParametersStub
	fakeReturns := fake.describeDBClusterParametersReturns
	fake.recordInvocation("DescribeDBClusterParameters", []interface{}{arg1})
	fake.describeDBClusterParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersCallCount() int {
	fake.describeDBClusterParametersMutex.RLock()
	defer fake.describeDBClusterParametersMutex.RUnlock()
	return len(fake.describeDBClusterParametersArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersCalls(stub func(*rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error)) {
	fake.describeDBClusterParametersMutex.Lock()
	defer fake.describeDBClusterParametersMutex.Unlock()
	fake.DescribeDBClusterParametersStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersArgsForCall(i int) *rds.DescribeDBClusterParametersInput {
	fake.describeDBClusterParametersMutex.RLock()
	defer fake.describeDBClusterParametersMutex.RUnlock()
	argsForCall := fake.describeDBClusterParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersReturns(result1 *rds.DescribeDBClusterParametersOutput, result2 error) {
	fake.describeDBClusterParametersMutex.Lock()
	defer fake.describeDBClusterParametersMutex.Unlock()
	fake.DescribeDBClusterParametersStub = nil
	fake.describeDBClusterParametersReturns = struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersReturnsOnCall(i int, result1 *rds.DescribeDBClusterParametersOutput, result2 error) {
	fake.describeDBClusterParametersMutex.Lock()
	defer fake.describeDBClusterParametersMutex.Unlock()
	fake.DescribeDBClusterParametersStub = nil
	if fake.describeDBClusterParametersReturnsOnCall == nil {
		fake.describeDBClusterParametersReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterParametersOutput
			result2 error
		})
	}
	fake.describeDBClusterParametersReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPages(arg1 *rds.DescribeDBClusterParametersInput, arg2 func(*rds.DescribeDBClusterParametersOutput, bool) bool) error {
	fake.describeDBClusterParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParametersPagesReturnsOnCall[len(fake.describeDBClusterParametersPagesArgsForCall)]
	fake.describeDBClusterParametersPagesArgsForCall = append(fake.describeDBClusterParametersPagesArgsForCall, struct {
		arg1 *rds.DescribeDBClusterParametersInput
		arg2 func(*rds.DescribeDBClusterParametersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBClusterParametersPagesStub
	fakeReturns := fake.describeDBClusterParametersPagesReturns
	fake.recordInvocation("DescribeDBClusterParametersPages", []interface{}{arg1, arg2})
	fake.describeDBClusterParametersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesCallCount() int {
	fake.describeDBClusterParametersPagesMutex.RLock()
	defer fake.describeDBClusterParametersPagesMutex.RUnlock()
	return len(fake.describeDBClusterParametersPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesCalls(stub func(*rds.DescribeDBClusterParametersInput, func(*rds.DescribeDBClusterParametersOutput, bool) bool) error) {
	fake.describeDBClusterParametersPagesMutex.Lock()
	defer fake.describeDBClusterParametersPagesMutex.Unlock()
	fake.DescribeDBClusterParametersPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesArgsForCall(i int) (*rds.DescribeDBClusterParametersInput, func(*rds.DescribeDBClusterParametersOutput, bool) bool) {
	fake.describeDBClusterParametersPagesMutex.RLock()
	defer fake.describeDBClusterParametersPagesMutex.RUnlock()
	argsForCall := fake.describeDBClusterParametersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesReturns(result1 error) {
	fake.describeDBClusterParametersPagesMutex.Lock()
	defer fake.describeDBClusterParametersPagesMutex.Unlock()
	fake.DescribeDBClusterParametersPagesStub = nil
	fake.describeDBClusterParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterParametersPagesMutex.Lock()
	defer fake.describeDBClusterParametersPagesMutex.Unlock()
	fake.DescribeDBClusterParametersPagesStub = nil
	if fake.describeDBClusterParametersPagesReturnsOnCall == nil {
		fake.describeDBClusterParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterParametersInput, arg3 func(*rds.DescribeDBClusterParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBClusterParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParametersPagesWithContextReturnsOnCall[len(fake.describeDBClusterParametersPagesWithContextArgsForCall)]
	fake.describeDBClusterParametersPagesWithContextArgsForCall = append(fake.describeDBClusterParametersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParametersInput
		arg3 func(*rds.DescribeDBClusterParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBClusterParametersPagesWithContextStub
	fakeReturns := fake.describeDBClusterParametersPagesWithContextReturns
	fake.recordInvocation("DescribeDBClusterParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBClusterParametersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesWithContextCallCount() int {
	fake.describeDBClusterParametersPagesWithContextMutex.RLock()
	defer fake.describeDBClusterParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeDBClusterParametersPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterParametersInput, func(*rds.DescribeDBClusterParametersOutput, bool) bool, ...request.Option) error) {
	fake.describeDBClusterParametersPagesWithContextMutex.Lock()
	defer fake.describeDBClusterParametersPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterParametersPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterParametersInput, func(*rds.DescribeDBClusterParametersOutput, bool) bool, []request.Option) {
	fake.describeDBClusterParametersPagesWithContextMutex.RLock()
	defer fake.describeDBClusterParametersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterParametersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesWithContextReturns(result1 error) {
	fake.describeDBClusterParametersPagesWithContextMutex.Lock()
	defer fake.describeDBClusterParametersPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterParametersPagesWithContextStub = nil
	fake.describeDBClusterParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterParametersPagesWithContextMutex.Lock()
	defer fake.describeDBClusterParametersPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterParametersPagesWithContextStub = nil
	if fake.describeDBClusterParametersPagesWithContextReturnsOnCall == nil {
		fake.describeDBClusterParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersRequest(arg1 *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput) {
	fake.describeDBClusterParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParametersRequestReturnsOnCall[len(fake.describeDBClusterParametersRequestArgsForCall)]
	fake.describeDBClusterParametersRequestArgsForCall = append(fake.describeDBClusterParametersRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClusterParametersInput
	}{arg1})
	stub := fake.DescribeDBClusterParametersRequestStub
	fakeReturns := fake.describeDBClusterParametersRequestReturns
	fake.recordInvocation("DescribeDBClusterParametersRequest", []interface{}{arg1})
	fake.describeDBClusterParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersRequestCallCount() int {
	fake.describeDBClusterParametersRequestMutex.RLock()
	defer fake.describeDBClusterParametersRequestMutex.RUnlock()
	return len(fake.describeDBClusterParametersRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersRequestCalls(stub func(*rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput)) {
	fake.describeDBClusterParametersRequestMutex.Lock()
	defer fake.describeDBClusterParametersRequestMutex.Unlock()
	fake.DescribeDBClusterParametersRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersRequestArgsForCall(i int) *rds.DescribeDBClusterParametersInput {
	fake.describeDBClusterParametersRequestMutex.RLock()
	defer fake.describeDBClusterParametersRequestMutex.RUnlock()
	argsForCall := fake.describeDBClusterParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClusterParametersOutput) {
	fake.describeDBClusterParametersRequestMutex.Lock()
	defer fake.describeDBClusterParametersRequestMutex.Unlock()
	fake.DescribeDBClusterParametersRequestStub = nil
	fake.describeDBClusterParametersRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClusterParametersOutput) {
	fake.describeDBClusterParametersRequestMutex.Lock()
	defer fake.describeDBClusterParametersRequestMutex.Unlock()
	fake.DescribeDBClusterParametersRequestStub = nil
	if fake.describeDBClusterParametersRequestReturnsOnCall == nil {
		fake.describeDBClusterParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClusterParametersOutput
		})
	}
	fake.describeDBClusterParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterParametersInput, arg3 ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {
	fake.describeDBClusterParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterParametersWithContextReturnsOnCall[len(fake.describeDBClusterParametersWithContextArgsForCall)]
	fake.describeDBClusterParametersWithContextArgsForCall = append(fake.describeDBClusterParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClusterParametersWithContextStub
	fakeReturns := fake.describeDBClusterParametersWithContextReturns
	fake.recordInvocation("DescribeDBClusterParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClusterParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersWithContextCallCount() int {
	fake.describeDBClusterParametersWithContextMutex.RLock()
	defer fake.describeDBClusterParametersWithContextMutex.RUnlock()
	return len(fake.describeDBClusterParametersWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterParametersInput, ...request.Option) (*rds.DescribeDBClusterParametersOutput, error)) {
	fake.describeDBClusterParametersWithContextMutex.Lock()
	defer fake.describeDBClusterParametersWithContextMutex.Unlock()
	fake.DescribeDBClusterParametersWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterParametersInput, []request.Option) {
	fake.describeDBClusterParametersWithContextMutex.RLock()
	defer fake.describeDBClusterParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersWithContextReturns(result1 *rds.DescribeDBClusterParametersOutput, result2 error) {
	fake.describeDBClusterParametersWithContextMutex.Lock()
	defer fake.describeDBClusterParametersWithContextMutex.Unlock()
	fake.DescribeDBClusterParametersWithContextStub = nil
	fake.describeDBClusterParametersWithContextReturns = struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterParametersWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClusterParametersOutput, result2 error) {
	fake.describeDBClusterParametersWithContextMutex.Lock()
	defer fake.describeDBClusterParametersWithContextMutex.Unlock()
	fake.DescribeDBClusterParametersWithContextStub = nil
	if fake.describeDBClusterParametersWithContextReturnsOnCall == nil {
		fake.describeDBClusterParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterParametersOutput
			result2 error
		})
	}
	fake.describeDBClusterParametersWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributes(arg1 *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	fake.describeDBClusterSnapshotAttributesMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotAttributesReturnsOnCall[len(fake.describeDBClusterSnapshotAttributesArgsForCall)]
	fake.describeDBClusterSnapshotAttributesArgsForCall = append(fake.describeDBClusterSnapshotAttributesArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotAttributesInput
	}{arg1})
	stub := fake.DescribeDBClusterSnapshotAttributesStub
	fakeReturns := fake.describeDBClusterSnapshotAttributesReturns
	fake.recordInvocation("DescribeDBClusterSnapshotAttributes", []interface{}{arg1})
	fake.describeDBClusterSnapshotAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesCallCount() int {
	fake.describeDBClusterSnapshotAttributesMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotAttributesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesCalls(stub func(*rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)) {
	fake.describeDBClusterSnapshotAttributesMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesArgsForCall(i int) *rds.DescribeDBClusterSnapshotAttributesInput {
	fake.describeDBClusterSnapshotAttributesMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesReturns(result1 *rds.DescribeDBClusterSnapshotAttributesOutput, result2 error) {
	fake.describeDBClusterSnapshotAttributesMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesStub = nil
	fake.describeDBClusterSnapshotAttributesReturns = struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesReturnsOnCall(i int, result1 *rds.DescribeDBClusterSnapshotAttributesOutput, result2 error) {
	fake.describeDBClusterSnapshotAttributesMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesStub = nil
	if fake.describeDBClusterSnapshotAttributesReturnsOnCall == nil {
		fake.describeDBClusterSnapshotAttributesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterSnapshotAttributesOutput
			result2 error
		})
	}
	fake.describeDBClusterSnapshotAttributesReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesRequest(arg1 *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput) {
	fake.describeDBClusterSnapshotAttributesRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotAttributesRequestReturnsOnCall[len(fake.describeDBClusterSnapshotAttributesRequestArgsForCall)]
	fake.describeDBClusterSnapshotAttributesRequestArgsForCall = append(fake.describeDBClusterSnapshotAttributesRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotAttributesInput
	}{arg1})
	stub := fake.DescribeDBClusterSnapshotAttributesRequestStub
	fakeReturns := fake.describeDBClusterSnapshotAttributesRequestReturns
	fake.recordInvocation("DescribeDBClusterSnapshotAttributesRequest", []interface{}{arg1})
	fake.describeDBClusterSnapshotAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesRequestCallCount() int {
	fake.describeDBClusterSnapshotAttributesRequestMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesRequestMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotAttributesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesRequestCalls(stub func(*rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput)) {
	fake.describeDBClusterSnapshotAttributesRequestMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesRequestMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesRequestArgsForCall(i int) *rds.DescribeDBClusterSnapshotAttributesInput {
	fake.describeDBClusterSnapshotAttributesRequestMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesRequestMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClusterSnapshotAttributesOutput) {
	fake.describeDBClusterSnapshotAttributesRequestMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesRequestMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesRequestStub = nil
	fake.describeDBClusterSnapshotAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotAttributesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClusterSnapshotAttributesOutput) {
	fake.describeDBClusterSnapshotAttributesRequestMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesRequestMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesRequestStub = nil
	if fake.describeDBClusterSnapshotAttributesRequestReturnsOnCall == nil {
		fake.describeDBClusterSnapshotAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClusterSnapshotAttributesOutput
		})
	}
	fake.describeDBClusterSnapshotAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotAttributesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterSnapshotAttributesInput, arg3 ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	fake.describeDBClusterSnapshotAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotAttributesWithContextReturnsOnCall[len(fake.describeDBClusterSnapshotAttributesWithContextArgsForCall)]
	fake.describeDBClusterSnapshotAttributesWithContextArgsForCall = append(fake.describeDBClusterSnapshotAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClusterSnapshotAttributesWithContextStub
	fakeReturns := fake.describeDBClusterSnapshotAttributesWithContextReturns
	fake.recordInvocation("DescribeDBClusterSnapshotAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClusterSnapshotAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesWithContextCallCount() int {
	fake.describeDBClusterSnapshotAttributesWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesWithContextMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotAttributesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterSnapshotAttributesInput, ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)) {
	fake.describeDBClusterSnapshotAttributesWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterSnapshotAttributesInput, []request.Option) {
	fake.describeDBClusterSnapshotAttributesWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesWithContextReturns(result1 *rds.DescribeDBClusterSnapshotAttributesOutput, result2 error) {
	fake.describeDBClusterSnapshotAttributesWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesWithContextStub = nil
	fake.describeDBClusterSnapshotAttributesWithContextReturns = struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotAttributesWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClusterSnapshotAttributesOutput, result2 error) {
	fake.describeDBClusterSnapshotAttributesWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotAttributesWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotAttributesWithContextStub = nil
	if fake.describeDBClusterSnapshotAttributesWithContextReturnsOnCall == nil {
		fake.describeDBClusterSnapshotAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterSnapshotAttributesOutput
			result2 error
		})
	}
	fake.describeDBClusterSnapshotAttributesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshots(arg1 *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	fake.describeDBClusterSnapshotsMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotsReturnsOnCall[len(fake.describeDBClusterSnapshotsArgsForCall)]
	fake.describeDBClusterSnapshotsArgsForCall = append(fake.describeDBClusterSnapshotsArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}{arg1})
	stub := fake.DescribeDBClusterSnapshotsStub
	fakeReturns := fake.describeDBClusterSnapshotsReturns
	fake.recordInvocation("DescribeDBClusterSnapshots", []interface{}{arg1})
	fake.describeDBClusterSnapshotsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsCallCount() int {
	fake.describeDBClusterSnapshotsMutex.RLock()
	defer fake.describeDBClusterSnapshotsMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsCalls(stub func(*rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error)) {
	fake.describeDBClusterSnapshotsMutex.Lock()
	defer fake.describeDBClusterSnapshotsMutex.Unlock()
	fake.DescribeDBClusterSnapshotsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsArgsForCall(i int) *rds.DescribeDBClusterSnapshotsInput {
	fake.describeDBClusterSnapshotsMutex.RLock()
	defer fake.describeDBClusterSnapshotsMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsReturns(result1 *rds.DescribeDBClusterSnapshotsOutput, result2 error) {
	fake.describeDBClusterSnapshotsMutex.Lock()
	defer fake.describeDBClusterSnapshotsMutex.Unlock()
	fake.DescribeDBClusterSnapshotsStub = nil
	fake.describeDBClusterSnapshotsReturns = struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsReturnsOnCall(i int, result1 *rds.DescribeDBClusterSnapshotsOutput, result2 error) {
	fake.describeDBClusterSnapshotsMutex.Lock()
	defer fake.describeDBClusterSnapshotsMutex.Unlock()
	fake.DescribeDBClusterSnapshotsStub = nil
	if fake.describeDBClusterSnapshotsReturnsOnCall == nil {
		fake.describeDBClusterSnapshotsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterSnapshotsOutput
			result2 error
		})
	}
	fake.describeDBClusterSnapshotsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPages(arg1 *rds.DescribeDBClusterSnapshotsInput, arg2 func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) error {
	fake.describeDBClusterSnapshotsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotsPagesReturnsOnCall[len(fake.describeDBClusterSnapshotsPagesArgsForCall)]
	fake.describeDBClusterSnapshotsPagesArgsForCall = append(fake.describeDBClusterSnapshotsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
		arg2 func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBClusterSnapshotsPagesStub
	fakeReturns := fake.describeDBClusterSnapshotsPagesReturns
	fake.recordInvocation("DescribeDBClusterSnapshotsPages", []interface{}{arg1, arg2})
	fake.describeDBClusterSnapshotsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesCallCount() int {
	fake.describeDBClusterSnapshotsPagesMutex.RLock()
	defer fake.describeDBClusterSnapshotsPagesMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesCalls(stub func(*rds.DescribeDBClusterSnapshotsInput, func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) error) {
	fake.describeDBClusterSnapshotsPagesMutex.Lock()
	defer fake.describeDBClusterSnapshotsPagesMutex.Unlock()
	fake.DescribeDBClusterSnapshotsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesArgsForCall(i int) (*rds.DescribeDBClusterSnapshotsInput, func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) {
	fake.describeDBClusterSnapshotsPagesMutex.RLock()
	defer fake.describeDBClusterSnapshotsPagesMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesReturns(result1 error) {
	fake.describeDBClusterSnapshotsPagesMutex.Lock()
	defer fake.describeDBClusterSnapshotsPagesMutex.Unlock()
	fake.DescribeDBClusterSnapshotsPagesStub = nil
	fake.describeDBClusterSnapshotsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterSnapshotsPagesMutex.Lock()
	defer fake.describeDBClusterSnapshotsPagesMutex.Unlock()
	fake.DescribeDBClusterSnapshotsPagesStub = nil
	if fake.describeDBClusterSnapshotsPagesReturnsOnCall == nil {
		fake.describeDBClusterSnapshotsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterSnapshotsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterSnapshotsInput, arg3 func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBClusterSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotsPagesWithContextReturnsOnCall[len(fake.describeDBClusterSnapshotsPagesWithContextArgsForCall)]
	fake.describeDBClusterSnapshotsPagesWithContextArgsForCall = append(fake.describeDBClusterSnapshotsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBClusterSnapshotsPagesWithContextStub
	fakeReturns := fake.describeDBClusterSnapshotsPagesWithContextReturns
	fake.recordInvocation("DescribeDBClusterSnapshotsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBClusterSnapshotsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesWithContextCallCount() int {
	fake.describeDBClusterSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterSnapshotsInput, func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBClusterSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterSnapshotsInput, func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeDBClusterSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesWithContextReturns(result1 error) {
	fake.describeDBClusterSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotsPagesWithContextStub = nil
	fake.describeDBClusterSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBClusterSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotsPagesWithContextStub = nil
	if fake.describeDBClusterSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeDBClusterSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClusterSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsRequest(arg1 *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput) {
	fake.describeDBClusterSnapshotsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotsRequestReturnsOnCall[len(fake.describeDBClusterSnapshotsRequestArgsForCall)]
	fake.describeDBClusterSnapshotsRequestArgsForCall = append(fake.describeDBClusterSnapshotsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}{arg1})
	stub := fake.DescribeDBClusterSnapshotsRequestStub
	fakeReturns := fake.describeDBClusterSnapshotsRequestReturns
	fake.recordInvocation("DescribeDBClusterSnapshotsRequest", []interface{}{arg1})
	fake.describeDBClusterSnapshotsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsRequestCallCount() int {
	fake.describeDBClusterSnapshotsRequestMutex.RLock()
	defer fake.describeDBClusterSnapshotsRequestMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsRequestCalls(stub func(*rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput)) {
	fake.describeDBClusterSnapshotsRequestMutex.Lock()
	defer fake.describeDBClusterSnapshotsRequestMutex.Unlock()
	fake.DescribeDBClusterSnapshotsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsRequestArgsForCall(i int) *rds.DescribeDBClusterSnapshotsInput {
	fake.describeDBClusterSnapshotsRequestMutex.RLock()
	defer fake.describeDBClusterSnapshotsRequestMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClusterSnapshotsOutput) {
	fake.describeDBClusterSnapshotsRequestMutex.Lock()
	defer fake.describeDBClusterSnapshotsRequestMutex.Unlock()
	fake.DescribeDBClusterSnapshotsRequestStub = nil
	fake.describeDBClusterSnapshotsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClusterSnapshotsOutput) {
	fake.describeDBClusterSnapshotsRequestMutex.Lock()
	defer fake.describeDBClusterSnapshotsRequestMutex.Unlock()
	fake.DescribeDBClusterSnapshotsRequestStub = nil
	if fake.describeDBClusterSnapshotsRequestReturnsOnCall == nil {
		fake.describeDBClusterSnapshotsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClusterSnapshotsOutput
		})
	}
	fake.describeDBClusterSnapshotsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClusterSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterSnapshotsInput, arg3 ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	fake.describeDBClusterSnapshotsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClusterSnapshotsWithContextReturnsOnCall[len(fake.describeDBClusterSnapshotsWithContextArgsForCall)]
	fake.describeDBClusterSnapshotsWithContextArgsForCall = append(fake.describeDBClusterSnapshotsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClusterSnapshotsWithContextStub
	fakeReturns := fake.describeDBClusterSnapshotsWithContextReturns
	fake.recordInvocation("DescribeDBClusterSnapshotsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClusterSnapshotsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsWithContextCallCount() int {
	fake.describeDBClusterSnapshotsWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotsWithContextMutex.RUnlock()
	return len(fake.describeDBClusterSnapshotsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error)) {
	fake.describeDBClusterSnapshotsWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotsWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterSnapshotsInput, []request.Option) {
	fake.describeDBClusterSnapshotsWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClusterSnapshotsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsWithContextReturns(result1 *rds.DescribeDBClusterSnapshotsOutput, result2 error) {
	fake.describeDBClusterSnapshotsWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotsWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotsWithContextStub = nil
	fake.describeDBClusterSnapshotsWithContextReturns = struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusterSnapshotsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClusterSnapshotsOutput, result2 error) {
	fake.describeDBClusterSnapshotsWithContextMutex.Lock()
	defer fake.describeDBClusterSnapshotsWithContextMutex.Unlock()
	fake.DescribeDBClusterSnapshotsWithContextStub = nil
	if fake.describeDBClusterSnapshotsWithContextReturnsOnCall == nil {
		fake.describeDBClusterSnapshotsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClusterSnapshotsOutput
			result2 error
		})
	}
	fake.describeDBClusterSnapshotsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClusterSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClusters(arg1 *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
	fake.describeDBClustersMutex.Lock()
	ret, specificReturn := fake.describeDBClustersReturnsOnCall[len(fake.describeDBClustersArgsForCall)]
	fake.describeDBClustersArgsForCall = append(fake.describeDBClustersArgsForCall, struct {
		arg1 *rds.DescribeDBClustersInput
	}{arg1})
	stub := fake.DescribeDBClustersStub
	fakeReturns := fake.describeDBClustersReturns
	fake.recordInvocation("DescribeDBClusters", []interface{}{arg1})
	fake.describeDBClustersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClustersCallCount() int {
	fake.describeDBClustersMutex.RLock()
	defer fake.describeDBClustersMutex.RUnlock()
	return len(fake.describeDBClustersArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClustersCalls(stub func(*rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error)) {
	fake.describeDBClustersMutex.Lock()
	defer fake.describeDBClustersMutex.Unlock()
	fake.DescribeDBClustersStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClustersArgsForCall(i int) *rds.DescribeDBClustersInput {
	fake.describeDBClustersMutex.RLock()
	defer fake.describeDBClustersMutex.RUnlock()
	argsForCall := fake.describeDBClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClustersReturns(result1 *rds.DescribeDBClustersOutput, result2 error) {
	fake.describeDBClustersMutex.Lock()
	defer fake.describeDBClustersMutex.Unlock()
	fake.DescribeDBClustersStub = nil
	fake.describeDBClustersReturns = struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClustersReturnsOnCall(i int, result1 *rds.DescribeDBClustersOutput, result2 error) {
	fake.describeDBClustersMutex.Lock()
	defer fake.describeDBClustersMutex.Unlock()
	fake.DescribeDBClustersStub = nil
	if fake.describeDBClustersReturnsOnCall == nil {
		fake.describeDBClustersReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClustersOutput
			result2 error
		})
	}
	fake.describeDBClustersReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClustersPages(arg1 *rds.DescribeDBClustersInput, arg2 func(*rds.DescribeDBClustersOutput, bool) bool) error {
	fake.describeDBClustersPagesMutex.Lock()
	ret, specificReturn := fake.describeDBClustersPagesReturnsOnCall[len(fake.describeDBClustersPagesArgsForCall)]
	fake.describeDBClustersPagesArgsForCall = append(fake.describeDBClustersPagesArgsForCall, struct {
		arg1 *rds.DescribeDBClustersInput
		arg2 func(*rds.DescribeDBClustersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBClustersPagesStub
	fakeReturns := fake.describeDBClustersPagesReturns
	fake.recordInvocation("DescribeDBClustersPages", []interface{}{arg1, arg2})
	fake.describeDBClustersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesCallCount() int {
	fake.describeDBClustersPagesMutex.RLock()
	defer fake.describeDBClustersPagesMutex.RUnlock()
	return len(fake.describeDBClustersPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesCalls(stub func(*rds.DescribeDBClustersInput, func(*rds.DescribeDBClustersOutput, bool) bool) error) {
	fake.describeDBClustersPagesMutex.Lock()
	defer fake.describeDBClustersPagesMutex.Unlock()
	fake.DescribeDBClustersPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesArgsForCall(i int) (*rds.DescribeDBClustersInput, func(*rds.DescribeDBClustersOutput, bool) bool) {
	fake.describeDBClustersPagesMutex.RLock()
	defer fake.describeDBClustersPagesMutex.RUnlock()
	argsForCall := fake.describeDBClustersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesReturns(result1 error) {
	fake.describeDBClustersPagesMutex.Lock()
	defer fake.describeDBClustersPagesMutex.Unlock()
	fake.DescribeDBClustersPagesStub = nil
	fake.describeDBClustersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBClustersPagesMutex.Lock()
	defer fake.describeDBClustersPagesMutex.Unlock()
	fake.DescribeDBClustersPagesStub = nil
	if fake.describeDBClustersPagesReturnsOnCall == nil {
		fake.describeDBClustersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClustersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBClustersInput, arg3 func(*rds.DescribeDBClustersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBClustersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClustersPagesWithContextReturnsOnCall[len(fake.describeDBClustersPagesWithContextArgsForCall)]
	fake.describeDBClustersPagesWithContextArgsForCall = append(fake.describeDBClustersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClustersInput
		arg3 func(*rds.DescribeDBClustersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBClustersPagesWithContextStub
	fakeReturns := fake.describeDBClustersPagesWithContextReturns
	fake.recordInvocation("DescribeDBClustersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBClustersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesWithContextCallCount() int {
	fake.describeDBClustersPagesWithContextMutex.RLock()
	defer fake.describeDBClustersPagesWithContextMutex.RUnlock()
	return len(fake.describeDBClustersPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBClustersInput, func(*rds.DescribeDBClustersOutput, bool) bool, ...request.Option) error) {
	fake.describeDBClustersPagesWithContextMutex.Lock()
	defer fake.describeDBClustersPagesWithContextMutex.Unlock()
	fake.DescribeDBClustersPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClustersInput, func(*rds.DescribeDBClustersOutput, bool) bool, []request.Option) {
	fake.describeDBClustersPagesWithContextMutex.RLock()
	defer fake.describeDBClustersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClustersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesWithContextReturns(result1 error) {
	fake.describeDBClustersPagesWithContextMutex.Lock()
	defer fake.describeDBClustersPagesWithContextMutex.Unlock()
	fake.DescribeDBClustersPagesWithContextStub = nil
	fake.describeDBClustersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClustersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBClustersPagesWithContextMutex.Lock()
	defer fake.describeDBClustersPagesWithContextMutex.Unlock()
	fake.DescribeDBClustersPagesWithContextStub = nil
	if fake.describeDBClustersPagesWithContextReturnsOnCall == nil {
		fake.describeDBClustersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBClustersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBClustersRequest(arg1 *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput) {
	fake.describeDBClustersRequestMutex.Lock()
	ret, specificReturn := fake.describeDBClustersRequestReturnsOnCall[len(fake.describeDBClustersRequestArgsForCall)]
	fake.describeDBClustersRequestArgsForCall = append(fake.describeDBClustersRequestArgsForCall, struct {
		arg1 *rds.DescribeDBClustersInput
	}{arg1})
	stub := fake.DescribeDBClustersRequestStub
	fakeReturns := fake.describeDBClustersRequestReturns
	fake.recordInvocation("DescribeDBClustersRequest", []interface{}{arg1})
	fake.describeDBClustersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClustersRequestCallCount() int {
	fake.describeDBClustersRequestMutex.RLock()
	defer fake.describeDBClustersRequestMutex.RUnlock()
	return len(fake.describeDBClustersRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClustersRequestCalls(stub func(*rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput)) {
	fake.describeDBClustersRequestMutex.Lock()
	defer fake.describeDBClustersRequestMutex.Unlock()
	fake.DescribeDBClustersRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClustersRequestArgsForCall(i int) *rds.DescribeDBClustersInput {
	fake.describeDBClustersRequestMutex.RLock()
	defer fake.describeDBClustersRequestMutex.RUnlock()
	argsForCall := fake.describeDBClustersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBClustersRequestReturns(result1 *request.Request, result2 *rds.DescribeDBClustersOutput) {
	fake.describeDBClustersRequestMutex.Lock()
	defer fake.describeDBClustersRequestMutex.Unlock()
	fake.DescribeDBClustersRequestStub = nil
	fake.describeDBClustersRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClustersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClustersRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBClustersOutput) {
	fake.describeDBClustersRequestMutex.Lock()
	defer fake.describeDBClustersRequestMutex.Unlock()
	fake.DescribeDBClustersRequestStub = nil
	if fake.describeDBClustersRequestReturnsOnCall == nil {
		fake.describeDBClustersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBClustersOutput
		})
	}
	fake.describeDBClustersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBClustersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClustersWithContext(arg1 context.Context, arg2 *rds.DescribeDBClustersInput, arg3 ...request.Option) (*rds.DescribeDBClustersOutput, error) {
	fake.describeDBClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBClustersWithContextReturnsOnCall[len(fake.describeDBClustersWithContextArgsForCall)]
	fake.describeDBClustersWithContextArgsForCall = append(fake.describeDBClustersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBClustersWithContextStub
	fakeReturns := fake.describeDBClustersWithContextReturns
	fake.recordInvocation("DescribeDBClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBClustersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBClustersWithContextCallCount() int {
	fake.describeDBClustersWithContextMutex.RLock()
	defer fake.describeDBClustersWithContextMutex.RUnlock()
	return len(fake.describeDBClustersWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBClustersWithContextCalls(stub func(context.Context, *rds.DescribeDBClustersInput, ...request.Option) (*rds.DescribeDBClustersOutput, error)) {
	fake.describeDBClustersWithContextMutex.Lock()
	defer fake.describeDBClustersWithContextMutex.Unlock()
	fake.DescribeDBClustersWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBClustersWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClustersInput, []request.Option) {
	fake.describeDBClustersWithContextMutex.RLock()
	defer fake.describeDBClustersWithContextMutex.RUnlock()
	argsForCall := fake.describeDBClustersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBClustersWithContextReturns(result1 *rds.DescribeDBClustersOutput, result2 error) {
	fake.describeDBClustersWithContextMutex.Lock()
	defer fake.describeDBClustersWithContextMutex.Unlock()
	fake.DescribeDBClustersWithContextStub = nil
	fake.describeDBClustersWithContextReturns = struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBClustersWithContextReturnsOnCall(i int, result1 *rds.DescribeDBClustersOutput, result2 error) {
	fake.describeDBClustersWithContextMutex.Lock()
	defer fake.describeDBClustersWithContextMutex.Unlock()
	fake.DescribeDBClustersWithContextStub = nil
	if fake.describeDBClustersWithContextReturnsOnCall == nil {
		fake.describeDBClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBClustersOutput
			result2 error
		})
	}
	fake.describeDBClustersWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersions(arg1 *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
	fake.describeDBEngineVersionsMutex.Lock()
	ret, specificReturn := fake.describeDBEngineVersionsReturnsOnCall[len(fake.describeDBEngineVersionsArgsForCall)]
	fake.describeDBEngineVersionsArgsForCall = append(fake.describeDBEngineVersionsArgsForCall, struct {
		arg1 *rds.DescribeDBEngineVersionsInput
	}{arg1})
	stub := fake.DescribeDBEngineVersionsStub
	fakeReturns := fake.describeDBEngineVersionsReturns
	fake.recordInvocation("DescribeDBEngineVersions", []interface{}{arg1})
	fake.describeDBEngineVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsCallCount() int {
	fake.describeDBEngineVersionsMutex.RLock()
	defer fake.describeDBEngineVersionsMutex.RUnlock()
	return len(fake.describeDBEngineVersionsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsCalls(stub func(*rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error)) {
	fake.describeDBEngineVersionsMutex.Lock()
	defer fake.describeDBEngineVersionsMutex.Unlock()
	fake.DescribeDBEngineVersionsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsArgsForCall(i int) *rds.DescribeDBEngineVersionsInput {
	fake.describeDBEngineVersionsMutex.RLock()
	defer fake.describeDBEngineVersionsMutex.RUnlock()
	argsForCall := fake.describeDBEngineVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsReturns(result1 *rds.DescribeDBEngineVersionsOutput, result2 error) {
	fake.describeDBEngineVersionsMutex.Lock()
	defer fake.describeDBEngineVersionsMutex.Unlock()
	fake.DescribeDBEngineVersionsStub = nil
	fake.describeDBEngineVersionsReturns = struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsReturnsOnCall(i int, result1 *rds.DescribeDBEngineVersionsOutput, result2 error) {
	fake.describeDBEngineVersionsMutex.Lock()
	defer fake.describeDBEngineVersionsMutex.Unlock()
	fake.DescribeDBEngineVersionsStub = nil
	if fake.describeDBEngineVersionsReturnsOnCall == nil {
		fake.describeDBEngineVersionsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBEngineVersionsOutput
			result2 error
		})
	}
	fake.describeDBEngineVersionsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPages(arg1 *rds.DescribeDBEngineVersionsInput, arg2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error {
	fake.describeDBEngineVersionsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBEngineVersionsPagesReturnsOnCall[len(fake.describeDBEngineVersionsPagesArgsForCall)]
	fake.describeDBEngineVersionsPagesArgsForCall = append(fake.describeDBEngineVersionsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBEngineVersionsInput
		arg2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBEngineVersionsPagesStub
	fakeReturns := fake.describeDBEngineVersionsPagesReturns
	fake.recordInvocation("DescribeDBEngineVersionsPages", []interface{}{arg1, arg2})
	fake.describeDBEngineVersionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesCallCount() int {
	fake.describeDBEngineVersionsPagesMutex.RLock()
	defer fake.describeDBEngineVersionsPagesMutex.RUnlock()
	return len(fake.describeDBEngineVersionsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesCalls(stub func(*rds.DescribeDBEngineVersionsInput, func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error) {
	fake.describeDBEngineVersionsPagesMutex.Lock()
	defer fake.describeDBEngineVersionsPagesMutex.Unlock()
	fake.DescribeDBEngineVersionsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesArgsForCall(i int) (*rds.DescribeDBEngineVersionsInput, func(*rds.DescribeDBEngineVersionsOutput, bool) bool) {
	fake.describeDBEngineVersionsPagesMutex.RLock()
	defer fake.describeDBEngineVersionsPagesMutex.RUnlock()
	argsForCall := fake.describeDBEngineVersionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesReturns(result1 error) {
	fake.describeDBEngineVersionsPagesMutex.Lock()
	defer fake.describeDBEngineVersionsPagesMutex.Unlock()
	fake.DescribeDBEngineVersionsPagesStub = nil
	fake.describeDBEngineVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBEngineVersionsPagesMutex.Lock()
	defer fake.describeDBEngineVersionsPagesMutex.Unlock()
	fake.DescribeDBEngineVersionsPagesStub = nil
	if fake.describeDBEngineVersionsPagesReturnsOnCall == nil {
		fake.describeDBEngineVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBEngineVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBEngineVersionsInput, arg3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBEngineVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBEngineVersionsPagesWithContextReturnsOnCall[len(fake.describeDBEngineVersionsPagesWithContextArgsForCall)]
	fake.describeDBEngineVersionsPagesWithContextArgsForCall = append(fake.describeDBEngineVersionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBEngineVersionsInput
		arg3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBEngineVersionsPagesWithContextStub
	fakeReturns := fake.describeDBEngineVersionsPagesWithContextReturns
	fake.recordInvocation("DescribeDBEngineVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBEngineVersionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesWithContextCallCount() int {
	fake.describeDBEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeDBEngineVersionsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBEngineVersionsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBEngineVersionsInput, func(*rds.DescribeDBEngineVersionsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBEngineVersionsPagesWithContextMutex.Lock()
	defer fake.describeDBEngineVersionsPagesWithContextMutex.Unlock()
	fake.DescribeDBEngineVersionsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBEngineVersionsInput, func(*rds.DescribeDBEngineVersionsOutput, bool) bool, []request.Option) {
	fake.describeDBEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeDBEngineVersionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBEngineVersionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesWithContextReturns(result1 error) {
	fake.describeDBEngineVersionsPagesWithContextMutex.Lock()
	defer fake.describeDBEngineVersionsPagesWithContextMutex.Unlock()
	fake.DescribeDBEngineVersionsPagesWithContextStub = nil
	fake.describeDBEngineVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBEngineVersionsPagesWithContextMutex.Lock()
	defer fake.describeDBEngineVersionsPagesWithContextMutex.Unlock()
	fake.DescribeDBEngineVersionsPagesWithContextStub = nil
	if fake.describeDBEngineVersionsPagesWithContextReturnsOnCall == nil {
		fake.describeDBEngineVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBEngineVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsRequest(arg1 *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput) {
	fake.describeDBEngineVersionsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBEngineVersionsRequestReturnsOnCall[len(fake.describeDBEngineVersionsRequestArgsForCall)]
	fake.describeDBEngineVersionsRequestArgsForCall = append(fake.describeDBEngineVersionsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBEngineVersionsInput
	}{arg1})
	stub := fake.DescribeDBEngineVersionsRequestStub
	fakeReturns := fake.describeDBEngineVersionsRequestReturns
	fake.recordInvocation("DescribeDBEngineVersionsRequest", []interface{}{arg1})
	fake.describeDBEngineVersionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsRequestCallCount() int {
	fake.describeDBEngineVersionsRequestMutex.RLock()
	defer fake.describeDBEngineVersionsRequestMutex.RUnlock()
	return len(fake.describeDBEngineVersionsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsRequestCalls(stub func(*rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput)) {
	fake.describeDBEngineVersionsRequestMutex.Lock()
	defer fake.describeDBEngineVersionsRequestMutex.Unlock()
	fake.DescribeDBEngineVersionsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsRequestArgsForCall(i int) *rds.DescribeDBEngineVersionsInput {
	fake.describeDBEngineVersionsRequestMutex.RLock()
	defer fake.describeDBEngineVersionsRequestMutex.RUnlock()
	argsForCall := fake.describeDBEngineVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBEngineVersionsOutput) {
	fake.describeDBEngineVersionsRequestMutex.Lock()
	defer fake.describeDBEngineVersionsRequestMutex.Unlock()
	fake.DescribeDBEngineVersionsRequestStub = nil
	fake.describeDBEngineVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBEngineVersionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBEngineVersionsOutput) {
	fake.describeDBEngineVersionsRequestMutex.Lock()
	defer fake.describeDBEngineVersionsRequestMutex.Unlock()
	fake.DescribeDBEngineVersionsRequestStub = nil
	if fake.describeDBEngineVersionsRequestReturnsOnCall == nil {
		fake.describeDBEngineVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBEngineVersionsOutput
		})
	}
	fake.describeDBEngineVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBEngineVersionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsWithContext(arg1 context.Context, arg2 *rds.DescribeDBEngineVersionsInput, arg3 ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {
	fake.describeDBEngineVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBEngineVersionsWithContextReturnsOnCall[len(fake.describeDBEngineVersionsWithContextArgsForCall)]
	fake.describeDBEngineVersionsWithContextArgsForCall = append(fake.describeDBEngineVersionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBEngineVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBEngineVersionsWithContextStub
	fakeReturns := fake.describeDBEngineVersionsWithContextReturns
	fake.recordInvocation("DescribeDBEngineVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBEngineVersionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsWithContextCallCount() int {
	fake.describeDBEngineVersionsWithContextMutex.RLock()
	defer fake.describeDBEngineVersionsWithContextMutex.RUnlock()
	return len(fake.describeDBEngineVersionsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsWithContextCalls(stub func(context.Context, *rds.DescribeDBEngineVersionsInput, ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error)) {
	fake.describeDBEngineVersionsWithContextMutex.Lock()
	defer fake.describeDBEngineVersionsWithContextMutex.Unlock()
	fake.DescribeDBEngineVersionsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBEngineVersionsInput, []request.Option) {
	fake.describeDBEngineVersionsWithContextMutex.RLock()
	defer fake.describeDBEngineVersionsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBEngineVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsWithContextReturns(result1 *rds.DescribeDBEngineVersionsOutput, result2 error) {
	fake.describeDBEngineVersionsWithContextMutex.Lock()
	defer fake.describeDBEngineVersionsWithContextMutex.Unlock()
	fake.DescribeDBEngineVersionsWithContextStub = nil
	fake.describeDBEngineVersionsWithContextReturns = struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBEngineVersionsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBEngineVersionsOutput, result2 error) {
	fake.describeDBEngineVersionsWithContextMutex.Lock()
	defer fake.describeDBEngineVersionsWithContextMutex.Unlock()
	fake.DescribeDBEngineVersionsWithContextStub = nil
	if fake.describeDBEngineVersionsWithContextReturnsOnCall == nil {
		fake.describeDBEngineVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBEngineVersionsOutput
			result2 error
		})
	}
	fake.describeDBEngineVersionsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackups(arg1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	fake.describeDBInstanceAutomatedBackupsMutex.Lock()
	ret, specificReturn := fake.describeDBInstanceAutomatedBackupsReturnsOnCall[len(fake.describeDBInstanceAutomatedBackupsArgsForCall)]
	fake.describeDBInstanceAutomatedBackupsArgsForCall = append(fake.describeDBInstanceAutomatedBackupsArgsForCall, struct {
		arg1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}{arg1})
	stub := fake.DescribeDBInstanceAutomatedBackupsStub
	fakeReturns := fake.describeDBInstanceAutomatedBackupsReturns
	fake.recordInvocation("DescribeDBInstanceAutomatedBackups", []interface{}{arg1})
	fake.describeDBInstanceAutomatedBackupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsCallCount() int {
	fake.describeDBInstanceAutomatedBackupsMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsMutex.RUnlock()
	return len(fake.describeDBInstanceAutomatedBackupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsCalls(stub func(*rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)) {
	fake.describeDBInstanceAutomatedBackupsMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsArgsForCall(i int) *rds.DescribeDBInstanceAutomatedBackupsInput {
	fake.describeDBInstanceAutomatedBackupsMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsMutex.RUnlock()
	argsForCall := fake.describeDBInstanceAutomatedBackupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsReturns(result1 *rds.DescribeDBInstanceAutomatedBackupsOutput, result2 error) {
	fake.describeDBInstanceAutomatedBackupsMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsStub = nil
	fake.describeDBInstanceAutomatedBackupsReturns = struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsReturnsOnCall(i int, result1 *rds.DescribeDBInstanceAutomatedBackupsOutput, result2 error) {
	fake.describeDBInstanceAutomatedBackupsMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsStub = nil
	if fake.describeDBInstanceAutomatedBackupsReturnsOnCall == nil {
		fake.describeDBInstanceAutomatedBackupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
			result2 error
		})
	}
	fake.describeDBInstanceAutomatedBackupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPages(arg1 *rds.DescribeDBInstanceAutomatedBackupsInput, arg2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error {
	fake.describeDBInstanceAutomatedBackupsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBInstanceAutomatedBackupsPagesReturnsOnCall[len(fake.describeDBInstanceAutomatedBackupsPagesArgsForCall)]
	fake.describeDBInstanceAutomatedBackupsPagesArgsForCall = append(fake.describeDBInstanceAutomatedBackupsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBInstanceAutomatedBackupsInput
		arg2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBInstanceAutomatedBackupsPagesStub
	fakeReturns := fake.describeDBInstanceAutomatedBackupsPagesReturns
	fake.recordInvocation("DescribeDBInstanceAutomatedBackupsPages", []interface{}{arg1, arg2})
	fake.describeDBInstanceAutomatedBackupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesCallCount() int {
	fake.describeDBInstanceAutomatedBackupsPagesMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsPagesMutex.RUnlock()
	return len(fake.describeDBInstanceAutomatedBackupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesCalls(stub func(*rds.DescribeDBInstanceAutomatedBackupsInput, func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error) {
	fake.describeDBInstanceAutomatedBackupsPagesMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsPagesMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesArgsForCall(i int) (*rds.DescribeDBInstanceAutomatedBackupsInput, func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) {
	fake.describeDBInstanceAutomatedBackupsPagesMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsPagesMutex.RUnlock()
	argsForCall := fake.describeDBInstanceAutomatedBackupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesReturns(result1 error) {
	fake.describeDBInstanceAutomatedBackupsPagesMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsPagesMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsPagesStub = nil
	fake.describeDBInstanceAutomatedBackupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBInstanceAutomatedBackupsPagesMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsPagesMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsPagesStub = nil
	if fake.describeDBInstanceAutomatedBackupsPagesReturnsOnCall == nil {
		fake.describeDBInstanceAutomatedBackupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBInstanceAutomatedBackupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBInstanceAutomatedBackupsInput, arg3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBInstanceAutomatedBackupsPagesWithContextReturnsOnCall[len(fake.describeDBInstanceAutomatedBackupsPagesWithContextArgsForCall)]
	fake.describeDBInstanceAutomatedBackupsPagesWithContextArgsForCall = append(fake.describeDBInstanceAutomatedBackupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstanceAutomatedBackupsInput
		arg3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBInstanceAutomatedBackupsPagesWithContextStub
	fakeReturns := fake.describeDBInstanceAutomatedBackupsPagesWithContextReturns
	fake.recordInvocation("DescribeDBInstanceAutomatedBackupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesWithContextCallCount() int {
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBInstanceAutomatedBackupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, []request.Option) {
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBInstanceAutomatedBackupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesWithContextReturns(result1 error) {
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsPagesWithContextStub = nil
	fake.describeDBInstanceAutomatedBackupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsPagesWithContextStub = nil
	if fake.describeDBInstanceAutomatedBackupsPagesWithContextReturnsOnCall == nil {
		fake.describeDBInstanceAutomatedBackupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBInstanceAutomatedBackupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsRequest(arg1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput) {
	fake.describeDBInstanceAutomatedBackupsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBInstanceAutomatedBackupsRequestReturnsOnCall[len(fake.describeDBInstanceAutomatedBackupsRequestArgsForCall)]
	fake.describeDBInstanceAutomatedBackupsRequestArgsForCall = append(fake.describeDBInstanceAutomatedBackupsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}{arg1})
	stub := fake.DescribeDBInstanceAutomatedBackupsRequestStub
	fakeReturns := fake.describeDBInstanceAutomatedBackupsRequestReturns
	fake.recordInvocation("DescribeDBInstanceAutomatedBackupsRequest", []interface{}{arg1})
	fake.describeDBInstanceAutomatedBackupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsRequestCallCount() int {
	fake.describeDBInstanceAutomatedBackupsRequestMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsRequestMutex.RUnlock()
	return len(fake.describeDBInstanceAutomatedBackupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsRequestCalls(stub func(*rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput)) {
	fake.describeDBInstanceAutomatedBackupsRequestMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsRequestMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsRequestArgsForCall(i int) *rds.DescribeDBInstanceAutomatedBackupsInput {
	fake.describeDBInstanceAutomatedBackupsRequestMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsRequestMutex.RUnlock()
	argsForCall := fake.describeDBInstanceAutomatedBackupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBInstanceAutomatedBackupsOutput) {
	fake.describeDBInstanceAutomatedBackupsRequestMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsRequestMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsRequestStub = nil
	fake.describeDBInstanceAutomatedBackupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstanceAutomatedBackupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBInstanceAutomatedBackupsOutput) {
	fake.describeDBInstanceAutomatedBackupsRequestMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsRequestMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsRequestStub = nil
	if fake.describeDBInstanceAutomatedBackupsRequestReturnsOnCall == nil {
		fake.describeDBInstanceAutomatedBackupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBInstanceAutomatedBackupsOutput
		})
	}
	fake.describeDBInstanceAutomatedBackupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstanceAutomatedBackupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsWithContext(arg1 context.Context, arg2 *rds.DescribeDBInstanceAutomatedBackupsInput, arg3 ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBInstanceAutomatedBackupsWithContextReturnsOnCall[len(fake.describeDBInstanceAutomatedBackupsWithContextArgsForCall)]
	fake.describeDBInstanceAutomatedBackupsWithContextArgsForCall = append(fake.describeDBInstanceAutomatedBackupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstanceAutomatedBackupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBInstanceAutomatedBackupsWithContextStub
	fakeReturns := fake.describeDBInstanceAutomatedBackupsWithContextReturns
	fake.recordInvocation("DescribeDBInstanceAutomatedBackupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsWithContextCallCount() int {
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsWithContextMutex.RUnlock()
	return len(fake.describeDBInstanceAutomatedBackupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsWithContextCalls(stub func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)) {
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsWithContextMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, []request.Option) {
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBInstanceAutomatedBackupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsWithContextReturns(result1 *rds.DescribeDBInstanceAutomatedBackupsOutput, result2 error) {
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsWithContextMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsWithContextStub = nil
	fake.describeDBInstanceAutomatedBackupsWithContextReturns = struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstanceAutomatedBackupsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBInstanceAutomatedBackupsOutput, result2 error) {
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.Lock()
	defer fake.describeDBInstanceAutomatedBackupsWithContextMutex.Unlock()
	fake.DescribeDBInstanceAutomatedBackupsWithContextStub = nil
	if fake.describeDBInstanceAutomatedBackupsWithContextReturnsOnCall == nil {
		fake.describeDBInstanceAutomatedBackupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
			result2 error
		})
	}
	fake.describeDBInstanceAutomatedBackupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBInstanceAutomatedBackupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstances(arg1 *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	fake.describeDBInstancesMutex.Lock()
	ret, specificReturn := fake.describeDBInstancesReturnsOnCall[len(fake.describeDBInstancesArgsForCall)]
	fake.describeDBInstancesArgsForCall = append(fake.describeDBInstancesArgsForCall, struct {
		arg1 *rds.DescribeDBInstancesInput
	}{arg1})
	stub := fake.DescribeDBInstancesStub
	fakeReturns := fake.describeDBInstancesReturns
	fake.recordInvocation("DescribeDBInstances", []interface{}{arg1})
	fake.describeDBInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBInstancesCallCount() int {
	fake.describeDBInstancesMutex.RLock()
	defer fake.describeDBInstancesMutex.RUnlock()
	return len(fake.describeDBInstancesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstancesCalls(stub func(*rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error)) {
	fake.describeDBInstancesMutex.Lock()
	defer fake.describeDBInstancesMutex.Unlock()
	fake.DescribeDBInstancesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstancesArgsForCall(i int) *rds.DescribeDBInstancesInput {
	fake.describeDBInstancesMutex.RLock()
	defer fake.describeDBInstancesMutex.RUnlock()
	argsForCall := fake.describeDBInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBInstancesReturns(result1 *rds.DescribeDBInstancesOutput, result2 error) {
	fake.describeDBInstancesMutex.Lock()
	defer fake.describeDBInstancesMutex.Unlock()
	fake.DescribeDBInstancesStub = nil
	fake.describeDBInstancesReturns = struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstancesReturnsOnCall(i int, result1 *rds.DescribeDBInstancesOutput, result2 error) {
	fake.describeDBInstancesMutex.Lock()
	defer fake.describeDBInstancesMutex.Unlock()
	fake.DescribeDBInstancesStub = nil
	if fake.describeDBInstancesReturnsOnCall == nil {
		fake.describeDBInstancesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBInstancesOutput
			result2 error
		})
	}
	fake.describeDBInstancesReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstancesPages(arg1 *rds.DescribeDBInstancesInput, arg2 func(*rds.DescribeDBInstancesOutput, bool) bool) error {
	fake.describeDBInstancesPagesMutex.Lock()
	ret, specificReturn := fake.describeDBInstancesPagesReturnsOnCall[len(fake.describeDBInstancesPagesArgsForCall)]
	fake.describeDBInstancesPagesArgsForCall = append(fake.describeDBInstancesPagesArgsForCall, struct {
		arg1 *rds.DescribeDBInstancesInput
		arg2 func(*rds.DescribeDBInstancesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBInstancesPagesStub
	fakeReturns := fake.describeDBInstancesPagesReturns
	fake.recordInvocation("DescribeDBInstancesPages", []interface{}{arg1, arg2})
	fake.describeDBInstancesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesCallCount() int {
	fake.describeDBInstancesPagesMutex.RLock()
	defer fake.describeDBInstancesPagesMutex.RUnlock()
	return len(fake.describeDBInstancesPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesCalls(stub func(*rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool) error) {
	fake.describeDBInstancesPagesMutex.Lock()
	defer fake.describeDBInstancesPagesMutex.Unlock()
	fake.DescribeDBInstancesPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesArgsForCall(i int) (*rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool) {
	fake.describeDBInstancesPagesMutex.RLock()
	defer fake.describeDBInstancesPagesMutex.RUnlock()
	argsForCall := fake.describeDBInstancesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesReturns(result1 error) {
	fake.describeDBInstancesPagesMutex.Lock()
	defer fake.describeDBInstancesPagesMutex.Unlock()
	fake.DescribeDBInstancesPagesStub = nil
	fake.describeDBInstancesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBInstancesPagesMutex.Lock()
	defer fake.describeDBInstancesPagesMutex.Unlock()
	fake.DescribeDBInstancesPagesStub = nil
	if fake.describeDBInstancesPagesReturnsOnCall == nil {
		fake.describeDBInstancesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBInstancesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBInstancesInput, arg3 func(*rds.DescribeDBInstancesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBInstancesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBInstancesPagesWithContextReturnsOnCall[len(fake.describeDBInstancesPagesWithContextArgsForCall)]
	fake.describeDBInstancesPagesWithContextArgsForCall = append(fake.describeDBInstancesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 func(*rds.DescribeDBInstancesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBInstancesPagesWithContextStub
	fakeReturns := fake.describeDBInstancesPagesWithContextReturns
	fake.recordInvocation("DescribeDBInstancesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBInstancesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesWithContextCallCount() int {
	fake.describeDBInstancesPagesWithContextMutex.RLock()
	defer fake.describeDBInstancesPagesWithContextMutex.RUnlock()
	return len(fake.describeDBInstancesPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool, ...request.Option) error) {
	fake.describeDBInstancesPagesWithContextMutex.Lock()
	defer fake.describeDBInstancesPagesWithContextMutex.Unlock()
	fake.DescribeDBInstancesPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool, []request.Option) {
	fake.describeDBInstancesPagesWithContextMutex.RLock()
	defer fake.describeDBInstancesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBInstancesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesWithContextReturns(result1 error) {
	fake.describeDBInstancesPagesWithContextMutex.Lock()
	defer fake.describeDBInstancesPagesWithContextMutex.Unlock()
	fake.DescribeDBInstancesPagesWithContextStub = nil
	fake.describeDBInstancesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstancesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBInstancesPagesWithContextMutex.Lock()
	defer fake.describeDBInstancesPagesWithContextMutex.Unlock()
	fake.DescribeDBInstancesPagesWithContextStub = nil
	if fake.describeDBInstancesPagesWithContextReturnsOnCall == nil {
		fake.describeDBInstancesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBInstancesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBInstancesRequest(arg1 *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput) {
	fake.describeDBInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeDBInstancesRequestReturnsOnCall[len(fake.describeDBInstancesRequestArgsForCall)]
	fake.describeDBInstancesRequestArgsForCall = append(fake.describeDBInstancesRequestArgsForCall, struct {
		arg1 *rds.DescribeDBInstancesInput
	}{arg1})
	stub := fake.DescribeDBInstancesRequestStub
	fakeReturns := fake.describeDBInstancesRequestReturns
	fake.recordInvocation("DescribeDBInstancesRequest", []interface{}{arg1})
	fake.describeDBInstancesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBInstancesRequestCallCount() int {
	fake.describeDBInstancesRequestMutex.RLock()
	defer fake.describeDBInstancesRequestMutex.RUnlock()
	return len(fake.describeDBInstancesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstancesRequestCalls(stub func(*rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput)) {
	fake.describeDBInstancesRequestMutex.Lock()
	defer fake.describeDBInstancesRequestMutex.Unlock()
	fake.DescribeDBInstancesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstancesRequestArgsForCall(i int) *rds.DescribeDBInstancesInput {
	fake.describeDBInstancesRequestMutex.RLock()
	defer fake.describeDBInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeDBInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBInstancesRequestReturns(result1 *request.Request, result2 *rds.DescribeDBInstancesOutput) {
	fake.describeDBInstancesRequestMutex.Lock()
	defer fake.describeDBInstancesRequestMutex.Unlock()
	fake.DescribeDBInstancesRequestStub = nil
	fake.describeDBInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstancesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBInstancesOutput) {
	fake.describeDBInstancesRequestMutex.Lock()
	defer fake.describeDBInstancesRequestMutex.Unlock()
	fake.DescribeDBInstancesRequestStub = nil
	if fake.describeDBInstancesRequestReturnsOnCall == nil {
		fake.describeDBInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBInstancesOutput
		})
	}
	fake.describeDBInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBInstancesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstancesWithContext(arg1 context.Context, arg2 *rds.DescribeDBInstancesInput, arg3 ...request.Option) (*rds.DescribeDBInstancesOutput, error) {
	fake.describeDBInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBInstancesWithContextReturnsOnCall[len(fake.describeDBInstancesWithContextArgsForCall)]
	fake.describeDBInstancesWithContextArgsForCall = append(fake.describeDBInstancesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBInstancesWithContextStub
	fakeReturns := fake.describeDBInstancesWithContextReturns
	fake.recordInvocation("DescribeDBInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBInstancesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBInstancesWithContextCallCount() int {
	fake.describeDBInstancesWithContextMutex.RLock()
	defer fake.describeDBInstancesWithContextMutex.RUnlock()
	return len(fake.describeDBInstancesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBInstancesWithContextCalls(stub func(context.Context, *rds.DescribeDBInstancesInput, ...request.Option) (*rds.DescribeDBInstancesOutput, error)) {
	fake.describeDBInstancesWithContextMutex.Lock()
	defer fake.describeDBInstancesWithContextMutex.Unlock()
	fake.DescribeDBInstancesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBInstancesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBInstancesInput, []request.Option) {
	fake.describeDBInstancesWithContextMutex.RLock()
	defer fake.describeDBInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBInstancesWithContextReturns(result1 *rds.DescribeDBInstancesOutput, result2 error) {
	fake.describeDBInstancesWithContextMutex.Lock()
	defer fake.describeDBInstancesWithContextMutex.Unlock()
	fake.DescribeDBInstancesWithContextStub = nil
	fake.describeDBInstancesWithContextReturns = struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBInstancesWithContextReturnsOnCall(i int, result1 *rds.DescribeDBInstancesOutput, result2 error) {
	fake.describeDBInstancesWithContextMutex.Lock()
	defer fake.describeDBInstancesWithContextMutex.Unlock()
	fake.DescribeDBInstancesWithContextStub = nil
	if fake.describeDBInstancesWithContextReturnsOnCall == nil {
		fake.describeDBInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBInstancesOutput
			result2 error
		})
	}
	fake.describeDBInstancesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBLogFiles(arg1 *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
	fake.describeDBLogFilesMutex.Lock()
	ret, specificReturn := fake.describeDBLogFilesReturnsOnCall[len(fake.describeDBLogFilesArgsForCall)]
	fake.describeDBLogFilesArgsForCall = append(fake.describeDBLogFilesArgsForCall, struct {
		arg1 *rds.DescribeDBLogFilesInput
	}{arg1})
	stub := fake.DescribeDBLogFilesStub
	fakeReturns := fake.describeDBLogFilesReturns
	fake.recordInvocation("DescribeDBLogFiles", []interface{}{arg1})
	fake.describeDBLogFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBLogFilesCallCount() int {
	fake.describeDBLogFilesMutex.RLock()
	defer fake.describeDBLogFilesMutex.RUnlock()
	return len(fake.describeDBLogFilesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBLogFilesCalls(stub func(*rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error)) {
	fake.describeDBLogFilesMutex.Lock()
	defer fake.describeDBLogFilesMutex.Unlock()
	fake.DescribeDBLogFilesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBLogFilesArgsForCall(i int) *rds.DescribeDBLogFilesInput {
	fake.describeDBLogFilesMutex.RLock()
	defer fake.describeDBLogFilesMutex.RUnlock()
	argsForCall := fake.describeDBLogFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBLogFilesReturns(result1 *rds.DescribeDBLogFilesOutput, result2 error) {
	fake.describeDBLogFilesMutex.Lock()
	defer fake.describeDBLogFilesMutex.Unlock()
	fake.DescribeDBLogFilesStub = nil
	fake.describeDBLogFilesReturns = struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesReturnsOnCall(i int, result1 *rds.DescribeDBLogFilesOutput, result2 error) {
	fake.describeDBLogFilesMutex.Lock()
	defer fake.describeDBLogFilesMutex.Unlock()
	fake.DescribeDBLogFilesStub = nil
	if fake.describeDBLogFilesReturnsOnCall == nil {
		fake.describeDBLogFilesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBLogFilesOutput
			result2 error
		})
	}
	fake.describeDBLogFilesReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPages(arg1 *rds.DescribeDBLogFilesInput, arg2 func(*rds.DescribeDBLogFilesOutput, bool) bool) error {
	fake.describeDBLogFilesPagesMutex.Lock()
	ret, specificReturn := fake.describeDBLogFilesPagesReturnsOnCall[len(fake.describeDBLogFilesPagesArgsForCall)]
	fake.describeDBLogFilesPagesArgsForCall = append(fake.describeDBLogFilesPagesArgsForCall, struct {
		arg1 *rds.DescribeDBLogFilesInput
		arg2 func(*rds.DescribeDBLogFilesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBLogFilesPagesStub
	fakeReturns := fake.describeDBLogFilesPagesReturns
	fake.recordInvocation("DescribeDBLogFilesPages", []interface{}{arg1, arg2})
	fake.describeDBLogFilesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesCallCount() int {
	fake.describeDBLogFilesPagesMutex.RLock()
	defer fake.describeDBLogFilesPagesMutex.RUnlock()
	return len(fake.describeDBLogFilesPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesCalls(stub func(*rds.DescribeDBLogFilesInput, func(*rds.DescribeDBLogFilesOutput, bool) bool) error) {
	fake.describeDBLogFilesPagesMutex.Lock()
	defer fake.describeDBLogFilesPagesMutex.Unlock()
	fake.DescribeDBLogFilesPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesArgsForCall(i int) (*rds.DescribeDBLogFilesInput, func(*rds.DescribeDBLogFilesOutput, bool) bool) {
	fake.describeDBLogFilesPagesMutex.RLock()
	defer fake.describeDBLogFilesPagesMutex.RUnlock()
	argsForCall := fake.describeDBLogFilesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesReturns(result1 error) {
	fake.describeDBLogFilesPagesMutex.Lock()
	defer fake.describeDBLogFilesPagesMutex.Unlock()
	fake.DescribeDBLogFilesPagesStub = nil
	fake.describeDBLogFilesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBLogFilesPagesMutex.Lock()
	defer fake.describeDBLogFilesPagesMutex.Unlock()
	fake.DescribeDBLogFilesPagesStub = nil
	if fake.describeDBLogFilesPagesReturnsOnCall == nil {
		fake.describeDBLogFilesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBLogFilesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBLogFilesInput, arg3 func(*rds.DescribeDBLogFilesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBLogFilesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBLogFilesPagesWithContextReturnsOnCall[len(fake.describeDBLogFilesPagesWithContextArgsForCall)]
	fake.describeDBLogFilesPagesWithContextArgsForCall = append(fake.describeDBLogFilesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBLogFilesInput
		arg3 func(*rds.DescribeDBLogFilesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBLogFilesPagesWithContextStub
	fakeReturns := fake.describeDBLogFilesPagesWithContextReturns
	fake.recordInvocation("DescribeDBLogFilesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBLogFilesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesWithContextCallCount() int {
	fake.describeDBLogFilesPagesWithContextMutex.RLock()
	defer fake.describeDBLogFilesPagesWithContextMutex.RUnlock()
	return len(fake.describeDBLogFilesPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBLogFilesInput, func(*rds.DescribeDBLogFilesOutput, bool) bool, ...request.Option) error) {
	fake.describeDBLogFilesPagesWithContextMutex.Lock()
	defer fake.describeDBLogFilesPagesWithContextMutex.Unlock()
	fake.DescribeDBLogFilesPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBLogFilesInput, func(*rds.DescribeDBLogFilesOutput, bool) bool, []request.Option) {
	fake.describeDBLogFilesPagesWithContextMutex.RLock()
	defer fake.describeDBLogFilesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBLogFilesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesWithContextReturns(result1 error) {
	fake.describeDBLogFilesPagesWithContextMutex.Lock()
	defer fake.describeDBLogFilesPagesWithContextMutex.Unlock()
	fake.DescribeDBLogFilesPagesWithContextStub = nil
	fake.describeDBLogFilesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBLogFilesPagesWithContextMutex.Lock()
	defer fake.describeDBLogFilesPagesWithContextMutex.Unlock()
	fake.DescribeDBLogFilesPagesWithContextStub = nil
	if fake.describeDBLogFilesPagesWithContextReturnsOnCall == nil {
		fake.describeDBLogFilesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBLogFilesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesRequest(arg1 *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput) {
	fake.describeDBLogFilesRequestMutex.Lock()
	ret, specificReturn := fake.describeDBLogFilesRequestReturnsOnCall[len(fake.describeDBLogFilesRequestArgsForCall)]
	fake.describeDBLogFilesRequestArgsForCall = append(fake.describeDBLogFilesRequestArgsForCall, struct {
		arg1 *rds.DescribeDBLogFilesInput
	}{arg1})
	stub := fake.DescribeDBLogFilesRequestStub
	fakeReturns := fake.describeDBLogFilesRequestReturns
	fake.recordInvocation("DescribeDBLogFilesRequest", []interface{}{arg1})
	fake.describeDBLogFilesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBLogFilesRequestCallCount() int {
	fake.describeDBLogFilesRequestMutex.RLock()
	defer fake.describeDBLogFilesRequestMutex.RUnlock()
	return len(fake.describeDBLogFilesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBLogFilesRequestCalls(stub func(*rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput)) {
	fake.describeDBLogFilesRequestMutex.Lock()
	defer fake.describeDBLogFilesRequestMutex.Unlock()
	fake.DescribeDBLogFilesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBLogFilesRequestArgsForCall(i int) *rds.DescribeDBLogFilesInput {
	fake.describeDBLogFilesRequestMutex.RLock()
	defer fake.describeDBLogFilesRequestMutex.RUnlock()
	argsForCall := fake.describeDBLogFilesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBLogFilesRequestReturns(result1 *request.Request, result2 *rds.DescribeDBLogFilesOutput) {
	fake.describeDBLogFilesRequestMutex.Lock()
	defer fake.describeDBLogFilesRequestMutex.Unlock()
	fake.DescribeDBLogFilesRequestStub = nil
	fake.describeDBLogFilesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBLogFilesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBLogFilesOutput) {
	fake.describeDBLogFilesRequestMutex.Lock()
	defer fake.describeDBLogFilesRequestMutex.Unlock()
	fake.DescribeDBLogFilesRequestStub = nil
	if fake.describeDBLogFilesRequestReturnsOnCall == nil {
		fake.describeDBLogFilesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBLogFilesOutput
		})
	}
	fake.describeDBLogFilesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBLogFilesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesWithContext(arg1 context.Context, arg2 *rds.DescribeDBLogFilesInput, arg3 ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {
	fake.describeDBLogFilesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBLogFilesWithContextReturnsOnCall[len(fake.describeDBLogFilesWithContextArgsForCall)]
	fake.describeDBLogFilesWithContextArgsForCall = append(fake.describeDBLogFilesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBLogFilesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBLogFilesWithContextStub
	fakeReturns := fake.describeDBLogFilesWithContextReturns
	fake.recordInvocation("DescribeDBLogFilesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBLogFilesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBLogFilesWithContextCallCount() int {
	fake.describeDBLogFilesWithContextMutex.RLock()
	defer fake.describeDBLogFilesWithContextMutex.RUnlock()
	return len(fake.describeDBLogFilesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBLogFilesWithContextCalls(stub func(context.Context, *rds.DescribeDBLogFilesInput, ...request.Option) (*rds.DescribeDBLogFilesOutput, error)) {
	fake.describeDBLogFilesWithContextMutex.Lock()
	defer fake.describeDBLogFilesWithContextMutex.Unlock()
	fake.DescribeDBLogFilesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBLogFilesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBLogFilesInput, []request.Option) {
	fake.describeDBLogFilesWithContextMutex.RLock()
	defer fake.describeDBLogFilesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBLogFilesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBLogFilesWithContextReturns(result1 *rds.DescribeDBLogFilesOutput, result2 error) {
	fake.describeDBLogFilesWithContextMutex.Lock()
	defer fake.describeDBLogFilesWithContextMutex.Unlock()
	fake.DescribeDBLogFilesWithContextStub = nil
	fake.describeDBLogFilesWithContextReturns = struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBLogFilesWithContextReturnsOnCall(i int, result1 *rds.DescribeDBLogFilesOutput, result2 error) {
	fake.describeDBLogFilesWithContextMutex.Lock()
	defer fake.describeDBLogFilesWithContextMutex.Unlock()
	fake.DescribeDBLogFilesWithContextStub = nil
	if fake.describeDBLogFilesWithContextReturnsOnCall == nil {
		fake.describeDBLogFilesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBLogFilesOutput
			result2 error
		})
	}
	fake.describeDBLogFilesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBLogFilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroups(arg1 *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
	fake.describeDBParameterGroupsMutex.Lock()
	ret, specificReturn := fake.describeDBParameterGroupsReturnsOnCall[len(fake.describeDBParameterGroupsArgsForCall)]
	fake.describeDBParameterGroupsArgsForCall = append(fake.describeDBParameterGroupsArgsForCall, struct {
		arg1 *rds.DescribeDBParameterGroupsInput
	}{arg1})
	stub := fake.DescribeDBParameterGroupsStub
	fakeReturns := fake.describeDBParameterGroupsReturns
	fake.recordInvocation("DescribeDBParameterGroups", []interface{}{arg1})
	fake.describeDBParameterGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsCallCount() int {
	fake.describeDBParameterGroupsMutex.RLock()
	defer fake.describeDBParameterGroupsMutex.RUnlock()
	return len(fake.describeDBParameterGroupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsCalls(stub func(*rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error)) {
	fake.describeDBParameterGroupsMutex.Lock()
	defer fake.describeDBParameterGroupsMutex.Unlock()
	fake.DescribeDBParameterGroupsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsArgsForCall(i int) *rds.DescribeDBParameterGroupsInput {
	fake.describeDBParameterGroupsMutex.RLock()
	defer fake.describeDBParameterGroupsMutex.RUnlock()
	argsForCall := fake.describeDBParameterGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsReturns(result1 *rds.DescribeDBParameterGroupsOutput, result2 error) {
	fake.describeDBParameterGroupsMutex.Lock()
	defer fake.describeDBParameterGroupsMutex.Unlock()
	fake.DescribeDBParameterGroupsStub = nil
	fake.describeDBParameterGroupsReturns = struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsReturnsOnCall(i int, result1 *rds.DescribeDBParameterGroupsOutput, result2 error) {
	fake.describeDBParameterGroupsMutex.Lock()
	defer fake.describeDBParameterGroupsMutex.Unlock()
	fake.DescribeDBParameterGroupsStub = nil
	if fake.describeDBParameterGroupsReturnsOnCall == nil {
		fake.describeDBParameterGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBParameterGroupsOutput
			result2 error
		})
	}
	fake.describeDBParameterGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPages(arg1 *rds.DescribeDBParameterGroupsInput, arg2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error {
	fake.describeDBParameterGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBParameterGroupsPagesReturnsOnCall[len(fake.describeDBParameterGroupsPagesArgsForCall)]
	fake.describeDBParameterGroupsPagesArgsForCall = append(fake.describeDBParameterGroupsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBParameterGroupsInput
		arg2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBParameterGroupsPagesStub
	fakeReturns := fake.describeDBParameterGroupsPagesReturns
	fake.recordInvocation("DescribeDBParameterGroupsPages", []interface{}{arg1, arg2})
	fake.describeDBParameterGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesCallCount() int {
	fake.describeDBParameterGroupsPagesMutex.RLock()
	defer fake.describeDBParameterGroupsPagesMutex.RUnlock()
	return len(fake.describeDBParameterGroupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesCalls(stub func(*rds.DescribeDBParameterGroupsInput, func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error) {
	fake.describeDBParameterGroupsPagesMutex.Lock()
	defer fake.describeDBParameterGroupsPagesMutex.Unlock()
	fake.DescribeDBParameterGroupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesArgsForCall(i int) (*rds.DescribeDBParameterGroupsInput, func(*rds.DescribeDBParameterGroupsOutput, bool) bool) {
	fake.describeDBParameterGroupsPagesMutex.RLock()
	defer fake.describeDBParameterGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeDBParameterGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesReturns(result1 error) {
	fake.describeDBParameterGroupsPagesMutex.Lock()
	defer fake.describeDBParameterGroupsPagesMutex.Unlock()
	fake.DescribeDBParameterGroupsPagesStub = nil
	fake.describeDBParameterGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBParameterGroupsPagesMutex.Lock()
	defer fake.describeDBParameterGroupsPagesMutex.Unlock()
	fake.DescribeDBParameterGroupsPagesStub = nil
	if fake.describeDBParameterGroupsPagesReturnsOnCall == nil {
		fake.describeDBParameterGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBParameterGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBParameterGroupsInput, arg3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBParameterGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBParameterGroupsPagesWithContextReturnsOnCall[len(fake.describeDBParameterGroupsPagesWithContextArgsForCall)]
	fake.describeDBParameterGroupsPagesWithContextArgsForCall = append(fake.describeDBParameterGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParameterGroupsInput
		arg3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBParameterGroupsPagesWithContextStub
	fakeReturns := fake.describeDBParameterGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeDBParameterGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBParameterGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesWithContextCallCount() int {
	fake.describeDBParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBParameterGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBParameterGroupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBParameterGroupsInput, func(*rds.DescribeDBParameterGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBParameterGroupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBParameterGroupsInput, func(*rds.DescribeDBParameterGroupsOutput, bool) bool, []request.Option) {
	fake.describeDBParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBParameterGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBParameterGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesWithContextReturns(result1 error) {
	fake.describeDBParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBParameterGroupsPagesWithContextStub = nil
	fake.describeDBParameterGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBParameterGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBParameterGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBParameterGroupsPagesWithContextStub = nil
	if fake.describeDBParameterGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeDBParameterGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBParameterGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsRequest(arg1 *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput) {
	fake.describeDBParameterGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBParameterGroupsRequestReturnsOnCall[len(fake.describeDBParameterGroupsRequestArgsForCall)]
	fake.describeDBParameterGroupsRequestArgsForCall = append(fake.describeDBParameterGroupsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBParameterGroupsInput
	}{arg1})
	stub := fake.DescribeDBParameterGroupsRequestStub
	fakeReturns := fake.describeDBParameterGroupsRequestReturns
	fake.recordInvocation("DescribeDBParameterGroupsRequest", []interface{}{arg1})
	fake.describeDBParameterGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsRequestCallCount() int {
	fake.describeDBParameterGroupsRequestMutex.RLock()
	defer fake.describeDBParameterGroupsRequestMutex.RUnlock()
	return len(fake.describeDBParameterGroupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsRequestCalls(stub func(*rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput)) {
	fake.describeDBParameterGroupsRequestMutex.Lock()
	defer fake.describeDBParameterGroupsRequestMutex.Unlock()
	fake.DescribeDBParameterGroupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsRequestArgsForCall(i int) *rds.DescribeDBParameterGroupsInput {
	fake.describeDBParameterGroupsRequestMutex.RLock()
	defer fake.describeDBParameterGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeDBParameterGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBParameterGroupsOutput) {
	fake.describeDBParameterGroupsRequestMutex.Lock()
	defer fake.describeDBParameterGroupsRequestMutex.Unlock()
	fake.DescribeDBParameterGroupsRequestStub = nil
	fake.describeDBParameterGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBParameterGroupsOutput) {
	fake.describeDBParameterGroupsRequestMutex.Lock()
	defer fake.describeDBParameterGroupsRequestMutex.Unlock()
	fake.DescribeDBParameterGroupsRequestStub = nil
	if fake.describeDBParameterGroupsRequestReturnsOnCall == nil {
		fake.describeDBParameterGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBParameterGroupsOutput
		})
	}
	fake.describeDBParameterGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsWithContext(arg1 context.Context, arg2 *rds.DescribeDBParameterGroupsInput, arg3 ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {
	fake.describeDBParameterGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBParameterGroupsWithContextReturnsOnCall[len(fake.describeDBParameterGroupsWithContextArgsForCall)]
	fake.describeDBParameterGroupsWithContextArgsForCall = append(fake.describeDBParameterGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParameterGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBParameterGroupsWithContextStub
	fakeReturns := fake.describeDBParameterGroupsWithContextReturns
	fake.recordInvocation("DescribeDBParameterGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBParameterGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsWithContextCallCount() int {
	fake.describeDBParameterGroupsWithContextMutex.RLock()
	defer fake.describeDBParameterGroupsWithContextMutex.RUnlock()
	return len(fake.describeDBParameterGroupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsWithContextCalls(stub func(context.Context, *rds.DescribeDBParameterGroupsInput, ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error)) {
	fake.describeDBParameterGroupsWithContextMutex.Lock()
	defer fake.describeDBParameterGroupsWithContextMutex.Unlock()
	fake.DescribeDBParameterGroupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBParameterGroupsInput, []request.Option) {
	fake.describeDBParameterGroupsWithContextMutex.RLock()
	defer fake.describeDBParameterGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBParameterGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsWithContextReturns(result1 *rds.DescribeDBParameterGroupsOutput, result2 error) {
	fake.describeDBParameterGroupsWithContextMutex.Lock()
	defer fake.describeDBParameterGroupsWithContextMutex.Unlock()
	fake.DescribeDBParameterGroupsWithContextStub = nil
	fake.describeDBParameterGroupsWithContextReturns = struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameterGroupsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBParameterGroupsOutput, result2 error) {
	fake.describeDBParameterGroupsWithContextMutex.Lock()
	defer fake.describeDBParameterGroupsWithContextMutex.Unlock()
	fake.DescribeDBParameterGroupsWithContextStub = nil
	if fake.describeDBParameterGroupsWithContextReturnsOnCall == nil {
		fake.describeDBParameterGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBParameterGroupsOutput
			result2 error
		})
	}
	fake.describeDBParameterGroupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParameters(arg1 *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
	fake.describeDBParametersMutex.Lock()
	ret, specificReturn := fake.describeDBParametersReturnsOnCall[len(fake.describeDBParametersArgsForCall)]
	fake.describeDBParametersArgsForCall = append(fake.describeDBParametersArgsForCall, struct {
		arg1 *rds.DescribeDBParametersInput
	}{arg1})
	stub := fake.DescribeDBParametersStub
	fakeReturns := fake.describeDBParametersReturns
	fake.recordInvocation("DescribeDBParameters", []interface{}{arg1})
	fake.describeDBParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBParametersCallCount() int {
	fake.describeDBParametersMutex.RLock()
	defer fake.describeDBParametersMutex.RUnlock()
	return len(fake.describeDBParametersArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParametersCalls(stub func(*rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error)) {
	fake.describeDBParametersMutex.Lock()
	defer fake.describeDBParametersMutex.Unlock()
	fake.DescribeDBParametersStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParametersArgsForCall(i int) *rds.DescribeDBParametersInput {
	fake.describeDBParametersMutex.RLock()
	defer fake.describeDBParametersMutex.RUnlock()
	argsForCall := fake.describeDBParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBParametersReturns(result1 *rds.DescribeDBParametersOutput, result2 error) {
	fake.describeDBParametersMutex.Lock()
	defer fake.describeDBParametersMutex.Unlock()
	fake.DescribeDBParametersStub = nil
	fake.describeDBParametersReturns = struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParametersReturnsOnCall(i int, result1 *rds.DescribeDBParametersOutput, result2 error) {
	fake.describeDBParametersMutex.Lock()
	defer fake.describeDBParametersMutex.Unlock()
	fake.DescribeDBParametersStub = nil
	if fake.describeDBParametersReturnsOnCall == nil {
		fake.describeDBParametersReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBParametersOutput
			result2 error
		})
	}
	fake.describeDBParametersReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParametersPages(arg1 *rds.DescribeDBParametersInput, arg2 func(*rds.DescribeDBParametersOutput, bool) bool) error {
	fake.describeDBParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeDBParametersPagesReturnsOnCall[len(fake.describeDBParametersPagesArgsForCall)]
	fake.describeDBParametersPagesArgsForCall = append(fake.describeDBParametersPagesArgsForCall, struct {
		arg1 *rds.DescribeDBParametersInput
		arg2 func(*rds.DescribeDBParametersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBParametersPagesStub
	fakeReturns := fake.describeDBParametersPagesReturns
	fake.recordInvocation("DescribeDBParametersPages", []interface{}{arg1, arg2})
	fake.describeDBParametersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesCallCount() int {
	fake.describeDBParametersPagesMutex.RLock()
	defer fake.describeDBParametersPagesMutex.RUnlock()
	return len(fake.describeDBParametersPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesCalls(stub func(*rds.DescribeDBParametersInput, func(*rds.DescribeDBParametersOutput, bool) bool) error) {
	fake.describeDBParametersPagesMutex.Lock()
	defer fake.describeDBParametersPagesMutex.Unlock()
	fake.DescribeDBParametersPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesArgsForCall(i int) (*rds.DescribeDBParametersInput, func(*rds.DescribeDBParametersOutput, bool) bool) {
	fake.describeDBParametersPagesMutex.RLock()
	defer fake.describeDBParametersPagesMutex.RUnlock()
	argsForCall := fake.describeDBParametersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesReturns(result1 error) {
	fake.describeDBParametersPagesMutex.Lock()
	defer fake.describeDBParametersPagesMutex.Unlock()
	fake.DescribeDBParametersPagesStub = nil
	fake.describeDBParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBParametersPagesMutex.Lock()
	defer fake.describeDBParametersPagesMutex.Unlock()
	fake.DescribeDBParametersPagesStub = nil
	if fake.describeDBParametersPagesReturnsOnCall == nil {
		fake.describeDBParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBParametersInput, arg3 func(*rds.DescribeDBParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBParametersPagesWithContextReturnsOnCall[len(fake.describeDBParametersPagesWithContextArgsForCall)]
	fake.describeDBParametersPagesWithContextArgsForCall = append(fake.describeDBParametersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParametersInput
		arg3 func(*rds.DescribeDBParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBParametersPagesWithContextStub
	fakeReturns := fake.describeDBParametersPagesWithContextReturns
	fake.recordInvocation("DescribeDBParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBParametersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesWithContextCallCount() int {
	fake.describeDBParametersPagesWithContextMutex.RLock()
	defer fake.describeDBParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeDBParametersPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBParametersInput, func(*rds.DescribeDBParametersOutput, bool) bool, ...request.Option) error) {
	fake.describeDBParametersPagesWithContextMutex.Lock()
	defer fake.describeDBParametersPagesWithContextMutex.Unlock()
	fake.DescribeDBParametersPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBParametersInput, func(*rds.DescribeDBParametersOutput, bool) bool, []request.Option) {
	fake.describeDBParametersPagesWithContextMutex.RLock()
	defer fake.describeDBParametersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBParametersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesWithContextReturns(result1 error) {
	fake.describeDBParametersPagesWithContextMutex.Lock()
	defer fake.describeDBParametersPagesWithContextMutex.Unlock()
	fake.DescribeDBParametersPagesWithContextStub = nil
	fake.describeDBParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBParametersPagesWithContextMutex.Lock()
	defer fake.describeDBParametersPagesWithContextMutex.Unlock()
	fake.DescribeDBParametersPagesWithContextStub = nil
	if fake.describeDBParametersPagesWithContextReturnsOnCall == nil {
		fake.describeDBParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBParametersRequest(arg1 *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput) {
	fake.describeDBParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeDBParametersRequestReturnsOnCall[len(fake.describeDBParametersRequestArgsForCall)]
	fake.describeDBParametersRequestArgsForCall = append(fake.describeDBParametersRequestArgsForCall, struct {
		arg1 *rds.DescribeDBParametersInput
	}{arg1})
	stub := fake.DescribeDBParametersRequestStub
	fakeReturns := fake.describeDBParametersRequestReturns
	fake.recordInvocation("DescribeDBParametersRequest", []interface{}{arg1})
	fake.describeDBParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBParametersRequestCallCount() int {
	fake.describeDBParametersRequestMutex.RLock()
	defer fake.describeDBParametersRequestMutex.RUnlock()
	return len(fake.describeDBParametersRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParametersRequestCalls(stub func(*rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput)) {
	fake.describeDBParametersRequestMutex.Lock()
	defer fake.describeDBParametersRequestMutex.Unlock()
	fake.DescribeDBParametersRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParametersRequestArgsForCall(i int) *rds.DescribeDBParametersInput {
	fake.describeDBParametersRequestMutex.RLock()
	defer fake.describeDBParametersRequestMutex.RUnlock()
	argsForCall := fake.describeDBParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBParametersRequestReturns(result1 *request.Request, result2 *rds.DescribeDBParametersOutput) {
	fake.describeDBParametersRequestMutex.Lock()
	defer fake.describeDBParametersRequestMutex.Unlock()
	fake.DescribeDBParametersRequestStub = nil
	fake.describeDBParametersRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBParametersOutput) {
	fake.describeDBParametersRequestMutex.Lock()
	defer fake.describeDBParametersRequestMutex.Unlock()
	fake.DescribeDBParametersRequestStub = nil
	if fake.describeDBParametersRequestReturnsOnCall == nil {
		fake.describeDBParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBParametersOutput
		})
	}
	fake.describeDBParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParametersWithContext(arg1 context.Context, arg2 *rds.DescribeDBParametersInput, arg3 ...request.Option) (*rds.DescribeDBParametersOutput, error) {
	fake.describeDBParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBParametersWithContextReturnsOnCall[len(fake.describeDBParametersWithContextArgsForCall)]
	fake.describeDBParametersWithContextArgsForCall = append(fake.describeDBParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBParametersWithContextStub
	fakeReturns := fake.describeDBParametersWithContextReturns
	fake.recordInvocation("DescribeDBParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBParametersWithContextCallCount() int {
	fake.describeDBParametersWithContextMutex.RLock()
	defer fake.describeDBParametersWithContextMutex.RUnlock()
	return len(fake.describeDBParametersWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBParametersWithContextCalls(stub func(context.Context, *rds.DescribeDBParametersInput, ...request.Option) (*rds.DescribeDBParametersOutput, error)) {
	fake.describeDBParametersWithContextMutex.Lock()
	defer fake.describeDBParametersWithContextMutex.Unlock()
	fake.DescribeDBParametersWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBParametersWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBParametersInput, []request.Option) {
	fake.describeDBParametersWithContextMutex.RLock()
	defer fake.describeDBParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeDBParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBParametersWithContextReturns(result1 *rds.DescribeDBParametersOutput, result2 error) {
	fake.describeDBParametersWithContextMutex.Lock()
	defer fake.describeDBParametersWithContextMutex.Unlock()
	fake.DescribeDBParametersWithContextStub = nil
	fake.describeDBParametersWithContextReturns = struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBParametersWithContextReturnsOnCall(i int, result1 *rds.DescribeDBParametersOutput, result2 error) {
	fake.describeDBParametersWithContextMutex.Lock()
	defer fake.describeDBParametersWithContextMutex.Unlock()
	fake.DescribeDBParametersWithContextStub = nil
	if fake.describeDBParametersWithContextReturnsOnCall == nil {
		fake.describeDBParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBParametersOutput
			result2 error
		})
	}
	fake.describeDBParametersWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxies(arg1 *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
	fake.describeDBProxiesMutex.Lock()
	ret, specificReturn := fake.describeDBProxiesReturnsOnCall[len(fake.describeDBProxiesArgsForCall)]
	fake.describeDBProxiesArgsForCall = append(fake.describeDBProxiesArgsForCall, struct {
		arg1 *rds.DescribeDBProxiesInput
	}{arg1})
	stub := fake.DescribeDBProxiesStub
	fakeReturns := fake.describeDBProxiesReturns
	fake.recordInvocation("DescribeDBProxies", []interface{}{arg1})
	fake.describeDBProxiesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxiesCallCount() int {
	fake.describeDBProxiesMutex.RLock()
	defer fake.describeDBProxiesMutex.RUnlock()
	return len(fake.describeDBProxiesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxiesCalls(stub func(*rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error)) {
	fake.describeDBProxiesMutex.Lock()
	defer fake.describeDBProxiesMutex.Unlock()
	fake.DescribeDBProxiesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxiesArgsForCall(i int) *rds.DescribeDBProxiesInput {
	fake.describeDBProxiesMutex.RLock()
	defer fake.describeDBProxiesMutex.RUnlock()
	argsForCall := fake.describeDBProxiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBProxiesReturns(result1 *rds.DescribeDBProxiesOutput, result2 error) {
	fake.describeDBProxiesMutex.Lock()
	defer fake.describeDBProxiesMutex.Unlock()
	fake.DescribeDBProxiesStub = nil
	fake.describeDBProxiesReturns = struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxiesReturnsOnCall(i int, result1 *rds.DescribeDBProxiesOutput, result2 error) {
	fake.describeDBProxiesMutex.Lock()
	defer fake.describeDBProxiesMutex.Unlock()
	fake.DescribeDBProxiesStub = nil
	if fake.describeDBProxiesReturnsOnCall == nil {
		fake.describeDBProxiesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBProxiesOutput
			result2 error
		})
	}
	fake.describeDBProxiesReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxiesPages(arg1 *rds.DescribeDBProxiesInput, arg2 func(*rds.DescribeDBProxiesOutput, bool) bool) error {
	fake.describeDBProxiesPagesMutex.Lock()
	ret, specificReturn := fake.describeDBProxiesPagesReturnsOnCall[len(fake.describeDBProxiesPagesArgsForCall)]
	fake.describeDBProxiesPagesArgsForCall = append(fake.describeDBProxiesPagesArgsForCall, struct {
		arg1 *rds.DescribeDBProxiesInput
		arg2 func(*rds.DescribeDBProxiesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBProxiesPagesStub
	fakeReturns := fake.describeDBProxiesPagesReturns
	fake.recordInvocation("DescribeDBProxiesPages", []interface{}{arg1, arg2})
	fake.describeDBProxiesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesCallCount() int {
	fake.describeDBProxiesPagesMutex.RLock()
	defer fake.describeDBProxiesPagesMutex.RUnlock()
	return len(fake.describeDBProxiesPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesCalls(stub func(*rds.DescribeDBProxiesInput, func(*rds.DescribeDBProxiesOutput, bool) bool) error) {
	fake.describeDBProxiesPagesMutex.Lock()
	defer fake.describeDBProxiesPagesMutex.Unlock()
	fake.DescribeDBProxiesPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesArgsForCall(i int) (*rds.DescribeDBProxiesInput, func(*rds.DescribeDBProxiesOutput, bool) bool) {
	fake.describeDBProxiesPagesMutex.RLock()
	defer fake.describeDBProxiesPagesMutex.RUnlock()
	argsForCall := fake.describeDBProxiesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesReturns(result1 error) {
	fake.describeDBProxiesPagesMutex.Lock()
	defer fake.describeDBProxiesPagesMutex.Unlock()
	fake.DescribeDBProxiesPagesStub = nil
	fake.describeDBProxiesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBProxiesPagesMutex.Lock()
	defer fake.describeDBProxiesPagesMutex.Unlock()
	fake.DescribeDBProxiesPagesStub = nil
	if fake.describeDBProxiesPagesReturnsOnCall == nil {
		fake.describeDBProxiesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBProxiesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBProxiesInput, arg3 func(*rds.DescribeDBProxiesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBProxiesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBProxiesPagesWithContextReturnsOnCall[len(fake.describeDBProxiesPagesWithContextArgsForCall)]
	fake.describeDBProxiesPagesWithContextArgsForCall = append(fake.describeDBProxiesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxiesInput
		arg3 func(*rds.DescribeDBProxiesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBProxiesPagesWithContextStub
	fakeReturns := fake.describeDBProxiesPagesWithContextReturns
	fake.recordInvocation("DescribeDBProxiesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBProxiesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesWithContextCallCount() int {
	fake.describeDBProxiesPagesWithContextMutex.RLock()
	defer fake.describeDBProxiesPagesWithContextMutex.RUnlock()
	return len(fake.describeDBProxiesPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBProxiesInput, func(*rds.DescribeDBProxiesOutput, bool) bool, ...request.Option) error) {
	fake.describeDBProxiesPagesWithContextMutex.Lock()
	defer fake.describeDBProxiesPagesWithContextMutex.Unlock()
	fake.DescribeDBProxiesPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBProxiesInput, func(*rds.DescribeDBProxiesOutput, bool) bool, []request.Option) {
	fake.describeDBProxiesPagesWithContextMutex.RLock()
	defer fake.describeDBProxiesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBProxiesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesWithContextReturns(result1 error) {
	fake.describeDBProxiesPagesWithContextMutex.Lock()
	defer fake.describeDBProxiesPagesWithContextMutex.Unlock()
	fake.DescribeDBProxiesPagesWithContextStub = nil
	fake.describeDBProxiesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxiesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBProxiesPagesWithContextMutex.Lock()
	defer fake.describeDBProxiesPagesWithContextMutex.Unlock()
	fake.DescribeDBProxiesPagesWithContextStub = nil
	if fake.describeDBProxiesPagesWithContextReturnsOnCall == nil {
		fake.describeDBProxiesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBProxiesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxiesRequest(arg1 *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput) {
	fake.describeDBProxiesRequestMutex.Lock()
	ret, specificReturn := fake.describeDBProxiesRequestReturnsOnCall[len(fake.describeDBProxiesRequestArgsForCall)]
	fake.describeDBProxiesRequestArgsForCall = append(fake.describeDBProxiesRequestArgsForCall, struct {
		arg1 *rds.DescribeDBProxiesInput
	}{arg1})
	stub := fake.DescribeDBProxiesRequestStub
	fakeReturns := fake.describeDBProxiesRequestReturns
	fake.recordInvocation("DescribeDBProxiesRequest", []interface{}{arg1})
	fake.describeDBProxiesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxiesRequestCallCount() int {
	fake.describeDBProxiesRequestMutex.RLock()
	defer fake.describeDBProxiesRequestMutex.RUnlock()
	return len(fake.describeDBProxiesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxiesRequestCalls(stub func(*rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput)) {
	fake.describeDBProxiesRequestMutex.Lock()
	defer fake.describeDBProxiesRequestMutex.Unlock()
	fake.DescribeDBProxiesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxiesRequestArgsForCall(i int) *rds.DescribeDBProxiesInput {
	fake.describeDBProxiesRequestMutex.RLock()
	defer fake.describeDBProxiesRequestMutex.RUnlock()
	argsForCall := fake.describeDBProxiesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBProxiesRequestReturns(result1 *request.Request, result2 *rds.DescribeDBProxiesOutput) {
	fake.describeDBProxiesRequestMutex.Lock()
	defer fake.describeDBProxiesRequestMutex.Unlock()
	fake.DescribeDBProxiesRequestStub = nil
	fake.describeDBProxiesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxiesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBProxiesOutput) {
	fake.describeDBProxiesRequestMutex.Lock()
	defer fake.describeDBProxiesRequestMutex.Unlock()
	fake.DescribeDBProxiesRequestStub = nil
	if fake.describeDBProxiesRequestReturnsOnCall == nil {
		fake.describeDBProxiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBProxiesOutput
		})
	}
	fake.describeDBProxiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxiesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxiesWithContext(arg1 context.Context, arg2 *rds.DescribeDBProxiesInput, arg3 ...request.Option) (*rds.DescribeDBProxiesOutput, error) {
	fake.describeDBProxiesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBProxiesWithContextReturnsOnCall[len(fake.describeDBProxiesWithContextArgsForCall)]
	fake.describeDBProxiesWithContextArgsForCall = append(fake.describeDBProxiesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBProxiesWithContextStub
	fakeReturns := fake.describeDBProxiesWithContextReturns
	fake.recordInvocation("DescribeDBProxiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBProxiesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxiesWithContextCallCount() int {
	fake.describeDBProxiesWithContextMutex.RLock()
	defer fake.describeDBProxiesWithContextMutex.RUnlock()
	return len(fake.describeDBProxiesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxiesWithContextCalls(stub func(context.Context, *rds.DescribeDBProxiesInput, ...request.Option) (*rds.DescribeDBProxiesOutput, error)) {
	fake.describeDBProxiesWithContextMutex.Lock()
	defer fake.describeDBProxiesWithContextMutex.Unlock()
	fake.DescribeDBProxiesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxiesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBProxiesInput, []request.Option) {
	fake.describeDBProxiesWithContextMutex.RLock()
	defer fake.describeDBProxiesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBProxiesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBProxiesWithContextReturns(result1 *rds.DescribeDBProxiesOutput, result2 error) {
	fake.describeDBProxiesWithContextMutex.Lock()
	defer fake.describeDBProxiesWithContextMutex.Unlock()
	fake.DescribeDBProxiesWithContextStub = nil
	fake.describeDBProxiesWithContextReturns = struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxiesWithContextReturnsOnCall(i int, result1 *rds.DescribeDBProxiesOutput, result2 error) {
	fake.describeDBProxiesWithContextMutex.Lock()
	defer fake.describeDBProxiesWithContextMutex.Unlock()
	fake.DescribeDBProxiesWithContextStub = nil
	if fake.describeDBProxiesWithContextReturnsOnCall == nil {
		fake.describeDBProxiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBProxiesOutput
			result2 error
		})
	}
	fake.describeDBProxiesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBProxiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroups(arg1 *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	fake.describeDBProxyTargetGroupsMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetGroupsReturnsOnCall[len(fake.describeDBProxyTargetGroupsArgsForCall)]
	fake.describeDBProxyTargetGroupsArgsForCall = append(fake.describeDBProxyTargetGroupsArgsForCall, struct {
		arg1 *rds.DescribeDBProxyTargetGroupsInput
	}{arg1})
	stub := fake.DescribeDBProxyTargetGroupsStub
	fakeReturns := fake.describeDBProxyTargetGroupsReturns
	fake.recordInvocation("DescribeDBProxyTargetGroups", []interface{}{arg1})
	fake.describeDBProxyTargetGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsCallCount() int {
	fake.describeDBProxyTargetGroupsMutex.RLock()
	defer fake.describeDBProxyTargetGroupsMutex.RUnlock()
	return len(fake.describeDBProxyTargetGroupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsCalls(stub func(*rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error)) {
	fake.describeDBProxyTargetGroupsMutex.Lock()
	defer fake.describeDBProxyTargetGroupsMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsArgsForCall(i int) *rds.DescribeDBProxyTargetGroupsInput {
	fake.describeDBProxyTargetGroupsMutex.RLock()
	defer fake.describeDBProxyTargetGroupsMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsReturns(result1 *rds.DescribeDBProxyTargetGroupsOutput, result2 error) {
	fake.describeDBProxyTargetGroupsMutex.Lock()
	defer fake.describeDBProxyTargetGroupsMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsStub = nil
	fake.describeDBProxyTargetGroupsReturns = struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsReturnsOnCall(i int, result1 *rds.DescribeDBProxyTargetGroupsOutput, result2 error) {
	fake.describeDBProxyTargetGroupsMutex.Lock()
	defer fake.describeDBProxyTargetGroupsMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsStub = nil
	if fake.describeDBProxyTargetGroupsReturnsOnCall == nil {
		fake.describeDBProxyTargetGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBProxyTargetGroupsOutput
			result2 error
		})
	}
	fake.describeDBProxyTargetGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPages(arg1 *rds.DescribeDBProxyTargetGroupsInput, arg2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error {
	fake.describeDBProxyTargetGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetGroupsPagesReturnsOnCall[len(fake.describeDBProxyTargetGroupsPagesArgsForCall)]
	fake.describeDBProxyTargetGroupsPagesArgsForCall = append(fake.describeDBProxyTargetGroupsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBProxyTargetGroupsInput
		arg2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBProxyTargetGroupsPagesStub
	fakeReturns := fake.describeDBProxyTargetGroupsPagesReturns
	fake.recordInvocation("DescribeDBProxyTargetGroupsPages", []interface{}{arg1, arg2})
	fake.describeDBProxyTargetGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesCallCount() int {
	fake.describeDBProxyTargetGroupsPagesMutex.RLock()
	defer fake.describeDBProxyTargetGroupsPagesMutex.RUnlock()
	return len(fake.describeDBProxyTargetGroupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesCalls(stub func(*rds.DescribeDBProxyTargetGroupsInput, func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error) {
	fake.describeDBProxyTargetGroupsPagesMutex.Lock()
	defer fake.describeDBProxyTargetGroupsPagesMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesArgsForCall(i int) (*rds.DescribeDBProxyTargetGroupsInput, func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) {
	fake.describeDBProxyTargetGroupsPagesMutex.RLock()
	defer fake.describeDBProxyTargetGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesReturns(result1 error) {
	fake.describeDBProxyTargetGroupsPagesMutex.Lock()
	defer fake.describeDBProxyTargetGroupsPagesMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsPagesStub = nil
	fake.describeDBProxyTargetGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBProxyTargetGroupsPagesMutex.Lock()
	defer fake.describeDBProxyTargetGroupsPagesMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsPagesStub = nil
	if fake.describeDBProxyTargetGroupsPagesReturnsOnCall == nil {
		fake.describeDBProxyTargetGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBProxyTargetGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBProxyTargetGroupsInput, arg3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetGroupsPagesWithContextReturnsOnCall[len(fake.describeDBProxyTargetGroupsPagesWithContextArgsForCall)]
	fake.describeDBProxyTargetGroupsPagesWithContextArgsForCall = append(fake.describeDBProxyTargetGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetGroupsInput
		arg3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBProxyTargetGroupsPagesWithContextStub
	fakeReturns := fake.describeDBProxyTargetGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeDBProxyTargetGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesWithContextCallCount() int {
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBProxyTargetGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBProxyTargetGroupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBProxyTargetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBProxyTargetGroupsInput, func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, []request.Option) {
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBProxyTargetGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesWithContextReturns(result1 error) {
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBProxyTargetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsPagesWithContextStub = nil
	fake.describeDBProxyTargetGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBProxyTargetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsPagesWithContextStub = nil
	if fake.describeDBProxyTargetGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeDBProxyTargetGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBProxyTargetGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsRequest(arg1 *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput) {
	fake.describeDBProxyTargetGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetGroupsRequestReturnsOnCall[len(fake.describeDBProxyTargetGroupsRequestArgsForCall)]
	fake.describeDBProxyTargetGroupsRequestArgsForCall = append(fake.describeDBProxyTargetGroupsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBProxyTargetGroupsInput
	}{arg1})
	stub := fake.DescribeDBProxyTargetGroupsRequestStub
	fakeReturns := fake.describeDBProxyTargetGroupsRequestReturns
	fake.recordInvocation("DescribeDBProxyTargetGroupsRequest", []interface{}{arg1})
	fake.describeDBProxyTargetGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsRequestCallCount() int {
	fake.describeDBProxyTargetGroupsRequestMutex.RLock()
	defer fake.describeDBProxyTargetGroupsRequestMutex.RUnlock()
	return len(fake.describeDBProxyTargetGroupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsRequestCalls(stub func(*rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput)) {
	fake.describeDBProxyTargetGroupsRequestMutex.Lock()
	defer fake.describeDBProxyTargetGroupsRequestMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsRequestArgsForCall(i int) *rds.DescribeDBProxyTargetGroupsInput {
	fake.describeDBProxyTargetGroupsRequestMutex.RLock()
	defer fake.describeDBProxyTargetGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBProxyTargetGroupsOutput) {
	fake.describeDBProxyTargetGroupsRequestMutex.Lock()
	defer fake.describeDBProxyTargetGroupsRequestMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsRequestStub = nil
	fake.describeDBProxyTargetGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBProxyTargetGroupsOutput) {
	fake.describeDBProxyTargetGroupsRequestMutex.Lock()
	defer fake.describeDBProxyTargetGroupsRequestMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsRequestStub = nil
	if fake.describeDBProxyTargetGroupsRequestReturnsOnCall == nil {
		fake.describeDBProxyTargetGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBProxyTargetGroupsOutput
		})
	}
	fake.describeDBProxyTargetGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsWithContext(arg1 context.Context, arg2 *rds.DescribeDBProxyTargetGroupsInput, arg3 ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	fake.describeDBProxyTargetGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetGroupsWithContextReturnsOnCall[len(fake.describeDBProxyTargetGroupsWithContextArgsForCall)]
	fake.describeDBProxyTargetGroupsWithContextArgsForCall = append(fake.describeDBProxyTargetGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBProxyTargetGroupsWithContextStub
	fakeReturns := fake.describeDBProxyTargetGroupsWithContextReturns
	fake.recordInvocation("DescribeDBProxyTargetGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBProxyTargetGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsWithContextCallCount() int {
	fake.describeDBProxyTargetGroupsWithContextMutex.RLock()
	defer fake.describeDBProxyTargetGroupsWithContextMutex.RUnlock()
	return len(fake.describeDBProxyTargetGroupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsWithContextCalls(stub func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error)) {
	fake.describeDBProxyTargetGroupsWithContextMutex.Lock()
	defer fake.describeDBProxyTargetGroupsWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBProxyTargetGroupsInput, []request.Option) {
	fake.describeDBProxyTargetGroupsWithContextMutex.RLock()
	defer fake.describeDBProxyTargetGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsWithContextReturns(result1 *rds.DescribeDBProxyTargetGroupsOutput, result2 error) {
	fake.describeDBProxyTargetGroupsWithContextMutex.Lock()
	defer fake.describeDBProxyTargetGroupsWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsWithContextStub = nil
	fake.describeDBProxyTargetGroupsWithContextReturns = struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetGroupsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBProxyTargetGroupsOutput, result2 error) {
	fake.describeDBProxyTargetGroupsWithContextMutex.Lock()
	defer fake.describeDBProxyTargetGroupsWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetGroupsWithContextStub = nil
	if fake.describeDBProxyTargetGroupsWithContextReturnsOnCall == nil {
		fake.describeDBProxyTargetGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBProxyTargetGroupsOutput
			result2 error
		})
	}
	fake.describeDBProxyTargetGroupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBProxyTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargets(arg1 *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
	fake.describeDBProxyTargetsMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetsReturnsOnCall[len(fake.describeDBProxyTargetsArgsForCall)]
	fake.describeDBProxyTargetsArgsForCall = append(fake.describeDBProxyTargetsArgsForCall, struct {
		arg1 *rds.DescribeDBProxyTargetsInput
	}{arg1})
	stub := fake.DescribeDBProxyTargetsStub
	fakeReturns := fake.describeDBProxyTargetsReturns
	fake.recordInvocation("DescribeDBProxyTargets", []interface{}{arg1})
	fake.describeDBProxyTargetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsCallCount() int {
	fake.describeDBProxyTargetsMutex.RLock()
	defer fake.describeDBProxyTargetsMutex.RUnlock()
	return len(fake.describeDBProxyTargetsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsCalls(stub func(*rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error)) {
	fake.describeDBProxyTargetsMutex.Lock()
	defer fake.describeDBProxyTargetsMutex.Unlock()
	fake.DescribeDBProxyTargetsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsArgsForCall(i int) *rds.DescribeDBProxyTargetsInput {
	fake.describeDBProxyTargetsMutex.RLock()
	defer fake.describeDBProxyTargetsMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsReturns(result1 *rds.DescribeDBProxyTargetsOutput, result2 error) {
	fake.describeDBProxyTargetsMutex.Lock()
	defer fake.describeDBProxyTargetsMutex.Unlock()
	fake.DescribeDBProxyTargetsStub = nil
	fake.describeDBProxyTargetsReturns = struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsReturnsOnCall(i int, result1 *rds.DescribeDBProxyTargetsOutput, result2 error) {
	fake.describeDBProxyTargetsMutex.Lock()
	defer fake.describeDBProxyTargetsMutex.Unlock()
	fake.DescribeDBProxyTargetsStub = nil
	if fake.describeDBProxyTargetsReturnsOnCall == nil {
		fake.describeDBProxyTargetsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBProxyTargetsOutput
			result2 error
		})
	}
	fake.describeDBProxyTargetsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPages(arg1 *rds.DescribeDBProxyTargetsInput, arg2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error {
	fake.describeDBProxyTargetsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetsPagesReturnsOnCall[len(fake.describeDBProxyTargetsPagesArgsForCall)]
	fake.describeDBProxyTargetsPagesArgsForCall = append(fake.describeDBProxyTargetsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBProxyTargetsInput
		arg2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBProxyTargetsPagesStub
	fakeReturns := fake.describeDBProxyTargetsPagesReturns
	fake.recordInvocation("DescribeDBProxyTargetsPages", []interface{}{arg1, arg2})
	fake.describeDBProxyTargetsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesCallCount() int {
	fake.describeDBProxyTargetsPagesMutex.RLock()
	defer fake.describeDBProxyTargetsPagesMutex.RUnlock()
	return len(fake.describeDBProxyTargetsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesCalls(stub func(*rds.DescribeDBProxyTargetsInput, func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error) {
	fake.describeDBProxyTargetsPagesMutex.Lock()
	defer fake.describeDBProxyTargetsPagesMutex.Unlock()
	fake.DescribeDBProxyTargetsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesArgsForCall(i int) (*rds.DescribeDBProxyTargetsInput, func(*rds.DescribeDBProxyTargetsOutput, bool) bool) {
	fake.describeDBProxyTargetsPagesMutex.RLock()
	defer fake.describeDBProxyTargetsPagesMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesReturns(result1 error) {
	fake.describeDBProxyTargetsPagesMutex.Lock()
	defer fake.describeDBProxyTargetsPagesMutex.Unlock()
	fake.DescribeDBProxyTargetsPagesStub = nil
	fake.describeDBProxyTargetsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBProxyTargetsPagesMutex.Lock()
	defer fake.describeDBProxyTargetsPagesMutex.Unlock()
	fake.DescribeDBProxyTargetsPagesStub = nil
	if fake.describeDBProxyTargetsPagesReturnsOnCall == nil {
		fake.describeDBProxyTargetsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBProxyTargetsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBProxyTargetsInput, arg3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBProxyTargetsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetsPagesWithContextReturnsOnCall[len(fake.describeDBProxyTargetsPagesWithContextArgsForCall)]
	fake.describeDBProxyTargetsPagesWithContextArgsForCall = append(fake.describeDBProxyTargetsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetsInput
		arg3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBProxyTargetsPagesWithContextStub
	fakeReturns := fake.describeDBProxyTargetsPagesWithContextReturns
	fake.recordInvocation("DescribeDBProxyTargetsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBProxyTargetsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesWithContextCallCount() int {
	fake.describeDBProxyTargetsPagesWithContextMutex.RLock()
	defer fake.describeDBProxyTargetsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBProxyTargetsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBProxyTargetsInput, func(*rds.DescribeDBProxyTargetsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBProxyTargetsPagesWithContextMutex.Lock()
	defer fake.describeDBProxyTargetsPagesWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBProxyTargetsInput, func(*rds.DescribeDBProxyTargetsOutput, bool) bool, []request.Option) {
	fake.describeDBProxyTargetsPagesWithContextMutex.RLock()
	defer fake.describeDBProxyTargetsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesWithContextReturns(result1 error) {
	fake.describeDBProxyTargetsPagesWithContextMutex.Lock()
	defer fake.describeDBProxyTargetsPagesWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetsPagesWithContextStub = nil
	fake.describeDBProxyTargetsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBProxyTargetsPagesWithContextMutex.Lock()
	defer fake.describeDBProxyTargetsPagesWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetsPagesWithContextStub = nil
	if fake.describeDBProxyTargetsPagesWithContextReturnsOnCall == nil {
		fake.describeDBProxyTargetsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBProxyTargetsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsRequest(arg1 *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput) {
	fake.describeDBProxyTargetsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetsRequestReturnsOnCall[len(fake.describeDBProxyTargetsRequestArgsForCall)]
	fake.describeDBProxyTargetsRequestArgsForCall = append(fake.describeDBProxyTargetsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBProxyTargetsInput
	}{arg1})
	stub := fake.DescribeDBProxyTargetsRequestStub
	fakeReturns := fake.describeDBProxyTargetsRequestReturns
	fake.recordInvocation("DescribeDBProxyTargetsRequest", []interface{}{arg1})
	fake.describeDBProxyTargetsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsRequestCallCount() int {
	fake.describeDBProxyTargetsRequestMutex.RLock()
	defer fake.describeDBProxyTargetsRequestMutex.RUnlock()
	return len(fake.describeDBProxyTargetsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsRequestCalls(stub func(*rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput)) {
	fake.describeDBProxyTargetsRequestMutex.Lock()
	defer fake.describeDBProxyTargetsRequestMutex.Unlock()
	fake.DescribeDBProxyTargetsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsRequestArgsForCall(i int) *rds.DescribeDBProxyTargetsInput {
	fake.describeDBProxyTargetsRequestMutex.RLock()
	defer fake.describeDBProxyTargetsRequestMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBProxyTargetsOutput) {
	fake.describeDBProxyTargetsRequestMutex.Lock()
	defer fake.describeDBProxyTargetsRequestMutex.Unlock()
	fake.DescribeDBProxyTargetsRequestStub = nil
	fake.describeDBProxyTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBProxyTargetsOutput) {
	fake.describeDBProxyTargetsRequestMutex.Lock()
	defer fake.describeDBProxyTargetsRequestMutex.Unlock()
	fake.DescribeDBProxyTargetsRequestStub = nil
	if fake.describeDBProxyTargetsRequestReturnsOnCall == nil {
		fake.describeDBProxyTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBProxyTargetsOutput
		})
	}
	fake.describeDBProxyTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBProxyTargetsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsWithContext(arg1 context.Context, arg2 *rds.DescribeDBProxyTargetsInput, arg3 ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {
	fake.describeDBProxyTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBProxyTargetsWithContextReturnsOnCall[len(fake.describeDBProxyTargetsWithContextArgsForCall)]
	fake.describeDBProxyTargetsWithContextArgsForCall = append(fake.describeDBProxyTargetsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBProxyTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBProxyTargetsWithContextStub
	fakeReturns := fake.describeDBProxyTargetsWithContextReturns
	fake.recordInvocation("DescribeDBProxyTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBProxyTargetsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsWithContextCallCount() int {
	fake.describeDBProxyTargetsWithContextMutex.RLock()
	defer fake.describeDBProxyTargetsWithContextMutex.RUnlock()
	return len(fake.describeDBProxyTargetsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsWithContextCalls(stub func(context.Context, *rds.DescribeDBProxyTargetsInput, ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error)) {
	fake.describeDBProxyTargetsWithContextMutex.Lock()
	defer fake.describeDBProxyTargetsWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBProxyTargetsInput, []request.Option) {
	fake.describeDBProxyTargetsWithContextMutex.RLock()
	defer fake.describeDBProxyTargetsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBProxyTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsWithContextReturns(result1 *rds.DescribeDBProxyTargetsOutput, result2 error) {
	fake.describeDBProxyTargetsWithContextMutex.Lock()
	defer fake.describeDBProxyTargetsWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetsWithContextStub = nil
	fake.describeDBProxyTargetsWithContextReturns = struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBProxyTargetsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBProxyTargetsOutput, result2 error) {
	fake.describeDBProxyTargetsWithContextMutex.Lock()
	defer fake.describeDBProxyTargetsWithContextMutex.Unlock()
	fake.DescribeDBProxyTargetsWithContextStub = nil
	if fake.describeDBProxyTargetsWithContextReturnsOnCall == nil {
		fake.describeDBProxyTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBProxyTargetsOutput
			result2 error
		})
	}
	fake.describeDBProxyTargetsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroups(arg1 *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
	fake.describeDBSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.describeDBSecurityGroupsReturnsOnCall[len(fake.describeDBSecurityGroupsArgsForCall)]
	fake.describeDBSecurityGroupsArgsForCall = append(fake.describeDBSecurityGroupsArgsForCall, struct {
		arg1 *rds.DescribeDBSecurityGroupsInput
	}{arg1})
	stub := fake.DescribeDBSecurityGroupsStub
	fakeReturns := fake.describeDBSecurityGroupsReturns
	fake.recordInvocation("DescribeDBSecurityGroups", []interface{}{arg1})
	fake.describeDBSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsCallCount() int {
	fake.describeDBSecurityGroupsMutex.RLock()
	defer fake.describeDBSecurityGroupsMutex.RUnlock()
	return len(fake.describeDBSecurityGroupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsCalls(stub func(*rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error)) {
	fake.describeDBSecurityGroupsMutex.Lock()
	defer fake.describeDBSecurityGroupsMutex.Unlock()
	fake.DescribeDBSecurityGroupsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsArgsForCall(i int) *rds.DescribeDBSecurityGroupsInput {
	fake.describeDBSecurityGroupsMutex.RLock()
	defer fake.describeDBSecurityGroupsMutex.RUnlock()
	argsForCall := fake.describeDBSecurityGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsReturns(result1 *rds.DescribeDBSecurityGroupsOutput, result2 error) {
	fake.describeDBSecurityGroupsMutex.Lock()
	defer fake.describeDBSecurityGroupsMutex.Unlock()
	fake.DescribeDBSecurityGroupsStub = nil
	fake.describeDBSecurityGroupsReturns = struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsReturnsOnCall(i int, result1 *rds.DescribeDBSecurityGroupsOutput, result2 error) {
	fake.describeDBSecurityGroupsMutex.Lock()
	defer fake.describeDBSecurityGroupsMutex.Unlock()
	fake.DescribeDBSecurityGroupsStub = nil
	if fake.describeDBSecurityGroupsReturnsOnCall == nil {
		fake.describeDBSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeDBSecurityGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPages(arg1 *rds.DescribeDBSecurityGroupsInput, arg2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error {
	fake.describeDBSecurityGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBSecurityGroupsPagesReturnsOnCall[len(fake.describeDBSecurityGroupsPagesArgsForCall)]
	fake.describeDBSecurityGroupsPagesArgsForCall = append(fake.describeDBSecurityGroupsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBSecurityGroupsInput
		arg2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBSecurityGroupsPagesStub
	fakeReturns := fake.describeDBSecurityGroupsPagesReturns
	fake.recordInvocation("DescribeDBSecurityGroupsPages", []interface{}{arg1, arg2})
	fake.describeDBSecurityGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesCallCount() int {
	fake.describeDBSecurityGroupsPagesMutex.RLock()
	defer fake.describeDBSecurityGroupsPagesMutex.RUnlock()
	return len(fake.describeDBSecurityGroupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesCalls(stub func(*rds.DescribeDBSecurityGroupsInput, func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error) {
	fake.describeDBSecurityGroupsPagesMutex.Lock()
	defer fake.describeDBSecurityGroupsPagesMutex.Unlock()
	fake.DescribeDBSecurityGroupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesArgsForCall(i int) (*rds.DescribeDBSecurityGroupsInput, func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) {
	fake.describeDBSecurityGroupsPagesMutex.RLock()
	defer fake.describeDBSecurityGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeDBSecurityGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesReturns(result1 error) {
	fake.describeDBSecurityGroupsPagesMutex.Lock()
	defer fake.describeDBSecurityGroupsPagesMutex.Unlock()
	fake.DescribeDBSecurityGroupsPagesStub = nil
	fake.describeDBSecurityGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBSecurityGroupsPagesMutex.Lock()
	defer fake.describeDBSecurityGroupsPagesMutex.Unlock()
	fake.DescribeDBSecurityGroupsPagesStub = nil
	if fake.describeDBSecurityGroupsPagesReturnsOnCall == nil {
		fake.describeDBSecurityGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBSecurityGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBSecurityGroupsInput, arg3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBSecurityGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSecurityGroupsPagesWithContextReturnsOnCall[len(fake.describeDBSecurityGroupsPagesWithContextArgsForCall)]
	fake.describeDBSecurityGroupsPagesWithContextArgsForCall = append(fake.describeDBSecurityGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSecurityGroupsInput
		arg3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBSecurityGroupsPagesWithContextStub
	fakeReturns := fake.describeDBSecurityGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeDBSecurityGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBSecurityGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesWithContextCallCount() int {
	fake.describeDBSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBSecurityGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBSecurityGroupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBSecurityGroupsInput, func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBSecurityGroupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSecurityGroupsInput, func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, []request.Option) {
	fake.describeDBSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBSecurityGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSecurityGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesWithContextReturns(result1 error) {
	fake.describeDBSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBSecurityGroupsPagesWithContextStub = nil
	fake.describeDBSecurityGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBSecurityGroupsPagesWithContextStub = nil
	if fake.describeDBSecurityGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeDBSecurityGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBSecurityGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsRequest(arg1 *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput) {
	fake.describeDBSecurityGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBSecurityGroupsRequestReturnsOnCall[len(fake.describeDBSecurityGroupsRequestArgsForCall)]
	fake.describeDBSecurityGroupsRequestArgsForCall = append(fake.describeDBSecurityGroupsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBSecurityGroupsInput
	}{arg1})
	stub := fake.DescribeDBSecurityGroupsRequestStub
	fakeReturns := fake.describeDBSecurityGroupsRequestReturns
	fake.recordInvocation("DescribeDBSecurityGroupsRequest", []interface{}{arg1})
	fake.describeDBSecurityGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsRequestCallCount() int {
	fake.describeDBSecurityGroupsRequestMutex.RLock()
	defer fake.describeDBSecurityGroupsRequestMutex.RUnlock()
	return len(fake.describeDBSecurityGroupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsRequestCalls(stub func(*rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput)) {
	fake.describeDBSecurityGroupsRequestMutex.Lock()
	defer fake.describeDBSecurityGroupsRequestMutex.Unlock()
	fake.DescribeDBSecurityGroupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsRequestArgsForCall(i int) *rds.DescribeDBSecurityGroupsInput {
	fake.describeDBSecurityGroupsRequestMutex.RLock()
	defer fake.describeDBSecurityGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeDBSecurityGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBSecurityGroupsOutput) {
	fake.describeDBSecurityGroupsRequestMutex.Lock()
	defer fake.describeDBSecurityGroupsRequestMutex.Unlock()
	fake.DescribeDBSecurityGroupsRequestStub = nil
	fake.describeDBSecurityGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBSecurityGroupsOutput) {
	fake.describeDBSecurityGroupsRequestMutex.Lock()
	defer fake.describeDBSecurityGroupsRequestMutex.Unlock()
	fake.DescribeDBSecurityGroupsRequestStub = nil
	if fake.describeDBSecurityGroupsRequestReturnsOnCall == nil {
		fake.describeDBSecurityGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBSecurityGroupsOutput
		})
	}
	fake.describeDBSecurityGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsWithContext(arg1 context.Context, arg2 *rds.DescribeDBSecurityGroupsInput, arg3 ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {
	fake.describeDBSecurityGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSecurityGroupsWithContextReturnsOnCall[len(fake.describeDBSecurityGroupsWithContextArgsForCall)]
	fake.describeDBSecurityGroupsWithContextArgsForCall = append(fake.describeDBSecurityGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSecurityGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBSecurityGroupsWithContextStub
	fakeReturns := fake.describeDBSecurityGroupsWithContextReturns
	fake.recordInvocation("DescribeDBSecurityGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBSecurityGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsWithContextCallCount() int {
	fake.describeDBSecurityGroupsWithContextMutex.RLock()
	defer fake.describeDBSecurityGroupsWithContextMutex.RUnlock()
	return len(fake.describeDBSecurityGroupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsWithContextCalls(stub func(context.Context, *rds.DescribeDBSecurityGroupsInput, ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error)) {
	fake.describeDBSecurityGroupsWithContextMutex.Lock()
	defer fake.describeDBSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeDBSecurityGroupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSecurityGroupsInput, []request.Option) {
	fake.describeDBSecurityGroupsWithContextMutex.RLock()
	defer fake.describeDBSecurityGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSecurityGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsWithContextReturns(result1 *rds.DescribeDBSecurityGroupsOutput, result2 error) {
	fake.describeDBSecurityGroupsWithContextMutex.Lock()
	defer fake.describeDBSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeDBSecurityGroupsWithContextStub = nil
	fake.describeDBSecurityGroupsWithContextReturns = struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSecurityGroupsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBSecurityGroupsOutput, result2 error) {
	fake.describeDBSecurityGroupsWithContextMutex.Lock()
	defer fake.describeDBSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeDBSecurityGroupsWithContextStub = nil
	if fake.describeDBSecurityGroupsWithContextReturnsOnCall == nil {
		fake.describeDBSecurityGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeDBSecurityGroupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributes(arg1 *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	fake.describeDBSnapshotAttributesMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotAttributesReturnsOnCall[len(fake.describeDBSnapshotAttributesArgsForCall)]
	fake.describeDBSnapshotAttributesArgsForCall = append(fake.describeDBSnapshotAttributesArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotAttributesInput
	}{arg1})
	stub := fake.DescribeDBSnapshotAttributesStub
	fakeReturns := fake.describeDBSnapshotAttributesReturns
	fake.recordInvocation("DescribeDBSnapshotAttributes", []interface{}{arg1})
	fake.describeDBSnapshotAttributesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesCallCount() int {
	fake.describeDBSnapshotAttributesMutex.RLock()
	defer fake.describeDBSnapshotAttributesMutex.RUnlock()
	return len(fake.describeDBSnapshotAttributesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesCalls(stub func(*rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error)) {
	fake.describeDBSnapshotAttributesMutex.Lock()
	defer fake.describeDBSnapshotAttributesMutex.Unlock()
	fake.DescribeDBSnapshotAttributesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesArgsForCall(i int) *rds.DescribeDBSnapshotAttributesInput {
	fake.describeDBSnapshotAttributesMutex.RLock()
	defer fake.describeDBSnapshotAttributesMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesReturns(result1 *rds.DescribeDBSnapshotAttributesOutput, result2 error) {
	fake.describeDBSnapshotAttributesMutex.Lock()
	defer fake.describeDBSnapshotAttributesMutex.Unlock()
	fake.DescribeDBSnapshotAttributesStub = nil
	fake.describeDBSnapshotAttributesReturns = struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesReturnsOnCall(i int, result1 *rds.DescribeDBSnapshotAttributesOutput, result2 error) {
	fake.describeDBSnapshotAttributesMutex.Lock()
	defer fake.describeDBSnapshotAttributesMutex.Unlock()
	fake.DescribeDBSnapshotAttributesStub = nil
	if fake.describeDBSnapshotAttributesReturnsOnCall == nil {
		fake.describeDBSnapshotAttributesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSnapshotAttributesOutput
			result2 error
		})
	}
	fake.describeDBSnapshotAttributesReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesRequest(arg1 *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput) {
	fake.describeDBSnapshotAttributesRequestMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotAttributesRequestReturnsOnCall[len(fake.describeDBSnapshotAttributesRequestArgsForCall)]
	fake.describeDBSnapshotAttributesRequestArgsForCall = append(fake.describeDBSnapshotAttributesRequestArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotAttributesInput
	}{arg1})
	stub := fake.DescribeDBSnapshotAttributesRequestStub
	fakeReturns := fake.describeDBSnapshotAttributesRequestReturns
	fake.recordInvocation("DescribeDBSnapshotAttributesRequest", []interface{}{arg1})
	fake.describeDBSnapshotAttributesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesRequestCallCount() int {
	fake.describeDBSnapshotAttributesRequestMutex.RLock()
	defer fake.describeDBSnapshotAttributesRequestMutex.RUnlock()
	return len(fake.describeDBSnapshotAttributesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesRequestCalls(stub func(*rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput)) {
	fake.describeDBSnapshotAttributesRequestMutex.Lock()
	defer fake.describeDBSnapshotAttributesRequestMutex.Unlock()
	fake.DescribeDBSnapshotAttributesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesRequestArgsForCall(i int) *rds.DescribeDBSnapshotAttributesInput {
	fake.describeDBSnapshotAttributesRequestMutex.RLock()
	defer fake.describeDBSnapshotAttributesRequestMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesRequestReturns(result1 *request.Request, result2 *rds.DescribeDBSnapshotAttributesOutput) {
	fake.describeDBSnapshotAttributesRequestMutex.Lock()
	defer fake.describeDBSnapshotAttributesRequestMutex.Unlock()
	fake.DescribeDBSnapshotAttributesRequestStub = nil
	fake.describeDBSnapshotAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotAttributesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBSnapshotAttributesOutput) {
	fake.describeDBSnapshotAttributesRequestMutex.Lock()
	defer fake.describeDBSnapshotAttributesRequestMutex.Unlock()
	fake.DescribeDBSnapshotAttributesRequestStub = nil
	if fake.describeDBSnapshotAttributesRequestReturnsOnCall == nil {
		fake.describeDBSnapshotAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBSnapshotAttributesOutput
		})
	}
	fake.describeDBSnapshotAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotAttributesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesWithContext(arg1 context.Context, arg2 *rds.DescribeDBSnapshotAttributesInput, arg3 ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	fake.describeDBSnapshotAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotAttributesWithContextReturnsOnCall[len(fake.describeDBSnapshotAttributesWithContextArgsForCall)]
	fake.describeDBSnapshotAttributesWithContextArgsForCall = append(fake.describeDBSnapshotAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBSnapshotAttributesWithContextStub
	fakeReturns := fake.describeDBSnapshotAttributesWithContextReturns
	fake.recordInvocation("DescribeDBSnapshotAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBSnapshotAttributesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesWithContextCallCount() int {
	fake.describeDBSnapshotAttributesWithContextMutex.RLock()
	defer fake.describeDBSnapshotAttributesWithContextMutex.RUnlock()
	return len(fake.describeDBSnapshotAttributesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesWithContextCalls(stub func(context.Context, *rds.DescribeDBSnapshotAttributesInput, ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error)) {
	fake.describeDBSnapshotAttributesWithContextMutex.Lock()
	defer fake.describeDBSnapshotAttributesWithContextMutex.Unlock()
	fake.DescribeDBSnapshotAttributesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSnapshotAttributesInput, []request.Option) {
	fake.describeDBSnapshotAttributesWithContextMutex.RLock()
	defer fake.describeDBSnapshotAttributesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesWithContextReturns(result1 *rds.DescribeDBSnapshotAttributesOutput, result2 error) {
	fake.describeDBSnapshotAttributesWithContextMutex.Lock()
	defer fake.describeDBSnapshotAttributesWithContextMutex.Unlock()
	fake.DescribeDBSnapshotAttributesWithContextStub = nil
	fake.describeDBSnapshotAttributesWithContextReturns = struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotAttributesWithContextReturnsOnCall(i int, result1 *rds.DescribeDBSnapshotAttributesOutput, result2 error) {
	fake.describeDBSnapshotAttributesWithContextMutex.Lock()
	defer fake.describeDBSnapshotAttributesWithContextMutex.Unlock()
	fake.DescribeDBSnapshotAttributesWithContextStub = nil
	if fake.describeDBSnapshotAttributesWithContextReturnsOnCall == nil {
		fake.describeDBSnapshotAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSnapshotAttributesOutput
			result2 error
		})
	}
	fake.describeDBSnapshotAttributesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSnapshotAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshots(arg1 *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
	fake.describeDBSnapshotsMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotsReturnsOnCall[len(fake.describeDBSnapshotsArgsForCall)]
	fake.describeDBSnapshotsArgsForCall = append(fake.describeDBSnapshotsArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}{arg1})
	stub := fake.DescribeDBSnapshotsStub
	fakeReturns := fake.describeDBSnapshotsReturns
	fake.recordInvocation("DescribeDBSnapshots", []interface{}{arg1})
	fake.describeDBSnapshotsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsCallCount() int {
	fake.describeDBSnapshotsMutex.RLock()
	defer fake.describeDBSnapshotsMutex.RUnlock()
	return len(fake.describeDBSnapshotsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsCalls(stub func(*rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error)) {
	fake.describeDBSnapshotsMutex.Lock()
	defer fake.describeDBSnapshotsMutex.Unlock()
	fake.DescribeDBSnapshotsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsArgsForCall(i int) *rds.DescribeDBSnapshotsInput {
	fake.describeDBSnapshotsMutex.RLock()
	defer fake.describeDBSnapshotsMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsReturns(result1 *rds.DescribeDBSnapshotsOutput, result2 error) {
	fake.describeDBSnapshotsMutex.Lock()
	defer fake.describeDBSnapshotsMutex.Unlock()
	fake.DescribeDBSnapshotsStub = nil
	fake.describeDBSnapshotsReturns = struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsReturnsOnCall(i int, result1 *rds.DescribeDBSnapshotsOutput, result2 error) {
	fake.describeDBSnapshotsMutex.Lock()
	defer fake.describeDBSnapshotsMutex.Unlock()
	fake.DescribeDBSnapshotsStub = nil
	if fake.describeDBSnapshotsReturnsOnCall == nil {
		fake.describeDBSnapshotsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSnapshotsOutput
			result2 error
		})
	}
	fake.describeDBSnapshotsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPages(arg1 *rds.DescribeDBSnapshotsInput, arg2 func(*rds.DescribeDBSnapshotsOutput, bool) bool) error {
	fake.describeDBSnapshotsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotsPagesReturnsOnCall[len(fake.describeDBSnapshotsPagesArgsForCall)]
	fake.describeDBSnapshotsPagesArgsForCall = append(fake.describeDBSnapshotsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotsInput
		arg2 func(*rds.DescribeDBSnapshotsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBSnapshotsPagesStub
	fakeReturns := fake.describeDBSnapshotsPagesReturns
	fake.recordInvocation("DescribeDBSnapshotsPages", []interface{}{arg1, arg2})
	fake.describeDBSnapshotsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesCallCount() int {
	fake.describeDBSnapshotsPagesMutex.RLock()
	defer fake.describeDBSnapshotsPagesMutex.RUnlock()
	return len(fake.describeDBSnapshotsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesCalls(stub func(*rds.DescribeDBSnapshotsInput, func(*rds.DescribeDBSnapshotsOutput, bool) bool) error) {
	fake.describeDBSnapshotsPagesMutex.Lock()
	defer fake.describeDBSnapshotsPagesMutex.Unlock()
	fake.DescribeDBSnapshotsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesArgsForCall(i int) (*rds.DescribeDBSnapshotsInput, func(*rds.DescribeDBSnapshotsOutput, bool) bool) {
	fake.describeDBSnapshotsPagesMutex.RLock()
	defer fake.describeDBSnapshotsPagesMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesReturns(result1 error) {
	fake.describeDBSnapshotsPagesMutex.Lock()
	defer fake.describeDBSnapshotsPagesMutex.Unlock()
	fake.DescribeDBSnapshotsPagesStub = nil
	fake.describeDBSnapshotsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBSnapshotsPagesMutex.Lock()
	defer fake.describeDBSnapshotsPagesMutex.Unlock()
	fake.DescribeDBSnapshotsPagesStub = nil
	if fake.describeDBSnapshotsPagesReturnsOnCall == nil {
		fake.describeDBSnapshotsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBSnapshotsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBSnapshotsInput, arg3 func(*rds.DescribeDBSnapshotsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotsPagesWithContextReturnsOnCall[len(fake.describeDBSnapshotsPagesWithContextArgsForCall)]
	fake.describeDBSnapshotsPagesWithContextArgsForCall = append(fake.describeDBSnapshotsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 func(*rds.DescribeDBSnapshotsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBSnapshotsPagesWithContextStub
	fakeReturns := fake.describeDBSnapshotsPagesWithContextReturns
	fake.recordInvocation("DescribeDBSnapshotsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBSnapshotsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesWithContextCallCount() int {
	fake.describeDBSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeDBSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBSnapshotsInput, func(*rds.DescribeDBSnapshotsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeDBSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeDBSnapshotsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSnapshotsInput, func(*rds.DescribeDBSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeDBSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeDBSnapshotsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesWithContextReturns(result1 error) {
	fake.describeDBSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeDBSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeDBSnapshotsPagesWithContextStub = nil
	fake.describeDBSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeDBSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeDBSnapshotsPagesWithContextStub = nil
	if fake.describeDBSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeDBSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsRequest(arg1 *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput) {
	fake.describeDBSnapshotsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotsRequestReturnsOnCall[len(fake.describeDBSnapshotsRequestArgsForCall)]
	fake.describeDBSnapshotsRequestArgsForCall = append(fake.describeDBSnapshotsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}{arg1})
	stub := fake.DescribeDBSnapshotsRequestStub
	fakeReturns := fake.describeDBSnapshotsRequestReturns
	fake.recordInvocation("DescribeDBSnapshotsRequest", []interface{}{arg1})
	fake.describeDBSnapshotsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsRequestCallCount() int {
	fake.describeDBSnapshotsRequestMutex.RLock()
	defer fake.describeDBSnapshotsRequestMutex.RUnlock()
	return len(fake.describeDBSnapshotsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsRequestCalls(stub func(*rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput)) {
	fake.describeDBSnapshotsRequestMutex.Lock()
	defer fake.describeDBSnapshotsRequestMutex.Unlock()
	fake.DescribeDBSnapshotsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsRequestArgsForCall(i int) *rds.DescribeDBSnapshotsInput {
	fake.describeDBSnapshotsRequestMutex.RLock()
	defer fake.describeDBSnapshotsRequestMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBSnapshotsOutput) {
	fake.describeDBSnapshotsRequestMutex.Lock()
	defer fake.describeDBSnapshotsRequestMutex.Unlock()
	fake.DescribeDBSnapshotsRequestStub = nil
	fake.describeDBSnapshotsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBSnapshotsOutput) {
	fake.describeDBSnapshotsRequestMutex.Lock()
	defer fake.describeDBSnapshotsRequestMutex.Unlock()
	fake.DescribeDBSnapshotsRequestStub = nil
	if fake.describeDBSnapshotsRequestReturnsOnCall == nil {
		fake.describeDBSnapshotsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBSnapshotsOutput
		})
	}
	fake.describeDBSnapshotsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsWithContext(arg1 context.Context, arg2 *rds.DescribeDBSnapshotsInput, arg3 ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {
	fake.describeDBSnapshotsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSnapshotsWithContextReturnsOnCall[len(fake.describeDBSnapshotsWithContextArgsForCall)]
	fake.describeDBSnapshotsWithContextArgsForCall = append(fake.describeDBSnapshotsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBSnapshotsWithContextStub
	fakeReturns := fake.describeDBSnapshotsWithContextReturns
	fake.recordInvocation("DescribeDBSnapshotsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBSnapshotsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsWithContextCallCount() int {
	fake.describeDBSnapshotsWithContextMutex.RLock()
	defer fake.describeDBSnapshotsWithContextMutex.RUnlock()
	return len(fake.describeDBSnapshotsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsWithContextCalls(stub func(context.Context, *rds.DescribeDBSnapshotsInput, ...request.Option) (*rds.DescribeDBSnapshotsOutput, error)) {
	fake.describeDBSnapshotsWithContextMutex.Lock()
	defer fake.describeDBSnapshotsWithContextMutex.Unlock()
	fake.DescribeDBSnapshotsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSnapshotsInput, []request.Option) {
	fake.describeDBSnapshotsWithContextMutex.RLock()
	defer fake.describeDBSnapshotsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSnapshotsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsWithContextReturns(result1 *rds.DescribeDBSnapshotsOutput, result2 error) {
	fake.describeDBSnapshotsWithContextMutex.Lock()
	defer fake.describeDBSnapshotsWithContextMutex.Unlock()
	fake.DescribeDBSnapshotsWithContextStub = nil
	fake.describeDBSnapshotsWithContextReturns = struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSnapshotsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBSnapshotsOutput, result2 error) {
	fake.describeDBSnapshotsWithContextMutex.Lock()
	defer fake.describeDBSnapshotsWithContextMutex.Unlock()
	fake.DescribeDBSnapshotsWithContextStub = nil
	if fake.describeDBSnapshotsWithContextReturnsOnCall == nil {
		fake.describeDBSnapshotsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSnapshotsOutput
			result2 error
		})
	}
	fake.describeDBSnapshotsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroups(arg1 *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	fake.describeDBSubnetGroupsMutex.Lock()
	ret, specificReturn := fake.describeDBSubnetGroupsReturnsOnCall[len(fake.describeDBSubnetGroupsArgsForCall)]
	fake.describeDBSubnetGroupsArgsForCall = append(fake.describeDBSubnetGroupsArgsForCall, struct {
		arg1 *rds.DescribeDBSubnetGroupsInput
	}{arg1})
	stub := fake.DescribeDBSubnetGroupsStub
	fakeReturns := fake.describeDBSubnetGroupsReturns
	fake.recordInvocation("DescribeDBSubnetGroups", []interface{}{arg1})
	fake.describeDBSubnetGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsCallCount() int {
	fake.describeDBSubnetGroupsMutex.RLock()
	defer fake.describeDBSubnetGroupsMutex.RUnlock()
	return len(fake.describeDBSubnetGroupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsCalls(stub func(*rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error)) {
	fake.describeDBSubnetGroupsMutex.Lock()
	defer fake.describeDBSubnetGroupsMutex.Unlock()
	fake.DescribeDBSubnetGroupsStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsArgsForCall(i int) *rds.DescribeDBSubnetGroupsInput {
	fake.describeDBSubnetGroupsMutex.RLock()
	defer fake.describeDBSubnetGroupsMutex.RUnlock()
	argsForCall := fake.describeDBSubnetGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsReturns(result1 *rds.DescribeDBSubnetGroupsOutput, result2 error) {
	fake.describeDBSubnetGroupsMutex.Lock()
	defer fake.describeDBSubnetGroupsMutex.Unlock()
	fake.DescribeDBSubnetGroupsStub = nil
	fake.describeDBSubnetGroupsReturns = struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsReturnsOnCall(i int, result1 *rds.DescribeDBSubnetGroupsOutput, result2 error) {
	fake.describeDBSubnetGroupsMutex.Lock()
	defer fake.describeDBSubnetGroupsMutex.Unlock()
	fake.DescribeDBSubnetGroupsStub = nil
	if fake.describeDBSubnetGroupsReturnsOnCall == nil {
		fake.describeDBSubnetGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeDBSubnetGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPages(arg1 *rds.DescribeDBSubnetGroupsInput, arg2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error {
	fake.describeDBSubnetGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeDBSubnetGroupsPagesReturnsOnCall[len(fake.describeDBSubnetGroupsPagesArgsForCall)]
	fake.describeDBSubnetGroupsPagesArgsForCall = append(fake.describeDBSubnetGroupsPagesArgsForCall, struct {
		arg1 *rds.DescribeDBSubnetGroupsInput
		arg2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeDBSubnetGroupsPagesStub
	fakeReturns := fake.describeDBSubnetGroupsPagesReturns
	fake.recordInvocation("DescribeDBSubnetGroupsPages", []interface{}{arg1, arg2})
	fake.describeDBSubnetGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesCallCount() int {
	fake.describeDBSubnetGroupsPagesMutex.RLock()
	defer fake.describeDBSubnetGroupsPagesMutex.RUnlock()
	return len(fake.describeDBSubnetGroupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesCalls(stub func(*rds.DescribeDBSubnetGroupsInput, func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error) {
	fake.describeDBSubnetGroupsPagesMutex.Lock()
	defer fake.describeDBSubnetGroupsPagesMutex.Unlock()
	fake.DescribeDBSubnetGroupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesArgsForCall(i int) (*rds.DescribeDBSubnetGroupsInput, func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) {
	fake.describeDBSubnetGroupsPagesMutex.RLock()
	defer fake.describeDBSubnetGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeDBSubnetGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesReturns(result1 error) {
	fake.describeDBSubnetGroupsPagesMutex.Lock()
	defer fake.describeDBSubnetGroupsPagesMutex.Unlock()
	fake.DescribeDBSubnetGroupsPagesStub = nil
	fake.describeDBSubnetGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeDBSubnetGroupsPagesMutex.Lock()
	defer fake.describeDBSubnetGroupsPagesMutex.Unlock()
	fake.DescribeDBSubnetGroupsPagesStub = nil
	if fake.describeDBSubnetGroupsPagesReturnsOnCall == nil {
		fake.describeDBSubnetGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBSubnetGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeDBSubnetGroupsInput, arg3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeDBSubnetGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSubnetGroupsPagesWithContextReturnsOnCall[len(fake.describeDBSubnetGroupsPagesWithContextArgsForCall)]
	fake.describeDBSubnetGroupsPagesWithContextArgsForCall = append(fake.describeDBSubnetGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSubnetGroupsInput
		arg3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeDBSubnetGroupsPagesWithContextStub
	fakeReturns := fake.describeDBSubnetGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeDBSubnetGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeDBSubnetGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesWithContextCallCount() int {
	fake.describeDBSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBSubnetGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeDBSubnetGroupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeDBSubnetGroupsInput, func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeDBSubnetGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBSubnetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBSubnetGroupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSubnetGroupsInput, func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, []request.Option) {
	fake.describeDBSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBSubnetGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSubnetGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesWithContextReturns(result1 error) {
	fake.describeDBSubnetGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBSubnetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBSubnetGroupsPagesWithContextStub = nil
	fake.describeDBSubnetGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeDBSubnetGroupsPagesWithContextMutex.Lock()
	defer fake.describeDBSubnetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeDBSubnetGroupsPagesWithContextStub = nil
	if fake.describeDBSubnetGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeDBSubnetGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeDBSubnetGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsRequest(arg1 *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput) {
	fake.describeDBSubnetGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeDBSubnetGroupsRequestReturnsOnCall[len(fake.describeDBSubnetGroupsRequestArgsForCall)]
	fake.describeDBSubnetGroupsRequestArgsForCall = append(fake.describeDBSubnetGroupsRequestArgsForCall, struct {
		arg1 *rds.DescribeDBSubnetGroupsInput
	}{arg1})
	stub := fake.DescribeDBSubnetGroupsRequestStub
	fakeReturns := fake.describeDBSubnetGroupsRequestReturns
	fake.recordInvocation("DescribeDBSubnetGroupsRequest", []interface{}{arg1})
	fake.describeDBSubnetGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsRequestCallCount() int {
	fake.describeDBSubnetGroupsRequestMutex.RLock()
	defer fake.describeDBSubnetGroupsRequestMutex.RUnlock()
	return len(fake.describeDBSubnetGroupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsRequestCalls(stub func(*rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput)) {
	fake.describeDBSubnetGroupsRequestMutex.Lock()
	defer fake.describeDBSubnetGroupsRequestMutex.Unlock()
	fake.DescribeDBSubnetGroupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsRequestArgsForCall(i int) *rds.DescribeDBSubnetGroupsInput {
	fake.describeDBSubnetGroupsRequestMutex.RLock()
	defer fake.describeDBSubnetGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeDBSubnetGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsRequestReturns(result1 *request.Request, result2 *rds.DescribeDBSubnetGroupsOutput) {
	fake.describeDBSubnetGroupsRequestMutex.Lock()
	defer fake.describeDBSubnetGroupsRequestMutex.Unlock()
	fake.DescribeDBSubnetGroupsRequestStub = nil
	fake.describeDBSubnetGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSubnetGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeDBSubnetGroupsOutput) {
	fake.describeDBSubnetGroupsRequestMutex.Lock()
	defer fake.describeDBSubnetGroupsRequestMutex.Unlock()
	fake.DescribeDBSubnetGroupsRequestStub = nil
	if fake.describeDBSubnetGroupsRequestReturnsOnCall == nil {
		fake.describeDBSubnetGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeDBSubnetGroupsOutput
		})
	}
	fake.describeDBSubnetGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeDBSubnetGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsWithContext(arg1 context.Context, arg2 *rds.DescribeDBSubnetGroupsInput, arg3 ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {
	fake.describeDBSubnetGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDBSubnetGroupsWithContextReturnsOnCall[len(fake.describeDBSubnetGroupsWithContextArgsForCall)]
	fake.describeDBSubnetGroupsWithContextArgsForCall = append(fake.describeDBSubnetGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSubnetGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDBSubnetGroupsWithContextStub
	fakeReturns := fake.describeDBSubnetGroupsWithContextReturns
	fake.recordInvocation("DescribeDBSubnetGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDBSubnetGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsWithContextCallCount() int {
	fake.describeDBSubnetGroupsWithContextMutex.RLock()
	defer fake.describeDBSubnetGroupsWithContextMutex.RUnlock()
	return len(fake.describeDBSubnetGroupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsWithContextCalls(stub func(context.Context, *rds.DescribeDBSubnetGroupsInput, ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error)) {
	fake.describeDBSubnetGroupsWithContextMutex.Lock()
	defer fake.describeDBSubnetGroupsWithContextMutex.Unlock()
	fake.DescribeDBSubnetGroupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSubnetGroupsInput, []request.Option) {
	fake.describeDBSubnetGroupsWithContextMutex.RLock()
	defer fake.describeDBSubnetGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeDBSubnetGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsWithContextReturns(result1 *rds.DescribeDBSubnetGroupsOutput, result2 error) {
	fake.describeDBSubnetGroupsWithContextMutex.Lock()
	defer fake.describeDBSubnetGroupsWithContextMutex.Unlock()
	fake.DescribeDBSubnetGroupsWithContextStub = nil
	fake.describeDBSubnetGroupsWithContextReturns = struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeDBSubnetGroupsWithContextReturnsOnCall(i int, result1 *rds.DescribeDBSubnetGroupsOutput, result2 error) {
	fake.describeDBSubnetGroupsWithContextMutex.Lock()
	defer fake.describeDBSubnetGroupsWithContextMutex.Unlock()
	fake.DescribeDBSubnetGroupsWithContextStub = nil
	if fake.describeDBSubnetGroupsWithContextReturnsOnCall == nil {
		fake.describeDBSubnetGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeDBSubnetGroupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParameters(arg1 *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	fake.describeEngineDefaultClusterParametersMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultClusterParametersReturnsOnCall[len(fake.describeEngineDefaultClusterParametersArgsForCall)]
	fake.describeEngineDefaultClusterParametersArgsForCall = append(fake.describeEngineDefaultClusterParametersArgsForCall, struct {
		arg1 *rds.DescribeEngineDefaultClusterParametersInput
	}{arg1})
	stub := fake.DescribeEngineDefaultClusterParametersStub
	fakeReturns := fake.describeEngineDefaultClusterParametersReturns
	fake.recordInvocation("DescribeEngineDefaultClusterParameters", []interface{}{arg1})
	fake.describeEngineDefaultClusterParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersCallCount() int {
	fake.describeEngineDefaultClusterParametersMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersMutex.RUnlock()
	return len(fake.describeEngineDefaultClusterParametersArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersCalls(stub func(*rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error)) {
	fake.describeEngineDefaultClusterParametersMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersArgsForCall(i int) *rds.DescribeEngineDefaultClusterParametersInput {
	fake.describeEngineDefaultClusterParametersMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultClusterParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersReturns(result1 *rds.DescribeEngineDefaultClusterParametersOutput, result2 error) {
	fake.describeEngineDefaultClusterParametersMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersStub = nil
	fake.describeEngineDefaultClusterParametersReturns = struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersReturnsOnCall(i int, result1 *rds.DescribeEngineDefaultClusterParametersOutput, result2 error) {
	fake.describeEngineDefaultClusterParametersMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersStub = nil
	if fake.describeEngineDefaultClusterParametersReturnsOnCall == nil {
		fake.describeEngineDefaultClusterParametersReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEngineDefaultClusterParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultClusterParametersReturnsOnCall[i] = struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersRequest(arg1 *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput) {
	fake.describeEngineDefaultClusterParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultClusterParametersRequestReturnsOnCall[len(fake.describeEngineDefaultClusterParametersRequestArgsForCall)]
	fake.describeEngineDefaultClusterParametersRequestArgsForCall = append(fake.describeEngineDefaultClusterParametersRequestArgsForCall, struct {
		arg1 *rds.DescribeEngineDefaultClusterParametersInput
	}{arg1})
	stub := fake.DescribeEngineDefaultClusterParametersRequestStub
	fakeReturns := fake.describeEngineDefaultClusterParametersRequestReturns
	fake.recordInvocation("DescribeEngineDefaultClusterParametersRequest", []interface{}{arg1})
	fake.describeEngineDefaultClusterParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersRequestCallCount() int {
	fake.describeEngineDefaultClusterParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersRequestMutex.RUnlock()
	return len(fake.describeEngineDefaultClusterParametersRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersRequestCalls(stub func(*rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput)) {
	fake.describeEngineDefaultClusterParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersRequestArgsForCall(i int) *rds.DescribeEngineDefaultClusterParametersInput {
	fake.describeEngineDefaultClusterParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersRequestMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultClusterParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersRequestReturns(result1 *request.Request, result2 *rds.DescribeEngineDefaultClusterParametersOutput) {
	fake.describeEngineDefaultClusterParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersRequestStub = nil
	fake.describeEngineDefaultClusterParametersRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultClusterParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeEngineDefaultClusterParametersOutput) {
	fake.describeEngineDefaultClusterParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersRequestStub = nil
	if fake.describeEngineDefaultClusterParametersRequestReturnsOnCall == nil {
		fake.describeEngineDefaultClusterParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeEngineDefaultClusterParametersOutput
		})
	}
	fake.describeEngineDefaultClusterParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultClusterParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersWithContext(arg1 context.Context, arg2 *rds.DescribeEngineDefaultClusterParametersInput, arg3 ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	fake.describeEngineDefaultClusterParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultClusterParametersWithContextReturnsOnCall[len(fake.describeEngineDefaultClusterParametersWithContextArgsForCall)]
	fake.describeEngineDefaultClusterParametersWithContextArgsForCall = append(fake.describeEngineDefaultClusterParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEngineDefaultClusterParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEngineDefaultClusterParametersWithContextStub
	fakeReturns := fake.describeEngineDefaultClusterParametersWithContextReturns
	fake.recordInvocation("DescribeEngineDefaultClusterParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEngineDefaultClusterParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersWithContextCallCount() int {
	fake.describeEngineDefaultClusterParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultClusterParametersWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersWithContextCalls(stub func(context.Context, *rds.DescribeEngineDefaultClusterParametersInput, ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error)) {
	fake.describeEngineDefaultClusterParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersWithContextArgsForCall(i int) (context.Context, *rds.DescribeEngineDefaultClusterParametersInput, []request.Option) {
	fake.describeEngineDefaultClusterParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultClusterParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersWithContextReturns(result1 *rds.DescribeEngineDefaultClusterParametersOutput, result2 error) {
	fake.describeEngineDefaultClusterParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersWithContextStub = nil
	fake.describeEngineDefaultClusterParametersWithContextReturns = struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultClusterParametersWithContextReturnsOnCall(i int, result1 *rds.DescribeEngineDefaultClusterParametersOutput, result2 error) {
	fake.describeEngineDefaultClusterParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultClusterParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultClusterParametersWithContextStub = nil
	if fake.describeEngineDefaultClusterParametersWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultClusterParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEngineDefaultClusterParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultClusterParametersWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeEngineDefaultClusterParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParameters(arg1 *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersReturnsOnCall[len(fake.describeEngineDefaultParametersArgsForCall)]
	fake.describeEngineDefaultParametersArgsForCall = append(fake.describeEngineDefaultParametersArgsForCall, struct {
		arg1 *rds.DescribeEngineDefaultParametersInput
	}{arg1})
	stub := fake.DescribeEngineDefaultParametersStub
	fakeReturns := fake.describeEngineDefaultParametersReturns
	fake.recordInvocation("DescribeEngineDefaultParameters", []interface{}{arg1})
	fake.describeEngineDefaultParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersCallCount() int {
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersCalls(stub func(*rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error)) {
	fake.describeEngineDefaultParametersMutex.Lock()
	defer fake.describeEngineDefaultParametersMutex.Unlock()
	fake.DescribeEngineDefaultParametersStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersArgsForCall(i int) *rds.DescribeEngineDefaultParametersInput {
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersReturns(result1 *rds.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	defer fake.describeEngineDefaultParametersMutex.Unlock()
	fake.DescribeEngineDefaultParametersStub = nil
	fake.describeEngineDefaultParametersReturns = struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersReturnsOnCall(i int, result1 *rds.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	defer fake.describeEngineDefaultParametersMutex.Unlock()
	fake.DescribeEngineDefaultParametersStub = nil
	if fake.describeEngineDefaultParametersReturnsOnCall == nil {
		fake.describeEngineDefaultParametersReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEngineDefaultParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultParametersReturnsOnCall[i] = struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPages(arg1 *rds.DescribeEngineDefaultParametersInput, arg2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersPagesReturnsOnCall[len(fake.describeEngineDefaultParametersPagesArgsForCall)]
	fake.describeEngineDefaultParametersPagesArgsForCall = append(fake.describeEngineDefaultParametersPagesArgsForCall, struct {
		arg1 *rds.DescribeEngineDefaultParametersInput
		arg2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEngineDefaultParametersPagesStub
	fakeReturns := fake.describeEngineDefaultParametersPagesReturns
	fake.recordInvocation("DescribeEngineDefaultParametersPages", []interface{}{arg1, arg2})
	fake.describeEngineDefaultParametersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesCallCount() int {
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesCalls(stub func(*rds.DescribeEngineDefaultParametersInput, func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error) {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesArgsForCall(i int) (*rds.DescribeEngineDefaultParametersInput, func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) {
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesReturns(result1 error) {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesStub = nil
	fake.describeEngineDefaultParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesReturnsOnCall(i int, result1 error) {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesStub = nil
	if fake.describeEngineDefaultParametersPagesReturnsOnCall == nil {
		fake.describeEngineDefaultParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEngineDefaultParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesWithContext(arg1 context.Context, arg2 *rds.DescribeEngineDefaultParametersInput, arg3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall[len(fake.describeEngineDefaultParametersPagesWithContextArgsForCall)]
	fake.describeEngineDefaultParametersPagesWithContextArgsForCall = append(fake.describeEngineDefaultParametersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEngineDefaultParametersInput
		arg3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEngineDefaultParametersPagesWithContextStub
	fakeReturns := fake.describeEngineDefaultParametersPagesWithContextReturns
	fake.recordInvocation("DescribeEngineDefaultParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesWithContextCallCount() int {
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesWithContextCalls(stub func(context.Context, *rds.DescribeEngineDefaultParametersInput, func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, ...request.Option) error) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeEngineDefaultParametersInput, func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, []request.Option) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesWithContextReturns(result1 error) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesWithContextStub = nil
	fake.describeEngineDefaultParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersPagesWithContextStub = nil
	if fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersRequest(arg1 *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersRequestReturnsOnCall[len(fake.describeEngineDefaultParametersRequestArgsForCall)]
	fake.describeEngineDefaultParametersRequestArgsForCall = append(fake.describeEngineDefaultParametersRequestArgsForCall, struct {
		arg1 *rds.DescribeEngineDefaultParametersInput
	}{arg1})
	stub := fake.DescribeEngineDefaultParametersRequestStub
	fakeReturns := fake.describeEngineDefaultParametersRequestReturns
	fake.recordInvocation("DescribeEngineDefaultParametersRequest", []interface{}{arg1})
	fake.describeEngineDefaultParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersRequestCallCount() int {
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersRequestCalls(stub func(*rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput)) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultParametersRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersRequestArgsForCall(i int) *rds.DescribeEngineDefaultParametersInput {
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersRequestReturns(result1 *request.Request, result2 *rds.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultParametersRequestStub = nil
	fake.describeEngineDefaultParametersRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	defer fake.describeEngineDefaultParametersRequestMutex.Unlock()
	fake.DescribeEngineDefaultParametersRequestStub = nil
	if fake.describeEngineDefaultParametersRequestReturnsOnCall == nil {
		fake.describeEngineDefaultParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeEngineDefaultParametersOutput
		})
	}
	fake.describeEngineDefaultParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeEngineDefaultParametersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersWithContext(arg1 context.Context, arg2 *rds.DescribeEngineDefaultParametersInput, arg3 ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersWithContextReturnsOnCall[len(fake.describeEngineDefaultParametersWithContextArgsForCall)]
	fake.describeEngineDefaultParametersWithContextArgsForCall = append(fake.describeEngineDefaultParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEngineDefaultParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEngineDefaultParametersWithContextStub
	fakeReturns := fake.describeEngineDefaultParametersWithContextReturns
	fake.recordInvocation("DescribeEngineDefaultParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersWithContextCallCount() int {
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersWithContextCalls(stub func(context.Context, *rds.DescribeEngineDefaultParametersInput, ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error)) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersWithContextArgsForCall(i int) (context.Context, *rds.DescribeEngineDefaultParametersInput, []request.Option) {
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeEngineDefaultParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersWithContextReturns(result1 *rds.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersWithContextStub = nil
	fake.describeEngineDefaultParametersWithContextReturns = struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEngineDefaultParametersWithContextReturnsOnCall(i int, result1 *rds.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	defer fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	fake.DescribeEngineDefaultParametersWithContextStub = nil
	if fake.describeEngineDefaultParametersWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEngineDefaultParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultParametersWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventCategories(arg1 *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
	fake.describeEventCategoriesMutex.Lock()
	ret, specificReturn := fake.describeEventCategoriesReturnsOnCall[len(fake.describeEventCategoriesArgsForCall)]
	fake.describeEventCategoriesArgsForCall = append(fake.describeEventCategoriesArgsForCall, struct {
		arg1 *rds.DescribeEventCategoriesInput
	}{arg1})
	stub := fake.DescribeEventCategoriesStub
	fakeReturns := fake.describeEventCategoriesReturns
	fake.recordInvocation("DescribeEventCategories", []interface{}{arg1})
	fake.describeEventCategoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventCategoriesCallCount() int {
	fake.describeEventCategoriesMutex.RLock()
	defer fake.describeEventCategoriesMutex.RUnlock()
	return len(fake.describeEventCategoriesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventCategoriesCalls(stub func(*rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error)) {
	fake.describeEventCategoriesMutex.Lock()
	defer fake.describeEventCategoriesMutex.Unlock()
	fake.DescribeEventCategoriesStub = stub
}

func (fake *FakeRDSAPI) DescribeEventCategoriesArgsForCall(i int) *rds.DescribeEventCategoriesInput {
	fake.describeEventCategoriesMutex.RLock()
	defer fake.describeEventCategoriesMutex.RUnlock()
	argsForCall := fake.describeEventCategoriesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEventCategoriesReturns(result1 *rds.DescribeEventCategoriesOutput, result2 error) {
	fake.describeEventCategoriesMutex.Lock()
	defer fake.describeEventCategoriesMutex.Unlock()
	fake.DescribeEventCategoriesStub = nil
	fake.describeEventCategoriesReturns = struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventCategoriesReturnsOnCall(i int, result1 *rds.DescribeEventCategoriesOutput, result2 error) {
	fake.describeEventCategoriesMutex.Lock()
	defer fake.describeEventCategoriesMutex.Unlock()
	fake.DescribeEventCategoriesStub = nil
	if fake.describeEventCategoriesReturnsOnCall == nil {
		fake.describeEventCategoriesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEventCategoriesOutput
			result2 error
		})
	}
	fake.describeEventCategoriesReturnsOnCall[i] = struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventCategoriesRequest(arg1 *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput) {
	fake.describeEventCategoriesRequestMutex.Lock()
	ret, specificReturn := fake.describeEventCategoriesRequestReturnsOnCall[len(fake.describeEventCategoriesRequestArgsForCall)]
	fake.describeEventCategoriesRequestArgsForCall = append(fake.describeEventCategoriesRequestArgsForCall, struct {
		arg1 *rds.DescribeEventCategoriesInput
	}{arg1})
	stub := fake.DescribeEventCategoriesRequestStub
	fakeReturns := fake.describeEventCategoriesRequestReturns
	fake.recordInvocation("DescribeEventCategoriesRequest", []interface{}{arg1})
	fake.describeEventCategoriesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventCategoriesRequestCallCount() int {
	fake.describeEventCategoriesRequestMutex.RLock()
	defer fake.describeEventCategoriesRequestMutex.RUnlock()
	return len(fake.describeEventCategoriesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventCategoriesRequestCalls(stub func(*rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput)) {
	fake.describeEventCategoriesRequestMutex.Lock()
	defer fake.describeEventCategoriesRequestMutex.Unlock()
	fake.DescribeEventCategoriesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeEventCategoriesRequestArgsForCall(i int) *rds.DescribeEventCategoriesInput {
	fake.describeEventCategoriesRequestMutex.RLock()
	defer fake.describeEventCategoriesRequestMutex.RUnlock()
	argsForCall := fake.describeEventCategoriesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEventCategoriesRequestReturns(result1 *request.Request, result2 *rds.DescribeEventCategoriesOutput) {
	fake.describeEventCategoriesRequestMutex.Lock()
	defer fake.describeEventCategoriesRequestMutex.Unlock()
	fake.DescribeEventCategoriesRequestStub = nil
	fake.describeEventCategoriesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeEventCategoriesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventCategoriesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeEventCategoriesOutput) {
	fake.describeEventCategoriesRequestMutex.Lock()
	defer fake.describeEventCategoriesRequestMutex.Unlock()
	fake.DescribeEventCategoriesRequestStub = nil
	if fake.describeEventCategoriesRequestReturnsOnCall == nil {
		fake.describeEventCategoriesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeEventCategoriesOutput
		})
	}
	fake.describeEventCategoriesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeEventCategoriesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventCategoriesWithContext(arg1 context.Context, arg2 *rds.DescribeEventCategoriesInput, arg3 ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {
	fake.describeEventCategoriesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventCategoriesWithContextReturnsOnCall[len(fake.describeEventCategoriesWithContextArgsForCall)]
	fake.describeEventCategoriesWithContextArgsForCall = append(fake.describeEventCategoriesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEventCategoriesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventCategoriesWithContextStub
	fakeReturns := fake.describeEventCategoriesWithContextReturns
	fake.recordInvocation("DescribeEventCategoriesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventCategoriesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventCategoriesWithContextCallCount() int {
	fake.describeEventCategoriesWithContextMutex.RLock()
	defer fake.describeEventCategoriesWithContextMutex.RUnlock()
	return len(fake.describeEventCategoriesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventCategoriesWithContextCalls(stub func(context.Context, *rds.DescribeEventCategoriesInput, ...request.Option) (*rds.DescribeEventCategoriesOutput, error)) {
	fake.describeEventCategoriesWithContextMutex.Lock()
	defer fake.describeEventCategoriesWithContextMutex.Unlock()
	fake.DescribeEventCategoriesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEventCategoriesWithContextArgsForCall(i int) (context.Context, *rds.DescribeEventCategoriesInput, []request.Option) {
	fake.describeEventCategoriesWithContextMutex.RLock()
	defer fake.describeEventCategoriesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventCategoriesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeEventCategoriesWithContextReturns(result1 *rds.DescribeEventCategoriesOutput, result2 error) {
	fake.describeEventCategoriesWithContextMutex.Lock()
	defer fake.describeEventCategoriesWithContextMutex.Unlock()
	fake.DescribeEventCategoriesWithContextStub = nil
	fake.describeEventCategoriesWithContextReturns = struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventCategoriesWithContextReturnsOnCall(i int, result1 *rds.DescribeEventCategoriesOutput, result2 error) {
	fake.describeEventCategoriesWithContextMutex.Lock()
	defer fake.describeEventCategoriesWithContextMutex.Unlock()
	fake.DescribeEventCategoriesWithContextStub = nil
	if fake.describeEventCategoriesWithContextReturnsOnCall == nil {
		fake.describeEventCategoriesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEventCategoriesOutput
			result2 error
		})
	}
	fake.describeEventCategoriesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeEventCategoriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptions(arg1 *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
	fake.describeEventSubscriptionsMutex.Lock()
	ret, specificReturn := fake.describeEventSubscriptionsReturnsOnCall[len(fake.describeEventSubscriptionsArgsForCall)]
	fake.describeEventSubscriptionsArgsForCall = append(fake.describeEventSubscriptionsArgsForCall, struct {
		arg1 *rds.DescribeEventSubscriptionsInput
	}{arg1})
	stub := fake.DescribeEventSubscriptionsStub
	fakeReturns := fake.describeEventSubscriptionsReturns
	fake.recordInvocation("DescribeEventSubscriptions", []interface{}{arg1})
	fake.describeEventSubscriptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsCallCount() int {
	fake.describeEventSubscriptionsMutex.RLock()
	defer fake.describeEventSubscriptionsMutex.RUnlock()
	return len(fake.describeEventSubscriptionsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsCalls(stub func(*rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error)) {
	fake.describeEventSubscriptionsMutex.Lock()
	defer fake.describeEventSubscriptionsMutex.Unlock()
	fake.DescribeEventSubscriptionsStub = stub
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsArgsForCall(i int) *rds.DescribeEventSubscriptionsInput {
	fake.describeEventSubscriptionsMutex.RLock()
	defer fake.describeEventSubscriptionsMutex.RUnlock()
	argsForCall := fake.describeEventSubscriptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsReturns(result1 *rds.DescribeEventSubscriptionsOutput, result2 error) {
	fake.describeEventSubscriptionsMutex.Lock()
	defer fake.describeEventSubscriptionsMutex.Unlock()
	fake.DescribeEventSubscriptionsStub = nil
	fake.describeEventSubscriptionsReturns = struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsReturnsOnCall(i int, result1 *rds.DescribeEventSubscriptionsOutput, result2 error) {
	fake.describeEventSubscriptionsMutex.Lock()
	defer fake.describeEventSubscriptionsMutex.Unlock()
	fake.DescribeEventSubscriptionsStub = nil
	if fake.describeEventSubscriptionsReturnsOnCall == nil {
		fake.describeEventSubscriptionsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEventSubscriptionsOutput
			result2 error
		})
	}
	fake.describeEventSubscriptionsReturnsOnCall[i] = struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPages(arg1 *rds.DescribeEventSubscriptionsInput, arg2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error {
	fake.describeEventSubscriptionsPagesMutex.Lock()
	ret, specificReturn := fake.describeEventSubscriptionsPagesReturnsOnCall[len(fake.describeEventSubscriptionsPagesArgsForCall)]
	fake.describeEventSubscriptionsPagesArgsForCall = append(fake.describeEventSubscriptionsPagesArgsForCall, struct {
		arg1 *rds.DescribeEventSubscriptionsInput
		arg2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventSubscriptionsPagesStub
	fakeReturns := fake.describeEventSubscriptionsPagesReturns
	fake.recordInvocation("DescribeEventSubscriptionsPages", []interface{}{arg1, arg2})
	fake.describeEventSubscriptionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesCallCount() int {
	fake.describeEventSubscriptionsPagesMutex.RLock()
	defer fake.describeEventSubscriptionsPagesMutex.RUnlock()
	return len(fake.describeEventSubscriptionsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesCalls(stub func(*rds.DescribeEventSubscriptionsInput, func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error) {
	fake.describeEventSubscriptionsPagesMutex.Lock()
	defer fake.describeEventSubscriptionsPagesMutex.Unlock()
	fake.DescribeEventSubscriptionsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesArgsForCall(i int) (*rds.DescribeEventSubscriptionsInput, func(*rds.DescribeEventSubscriptionsOutput, bool) bool) {
	fake.describeEventSubscriptionsPagesMutex.RLock()
	defer fake.describeEventSubscriptionsPagesMutex.RUnlock()
	argsForCall := fake.describeEventSubscriptionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesReturns(result1 error) {
	fake.describeEventSubscriptionsPagesMutex.Lock()
	defer fake.describeEventSubscriptionsPagesMutex.Unlock()
	fake.DescribeEventSubscriptionsPagesStub = nil
	fake.describeEventSubscriptionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventSubscriptionsPagesMutex.Lock()
	defer fake.describeEventSubscriptionsPagesMutex.Unlock()
	fake.DescribeEventSubscriptionsPagesStub = nil
	if fake.describeEventSubscriptionsPagesReturnsOnCall == nil {
		fake.describeEventSubscriptionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventSubscriptionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeEventSubscriptionsInput, arg3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventSubscriptionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventSubscriptionsPagesWithContextReturnsOnCall[len(fake.describeEventSubscriptionsPagesWithContextArgsForCall)]
	fake.describeEventSubscriptionsPagesWithContextArgsForCall = append(fake.describeEventSubscriptionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEventSubscriptionsInput
		arg3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventSubscriptionsPagesWithContextStub
	fakeReturns := fake.describeEventSubscriptionsPagesWithContextReturns
	fake.recordInvocation("DescribeEventSubscriptionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventSubscriptionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesWithContextCallCount() int {
	fake.describeEventSubscriptionsPagesWithContextMutex.RLock()
	defer fake.describeEventSubscriptionsPagesWithContextMutex.RUnlock()
	return len(fake.describeEventSubscriptionsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesWithContextCalls(stub func(context.Context, *rds.DescribeEventSubscriptionsInput, func(*rds.DescribeEventSubscriptionsOutput, bool) bool, ...request.Option) error) {
	fake.describeEventSubscriptionsPagesWithContextMutex.Lock()
	defer fake.describeEventSubscriptionsPagesWithContextMutex.Unlock()
	fake.DescribeEventSubscriptionsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeEventSubscriptionsInput, func(*rds.DescribeEventSubscriptionsOutput, bool) bool, []request.Option) {
	fake.describeEventSubscriptionsPagesWithContextMutex.RLock()
	defer fake.describeEventSubscriptionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventSubscriptionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesWithContextReturns(result1 error) {
	fake.describeEventSubscriptionsPagesWithContextMutex.Lock()
	defer fake.describeEventSubscriptionsPagesWithContextMutex.Unlock()
	fake.DescribeEventSubscriptionsPagesWithContextStub = nil
	fake.describeEventSubscriptionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventSubscriptionsPagesWithContextMutex.Lock()
	defer fake.describeEventSubscriptionsPagesWithContextMutex.Unlock()
	fake.DescribeEventSubscriptionsPagesWithContextStub = nil
	if fake.describeEventSubscriptionsPagesWithContextReturnsOnCall == nil {
		fake.describeEventSubscriptionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventSubscriptionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsRequest(arg1 *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput) {
	fake.describeEventSubscriptionsRequestMutex.Lock()
	ret, specificReturn := fake.describeEventSubscriptionsRequestReturnsOnCall[len(fake.describeEventSubscriptionsRequestArgsForCall)]
	fake.describeEventSubscriptionsRequestArgsForCall = append(fake.describeEventSubscriptionsRequestArgsForCall, struct {
		arg1 *rds.DescribeEventSubscriptionsInput
	}{arg1})
	stub := fake.DescribeEventSubscriptionsRequestStub
	fakeReturns := fake.describeEventSubscriptionsRequestReturns
	fake.recordInvocation("DescribeEventSubscriptionsRequest", []interface{}{arg1})
	fake.describeEventSubscriptionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsRequestCallCount() int {
	fake.describeEventSubscriptionsRequestMutex.RLock()
	defer fake.describeEventSubscriptionsRequestMutex.RUnlock()
	return len(fake.describeEventSubscriptionsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsRequestCalls(stub func(*rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput)) {
	fake.describeEventSubscriptionsRequestMutex.Lock()
	defer fake.describeEventSubscriptionsRequestMutex.Unlock()
	fake.DescribeEventSubscriptionsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsRequestArgsForCall(i int) *rds.DescribeEventSubscriptionsInput {
	fake.describeEventSubscriptionsRequestMutex.RLock()
	defer fake.describeEventSubscriptionsRequestMutex.RUnlock()
	argsForCall := fake.describeEventSubscriptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsRequestReturns(result1 *request.Request, result2 *rds.DescribeEventSubscriptionsOutput) {
	fake.describeEventSubscriptionsRequestMutex.Lock()
	defer fake.describeEventSubscriptionsRequestMutex.Unlock()
	fake.DescribeEventSubscriptionsRequestStub = nil
	fake.describeEventSubscriptionsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeEventSubscriptionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeEventSubscriptionsOutput) {
	fake.describeEventSubscriptionsRequestMutex.Lock()
	defer fake.describeEventSubscriptionsRequestMutex.Unlock()
	fake.DescribeEventSubscriptionsRequestStub = nil
	if fake.describeEventSubscriptionsRequestReturnsOnCall == nil {
		fake.describeEventSubscriptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeEventSubscriptionsOutput
		})
	}
	fake.describeEventSubscriptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeEventSubscriptionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsWithContext(arg1 context.Context, arg2 *rds.DescribeEventSubscriptionsInput, arg3 ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {
	fake.describeEventSubscriptionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventSubscriptionsWithContextReturnsOnCall[len(fake.describeEventSubscriptionsWithContextArgsForCall)]
	fake.describeEventSubscriptionsWithContextArgsForCall = append(fake.describeEventSubscriptionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEventSubscriptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventSubscriptionsWithContextStub
	fakeReturns := fake.describeEventSubscriptionsWithContextReturns
	fake.recordInvocation("DescribeEventSubscriptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventSubscriptionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsWithContextCallCount() int {
	fake.describeEventSubscriptionsWithContextMutex.RLock()
	defer fake.describeEventSubscriptionsWithContextMutex.RUnlock()
	return len(fake.describeEventSubscriptionsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsWithContextCalls(stub func(context.Context, *rds.DescribeEventSubscriptionsInput, ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error)) {
	fake.describeEventSubscriptionsWithContextMutex.Lock()
	defer fake.describeEventSubscriptionsWithContextMutex.Unlock()
	fake.DescribeEventSubscriptionsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsWithContextArgsForCall(i int) (context.Context, *rds.DescribeEventSubscriptionsInput, []request.Option) {
	fake.describeEventSubscriptionsWithContextMutex.RLock()
	defer fake.describeEventSubscriptionsWithContextMutex.RUnlock()
	argsForCall := fake.describeEventSubscriptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsWithContextReturns(result1 *rds.DescribeEventSubscriptionsOutput, result2 error) {
	fake.describeEventSubscriptionsWithContextMutex.Lock()
	defer fake.describeEventSubscriptionsWithContextMutex.Unlock()
	fake.DescribeEventSubscriptionsWithContextStub = nil
	fake.describeEventSubscriptionsWithContextReturns = struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventSubscriptionsWithContextReturnsOnCall(i int, result1 *rds.DescribeEventSubscriptionsOutput, result2 error) {
	fake.describeEventSubscriptionsWithContextMutex.Lock()
	defer fake.describeEventSubscriptionsWithContextMutex.Unlock()
	fake.DescribeEventSubscriptionsWithContextStub = nil
	if fake.describeEventSubscriptionsWithContextReturnsOnCall == nil {
		fake.describeEventSubscriptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEventSubscriptionsOutput
			result2 error
		})
	}
	fake.describeEventSubscriptionsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeEventSubscriptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEvents(arg1 *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
	fake.describeEventsMutex.Lock()
	ret, specificReturn := fake.describeEventsReturnsOnCall[len(fake.describeEventsArgsForCall)]
	fake.describeEventsArgsForCall = append(fake.describeEventsArgsForCall, struct {
		arg1 *rds.DescribeEventsInput
	}{arg1})
	stub := fake.DescribeEventsStub
	fakeReturns := fake.describeEventsReturns
	fake.recordInvocation("DescribeEvents", []interface{}{arg1})
	fake.describeEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventsCallCount() int {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	return len(fake.describeEventsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventsCalls(stub func(*rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error)) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = stub
}

func (fake *FakeRDSAPI) DescribeEventsArgsForCall(i int) *rds.DescribeEventsInput {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	argsForCall := fake.describeEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEventsReturns(result1 *rds.DescribeEventsOutput, result2 error) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = nil
	fake.describeEventsReturns = struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventsReturnsOnCall(i int, result1 *rds.DescribeEventsOutput, result2 error) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = nil
	if fake.describeEventsReturnsOnCall == nil {
		fake.describeEventsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsReturnsOnCall[i] = struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventsPages(arg1 *rds.DescribeEventsInput, arg2 func(*rds.DescribeEventsOutput, bool) bool) error {
	fake.describeEventsPagesMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesReturnsOnCall[len(fake.describeEventsPagesArgsForCall)]
	fake.describeEventsPagesArgsForCall = append(fake.describeEventsPagesArgsForCall, struct {
		arg1 *rds.DescribeEventsInput
		arg2 func(*rds.DescribeEventsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventsPagesStub
	fakeReturns := fake.describeEventsPagesReturns
	fake.recordInvocation("DescribeEventsPages", []interface{}{arg1, arg2})
	fake.describeEventsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeEventsPagesCallCount() int {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	return len(fake.describeEventsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventsPagesCalls(stub func(*rds.DescribeEventsInput, func(*rds.DescribeEventsOutput, bool) bool) error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeEventsPagesArgsForCall(i int) (*rds.DescribeEventsInput, func(*rds.DescribeEventsOutput, bool) bool) {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	argsForCall := fake.describeEventsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeEventsPagesReturns(result1 error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = nil
	fake.describeEventsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventsPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = nil
	if fake.describeEventsPagesReturnsOnCall == nil {
		fake.describeEventsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeEventsInput, arg3 func(*rds.DescribeEventsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesWithContextReturnsOnCall[len(fake.describeEventsPagesWithContextArgsForCall)]
	fake.describeEventsPagesWithContextArgsForCall = append(fake.describeEventsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEventsInput
		arg3 func(*rds.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventsPagesWithContextStub
	fakeReturns := fake.describeEventsPagesWithContextReturns
	fake.recordInvocation("DescribeEventsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeEventsPagesWithContextCallCount() int {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	return len(fake.describeEventsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventsPagesWithContextCalls(stub func(context.Context, *rds.DescribeEventsInput, func(*rds.DescribeEventsOutput, bool) bool, ...request.Option) error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEventsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeEventsInput, func(*rds.DescribeEventsOutput, bool) bool, []request.Option) {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeEventsPagesWithContextReturns(result1 error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = nil
	fake.describeEventsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = nil
	if fake.describeEventsPagesWithContextReturnsOnCall == nil {
		fake.describeEventsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeEventsRequest(arg1 *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	ret, specificReturn := fake.describeEventsRequestReturnsOnCall[len(fake.describeEventsRequestArgsForCall)]
	fake.describeEventsRequestArgsForCall = append(fake.describeEventsRequestArgsForCall, struct {
		arg1 *rds.DescribeEventsInput
	}{arg1})
	stub := fake.DescribeEventsRequestStub
	fakeReturns := fake.describeEventsRequestReturns
	fake.recordInvocation("DescribeEventsRequest", []interface{}{arg1})
	fake.describeEventsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventsRequestCallCount() int {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	return len(fake.describeEventsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventsRequestCalls(stub func(*rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput)) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeEventsRequestArgsForCall(i int) *rds.DescribeEventsInput {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	argsForCall := fake.describeEventsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeEventsRequestReturns(result1 *request.Request, result2 *rds.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = nil
	fake.describeEventsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = nil
	if fake.describeEventsRequestReturnsOnCall == nil {
		fake.describeEventsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeEventsOutput
		})
	}
	fake.describeEventsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventsWithContext(arg1 context.Context, arg2 *rds.DescribeEventsInput, arg3 ...request.Option) (*rds.DescribeEventsOutput, error) {
	fake.describeEventsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsWithContextReturnsOnCall[len(fake.describeEventsWithContextArgsForCall)]
	fake.describeEventsWithContextArgsForCall = append(fake.describeEventsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeEventsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventsWithContextStub
	fakeReturns := fake.describeEventsWithContextReturns
	fake.recordInvocation("DescribeEventsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeEventsWithContextCallCount() int {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	return len(fake.describeEventsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeEventsWithContextCalls(stub func(context.Context, *rds.DescribeEventsInput, ...request.Option) (*rds.DescribeEventsOutput, error)) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeEventsWithContextArgsForCall(i int) (context.Context, *rds.DescribeEventsInput, []request.Option) {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeEventsWithContextReturns(result1 *rds.DescribeEventsOutput, result2 error) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = nil
	fake.describeEventsWithContextReturns = struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeEventsWithContextReturnsOnCall(i int, result1 *rds.DescribeEventsOutput, result2 error) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = nil
	if fake.describeEventsWithContextReturnsOnCall == nil {
		fake.describeEventsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeExportTasks(arg1 *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
	fake.describeExportTasksMutex.Lock()
	ret, specificReturn := fake.describeExportTasksReturnsOnCall[len(fake.describeExportTasksArgsForCall)]
	fake.describeExportTasksArgsForCall = append(fake.describeExportTasksArgsForCall, struct {
		arg1 *rds.DescribeExportTasksInput
	}{arg1})
	stub := fake.DescribeExportTasksStub
	fakeReturns := fake.describeExportTasksReturns
	fake.recordInvocation("DescribeExportTasks", []interface{}{arg1})
	fake.describeExportTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeExportTasksCallCount() int {
	fake.describeExportTasksMutex.RLock()
	defer fake.describeExportTasksMutex.RUnlock()
	return len(fake.describeExportTasksArgsForCall)
}

func (fake *FakeRDSAPI) DescribeExportTasksCalls(stub func(*rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error)) {
	fake.describeExportTasksMutex.Lock()
	defer fake.describeExportTasksMutex.Unlock()
	fake.DescribeExportTasksStub = stub
}

func (fake *FakeRDSAPI) DescribeExportTasksArgsForCall(i int) *rds.DescribeExportTasksInput {
	fake.describeExportTasksMutex.RLock()
	defer fake.describeExportTasksMutex.RUnlock()
	argsForCall := fake.describeExportTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeExportTasksReturns(result1 *rds.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksMutex.Lock()
	defer fake.describeExportTasksMutex.Unlock()
	fake.DescribeExportTasksStub = nil
	fake.describeExportTasksReturns = struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeExportTasksReturnsOnCall(i int, result1 *rds.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksMutex.Lock()
	defer fake.describeExportTasksMutex.Unlock()
	fake.DescribeExportTasksStub = nil
	if fake.describeExportTasksReturnsOnCall == nil {
		fake.describeExportTasksReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeExportTasksOutput
			result2 error
		})
	}
	fake.describeExportTasksReturnsOnCall[i] = struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeExportTasksPages(arg1 *rds.DescribeExportTasksInput, arg2 func(*rds.DescribeExportTasksOutput, bool) bool) error {
	fake.describeExportTasksPagesMutex.Lock()
	ret, specificReturn := fake.describeExportTasksPagesReturnsOnCall[len(fake.describeExportTasksPagesArgsForCall)]
	fake.describeExportTasksPagesArgsForCall = append(fake.describeExportTasksPagesArgsForCall, struct {
		arg1 *rds.DescribeExportTasksInput
		arg2 func(*rds.DescribeExportTasksOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeExportTasksPagesStub
	fakeReturns := fake.describeExportTasksPagesReturns
	fake.recordInvocation("DescribeExportTasksPages", []interface{}{arg1, arg2})
	fake.describeExportTasksPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesCallCount() int {
	fake.describeExportTasksPagesMutex.RLock()
	defer fake.describeExportTasksPagesMutex.RUnlock()
	return len(fake.describeExportTasksPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesCalls(stub func(*rds.DescribeExportTasksInput, func(*rds.DescribeExportTasksOutput, bool) bool) error) {
	fake.describeExportTasksPagesMutex.Lock()
	defer fake.describeExportTasksPagesMutex.Unlock()
	fake.DescribeExportTasksPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesArgsForCall(i int) (*rds.DescribeExportTasksInput, func(*rds.DescribeExportTasksOutput, bool) bool) {
	fake.describeExportTasksPagesMutex.RLock()
	defer fake.describeExportTasksPagesMutex.RUnlock()
	argsForCall := fake.describeExportTasksPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesReturns(result1 error) {
	fake.describeExportTasksPagesMutex.Lock()
	defer fake.describeExportTasksPagesMutex.Unlock()
	fake.DescribeExportTasksPagesStub = nil
	fake.describeExportTasksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesReturnsOnCall(i int, result1 error) {
	fake.describeExportTasksPagesMutex.Lock()
	defer fake.describeExportTasksPagesMutex.Unlock()
	fake.DescribeExportTasksPagesStub = nil
	if fake.describeExportTasksPagesReturnsOnCall == nil {
		fake.describeExportTasksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeExportTasksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesWithContext(arg1 context.Context, arg2 *rds.DescribeExportTasksInput, arg3 func(*rds.DescribeExportTasksOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeExportTasksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeExportTasksPagesWithContextReturnsOnCall[len(fake.describeExportTasksPagesWithContextArgsForCall)]
	fake.describeExportTasksPagesWithContextArgsForCall = append(fake.describeExportTasksPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeExportTasksInput
		arg3 func(*rds.DescribeExportTasksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeExportTasksPagesWithContextStub
	fakeReturns := fake.describeExportTasksPagesWithContextReturns
	fake.recordInvocation("DescribeExportTasksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeExportTasksPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesWithContextCallCount() int {
	fake.describeExportTasksPagesWithContextMutex.RLock()
	defer fake.describeExportTasksPagesWithContextMutex.RUnlock()
	return len(fake.describeExportTasksPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesWithContextCalls(stub func(context.Context, *rds.DescribeExportTasksInput, func(*rds.DescribeExportTasksOutput, bool) bool, ...request.Option) error) {
	fake.describeExportTasksPagesWithContextMutex.Lock()
	defer fake.describeExportTasksPagesWithContextMutex.Unlock()
	fake.DescribeExportTasksPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeExportTasksInput, func(*rds.DescribeExportTasksOutput, bool) bool, []request.Option) {
	fake.describeExportTasksPagesWithContextMutex.RLock()
	defer fake.describeExportTasksPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeExportTasksPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesWithContextReturns(result1 error) {
	fake.describeExportTasksPagesWithContextMutex.Lock()
	defer fake.describeExportTasksPagesWithContextMutex.Unlock()
	fake.DescribeExportTasksPagesWithContextStub = nil
	fake.describeExportTasksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeExportTasksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeExportTasksPagesWithContextMutex.Lock()
	defer fake.describeExportTasksPagesWithContextMutex.Unlock()
	fake.DescribeExportTasksPagesWithContextStub = nil
	if fake.describeExportTasksPagesWithContextReturnsOnCall == nil {
		fake.describeExportTasksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeExportTasksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeExportTasksRequest(arg1 *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput) {
	fake.describeExportTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeExportTasksRequestReturnsOnCall[len(fake.describeExportTasksRequestArgsForCall)]
	fake.describeExportTasksRequestArgsForCall = append(fake.describeExportTasksRequestArgsForCall, struct {
		arg1 *rds.DescribeExportTasksInput
	}{arg1})
	stub := fake.DescribeExportTasksRequestStub
	fakeReturns := fake.describeExportTasksRequestReturns
	fake.recordInvocation("DescribeExportTasksRequest", []interface{}{arg1})
	fake.describeExportTasksRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeExportTasksRequestCallCount() int {
	fake.describeExportTasksRequestMutex.RLock()
	defer fake.describeExportTasksRequestMutex.RUnlock()
	return len(fake.describeExportTasksRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeExportTasksRequestCalls(stub func(*rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput)) {
	fake.describeExportTasksRequestMutex.Lock()
	defer fake.describeExportTasksRequestMutex.Unlock()
	fake.DescribeExportTasksRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeExportTasksRequestArgsForCall(i int) *rds.DescribeExportTasksInput {
	fake.describeExportTasksRequestMutex.RLock()
	defer fake.describeExportTasksRequestMutex.RUnlock()
	argsForCall := fake.describeExportTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeExportTasksRequestReturns(result1 *request.Request, result2 *rds.DescribeExportTasksOutput) {
	fake.describeExportTasksRequestMutex.Lock()
	defer fake.describeExportTasksRequestMutex.Unlock()
	fake.DescribeExportTasksRequestStub = nil
	fake.describeExportTasksRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeExportTasksOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeExportTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeExportTasksOutput) {
	fake.describeExportTasksRequestMutex.Lock()
	defer fake.describeExportTasksRequestMutex.Unlock()
	fake.DescribeExportTasksRequestStub = nil
	if fake.describeExportTasksRequestReturnsOnCall == nil {
		fake.describeExportTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeExportTasksOutput
		})
	}
	fake.describeExportTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeExportTasksOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeExportTasksWithContext(arg1 context.Context, arg2 *rds.DescribeExportTasksInput, arg3 ...request.Option) (*rds.DescribeExportTasksOutput, error) {
	fake.describeExportTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeExportTasksWithContextReturnsOnCall[len(fake.describeExportTasksWithContextArgsForCall)]
	fake.describeExportTasksWithContextArgsForCall = append(fake.describeExportTasksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeExportTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeExportTasksWithContextStub
	fakeReturns := fake.describeExportTasksWithContextReturns
	fake.recordInvocation("DescribeExportTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeExportTasksWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeExportTasksWithContextCallCount() int {
	fake.describeExportTasksWithContextMutex.RLock()
	defer fake.describeExportTasksWithContextMutex.RUnlock()
	return len(fake.describeExportTasksWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeExportTasksWithContextCalls(stub func(context.Context, *rds.DescribeExportTasksInput, ...request.Option) (*rds.DescribeExportTasksOutput, error)) {
	fake.describeExportTasksWithContextMutex.Lock()
	defer fake.describeExportTasksWithContextMutex.Unlock()
	fake.DescribeExportTasksWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeExportTasksWithContextArgsForCall(i int) (context.Context, *rds.DescribeExportTasksInput, []request.Option) {
	fake.describeExportTasksWithContextMutex.RLock()
	defer fake.describeExportTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeExportTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeExportTasksWithContextReturns(result1 *rds.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksWithContextMutex.Lock()
	defer fake.describeExportTasksWithContextMutex.Unlock()
	fake.DescribeExportTasksWithContextStub = nil
	fake.describeExportTasksWithContextReturns = struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeExportTasksWithContextReturnsOnCall(i int, result1 *rds.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksWithContextMutex.Lock()
	defer fake.describeExportTasksWithContextMutex.Unlock()
	fake.DescribeExportTasksWithContextStub = nil
	if fake.describeExportTasksWithContextReturnsOnCall == nil {
		fake.describeExportTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeExportTasksOutput
			result2 error
		})
	}
	fake.describeExportTasksWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeGlobalClusters(arg1 *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
	fake.describeGlobalClustersMutex.Lock()
	ret, specificReturn := fake.describeGlobalClustersReturnsOnCall[len(fake.describeGlobalClustersArgsForCall)]
	fake.describeGlobalClustersArgsForCall = append(fake.describeGlobalClustersArgsForCall, struct {
		arg1 *rds.DescribeGlobalClustersInput
	}{arg1})
	stub := fake.DescribeGlobalClustersStub
	fakeReturns := fake.describeGlobalClustersReturns
	fake.recordInvocation("DescribeGlobalClusters", []interface{}{arg1})
	fake.describeGlobalClustersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeGlobalClustersCallCount() int {
	fake.describeGlobalClustersMutex.RLock()
	defer fake.describeGlobalClustersMutex.RUnlock()
	return len(fake.describeGlobalClustersArgsForCall)
}

func (fake *FakeRDSAPI) DescribeGlobalClustersCalls(stub func(*rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error)) {
	fake.describeGlobalClustersMutex.Lock()
	defer fake.describeGlobalClustersMutex.Unlock()
	fake.DescribeGlobalClustersStub = stub
}

func (fake *FakeRDSAPI) DescribeGlobalClustersArgsForCall(i int) *rds.DescribeGlobalClustersInput {
	fake.describeGlobalClustersMutex.RLock()
	defer fake.describeGlobalClustersMutex.RUnlock()
	argsForCall := fake.describeGlobalClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeGlobalClustersReturns(result1 *rds.DescribeGlobalClustersOutput, result2 error) {
	fake.describeGlobalClustersMutex.Lock()
	defer fake.describeGlobalClustersMutex.Unlock()
	fake.DescribeGlobalClustersStub = nil
	fake.describeGlobalClustersReturns = struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersReturnsOnCall(i int, result1 *rds.DescribeGlobalClustersOutput, result2 error) {
	fake.describeGlobalClustersMutex.Lock()
	defer fake.describeGlobalClustersMutex.Unlock()
	fake.DescribeGlobalClustersStub = nil
	if fake.describeGlobalClustersReturnsOnCall == nil {
		fake.describeGlobalClustersReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeGlobalClustersOutput
			result2 error
		})
	}
	fake.describeGlobalClustersReturnsOnCall[i] = struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPages(arg1 *rds.DescribeGlobalClustersInput, arg2 func(*rds.DescribeGlobalClustersOutput, bool) bool) error {
	fake.describeGlobalClustersPagesMutex.Lock()
	ret, specificReturn := fake.describeGlobalClustersPagesReturnsOnCall[len(fake.describeGlobalClustersPagesArgsForCall)]
	fake.describeGlobalClustersPagesArgsForCall = append(fake.describeGlobalClustersPagesArgsForCall, struct {
		arg1 *rds.DescribeGlobalClustersInput
		arg2 func(*rds.DescribeGlobalClustersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeGlobalClustersPagesStub
	fakeReturns := fake.describeGlobalClustersPagesReturns
	fake.recordInvocation("DescribeGlobalClustersPages", []interface{}{arg1, arg2})
	fake.describeGlobalClustersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesCallCount() int {
	fake.describeGlobalClustersPagesMutex.RLock()
	defer fake.describeGlobalClustersPagesMutex.RUnlock()
	return len(fake.describeGlobalClustersPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesCalls(stub func(*rds.DescribeGlobalClustersInput, func(*rds.DescribeGlobalClustersOutput, bool) bool) error) {
	fake.describeGlobalClustersPagesMutex.Lock()
	defer fake.describeGlobalClustersPagesMutex.Unlock()
	fake.DescribeGlobalClustersPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesArgsForCall(i int) (*rds.DescribeGlobalClustersInput, func(*rds.DescribeGlobalClustersOutput, bool) bool) {
	fake.describeGlobalClustersPagesMutex.RLock()
	defer fake.describeGlobalClustersPagesMutex.RUnlock()
	argsForCall := fake.describeGlobalClustersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesReturns(result1 error) {
	fake.describeGlobalClustersPagesMutex.Lock()
	defer fake.describeGlobalClustersPagesMutex.Unlock()
	fake.DescribeGlobalClustersPagesStub = nil
	fake.describeGlobalClustersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesReturnsOnCall(i int, result1 error) {
	fake.describeGlobalClustersPagesMutex.Lock()
	defer fake.describeGlobalClustersPagesMutex.Unlock()
	fake.DescribeGlobalClustersPagesStub = nil
	if fake.describeGlobalClustersPagesReturnsOnCall == nil {
		fake.describeGlobalClustersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeGlobalClustersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesWithContext(arg1 context.Context, arg2 *rds.DescribeGlobalClustersInput, arg3 func(*rds.DescribeGlobalClustersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeGlobalClustersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeGlobalClustersPagesWithContextReturnsOnCall[len(fake.describeGlobalClustersPagesWithContextArgsForCall)]
	fake.describeGlobalClustersPagesWithContextArgsForCall = append(fake.describeGlobalClustersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeGlobalClustersInput
		arg3 func(*rds.DescribeGlobalClustersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeGlobalClustersPagesWithContextStub
	fakeReturns := fake.describeGlobalClustersPagesWithContextReturns
	fake.recordInvocation("DescribeGlobalClustersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeGlobalClustersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesWithContextCallCount() int {
	fake.describeGlobalClustersPagesWithContextMutex.RLock()
	defer fake.describeGlobalClustersPagesWithContextMutex.RUnlock()
	return len(fake.describeGlobalClustersPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesWithContextCalls(stub func(context.Context, *rds.DescribeGlobalClustersInput, func(*rds.DescribeGlobalClustersOutput, bool) bool, ...request.Option) error) {
	fake.describeGlobalClustersPagesWithContextMutex.Lock()
	defer fake.describeGlobalClustersPagesWithContextMutex.Unlock()
	fake.DescribeGlobalClustersPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeGlobalClustersInput, func(*rds.DescribeGlobalClustersOutput, bool) bool, []request.Option) {
	fake.describeGlobalClustersPagesWithContextMutex.RLock()
	defer fake.describeGlobalClustersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeGlobalClustersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesWithContextReturns(result1 error) {
	fake.describeGlobalClustersPagesWithContextMutex.Lock()
	defer fake.describeGlobalClustersPagesWithContextMutex.Unlock()
	fake.DescribeGlobalClustersPagesWithContextStub = nil
	fake.describeGlobalClustersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeGlobalClustersPagesWithContextMutex.Lock()
	defer fake.describeGlobalClustersPagesWithContextMutex.Unlock()
	fake.DescribeGlobalClustersPagesWithContextStub = nil
	if fake.describeGlobalClustersPagesWithContextReturnsOnCall == nil {
		fake.describeGlobalClustersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeGlobalClustersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersRequest(arg1 *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput) {
	fake.describeGlobalClustersRequestMutex.Lock()
	ret, specificReturn := fake.describeGlobalClustersRequestReturnsOnCall[len(fake.describeGlobalClustersRequestArgsForCall)]
	fake.describeGlobalClustersRequestArgsForCall = append(fake.describeGlobalClustersRequestArgsForCall, struct {
		arg1 *rds.DescribeGlobalClustersInput
	}{arg1})
	stub := fake.DescribeGlobalClustersRequestStub
	fakeReturns := fake.describeGlobalClustersRequestReturns
	fake.recordInvocation("DescribeGlobalClustersRequest", []interface{}{arg1})
	fake.describeGlobalClustersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeGlobalClustersRequestCallCount() int {
	fake.describeGlobalClustersRequestMutex.RLock()
	defer fake.describeGlobalClustersRequestMutex.RUnlock()
	return len(fake.describeGlobalClustersRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeGlobalClustersRequestCalls(stub func(*rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput)) {
	fake.describeGlobalClustersRequestMutex.Lock()
	defer fake.describeGlobalClustersRequestMutex.Unlock()
	fake.DescribeGlobalClustersRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeGlobalClustersRequestArgsForCall(i int) *rds.DescribeGlobalClustersInput {
	fake.describeGlobalClustersRequestMutex.RLock()
	defer fake.describeGlobalClustersRequestMutex.RUnlock()
	argsForCall := fake.describeGlobalClustersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeGlobalClustersRequestReturns(result1 *request.Request, result2 *rds.DescribeGlobalClustersOutput) {
	fake.describeGlobalClustersRequestMutex.Lock()
	defer fake.describeGlobalClustersRequestMutex.Unlock()
	fake.DescribeGlobalClustersRequestStub = nil
	fake.describeGlobalClustersRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeGlobalClustersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeGlobalClustersOutput) {
	fake.describeGlobalClustersRequestMutex.Lock()
	defer fake.describeGlobalClustersRequestMutex.Unlock()
	fake.DescribeGlobalClustersRequestStub = nil
	if fake.describeGlobalClustersRequestReturnsOnCall == nil {
		fake.describeGlobalClustersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeGlobalClustersOutput
		})
	}
	fake.describeGlobalClustersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeGlobalClustersOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersWithContext(arg1 context.Context, arg2 *rds.DescribeGlobalClustersInput, arg3 ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {
	fake.describeGlobalClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeGlobalClustersWithContextReturnsOnCall[len(fake.describeGlobalClustersWithContextArgsForCall)]
	fake.describeGlobalClustersWithContextArgsForCall = append(fake.describeGlobalClustersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeGlobalClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeGlobalClustersWithContextStub
	fakeReturns := fake.describeGlobalClustersWithContextReturns
	fake.recordInvocation("DescribeGlobalClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeGlobalClustersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeGlobalClustersWithContextCallCount() int {
	fake.describeGlobalClustersWithContextMutex.RLock()
	defer fake.describeGlobalClustersWithContextMutex.RUnlock()
	return len(fake.describeGlobalClustersWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeGlobalClustersWithContextCalls(stub func(context.Context, *rds.DescribeGlobalClustersInput, ...request.Option) (*rds.DescribeGlobalClustersOutput, error)) {
	fake.describeGlobalClustersWithContextMutex.Lock()
	defer fake.describeGlobalClustersWithContextMutex.Unlock()
	fake.DescribeGlobalClustersWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeGlobalClustersWithContextArgsForCall(i int) (context.Context, *rds.DescribeGlobalClustersInput, []request.Option) {
	fake.describeGlobalClustersWithContextMutex.RLock()
	defer fake.describeGlobalClustersWithContextMutex.RUnlock()
	argsForCall := fake.describeGlobalClustersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeGlobalClustersWithContextReturns(result1 *rds.DescribeGlobalClustersOutput, result2 error) {
	fake.describeGlobalClustersWithContextMutex.Lock()
	defer fake.describeGlobalClustersWithContextMutex.Unlock()
	fake.DescribeGlobalClustersWithContextStub = nil
	fake.describeGlobalClustersWithContextReturns = struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeGlobalClustersWithContextReturnsOnCall(i int, result1 *rds.DescribeGlobalClustersOutput, result2 error) {
	fake.describeGlobalClustersWithContextMutex.Lock()
	defer fake.describeGlobalClustersWithContextMutex.Unlock()
	fake.DescribeGlobalClustersWithContextStub = nil
	if fake.describeGlobalClustersWithContextReturnsOnCall == nil {
		fake.describeGlobalClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeGlobalClustersOutput
			result2 error
		})
	}
	fake.describeGlobalClustersWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeGlobalClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeInstallationMedia(arg1 *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error) {
	fake.describeInstallationMediaMutex.Lock()
	ret, specificReturn := fake.describeInstallationMediaReturnsOnCall[len(fake.describeInstallationMediaArgsForCall)]
	fake.describeInstallationMediaArgsForCall = append(fake.describeInstallationMediaArgsForCall, struct {
		arg1 *rds.DescribeInstallationMediaInput
	}{arg1})
	stub := fake.DescribeInstallationMediaStub
	fakeReturns := fake.describeInstallationMediaReturns
	fake.recordInvocation("DescribeInstallationMedia", []interface{}{arg1})
	fake.describeInstallationMediaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeInstallationMediaCallCount() int {
	fake.describeInstallationMediaMutex.RLock()
	defer fake.describeInstallationMediaMutex.RUnlock()
	return len(fake.describeInstallationMediaArgsForCall)
}

func (fake *FakeRDSAPI) DescribeInstallationMediaCalls(stub func(*rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error)) {
	fake.describeInstallationMediaMutex.Lock()
	defer fake.describeInstallationMediaMutex.Unlock()
	fake.DescribeInstallationMediaStub = stub
}

func (fake *FakeRDSAPI) DescribeInstallationMediaArgsForCall(i int) *rds.DescribeInstallationMediaInput {
	fake.describeInstallationMediaMutex.RLock()
	defer fake.describeInstallationMediaMutex.RUnlock()
	argsForCall := fake.describeInstallationMediaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeInstallationMediaReturns(result1 *rds.DescribeInstallationMediaOutput, result2 error) {
	fake.describeInstallationMediaMutex.Lock()
	defer fake.describeInstallationMediaMutex.Unlock()
	fake.DescribeInstallationMediaStub = nil
	fake.describeInstallationMediaReturns = struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaReturnsOnCall(i int, result1 *rds.DescribeInstallationMediaOutput, result2 error) {
	fake.describeInstallationMediaMutex.Lock()
	defer fake.describeInstallationMediaMutex.Unlock()
	fake.DescribeInstallationMediaStub = nil
	if fake.describeInstallationMediaReturnsOnCall == nil {
		fake.describeInstallationMediaReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeInstallationMediaOutput
			result2 error
		})
	}
	fake.describeInstallationMediaReturnsOnCall[i] = struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPages(arg1 *rds.DescribeInstallationMediaInput, arg2 func(*rds.DescribeInstallationMediaOutput, bool) bool) error {
	fake.describeInstallationMediaPagesMutex.Lock()
	ret, specificReturn := fake.describeInstallationMediaPagesReturnsOnCall[len(fake.describeInstallationMediaPagesArgsForCall)]
	fake.describeInstallationMediaPagesArgsForCall = append(fake.describeInstallationMediaPagesArgsForCall, struct {
		arg1 *rds.DescribeInstallationMediaInput
		arg2 func(*rds.DescribeInstallationMediaOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInstallationMediaPagesStub
	fakeReturns := fake.describeInstallationMediaPagesReturns
	fake.recordInvocation("DescribeInstallationMediaPages", []interface{}{arg1, arg2})
	fake.describeInstallationMediaPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesCallCount() int {
	fake.describeInstallationMediaPagesMutex.RLock()
	defer fake.describeInstallationMediaPagesMutex.RUnlock()
	return len(fake.describeInstallationMediaPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesCalls(stub func(*rds.DescribeInstallationMediaInput, func(*rds.DescribeInstallationMediaOutput, bool) bool) error) {
	fake.describeInstallationMediaPagesMutex.Lock()
	defer fake.describeInstallationMediaPagesMutex.Unlock()
	fake.DescribeInstallationMediaPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesArgsForCall(i int) (*rds.DescribeInstallationMediaInput, func(*rds.DescribeInstallationMediaOutput, bool) bool) {
	fake.describeInstallationMediaPagesMutex.RLock()
	defer fake.describeInstallationMediaPagesMutex.RUnlock()
	argsForCall := fake.describeInstallationMediaPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesReturns(result1 error) {
	fake.describeInstallationMediaPagesMutex.Lock()
	defer fake.describeInstallationMediaPagesMutex.Unlock()
	fake.DescribeInstallationMediaPagesStub = nil
	fake.describeInstallationMediaPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstallationMediaPagesMutex.Lock()
	defer fake.describeInstallationMediaPagesMutex.Unlock()
	fake.DescribeInstallationMediaPagesStub = nil
	if fake.describeInstallationMediaPagesReturnsOnCall == nil {
		fake.describeInstallationMediaPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstallationMediaPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesWithContext(arg1 context.Context, arg2 *rds.DescribeInstallationMediaInput, arg3 func(*rds.DescribeInstallationMediaOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstallationMediaPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstallationMediaPagesWithContextReturnsOnCall[len(fake.describeInstallationMediaPagesWithContextArgsForCall)]
	fake.describeInstallationMediaPagesWithContextArgsForCall = append(fake.describeInstallationMediaPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeInstallationMediaInput
		arg3 func(*rds.DescribeInstallationMediaOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInstallationMediaPagesWithContextStub
	fakeReturns := fake.describeInstallationMediaPagesWithContextReturns
	fake.recordInvocation("DescribeInstallationMediaPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstallationMediaPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesWithContextCallCount() int {
	fake.describeInstallationMediaPagesWithContextMutex.RLock()
	defer fake.describeInstallationMediaPagesWithContextMutex.RUnlock()
	return len(fake.describeInstallationMediaPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesWithContextCalls(stub func(context.Context, *rds.DescribeInstallationMediaInput, func(*rds.DescribeInstallationMediaOutput, bool) bool, ...request.Option) error) {
	fake.describeInstallationMediaPagesWithContextMutex.Lock()
	defer fake.describeInstallationMediaPagesWithContextMutex.Unlock()
	fake.DescribeInstallationMediaPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeInstallationMediaInput, func(*rds.DescribeInstallationMediaOutput, bool) bool, []request.Option) {
	fake.describeInstallationMediaPagesWithContextMutex.RLock()
	defer fake.describeInstallationMediaPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstallationMediaPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesWithContextReturns(result1 error) {
	fake.describeInstallationMediaPagesWithContextMutex.Lock()
	defer fake.describeInstallationMediaPagesWithContextMutex.Unlock()
	fake.DescribeInstallationMediaPagesWithContextStub = nil
	fake.describeInstallationMediaPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstallationMediaPagesWithContextMutex.Lock()
	defer fake.describeInstallationMediaPagesWithContextMutex.Unlock()
	fake.DescribeInstallationMediaPagesWithContextStub = nil
	if fake.describeInstallationMediaPagesWithContextReturnsOnCall == nil {
		fake.describeInstallationMediaPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstallationMediaPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaRequest(arg1 *rds.DescribeInstallationMediaInput) (*request.Request, *rds.DescribeInstallationMediaOutput) {
	fake.describeInstallationMediaRequestMutex.Lock()
	ret, specificReturn := fake.describeInstallationMediaRequestReturnsOnCall[len(fake.describeInstallationMediaRequestArgsForCall)]
	fake.describeInstallationMediaRequestArgsForCall = append(fake.describeInstallationMediaRequestArgsForCall, struct {
		arg1 *rds.DescribeInstallationMediaInput
	}{arg1})
	stub := fake.DescribeInstallationMediaRequestStub
	fakeReturns := fake.describeInstallationMediaRequestReturns
	fake.recordInvocation("DescribeInstallationMediaRequest", []interface{}{arg1})
	fake.describeInstallationMediaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeInstallationMediaRequestCallCount() int {
	fake.describeInstallationMediaRequestMutex.RLock()
	defer fake.describeInstallationMediaRequestMutex.RUnlock()
	return len(fake.describeInstallationMediaRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeInstallationMediaRequestCalls(stub func(*rds.DescribeInstallationMediaInput) (*request.Request, *rds.DescribeInstallationMediaOutput)) {
	fake.describeInstallationMediaRequestMutex.Lock()
	defer fake.describeInstallationMediaRequestMutex.Unlock()
	fake.DescribeInstallationMediaRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeInstallationMediaRequestArgsForCall(i int) *rds.DescribeInstallationMediaInput {
	fake.describeInstallationMediaRequestMutex.RLock()
	defer fake.describeInstallationMediaRequestMutex.RUnlock()
	argsForCall := fake.describeInstallationMediaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeInstallationMediaRequestReturns(result1 *request.Request, result2 *rds.DescribeInstallationMediaOutput) {
	fake.describeInstallationMediaRequestMutex.Lock()
	defer fake.describeInstallationMediaRequestMutex.Unlock()
	fake.DescribeInstallationMediaRequestStub = nil
	fake.describeInstallationMediaRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeInstallationMediaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeInstallationMediaOutput) {
	fake.describeInstallationMediaRequestMutex.Lock()
	defer fake.describeInstallationMediaRequestMutex.Unlock()
	fake.DescribeInstallationMediaRequestStub = nil
	if fake.describeInstallationMediaRequestReturnsOnCall == nil {
		fake.describeInstallationMediaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeInstallationMediaOutput
		})
	}
	fake.describeInstallationMediaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeInstallationMediaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaWithContext(arg1 context.Context, arg2 *rds.DescribeInstallationMediaInput, arg3 ...request.Option) (*rds.DescribeInstallationMediaOutput, error) {
	fake.describeInstallationMediaWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstallationMediaWithContextReturnsOnCall[len(fake.describeInstallationMediaWithContextArgsForCall)]
	fake.describeInstallationMediaWithContextArgsForCall = append(fake.describeInstallationMediaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeInstallationMediaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInstallationMediaWithContextStub
	fakeReturns := fake.describeInstallationMediaWithContextReturns
	fake.recordInvocation("DescribeInstallationMediaWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstallationMediaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeInstallationMediaWithContextCallCount() int {
	fake.describeInstallationMediaWithContextMutex.RLock()
	defer fake.describeInstallationMediaWithContextMutex.RUnlock()
	return len(fake.describeInstallationMediaWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeInstallationMediaWithContextCalls(stub func(context.Context, *rds.DescribeInstallationMediaInput, ...request.Option) (*rds.DescribeInstallationMediaOutput, error)) {
	fake.describeInstallationMediaWithContextMutex.Lock()
	defer fake.describeInstallationMediaWithContextMutex.Unlock()
	fake.DescribeInstallationMediaWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeInstallationMediaWithContextArgsForCall(i int) (context.Context, *rds.DescribeInstallationMediaInput, []request.Option) {
	fake.describeInstallationMediaWithContextMutex.RLock()
	defer fake.describeInstallationMediaWithContextMutex.RUnlock()
	argsForCall := fake.describeInstallationMediaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeInstallationMediaWithContextReturns(result1 *rds.DescribeInstallationMediaOutput, result2 error) {
	fake.describeInstallationMediaWithContextMutex.Lock()
	defer fake.describeInstallationMediaWithContextMutex.Unlock()
	fake.DescribeInstallationMediaWithContextStub = nil
	fake.describeInstallationMediaWithContextReturns = struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeInstallationMediaWithContextReturnsOnCall(i int, result1 *rds.DescribeInstallationMediaOutput, result2 error) {
	fake.describeInstallationMediaWithContextMutex.Lock()
	defer fake.describeInstallationMediaWithContextMutex.Unlock()
	fake.DescribeInstallationMediaWithContextStub = nil
	if fake.describeInstallationMediaWithContextReturnsOnCall == nil {
		fake.describeInstallationMediaWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeInstallationMediaOutput
			result2 error
		})
	}
	fake.describeInstallationMediaWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptions(arg1 *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
	fake.describeOptionGroupOptionsMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupOptionsReturnsOnCall[len(fake.describeOptionGroupOptionsArgsForCall)]
	fake.describeOptionGroupOptionsArgsForCall = append(fake.describeOptionGroupOptionsArgsForCall, struct {
		arg1 *rds.DescribeOptionGroupOptionsInput
	}{arg1})
	stub := fake.DescribeOptionGroupOptionsStub
	fakeReturns := fake.describeOptionGroupOptionsReturns
	fake.recordInvocation("DescribeOptionGroupOptions", []interface{}{arg1})
	fake.describeOptionGroupOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsCallCount() int {
	fake.describeOptionGroupOptionsMutex.RLock()
	defer fake.describeOptionGroupOptionsMutex.RUnlock()
	return len(fake.describeOptionGroupOptionsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsCalls(stub func(*rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error)) {
	fake.describeOptionGroupOptionsMutex.Lock()
	defer fake.describeOptionGroupOptionsMutex.Unlock()
	fake.DescribeOptionGroupOptionsStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsArgsForCall(i int) *rds.DescribeOptionGroupOptionsInput {
	fake.describeOptionGroupOptionsMutex.RLock()
	defer fake.describeOptionGroupOptionsMutex.RUnlock()
	argsForCall := fake.describeOptionGroupOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsReturns(result1 *rds.DescribeOptionGroupOptionsOutput, result2 error) {
	fake.describeOptionGroupOptionsMutex.Lock()
	defer fake.describeOptionGroupOptionsMutex.Unlock()
	fake.DescribeOptionGroupOptionsStub = nil
	fake.describeOptionGroupOptionsReturns = struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsReturnsOnCall(i int, result1 *rds.DescribeOptionGroupOptionsOutput, result2 error) {
	fake.describeOptionGroupOptionsMutex.Lock()
	defer fake.describeOptionGroupOptionsMutex.Unlock()
	fake.DescribeOptionGroupOptionsStub = nil
	if fake.describeOptionGroupOptionsReturnsOnCall == nil {
		fake.describeOptionGroupOptionsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeOptionGroupOptionsOutput
			result2 error
		})
	}
	fake.describeOptionGroupOptionsReturnsOnCall[i] = struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPages(arg1 *rds.DescribeOptionGroupOptionsInput, arg2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error {
	fake.describeOptionGroupOptionsPagesMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupOptionsPagesReturnsOnCall[len(fake.describeOptionGroupOptionsPagesArgsForCall)]
	fake.describeOptionGroupOptionsPagesArgsForCall = append(fake.describeOptionGroupOptionsPagesArgsForCall, struct {
		arg1 *rds.DescribeOptionGroupOptionsInput
		arg2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeOptionGroupOptionsPagesStub
	fakeReturns := fake.describeOptionGroupOptionsPagesReturns
	fake.recordInvocation("DescribeOptionGroupOptionsPages", []interface{}{arg1, arg2})
	fake.describeOptionGroupOptionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesCallCount() int {
	fake.describeOptionGroupOptionsPagesMutex.RLock()
	defer fake.describeOptionGroupOptionsPagesMutex.RUnlock()
	return len(fake.describeOptionGroupOptionsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesCalls(stub func(*rds.DescribeOptionGroupOptionsInput, func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error) {
	fake.describeOptionGroupOptionsPagesMutex.Lock()
	defer fake.describeOptionGroupOptionsPagesMutex.Unlock()
	fake.DescribeOptionGroupOptionsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesArgsForCall(i int) (*rds.DescribeOptionGroupOptionsInput, func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) {
	fake.describeOptionGroupOptionsPagesMutex.RLock()
	defer fake.describeOptionGroupOptionsPagesMutex.RUnlock()
	argsForCall := fake.describeOptionGroupOptionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesReturns(result1 error) {
	fake.describeOptionGroupOptionsPagesMutex.Lock()
	defer fake.describeOptionGroupOptionsPagesMutex.Unlock()
	fake.DescribeOptionGroupOptionsPagesStub = nil
	fake.describeOptionGroupOptionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeOptionGroupOptionsPagesMutex.Lock()
	defer fake.describeOptionGroupOptionsPagesMutex.Unlock()
	fake.DescribeOptionGroupOptionsPagesStub = nil
	if fake.describeOptionGroupOptionsPagesReturnsOnCall == nil {
		fake.describeOptionGroupOptionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOptionGroupOptionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeOptionGroupOptionsInput, arg3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeOptionGroupOptionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupOptionsPagesWithContextReturnsOnCall[len(fake.describeOptionGroupOptionsPagesWithContextArgsForCall)]
	fake.describeOptionGroupOptionsPagesWithContextArgsForCall = append(fake.describeOptionGroupOptionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupOptionsInput
		arg3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeOptionGroupOptionsPagesWithContextStub
	fakeReturns := fake.describeOptionGroupOptionsPagesWithContextReturns
	fake.recordInvocation("DescribeOptionGroupOptionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeOptionGroupOptionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesWithContextCallCount() int {
	fake.describeOptionGroupOptionsPagesWithContextMutex.RLock()
	defer fake.describeOptionGroupOptionsPagesWithContextMutex.RUnlock()
	return len(fake.describeOptionGroupOptionsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesWithContextCalls(stub func(context.Context, *rds.DescribeOptionGroupOptionsInput, func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, ...request.Option) error) {
	fake.describeOptionGroupOptionsPagesWithContextMutex.Lock()
	defer fake.describeOptionGroupOptionsPagesWithContextMutex.Unlock()
	fake.DescribeOptionGroupOptionsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeOptionGroupOptionsInput, func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, []request.Option) {
	fake.describeOptionGroupOptionsPagesWithContextMutex.RLock()
	defer fake.describeOptionGroupOptionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeOptionGroupOptionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesWithContextReturns(result1 error) {
	fake.describeOptionGroupOptionsPagesWithContextMutex.Lock()
	defer fake.describeOptionGroupOptionsPagesWithContextMutex.Unlock()
	fake.DescribeOptionGroupOptionsPagesWithContextStub = nil
	fake.describeOptionGroupOptionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeOptionGroupOptionsPagesWithContextMutex.Lock()
	defer fake.describeOptionGroupOptionsPagesWithContextMutex.Unlock()
	fake.DescribeOptionGroupOptionsPagesWithContextStub = nil
	if fake.describeOptionGroupOptionsPagesWithContextReturnsOnCall == nil {
		fake.describeOptionGroupOptionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOptionGroupOptionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsRequest(arg1 *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput) {
	fake.describeOptionGroupOptionsRequestMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupOptionsRequestReturnsOnCall[len(fake.describeOptionGroupOptionsRequestArgsForCall)]
	fake.describeOptionGroupOptionsRequestArgsForCall = append(fake.describeOptionGroupOptionsRequestArgsForCall, struct {
		arg1 *rds.DescribeOptionGroupOptionsInput
	}{arg1})
	stub := fake.DescribeOptionGroupOptionsRequestStub
	fakeReturns := fake.describeOptionGroupOptionsRequestReturns
	fake.recordInvocation("DescribeOptionGroupOptionsRequest", []interface{}{arg1})
	fake.describeOptionGroupOptionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsRequestCallCount() int {
	fake.describeOptionGroupOptionsRequestMutex.RLock()
	defer fake.describeOptionGroupOptionsRequestMutex.RUnlock()
	return len(fake.describeOptionGroupOptionsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsRequestCalls(stub func(*rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput)) {
	fake.describeOptionGroupOptionsRequestMutex.Lock()
	defer fake.describeOptionGroupOptionsRequestMutex.Unlock()
	fake.DescribeOptionGroupOptionsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsRequestArgsForCall(i int) *rds.DescribeOptionGroupOptionsInput {
	fake.describeOptionGroupOptionsRequestMutex.RLock()
	defer fake.describeOptionGroupOptionsRequestMutex.RUnlock()
	argsForCall := fake.describeOptionGroupOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsRequestReturns(result1 *request.Request, result2 *rds.DescribeOptionGroupOptionsOutput) {
	fake.describeOptionGroupOptionsRequestMutex.Lock()
	defer fake.describeOptionGroupOptionsRequestMutex.Unlock()
	fake.DescribeOptionGroupOptionsRequestStub = nil
	fake.describeOptionGroupOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupOptionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeOptionGroupOptionsOutput) {
	fake.describeOptionGroupOptionsRequestMutex.Lock()
	defer fake.describeOptionGroupOptionsRequestMutex.Unlock()
	fake.DescribeOptionGroupOptionsRequestStub = nil
	if fake.describeOptionGroupOptionsRequestReturnsOnCall == nil {
		fake.describeOptionGroupOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeOptionGroupOptionsOutput
		})
	}
	fake.describeOptionGroupOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupOptionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsWithContext(arg1 context.Context, arg2 *rds.DescribeOptionGroupOptionsInput, arg3 ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {
	fake.describeOptionGroupOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupOptionsWithContextReturnsOnCall[len(fake.describeOptionGroupOptionsWithContextArgsForCall)]
	fake.describeOptionGroupOptionsWithContextArgsForCall = append(fake.describeOptionGroupOptionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeOptionGroupOptionsWithContextStub
	fakeReturns := fake.describeOptionGroupOptionsWithContextReturns
	fake.recordInvocation("DescribeOptionGroupOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeOptionGroupOptionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsWithContextCallCount() int {
	fake.describeOptionGroupOptionsWithContextMutex.RLock()
	defer fake.describeOptionGroupOptionsWithContextMutex.RUnlock()
	return len(fake.describeOptionGroupOptionsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsWithContextCalls(stub func(context.Context, *rds.DescribeOptionGroupOptionsInput, ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error)) {
	fake.describeOptionGroupOptionsWithContextMutex.Lock()
	defer fake.describeOptionGroupOptionsWithContextMutex.Unlock()
	fake.DescribeOptionGroupOptionsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsWithContextArgsForCall(i int) (context.Context, *rds.DescribeOptionGroupOptionsInput, []request.Option) {
	fake.describeOptionGroupOptionsWithContextMutex.RLock()
	defer fake.describeOptionGroupOptionsWithContextMutex.RUnlock()
	argsForCall := fake.describeOptionGroupOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsWithContextReturns(result1 *rds.DescribeOptionGroupOptionsOutput, result2 error) {
	fake.describeOptionGroupOptionsWithContextMutex.Lock()
	defer fake.describeOptionGroupOptionsWithContextMutex.Unlock()
	fake.DescribeOptionGroupOptionsWithContextStub = nil
	fake.describeOptionGroupOptionsWithContextReturns = struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupOptionsWithContextReturnsOnCall(i int, result1 *rds.DescribeOptionGroupOptionsOutput, result2 error) {
	fake.describeOptionGroupOptionsWithContextMutex.Lock()
	defer fake.describeOptionGroupOptionsWithContextMutex.Unlock()
	fake.DescribeOptionGroupOptionsWithContextStub = nil
	if fake.describeOptionGroupOptionsWithContextReturnsOnCall == nil {
		fake.describeOptionGroupOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeOptionGroupOptionsOutput
			result2 error
		})
	}
	fake.describeOptionGroupOptionsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeOptionGroupOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroups(arg1 *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
	fake.describeOptionGroupsMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupsReturnsOnCall[len(fake.describeOptionGroupsArgsForCall)]
	fake.describeOptionGroupsArgsForCall = append(fake.describeOptionGroupsArgsForCall, struct {
		arg1 *rds.DescribeOptionGroupsInput
	}{arg1})
	stub := fake.DescribeOptionGroupsStub
	fakeReturns := fake.describeOptionGroupsReturns
	fake.recordInvocation("DescribeOptionGroups", []interface{}{arg1})
	fake.describeOptionGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOptionGroupsCallCount() int {
	fake.describeOptionGroupsMutex.RLock()
	defer fake.describeOptionGroupsMutex.RUnlock()
	return len(fake.describeOptionGroupsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupsCalls(stub func(*rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error)) {
	fake.describeOptionGroupsMutex.Lock()
	defer fake.describeOptionGroupsMutex.Unlock()
	fake.DescribeOptionGroupsStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupsArgsForCall(i int) *rds.DescribeOptionGroupsInput {
	fake.describeOptionGroupsMutex.RLock()
	defer fake.describeOptionGroupsMutex.RUnlock()
	argsForCall := fake.describeOptionGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeOptionGroupsReturns(result1 *rds.DescribeOptionGroupsOutput, result2 error) {
	fake.describeOptionGroupsMutex.Lock()
	defer fake.describeOptionGroupsMutex.Unlock()
	fake.DescribeOptionGroupsStub = nil
	fake.describeOptionGroupsReturns = struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsReturnsOnCall(i int, result1 *rds.DescribeOptionGroupsOutput, result2 error) {
	fake.describeOptionGroupsMutex.Lock()
	defer fake.describeOptionGroupsMutex.Unlock()
	fake.DescribeOptionGroupsStub = nil
	if fake.describeOptionGroupsReturnsOnCall == nil {
		fake.describeOptionGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeOptionGroupsOutput
			result2 error
		})
	}
	fake.describeOptionGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPages(arg1 *rds.DescribeOptionGroupsInput, arg2 func(*rds.DescribeOptionGroupsOutput, bool) bool) error {
	fake.describeOptionGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupsPagesReturnsOnCall[len(fake.describeOptionGroupsPagesArgsForCall)]
	fake.describeOptionGroupsPagesArgsForCall = append(fake.describeOptionGroupsPagesArgsForCall, struct {
		arg1 *rds.DescribeOptionGroupsInput
		arg2 func(*rds.DescribeOptionGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeOptionGroupsPagesStub
	fakeReturns := fake.describeOptionGroupsPagesReturns
	fake.recordInvocation("DescribeOptionGroupsPages", []interface{}{arg1, arg2})
	fake.describeOptionGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesCallCount() int {
	fake.describeOptionGroupsPagesMutex.RLock()
	defer fake.describeOptionGroupsPagesMutex.RUnlock()
	return len(fake.describeOptionGroupsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesCalls(stub func(*rds.DescribeOptionGroupsInput, func(*rds.DescribeOptionGroupsOutput, bool) bool) error) {
	fake.describeOptionGroupsPagesMutex.Lock()
	defer fake.describeOptionGroupsPagesMutex.Unlock()
	fake.DescribeOptionGroupsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesArgsForCall(i int) (*rds.DescribeOptionGroupsInput, func(*rds.DescribeOptionGroupsOutput, bool) bool) {
	fake.describeOptionGroupsPagesMutex.RLock()
	defer fake.describeOptionGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeOptionGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesReturns(result1 error) {
	fake.describeOptionGroupsPagesMutex.Lock()
	defer fake.describeOptionGroupsPagesMutex.Unlock()
	fake.DescribeOptionGroupsPagesStub = nil
	fake.describeOptionGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeOptionGroupsPagesMutex.Lock()
	defer fake.describeOptionGroupsPagesMutex.Unlock()
	fake.DescribeOptionGroupsPagesStub = nil
	if fake.describeOptionGroupsPagesReturnsOnCall == nil {
		fake.describeOptionGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOptionGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeOptionGroupsInput, arg3 func(*rds.DescribeOptionGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeOptionGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupsPagesWithContextReturnsOnCall[len(fake.describeOptionGroupsPagesWithContextArgsForCall)]
	fake.describeOptionGroupsPagesWithContextArgsForCall = append(fake.describeOptionGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupsInput
		arg3 func(*rds.DescribeOptionGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeOptionGroupsPagesWithContextStub
	fakeReturns := fake.describeOptionGroupsPagesWithContextReturns
	fake.recordInvocation("DescribeOptionGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeOptionGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesWithContextCallCount() int {
	fake.describeOptionGroupsPagesWithContextMutex.RLock()
	defer fake.describeOptionGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeOptionGroupsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesWithContextCalls(stub func(context.Context, *rds.DescribeOptionGroupsInput, func(*rds.DescribeOptionGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeOptionGroupsPagesWithContextMutex.Lock()
	defer fake.describeOptionGroupsPagesWithContextMutex.Unlock()
	fake.DescribeOptionGroupsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeOptionGroupsInput, func(*rds.DescribeOptionGroupsOutput, bool) bool, []request.Option) {
	fake.describeOptionGroupsPagesWithContextMutex.RLock()
	defer fake.describeOptionGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeOptionGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesWithContextReturns(result1 error) {
	fake.describeOptionGroupsPagesWithContextMutex.Lock()
	defer fake.describeOptionGroupsPagesWithContextMutex.Unlock()
	fake.DescribeOptionGroupsPagesWithContextStub = nil
	fake.describeOptionGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeOptionGroupsPagesWithContextMutex.Lock()
	defer fake.describeOptionGroupsPagesWithContextMutex.Unlock()
	fake.DescribeOptionGroupsPagesWithContextStub = nil
	if fake.describeOptionGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeOptionGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOptionGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsRequest(arg1 *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput) {
	fake.describeOptionGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupsRequestReturnsOnCall[len(fake.describeOptionGroupsRequestArgsForCall)]
	fake.describeOptionGroupsRequestArgsForCall = append(fake.describeOptionGroupsRequestArgsForCall, struct {
		arg1 *rds.DescribeOptionGroupsInput
	}{arg1})
	stub := fake.DescribeOptionGroupsRequestStub
	fakeReturns := fake.describeOptionGroupsRequestReturns
	fake.recordInvocation("DescribeOptionGroupsRequest", []interface{}{arg1})
	fake.describeOptionGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOptionGroupsRequestCallCount() int {
	fake.describeOptionGroupsRequestMutex.RLock()
	defer fake.describeOptionGroupsRequestMutex.RUnlock()
	return len(fake.describeOptionGroupsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupsRequestCalls(stub func(*rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput)) {
	fake.describeOptionGroupsRequestMutex.Lock()
	defer fake.describeOptionGroupsRequestMutex.Unlock()
	fake.DescribeOptionGroupsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupsRequestArgsForCall(i int) *rds.DescribeOptionGroupsInput {
	fake.describeOptionGroupsRequestMutex.RLock()
	defer fake.describeOptionGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeOptionGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeOptionGroupsRequestReturns(result1 *request.Request, result2 *rds.DescribeOptionGroupsOutput) {
	fake.describeOptionGroupsRequestMutex.Lock()
	defer fake.describeOptionGroupsRequestMutex.Unlock()
	fake.DescribeOptionGroupsRequestStub = nil
	fake.describeOptionGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeOptionGroupsOutput) {
	fake.describeOptionGroupsRequestMutex.Lock()
	defer fake.describeOptionGroupsRequestMutex.Unlock()
	fake.DescribeOptionGroupsRequestStub = nil
	if fake.describeOptionGroupsRequestReturnsOnCall == nil {
		fake.describeOptionGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeOptionGroupsOutput
		})
	}
	fake.describeOptionGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeOptionGroupsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsWithContext(arg1 context.Context, arg2 *rds.DescribeOptionGroupsInput, arg3 ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {
	fake.describeOptionGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeOptionGroupsWithContextReturnsOnCall[len(fake.describeOptionGroupsWithContextArgsForCall)]
	fake.describeOptionGroupsWithContextArgsForCall = append(fake.describeOptionGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeOptionGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeOptionGroupsWithContextStub
	fakeReturns := fake.describeOptionGroupsWithContextReturns
	fake.recordInvocation("DescribeOptionGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeOptionGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOptionGroupsWithContextCallCount() int {
	fake.describeOptionGroupsWithContextMutex.RLock()
	defer fake.describeOptionGroupsWithContextMutex.RUnlock()
	return len(fake.describeOptionGroupsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOptionGroupsWithContextCalls(stub func(context.Context, *rds.DescribeOptionGroupsInput, ...request.Option) (*rds.DescribeOptionGroupsOutput, error)) {
	fake.describeOptionGroupsWithContextMutex.Lock()
	defer fake.describeOptionGroupsWithContextMutex.Unlock()
	fake.DescribeOptionGroupsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeOptionGroupsWithContextArgsForCall(i int) (context.Context, *rds.DescribeOptionGroupsInput, []request.Option) {
	fake.describeOptionGroupsWithContextMutex.RLock()
	defer fake.describeOptionGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeOptionGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeOptionGroupsWithContextReturns(result1 *rds.DescribeOptionGroupsOutput, result2 error) {
	fake.describeOptionGroupsWithContextMutex.Lock()
	defer fake.describeOptionGroupsWithContextMutex.Unlock()
	fake.DescribeOptionGroupsWithContextStub = nil
	fake.describeOptionGroupsWithContextReturns = struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOptionGroupsWithContextReturnsOnCall(i int, result1 *rds.DescribeOptionGroupsOutput, result2 error) {
	fake.describeOptionGroupsWithContextMutex.Lock()
	defer fake.describeOptionGroupsWithContextMutex.Unlock()
	fake.DescribeOptionGroupsWithContextStub = nil
	if fake.describeOptionGroupsWithContextReturnsOnCall == nil {
		fake.describeOptionGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeOptionGroupsOutput
			result2 error
		})
	}
	fake.describeOptionGroupsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeOptionGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptions(arg1 *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	fake.describeOrderableDBInstanceOptionsMutex.Lock()
	ret, specificReturn := fake.describeOrderableDBInstanceOptionsReturnsOnCall[len(fake.describeOrderableDBInstanceOptionsArgsForCall)]
	fake.describeOrderableDBInstanceOptionsArgsForCall = append(fake.describeOrderableDBInstanceOptionsArgsForCall, struct {
		arg1 *rds.DescribeOrderableDBInstanceOptionsInput
	}{arg1})
	stub := fake.DescribeOrderableDBInstanceOptionsStub
	fakeReturns := fake.describeOrderableDBInstanceOptionsReturns
	fake.recordInvocation("DescribeOrderableDBInstanceOptions", []interface{}{arg1})
	fake.describeOrderableDBInstanceOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsCallCount() int {
	fake.describeOrderableDBInstanceOptionsMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsMutex.RUnlock()
	return len(fake.describeOrderableDBInstanceOptionsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsCalls(stub func(*rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)) {
	fake.describeOrderableDBInstanceOptionsMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsStub = stub
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsArgsForCall(i int) *rds.DescribeOrderableDBInstanceOptionsInput {
	fake.describeOrderableDBInstanceOptionsMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsMutex.RUnlock()
	argsForCall := fake.describeOrderableDBInstanceOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsReturns(result1 *rds.DescribeOrderableDBInstanceOptionsOutput, result2 error) {
	fake.describeOrderableDBInstanceOptionsMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsStub = nil
	fake.describeOrderableDBInstanceOptionsReturns = struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsReturnsOnCall(i int, result1 *rds.DescribeOrderableDBInstanceOptionsOutput, result2 error) {
	fake.describeOrderableDBInstanceOptionsMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsStub = nil
	if fake.describeOrderableDBInstanceOptionsReturnsOnCall == nil {
		fake.describeOrderableDBInstanceOptionsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeOrderableDBInstanceOptionsOutput
			result2 error
		})
	}
	fake.describeOrderableDBInstanceOptionsReturnsOnCall[i] = struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPages(arg1 *rds.DescribeOrderableDBInstanceOptionsInput, arg2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
	fake.describeOrderableDBInstanceOptionsPagesMutex.Lock()
	ret, specificReturn := fake.describeOrderableDBInstanceOptionsPagesReturnsOnCall[len(fake.describeOrderableDBInstanceOptionsPagesArgsForCall)]
	fake.describeOrderableDBInstanceOptionsPagesArgsForCall = append(fake.describeOrderableDBInstanceOptionsPagesArgsForCall, struct {
		arg1 *rds.DescribeOrderableDBInstanceOptionsInput
		arg2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeOrderableDBInstanceOptionsPagesStub
	fakeReturns := fake.describeOrderableDBInstanceOptionsPagesReturns
	fake.recordInvocation("DescribeOrderableDBInstanceOptionsPages", []interface{}{arg1, arg2})
	fake.describeOrderableDBInstanceOptionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesCallCount() int {
	fake.describeOrderableDBInstanceOptionsPagesMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsPagesMutex.RUnlock()
	return len(fake.describeOrderableDBInstanceOptionsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesCalls(stub func(*rds.DescribeOrderableDBInstanceOptionsInput, func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error) {
	fake.describeOrderableDBInstanceOptionsPagesMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsPagesMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesArgsForCall(i int) (*rds.DescribeOrderableDBInstanceOptionsInput, func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) {
	fake.describeOrderableDBInstanceOptionsPagesMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsPagesMutex.RUnlock()
	argsForCall := fake.describeOrderableDBInstanceOptionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesReturns(result1 error) {
	fake.describeOrderableDBInstanceOptionsPagesMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsPagesMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsPagesStub = nil
	fake.describeOrderableDBInstanceOptionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeOrderableDBInstanceOptionsPagesMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsPagesMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsPagesStub = nil
	if fake.describeOrderableDBInstanceOptionsPagesReturnsOnCall == nil {
		fake.describeOrderableDBInstanceOptionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOrderableDBInstanceOptionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeOrderableDBInstanceOptionsInput, arg3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeOrderableDBInstanceOptionsPagesWithContextReturnsOnCall[len(fake.describeOrderableDBInstanceOptionsPagesWithContextArgsForCall)]
	fake.describeOrderableDBInstanceOptionsPagesWithContextArgsForCall = append(fake.describeOrderableDBInstanceOptionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeOrderableDBInstanceOptionsInput
		arg3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeOrderableDBInstanceOptionsPagesWithContextStub
	fakeReturns := fake.describeOrderableDBInstanceOptionsPagesWithContextReturns
	fake.recordInvocation("DescribeOrderableDBInstanceOptionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesWithContextCallCount() int {
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.RUnlock()
	return len(fake.describeOrderableDBInstanceOptionsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesWithContextCalls(stub func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, ...request.Option) error) {
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, []request.Option) {
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeOrderableDBInstanceOptionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesWithContextReturns(result1 error) {
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsPagesWithContextStub = nil
	fake.describeOrderableDBInstanceOptionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsPagesWithContextStub = nil
	if fake.describeOrderableDBInstanceOptionsPagesWithContextReturnsOnCall == nil {
		fake.describeOrderableDBInstanceOptionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOrderableDBInstanceOptionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsRequest(arg1 *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput) {
	fake.describeOrderableDBInstanceOptionsRequestMutex.Lock()
	ret, specificReturn := fake.describeOrderableDBInstanceOptionsRequestReturnsOnCall[len(fake.describeOrderableDBInstanceOptionsRequestArgsForCall)]
	fake.describeOrderableDBInstanceOptionsRequestArgsForCall = append(fake.describeOrderableDBInstanceOptionsRequestArgsForCall, struct {
		arg1 *rds.DescribeOrderableDBInstanceOptionsInput
	}{arg1})
	stub := fake.DescribeOrderableDBInstanceOptionsRequestStub
	fakeReturns := fake.describeOrderableDBInstanceOptionsRequestReturns
	fake.recordInvocation("DescribeOrderableDBInstanceOptionsRequest", []interface{}{arg1})
	fake.describeOrderableDBInstanceOptionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsRequestCallCount() int {
	fake.describeOrderableDBInstanceOptionsRequestMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsRequestMutex.RUnlock()
	return len(fake.describeOrderableDBInstanceOptionsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsRequestCalls(stub func(*rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput)) {
	fake.describeOrderableDBInstanceOptionsRequestMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsRequestMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsRequestArgsForCall(i int) *rds.DescribeOrderableDBInstanceOptionsInput {
	fake.describeOrderableDBInstanceOptionsRequestMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsRequestMutex.RUnlock()
	argsForCall := fake.describeOrderableDBInstanceOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsRequestReturns(result1 *request.Request, result2 *rds.DescribeOrderableDBInstanceOptionsOutput) {
	fake.describeOrderableDBInstanceOptionsRequestMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsRequestMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsRequestStub = nil
	fake.describeOrderableDBInstanceOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeOrderableDBInstanceOptionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeOrderableDBInstanceOptionsOutput) {
	fake.describeOrderableDBInstanceOptionsRequestMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsRequestMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsRequestStub = nil
	if fake.describeOrderableDBInstanceOptionsRequestReturnsOnCall == nil {
		fake.describeOrderableDBInstanceOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeOrderableDBInstanceOptionsOutput
		})
	}
	fake.describeOrderableDBInstanceOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeOrderableDBInstanceOptionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsWithContext(arg1 context.Context, arg2 *rds.DescribeOrderableDBInstanceOptionsInput, arg3 ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	fake.describeOrderableDBInstanceOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeOrderableDBInstanceOptionsWithContextReturnsOnCall[len(fake.describeOrderableDBInstanceOptionsWithContextArgsForCall)]
	fake.describeOrderableDBInstanceOptionsWithContextArgsForCall = append(fake.describeOrderableDBInstanceOptionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeOrderableDBInstanceOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeOrderableDBInstanceOptionsWithContextStub
	fakeReturns := fake.describeOrderableDBInstanceOptionsWithContextReturns
	fake.recordInvocation("DescribeOrderableDBInstanceOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeOrderableDBInstanceOptionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsWithContextCallCount() int {
	fake.describeOrderableDBInstanceOptionsWithContextMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsWithContextMutex.RUnlock()
	return len(fake.describeOrderableDBInstanceOptionsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsWithContextCalls(stub func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)) {
	fake.describeOrderableDBInstanceOptionsWithContextMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsWithContextMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsWithContextArgsForCall(i int) (context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, []request.Option) {
	fake.describeOrderableDBInstanceOptionsWithContextMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsWithContextMutex.RUnlock()
	argsForCall := fake.describeOrderableDBInstanceOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsWithContextReturns(result1 *rds.DescribeOrderableDBInstanceOptionsOutput, result2 error) {
	fake.describeOrderableDBInstanceOptionsWithContextMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsWithContextMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsWithContextStub = nil
	fake.describeOrderableDBInstanceOptionsWithContextReturns = struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeOrderableDBInstanceOptionsWithContextReturnsOnCall(i int, result1 *rds.DescribeOrderableDBInstanceOptionsOutput, result2 error) {
	fake.describeOrderableDBInstanceOptionsWithContextMutex.Lock()
	defer fake.describeOrderableDBInstanceOptionsWithContextMutex.Unlock()
	fake.DescribeOrderableDBInstanceOptionsWithContextStub = nil
	if fake.describeOrderableDBInstanceOptionsWithContextReturnsOnCall == nil {
		fake.describeOrderableDBInstanceOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeOrderableDBInstanceOptionsOutput
			result2 error
		})
	}
	fake.describeOrderableDBInstanceOptionsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeOrderableDBInstanceOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActions(arg1 *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	fake.describePendingMaintenanceActionsMutex.Lock()
	ret, specificReturn := fake.describePendingMaintenanceActionsReturnsOnCall[len(fake.describePendingMaintenanceActionsArgsForCall)]
	fake.describePendingMaintenanceActionsArgsForCall = append(fake.describePendingMaintenanceActionsArgsForCall, struct {
		arg1 *rds.DescribePendingMaintenanceActionsInput
	}{arg1})
	stub := fake.DescribePendingMaintenanceActionsStub
	fakeReturns := fake.describePendingMaintenanceActionsReturns
	fake.recordInvocation("DescribePendingMaintenanceActions", []interface{}{arg1})
	fake.describePendingMaintenanceActionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsCallCount() int {
	fake.describePendingMaintenanceActionsMutex.RLock()
	defer fake.describePendingMaintenanceActionsMutex.RUnlock()
	return len(fake.describePendingMaintenanceActionsArgsForCall)
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsCalls(stub func(*rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error)) {
	fake.describePendingMaintenanceActionsMutex.Lock()
	defer fake.describePendingMaintenanceActionsMutex.Unlock()
	fake.DescribePendingMaintenanceActionsStub = stub
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsArgsForCall(i int) *rds.DescribePendingMaintenanceActionsInput {
	fake.describePendingMaintenanceActionsMutex.RLock()
	defer fake.describePendingMaintenanceActionsMutex.RUnlock()
	argsForCall := fake.describePendingMaintenanceActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsReturns(result1 *rds.DescribePendingMaintenanceActionsOutput, result2 error) {
	fake.describePendingMaintenanceActionsMutex.Lock()
	defer fake.describePendingMaintenanceActionsMutex.Unlock()
	fake.DescribePendingMaintenanceActionsStub = nil
	fake.describePendingMaintenanceActionsReturns = struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsReturnsOnCall(i int, result1 *rds.DescribePendingMaintenanceActionsOutput, result2 error) {
	fake.describePendingMaintenanceActionsMutex.Lock()
	defer fake.describePendingMaintenanceActionsMutex.Unlock()
	fake.DescribePendingMaintenanceActionsStub = nil
	if fake.describePendingMaintenanceActionsReturnsOnCall == nil {
		fake.describePendingMaintenanceActionsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribePendingMaintenanceActionsOutput
			result2 error
		})
	}
	fake.describePendingMaintenanceActionsReturnsOnCall[i] = struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPages(arg1 *rds.DescribePendingMaintenanceActionsInput, arg2 func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) error {
	fake.describePendingMaintenanceActionsPagesMutex.Lock()
	ret, specificReturn := fake.describePendingMaintenanceActionsPagesReturnsOnCall[len(fake.describePendingMaintenanceActionsPagesArgsForCall)]
	fake.describePendingMaintenanceActionsPagesArgsForCall = append(fake.describePendingMaintenanceActionsPagesArgsForCall, struct {
		arg1 *rds.DescribePendingMaintenanceActionsInput
		arg2 func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribePendingMaintenanceActionsPagesStub
	fakeReturns := fake.describePendingMaintenanceActionsPagesReturns
	fake.recordInvocation("DescribePendingMaintenanceActionsPages", []interface{}{arg1, arg2})
	fake.describePendingMaintenanceActionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesCallCount() int {
	fake.describePendingMaintenanceActionsPagesMutex.RLock()
	defer fake.describePendingMaintenanceActionsPagesMutex.RUnlock()
	return len(fake.describePendingMaintenanceActionsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesCalls(stub func(*rds.DescribePendingMaintenanceActionsInput, func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) error) {
	fake.describePendingMaintenanceActionsPagesMutex.Lock()
	defer fake.describePendingMaintenanceActionsPagesMutex.Unlock()
	fake.DescribePendingMaintenanceActionsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesArgsForCall(i int) (*rds.DescribePendingMaintenanceActionsInput, func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) {
	fake.describePendingMaintenanceActionsPagesMutex.RLock()
	defer fake.describePendingMaintenanceActionsPagesMutex.RUnlock()
	argsForCall := fake.describePendingMaintenanceActionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesReturns(result1 error) {
	fake.describePendingMaintenanceActionsPagesMutex.Lock()
	defer fake.describePendingMaintenanceActionsPagesMutex.Unlock()
	fake.DescribePendingMaintenanceActionsPagesStub = nil
	fake.describePendingMaintenanceActionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesReturnsOnCall(i int, result1 error) {
	fake.describePendingMaintenanceActionsPagesMutex.Lock()
	defer fake.describePendingMaintenanceActionsPagesMutex.Unlock()
	fake.DescribePendingMaintenanceActionsPagesStub = nil
	if fake.describePendingMaintenanceActionsPagesReturnsOnCall == nil {
		fake.describePendingMaintenanceActionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePendingMaintenanceActionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesWithContext(arg1 context.Context, arg2 *rds.DescribePendingMaintenanceActionsInput, arg3 func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describePendingMaintenanceActionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describePendingMaintenanceActionsPagesWithContextReturnsOnCall[len(fake.describePendingMaintenanceActionsPagesWithContextArgsForCall)]
	fake.describePendingMaintenanceActionsPagesWithContextArgsForCall = append(fake.describePendingMaintenanceActionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribePendingMaintenanceActionsInput
		arg3 func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribePendingMaintenanceActionsPagesWithContextStub
	fakeReturns := fake.describePendingMaintenanceActionsPagesWithContextReturns
	fake.recordInvocation("DescribePendingMaintenanceActionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describePendingMaintenanceActionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesWithContextCallCount() int {
	fake.describePendingMaintenanceActionsPagesWithContextMutex.RLock()
	defer fake.describePendingMaintenanceActionsPagesWithContextMutex.RUnlock()
	return len(fake.describePendingMaintenanceActionsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesWithContextCalls(stub func(context.Context, *rds.DescribePendingMaintenanceActionsInput, func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, ...request.Option) error) {
	fake.describePendingMaintenanceActionsPagesWithContextMutex.Lock()
	defer fake.describePendingMaintenanceActionsPagesWithContextMutex.Unlock()
	fake.DescribePendingMaintenanceActionsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribePendingMaintenanceActionsInput, func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, []request.Option) {
	fake.describePendingMaintenanceActionsPagesWithContextMutex.RLock()
	defer fake.describePendingMaintenanceActionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describePendingMaintenanceActionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesWithContextReturns(result1 error) {
	fake.describePendingMaintenanceActionsPagesWithContextMutex.Lock()
	defer fake.describePendingMaintenanceActionsPagesWithContextMutex.Unlock()
	fake.DescribePendingMaintenanceActionsPagesWithContextStub = nil
	fake.describePendingMaintenanceActionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describePendingMaintenanceActionsPagesWithContextMutex.Lock()
	defer fake.describePendingMaintenanceActionsPagesWithContextMutex.Unlock()
	fake.DescribePendingMaintenanceActionsPagesWithContextStub = nil
	if fake.describePendingMaintenanceActionsPagesWithContextReturnsOnCall == nil {
		fake.describePendingMaintenanceActionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePendingMaintenanceActionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsRequest(arg1 *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput) {
	fake.describePendingMaintenanceActionsRequestMutex.Lock()
	ret, specificReturn := fake.describePendingMaintenanceActionsRequestReturnsOnCall[len(fake.describePendingMaintenanceActionsRequestArgsForCall)]
	fake.describePendingMaintenanceActionsRequestArgsForCall = append(fake.describePendingMaintenanceActionsRequestArgsForCall, struct {
		arg1 *rds.DescribePendingMaintenanceActionsInput
	}{arg1})
	stub := fake.DescribePendingMaintenanceActionsRequestStub
	fakeReturns := fake.describePendingMaintenanceActionsRequestReturns
	fake.recordInvocation("DescribePendingMaintenanceActionsRequest", []interface{}{arg1})
	fake.describePendingMaintenanceActionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsRequestCallCount() int {
	fake.describePendingMaintenanceActionsRequestMutex.RLock()
	defer fake.describePendingMaintenanceActionsRequestMutex.RUnlock()
	return len(fake.describePendingMaintenanceActionsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsRequestCalls(stub func(*rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput)) {
	fake.describePendingMaintenanceActionsRequestMutex.Lock()
	defer fake.describePendingMaintenanceActionsRequestMutex.Unlock()
	fake.DescribePendingMaintenanceActionsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsRequestArgsForCall(i int) *rds.DescribePendingMaintenanceActionsInput {
	fake.describePendingMaintenanceActionsRequestMutex.RLock()
	defer fake.describePendingMaintenanceActionsRequestMutex.RUnlock()
	argsForCall := fake.describePendingMaintenanceActionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsRequestReturns(result1 *request.Request, result2 *rds.DescribePendingMaintenanceActionsOutput) {
	fake.describePendingMaintenanceActionsRequestMutex.Lock()
	defer fake.describePendingMaintenanceActionsRequestMutex.Unlock()
	fake.DescribePendingMaintenanceActionsRequestStub = nil
	fake.describePendingMaintenanceActionsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribePendingMaintenanceActionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribePendingMaintenanceActionsOutput) {
	fake.describePendingMaintenanceActionsRequestMutex.Lock()
	defer fake.describePendingMaintenanceActionsRequestMutex.Unlock()
	fake.DescribePendingMaintenanceActionsRequestStub = nil
	if fake.describePendingMaintenanceActionsRequestReturnsOnCall == nil {
		fake.describePendingMaintenanceActionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribePendingMaintenanceActionsOutput
		})
	}
	fake.describePendingMaintenanceActionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribePendingMaintenanceActionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsWithContext(arg1 context.Context, arg2 *rds.DescribePendingMaintenanceActionsInput, arg3 ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	fake.describePendingMaintenanceActionsWithContextMutex.Lock()
	ret, specificReturn := fake.describePendingMaintenanceActionsWithContextReturnsOnCall[len(fake.describePendingMaintenanceActionsWithContextArgsForCall)]
	fake.describePendingMaintenanceActionsWithContextArgsForCall = append(fake.describePendingMaintenanceActionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribePendingMaintenanceActionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribePendingMaintenanceActionsWithContextStub
	fakeReturns := fake.describePendingMaintenanceActionsWithContextReturns
	fake.recordInvocation("DescribePendingMaintenanceActionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePendingMaintenanceActionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsWithContextCallCount() int {
	fake.describePendingMaintenanceActionsWithContextMutex.RLock()
	defer fake.describePendingMaintenanceActionsWithContextMutex.RUnlock()
	return len(fake.describePendingMaintenanceActionsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsWithContextCalls(stub func(context.Context, *rds.DescribePendingMaintenanceActionsInput, ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error)) {
	fake.describePendingMaintenanceActionsWithContextMutex.Lock()
	defer fake.describePendingMaintenanceActionsWithContextMutex.Unlock()
	fake.DescribePendingMaintenanceActionsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsWithContextArgsForCall(i int) (context.Context, *rds.DescribePendingMaintenanceActionsInput, []request.Option) {
	fake.describePendingMaintenanceActionsWithContextMutex.RLock()
	defer fake.describePendingMaintenanceActionsWithContextMutex.RUnlock()
	argsForCall := fake.describePendingMaintenanceActionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsWithContextReturns(result1 *rds.DescribePendingMaintenanceActionsOutput, result2 error) {
	fake.describePendingMaintenanceActionsWithContextMutex.Lock()
	defer fake.describePendingMaintenanceActionsWithContextMutex.Unlock()
	fake.DescribePendingMaintenanceActionsWithContextStub = nil
	fake.describePendingMaintenanceActionsWithContextReturns = struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribePendingMaintenanceActionsWithContextReturnsOnCall(i int, result1 *rds.DescribePendingMaintenanceActionsOutput, result2 error) {
	fake.describePendingMaintenanceActionsWithContextMutex.Lock()
	defer fake.describePendingMaintenanceActionsWithContextMutex.Unlock()
	fake.DescribePendingMaintenanceActionsWithContextStub = nil
	if fake.describePendingMaintenanceActionsWithContextReturnsOnCall == nil {
		fake.describePendingMaintenanceActionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribePendingMaintenanceActionsOutput
			result2 error
		})
	}
	fake.describePendingMaintenanceActionsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribePendingMaintenanceActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstances(arg1 *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
	fake.describeReservedDBInstancesMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesReturnsOnCall[len(fake.describeReservedDBInstancesArgsForCall)]
	fake.describeReservedDBInstancesArgsForCall = append(fake.describeReservedDBInstancesArgsForCall, struct {
		arg1 *rds.DescribeReservedDBInstancesInput
	}{arg1})
	stub := fake.DescribeReservedDBInstancesStub
	fakeReturns := fake.describeReservedDBInstancesReturns
	fake.recordInvocation("DescribeReservedDBInstances", []interface{}{arg1})
	fake.describeReservedDBInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesCallCount() int {
	fake.describeReservedDBInstancesMutex.RLock()
	defer fake.describeReservedDBInstancesMutex.RUnlock()
	return len(fake.describeReservedDBInstancesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesCalls(stub func(*rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error)) {
	fake.describeReservedDBInstancesMutex.Lock()
	defer fake.describeReservedDBInstancesMutex.Unlock()
	fake.DescribeReservedDBInstancesStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesArgsForCall(i int) *rds.DescribeReservedDBInstancesInput {
	fake.describeReservedDBInstancesMutex.RLock()
	defer fake.describeReservedDBInstancesMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesReturns(result1 *rds.DescribeReservedDBInstancesOutput, result2 error) {
	fake.describeReservedDBInstancesMutex.Lock()
	defer fake.describeReservedDBInstancesMutex.Unlock()
	fake.DescribeReservedDBInstancesStub = nil
	fake.describeReservedDBInstancesReturns = struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesReturnsOnCall(i int, result1 *rds.DescribeReservedDBInstancesOutput, result2 error) {
	fake.describeReservedDBInstancesMutex.Lock()
	defer fake.describeReservedDBInstancesMutex.Unlock()
	fake.DescribeReservedDBInstancesStub = nil
	if fake.describeReservedDBInstancesReturnsOnCall == nil {
		fake.describeReservedDBInstancesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeReservedDBInstancesOutput
			result2 error
		})
	}
	fake.describeReservedDBInstancesReturnsOnCall[i] = struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferings(arg1 *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	fake.describeReservedDBInstancesOfferingsMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesOfferingsReturnsOnCall[len(fake.describeReservedDBInstancesOfferingsArgsForCall)]
	fake.describeReservedDBInstancesOfferingsArgsForCall = append(fake.describeReservedDBInstancesOfferingsArgsForCall, struct {
		arg1 *rds.DescribeReservedDBInstancesOfferingsInput
	}{arg1})
	stub := fake.DescribeReservedDBInstancesOfferingsStub
	fakeReturns := fake.describeReservedDBInstancesOfferingsReturns
	fake.recordInvocation("DescribeReservedDBInstancesOfferings", []interface{}{arg1})
	fake.describeReservedDBInstancesOfferingsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsCallCount() int {
	fake.describeReservedDBInstancesOfferingsMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsMutex.RUnlock()
	return len(fake.describeReservedDBInstancesOfferingsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsCalls(stub func(*rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)) {
	fake.describeReservedDBInstancesOfferingsMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsArgsForCall(i int) *rds.DescribeReservedDBInstancesOfferingsInput {
	fake.describeReservedDBInstancesOfferingsMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesOfferingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsReturns(result1 *rds.DescribeReservedDBInstancesOfferingsOutput, result2 error) {
	fake.describeReservedDBInstancesOfferingsMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsStub = nil
	fake.describeReservedDBInstancesOfferingsReturns = struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsReturnsOnCall(i int, result1 *rds.DescribeReservedDBInstancesOfferingsOutput, result2 error) {
	fake.describeReservedDBInstancesOfferingsMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsStub = nil
	if fake.describeReservedDBInstancesOfferingsReturnsOnCall == nil {
		fake.describeReservedDBInstancesOfferingsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeReservedDBInstancesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedDBInstancesOfferingsReturnsOnCall[i] = struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPages(arg1 *rds.DescribeReservedDBInstancesOfferingsInput, arg2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error {
	fake.describeReservedDBInstancesOfferingsPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesOfferingsPagesReturnsOnCall[len(fake.describeReservedDBInstancesOfferingsPagesArgsForCall)]
	fake.describeReservedDBInstancesOfferingsPagesArgsForCall = append(fake.describeReservedDBInstancesOfferingsPagesArgsForCall, struct {
		arg1 *rds.DescribeReservedDBInstancesOfferingsInput
		arg2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeReservedDBInstancesOfferingsPagesStub
	fakeReturns := fake.describeReservedDBInstancesOfferingsPagesReturns
	fake.recordInvocation("DescribeReservedDBInstancesOfferingsPages", []interface{}{arg1, arg2})
	fake.describeReservedDBInstancesOfferingsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesCallCount() int {
	fake.describeReservedDBInstancesOfferingsPagesMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsPagesMutex.RUnlock()
	return len(fake.describeReservedDBInstancesOfferingsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesCalls(stub func(*rds.DescribeReservedDBInstancesOfferingsInput, func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error) {
	fake.describeReservedDBInstancesOfferingsPagesMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesArgsForCall(i int) (*rds.DescribeReservedDBInstancesOfferingsInput, func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) {
	fake.describeReservedDBInstancesOfferingsPagesMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsPagesMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesOfferingsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesReturns(result1 error) {
	fake.describeReservedDBInstancesOfferingsPagesMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsPagesStub = nil
	fake.describeReservedDBInstancesOfferingsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesReturnsOnCall(i int, result1 error) {
	fake.describeReservedDBInstancesOfferingsPagesMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsPagesStub = nil
	if fake.describeReservedDBInstancesOfferingsPagesReturnsOnCall == nil {
		fake.describeReservedDBInstancesOfferingsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedDBInstancesOfferingsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeReservedDBInstancesOfferingsInput, arg3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesOfferingsPagesWithContextReturnsOnCall[len(fake.describeReservedDBInstancesOfferingsPagesWithContextArgsForCall)]
	fake.describeReservedDBInstancesOfferingsPagesWithContextArgsForCall = append(fake.describeReservedDBInstancesOfferingsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesOfferingsInput
		arg3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeReservedDBInstancesOfferingsPagesWithContextStub
	fakeReturns := fake.describeReservedDBInstancesOfferingsPagesWithContextReturns
	fake.recordInvocation("DescribeReservedDBInstancesOfferingsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesWithContextCallCount() int {
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedDBInstancesOfferingsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesWithContextCalls(stub func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, ...request.Option) error) {
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, []request.Option) {
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesOfferingsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesWithContextReturns(result1 error) {
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsPagesWithContextStub = nil
	fake.describeReservedDBInstancesOfferingsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsPagesWithContextStub = nil
	if fake.describeReservedDBInstancesOfferingsPagesWithContextReturnsOnCall == nil {
		fake.describeReservedDBInstancesOfferingsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedDBInstancesOfferingsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsRequest(arg1 *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput) {
	fake.describeReservedDBInstancesOfferingsRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesOfferingsRequestReturnsOnCall[len(fake.describeReservedDBInstancesOfferingsRequestArgsForCall)]
	fake.describeReservedDBInstancesOfferingsRequestArgsForCall = append(fake.describeReservedDBInstancesOfferingsRequestArgsForCall, struct {
		arg1 *rds.DescribeReservedDBInstancesOfferingsInput
	}{arg1})
	stub := fake.DescribeReservedDBInstancesOfferingsRequestStub
	fakeReturns := fake.describeReservedDBInstancesOfferingsRequestReturns
	fake.recordInvocation("DescribeReservedDBInstancesOfferingsRequest", []interface{}{arg1})
	fake.describeReservedDBInstancesOfferingsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsRequestCallCount() int {
	fake.describeReservedDBInstancesOfferingsRequestMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsRequestMutex.RUnlock()
	return len(fake.describeReservedDBInstancesOfferingsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsRequestCalls(stub func(*rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput)) {
	fake.describeReservedDBInstancesOfferingsRequestMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsRequestArgsForCall(i int) *rds.DescribeReservedDBInstancesOfferingsInput {
	fake.describeReservedDBInstancesOfferingsRequestMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsRequestMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesOfferingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsRequestReturns(result1 *request.Request, result2 *rds.DescribeReservedDBInstancesOfferingsOutput) {
	fake.describeReservedDBInstancesOfferingsRequestMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsRequestStub = nil
	fake.describeReservedDBInstancesOfferingsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeReservedDBInstancesOfferingsOutput) {
	fake.describeReservedDBInstancesOfferingsRequestMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsRequestStub = nil
	if fake.describeReservedDBInstancesOfferingsRequestReturnsOnCall == nil {
		fake.describeReservedDBInstancesOfferingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeReservedDBInstancesOfferingsOutput
		})
	}
	fake.describeReservedDBInstancesOfferingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsWithContext(arg1 context.Context, arg2 *rds.DescribeReservedDBInstancesOfferingsInput, arg3 ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	fake.describeReservedDBInstancesOfferingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesOfferingsWithContextReturnsOnCall[len(fake.describeReservedDBInstancesOfferingsWithContextArgsForCall)]
	fake.describeReservedDBInstancesOfferingsWithContextArgsForCall = append(fake.describeReservedDBInstancesOfferingsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesOfferingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeReservedDBInstancesOfferingsWithContextStub
	fakeReturns := fake.describeReservedDBInstancesOfferingsWithContextReturns
	fake.recordInvocation("DescribeReservedDBInstancesOfferingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedDBInstancesOfferingsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsWithContextCallCount() int {
	fake.describeReservedDBInstancesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsWithContextMutex.RUnlock()
	return len(fake.describeReservedDBInstancesOfferingsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsWithContextCalls(stub func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)) {
	fake.describeReservedDBInstancesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsWithContextArgsForCall(i int) (context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, []request.Option) {
	fake.describeReservedDBInstancesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesOfferingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsWithContextReturns(result1 *rds.DescribeReservedDBInstancesOfferingsOutput, result2 error) {
	fake.describeReservedDBInstancesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsWithContextStub = nil
	fake.describeReservedDBInstancesOfferingsWithContextReturns = struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesOfferingsWithContextReturnsOnCall(i int, result1 *rds.DescribeReservedDBInstancesOfferingsOutput, result2 error) {
	fake.describeReservedDBInstancesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesOfferingsWithContextStub = nil
	if fake.describeReservedDBInstancesOfferingsWithContextReturnsOnCall == nil {
		fake.describeReservedDBInstancesOfferingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeReservedDBInstancesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedDBInstancesOfferingsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeReservedDBInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPages(arg1 *rds.DescribeReservedDBInstancesInput, arg2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error {
	fake.describeReservedDBInstancesPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesPagesReturnsOnCall[len(fake.describeReservedDBInstancesPagesArgsForCall)]
	fake.describeReservedDBInstancesPagesArgsForCall = append(fake.describeReservedDBInstancesPagesArgsForCall, struct {
		arg1 *rds.DescribeReservedDBInstancesInput
		arg2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeReservedDBInstancesPagesStub
	fakeReturns := fake.describeReservedDBInstancesPagesReturns
	fake.recordInvocation("DescribeReservedDBInstancesPages", []interface{}{arg1, arg2})
	fake.describeReservedDBInstancesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesCallCount() int {
	fake.describeReservedDBInstancesPagesMutex.RLock()
	defer fake.describeReservedDBInstancesPagesMutex.RUnlock()
	return len(fake.describeReservedDBInstancesPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesCalls(stub func(*rds.DescribeReservedDBInstancesInput, func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error) {
	fake.describeReservedDBInstancesPagesMutex.Lock()
	defer fake.describeReservedDBInstancesPagesMutex.Unlock()
	fake.DescribeReservedDBInstancesPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesArgsForCall(i int) (*rds.DescribeReservedDBInstancesInput, func(*rds.DescribeReservedDBInstancesOutput, bool) bool) {
	fake.describeReservedDBInstancesPagesMutex.RLock()
	defer fake.describeReservedDBInstancesPagesMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesReturns(result1 error) {
	fake.describeReservedDBInstancesPagesMutex.Lock()
	defer fake.describeReservedDBInstancesPagesMutex.Unlock()
	fake.DescribeReservedDBInstancesPagesStub = nil
	fake.describeReservedDBInstancesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesReturnsOnCall(i int, result1 error) {
	fake.describeReservedDBInstancesPagesMutex.Lock()
	defer fake.describeReservedDBInstancesPagesMutex.Unlock()
	fake.DescribeReservedDBInstancesPagesStub = nil
	if fake.describeReservedDBInstancesPagesReturnsOnCall == nil {
		fake.describeReservedDBInstancesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedDBInstancesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesWithContext(arg1 context.Context, arg2 *rds.DescribeReservedDBInstancesInput, arg3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedDBInstancesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesPagesWithContextReturnsOnCall[len(fake.describeReservedDBInstancesPagesWithContextArgsForCall)]
	fake.describeReservedDBInstancesPagesWithContextArgsForCall = append(fake.describeReservedDBInstancesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesInput
		arg3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeReservedDBInstancesPagesWithContextStub
	fakeReturns := fake.describeReservedDBInstancesPagesWithContextReturns
	fake.recordInvocation("DescribeReservedDBInstancesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedDBInstancesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesWithContextCallCount() int {
	fake.describeReservedDBInstancesPagesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedDBInstancesPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesWithContextCalls(stub func(context.Context, *rds.DescribeReservedDBInstancesInput, func(*rds.DescribeReservedDBInstancesOutput, bool) bool, ...request.Option) error) {
	fake.describeReservedDBInstancesPagesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesPagesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeReservedDBInstancesInput, func(*rds.DescribeReservedDBInstancesOutput, bool) bool, []request.Option) {
	fake.describeReservedDBInstancesPagesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesWithContextReturns(result1 error) {
	fake.describeReservedDBInstancesPagesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesPagesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesPagesWithContextStub = nil
	fake.describeReservedDBInstancesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReservedDBInstancesPagesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesPagesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesPagesWithContextStub = nil
	if fake.describeReservedDBInstancesPagesWithContextReturnsOnCall == nil {
		fake.describeReservedDBInstancesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedDBInstancesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesRequest(arg1 *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput) {
	fake.describeReservedDBInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesRequestReturnsOnCall[len(fake.describeReservedDBInstancesRequestArgsForCall)]
	fake.describeReservedDBInstancesRequestArgsForCall = append(fake.describeReservedDBInstancesRequestArgsForCall, struct {
		arg1 *rds.DescribeReservedDBInstancesInput
	}{arg1})
	stub := fake.DescribeReservedDBInstancesRequestStub
	fakeReturns := fake.describeReservedDBInstancesRequestReturns
	fake.recordInvocation("DescribeReservedDBInstancesRequest", []interface{}{arg1})
	fake.describeReservedDBInstancesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesRequestCallCount() int {
	fake.describeReservedDBInstancesRequestMutex.RLock()
	defer fake.describeReservedDBInstancesRequestMutex.RUnlock()
	return len(fake.describeReservedDBInstancesRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesRequestCalls(stub func(*rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput)) {
	fake.describeReservedDBInstancesRequestMutex.Lock()
	defer fake.describeReservedDBInstancesRequestMutex.Unlock()
	fake.DescribeReservedDBInstancesRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesRequestArgsForCall(i int) *rds.DescribeReservedDBInstancesInput {
	fake.describeReservedDBInstancesRequestMutex.RLock()
	defer fake.describeReservedDBInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesRequestReturns(result1 *request.Request, result2 *rds.DescribeReservedDBInstancesOutput) {
	fake.describeReservedDBInstancesRequestMutex.Lock()
	defer fake.describeReservedDBInstancesRequestMutex.Unlock()
	fake.DescribeReservedDBInstancesRequestStub = nil
	fake.describeReservedDBInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeReservedDBInstancesOutput) {
	fake.describeReservedDBInstancesRequestMutex.Lock()
	defer fake.describeReservedDBInstancesRequestMutex.Unlock()
	fake.DescribeReservedDBInstancesRequestStub = nil
	if fake.describeReservedDBInstancesRequestReturnsOnCall == nil {
		fake.describeReservedDBInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeReservedDBInstancesOutput
		})
	}
	fake.describeReservedDBInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeReservedDBInstancesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesWithContext(arg1 context.Context, arg2 *rds.DescribeReservedDBInstancesInput, arg3 ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {
	fake.describeReservedDBInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedDBInstancesWithContextReturnsOnCall[len(fake.describeReservedDBInstancesWithContextArgsForCall)]
	fake.describeReservedDBInstancesWithContextArgsForCall = append(fake.describeReservedDBInstancesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeReservedDBInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeReservedDBInstancesWithContextStub
	fakeReturns := fake.describeReservedDBInstancesWithContextReturns
	fake.recordInvocation("DescribeReservedDBInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedDBInstancesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesWithContextCallCount() int {
	fake.describeReservedDBInstancesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesWithContextMutex.RUnlock()
	return len(fake.describeReservedDBInstancesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesWithContextCalls(stub func(context.Context, *rds.DescribeReservedDBInstancesInput, ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error)) {
	fake.describeReservedDBInstancesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesWithContextArgsForCall(i int) (context.Context, *rds.DescribeReservedDBInstancesInput, []request.Option) {
	fake.describeReservedDBInstancesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedDBInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesWithContextReturns(result1 *rds.DescribeReservedDBInstancesOutput, result2 error) {
	fake.describeReservedDBInstancesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesWithContextStub = nil
	fake.describeReservedDBInstancesWithContextReturns = struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeReservedDBInstancesWithContextReturnsOnCall(i int, result1 *rds.DescribeReservedDBInstancesOutput, result2 error) {
	fake.describeReservedDBInstancesWithContextMutex.Lock()
	defer fake.describeReservedDBInstancesWithContextMutex.Unlock()
	fake.DescribeReservedDBInstancesWithContextStub = nil
	if fake.describeReservedDBInstancesWithContextReturnsOnCall == nil {
		fake.describeReservedDBInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeReservedDBInstancesOutput
			result2 error
		})
	}
	fake.describeReservedDBInstancesWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeReservedDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeSourceRegions(arg1 *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
	fake.describeSourceRegionsMutex.Lock()
	ret, specificReturn := fake.describeSourceRegionsReturnsOnCall[len(fake.describeSourceRegionsArgsForCall)]
	fake.describeSourceRegionsArgsForCall = append(fake.describeSourceRegionsArgsForCall, struct {
		arg1 *rds.DescribeSourceRegionsInput
	}{arg1})
	stub := fake.DescribeSourceRegionsStub
	fakeReturns := fake.describeSourceRegionsReturns
	fake.recordInvocation("DescribeSourceRegions", []interface{}{arg1})
	fake.describeSourceRegionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeSourceRegionsCallCount() int {
	fake.describeSourceRegionsMutex.RLock()
	defer fake.describeSourceRegionsMutex.RUnlock()
	return len(fake.describeSourceRegionsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeSourceRegionsCalls(stub func(*rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error)) {
	fake.describeSourceRegionsMutex.Lock()
	defer fake.describeSourceRegionsMutex.Unlock()
	fake.DescribeSourceRegionsStub = stub
}

func (fake *FakeRDSAPI) DescribeSourceRegionsArgsForCall(i int) *rds.DescribeSourceRegionsInput {
	fake.describeSourceRegionsMutex.RLock()
	defer fake.describeSourceRegionsMutex.RUnlock()
	argsForCall := fake.describeSourceRegionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeSourceRegionsReturns(result1 *rds.DescribeSourceRegionsOutput, result2 error) {
	fake.describeSourceRegionsMutex.Lock()
	defer fake.describeSourceRegionsMutex.Unlock()
	fake.DescribeSourceRegionsStub = nil
	fake.describeSourceRegionsReturns = struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsReturnsOnCall(i int, result1 *rds.DescribeSourceRegionsOutput, result2 error) {
	fake.describeSourceRegionsMutex.Lock()
	defer fake.describeSourceRegionsMutex.Unlock()
	fake.DescribeSourceRegionsStub = nil
	if fake.describeSourceRegionsReturnsOnCall == nil {
		fake.describeSourceRegionsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeSourceRegionsOutput
			result2 error
		})
	}
	fake.describeSourceRegionsReturnsOnCall[i] = struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPages(arg1 *rds.DescribeSourceRegionsInput, arg2 func(*rds.DescribeSourceRegionsOutput, bool) bool) error {
	fake.describeSourceRegionsPagesMutex.Lock()
	ret, specificReturn := fake.describeSourceRegionsPagesReturnsOnCall[len(fake.describeSourceRegionsPagesArgsForCall)]
	fake.describeSourceRegionsPagesArgsForCall = append(fake.describeSourceRegionsPagesArgsForCall, struct {
		arg1 *rds.DescribeSourceRegionsInput
		arg2 func(*rds.DescribeSourceRegionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeSourceRegionsPagesStub
	fakeReturns := fake.describeSourceRegionsPagesReturns
	fake.recordInvocation("DescribeSourceRegionsPages", []interface{}{arg1, arg2})
	fake.describeSourceRegionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesCallCount() int {
	fake.describeSourceRegionsPagesMutex.RLock()
	defer fake.describeSourceRegionsPagesMutex.RUnlock()
	return len(fake.describeSourceRegionsPagesArgsForCall)
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesCalls(stub func(*rds.DescribeSourceRegionsInput, func(*rds.DescribeSourceRegionsOutput, bool) bool) error) {
	fake.describeSourceRegionsPagesMutex.Lock()
	defer fake.describeSourceRegionsPagesMutex.Unlock()
	fake.DescribeSourceRegionsPagesStub = stub
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesArgsForCall(i int) (*rds.DescribeSourceRegionsInput, func(*rds.DescribeSourceRegionsOutput, bool) bool) {
	fake.describeSourceRegionsPagesMutex.RLock()
	defer fake.describeSourceRegionsPagesMutex.RUnlock()
	argsForCall := fake.describeSourceRegionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesReturns(result1 error) {
	fake.describeSourceRegionsPagesMutex.Lock()
	defer fake.describeSourceRegionsPagesMutex.Unlock()
	fake.DescribeSourceRegionsPagesStub = nil
	fake.describeSourceRegionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeSourceRegionsPagesMutex.Lock()
	defer fake.describeSourceRegionsPagesMutex.Unlock()
	fake.DescribeSourceRegionsPagesStub = nil
	if fake.describeSourceRegionsPagesReturnsOnCall == nil {
		fake.describeSourceRegionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSourceRegionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesWithContext(arg1 context.Context, arg2 *rds.DescribeSourceRegionsInput, arg3 func(*rds.DescribeSourceRegionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSourceRegionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSourceRegionsPagesWithContextReturnsOnCall[len(fake.describeSourceRegionsPagesWithContextArgsForCall)]
	fake.describeSourceRegionsPagesWithContextArgsForCall = append(fake.describeSourceRegionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeSourceRegionsInput
		arg3 func(*rds.DescribeSourceRegionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeSourceRegionsPagesWithContextStub
	fakeReturns := fake.describeSourceRegionsPagesWithContextReturns
	fake.recordInvocation("DescribeSourceRegionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSourceRegionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesWithContextCallCount() int {
	fake.describeSourceRegionsPagesWithContextMutex.RLock()
	defer fake.describeSourceRegionsPagesWithContextMutex.RUnlock()
	return len(fake.describeSourceRegionsPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesWithContextCalls(stub func(context.Context, *rds.DescribeSourceRegionsInput, func(*rds.DescribeSourceRegionsOutput, bool) bool, ...request.Option) error) {
	fake.describeSourceRegionsPagesWithContextMutex.Lock()
	defer fake.describeSourceRegionsPagesWithContextMutex.Unlock()
	fake.DescribeSourceRegionsPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesWithContextArgsForCall(i int) (context.Context, *rds.DescribeSourceRegionsInput, func(*rds.DescribeSourceRegionsOutput, bool) bool, []request.Option) {
	fake.describeSourceRegionsPagesWithContextMutex.RLock()
	defer fake.describeSourceRegionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSourceRegionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesWithContextReturns(result1 error) {
	fake.describeSourceRegionsPagesWithContextMutex.Lock()
	defer fake.describeSourceRegionsPagesWithContextMutex.Unlock()
	fake.DescribeSourceRegionsPagesWithContextStub = nil
	fake.describeSourceRegionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSourceRegionsPagesWithContextMutex.Lock()
	defer fake.describeSourceRegionsPagesWithContextMutex.Unlock()
	fake.DescribeSourceRegionsPagesWithContextStub = nil
	if fake.describeSourceRegionsPagesWithContextReturnsOnCall == nil {
		fake.describeSourceRegionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSourceRegionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsRequest(arg1 *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput) {
	fake.describeSourceRegionsRequestMutex.Lock()
	ret, specificReturn := fake.describeSourceRegionsRequestReturnsOnCall[len(fake.describeSourceRegionsRequestArgsForCall)]
	fake.describeSourceRegionsRequestArgsForCall = append(fake.describeSourceRegionsRequestArgsForCall, struct {
		arg1 *rds.DescribeSourceRegionsInput
	}{arg1})
	stub := fake.DescribeSourceRegionsRequestStub
	fakeReturns := fake.describeSourceRegionsRequestReturns
	fake.recordInvocation("DescribeSourceRegionsRequest", []interface{}{arg1})
	fake.describeSourceRegionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeSourceRegionsRequestCallCount() int {
	fake.describeSourceRegionsRequestMutex.RLock()
	defer fake.describeSourceRegionsRequestMutex.RUnlock()
	return len(fake.describeSourceRegionsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeSourceRegionsRequestCalls(stub func(*rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput)) {
	fake.describeSourceRegionsRequestMutex.Lock()
	defer fake.describeSourceRegionsRequestMutex.Unlock()
	fake.DescribeSourceRegionsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeSourceRegionsRequestArgsForCall(i int) *rds.DescribeSourceRegionsInput {
	fake.describeSourceRegionsRequestMutex.RLock()
	defer fake.describeSourceRegionsRequestMutex.RUnlock()
	argsForCall := fake.describeSourceRegionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeSourceRegionsRequestReturns(result1 *request.Request, result2 *rds.DescribeSourceRegionsOutput) {
	fake.describeSourceRegionsRequestMutex.Lock()
	defer fake.describeSourceRegionsRequestMutex.Unlock()
	fake.DescribeSourceRegionsRequestStub = nil
	fake.describeSourceRegionsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeSourceRegionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeSourceRegionsOutput) {
	fake.describeSourceRegionsRequestMutex.Lock()
	defer fake.describeSourceRegionsRequestMutex.Unlock()
	fake.DescribeSourceRegionsRequestStub = nil
	if fake.describeSourceRegionsRequestReturnsOnCall == nil {
		fake.describeSourceRegionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeSourceRegionsOutput
		})
	}
	fake.describeSourceRegionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeSourceRegionsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsWithContext(arg1 context.Context, arg2 *rds.DescribeSourceRegionsInput, arg3 ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {
	fake.describeSourceRegionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSourceRegionsWithContextReturnsOnCall[len(fake.describeSourceRegionsWithContextArgsForCall)]
	fake.describeSourceRegionsWithContextArgsForCall = append(fake.describeSourceRegionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeSourceRegionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeSourceRegionsWithContextStub
	fakeReturns := fake.describeSourceRegionsWithContextReturns
	fake.recordInvocation("DescribeSourceRegionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSourceRegionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeSourceRegionsWithContextCallCount() int {
	fake.describeSourceRegionsWithContextMutex.RLock()
	defer fake.describeSourceRegionsWithContextMutex.RUnlock()
	return len(fake.describeSourceRegionsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeSourceRegionsWithContextCalls(stub func(context.Context, *rds.DescribeSourceRegionsInput, ...request.Option) (*rds.DescribeSourceRegionsOutput, error)) {
	fake.describeSourceRegionsWithContextMutex.Lock()
	defer fake.describeSourceRegionsWithContextMutex.Unlock()
	fake.DescribeSourceRegionsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeSourceRegionsWithContextArgsForCall(i int) (context.Context, *rds.DescribeSourceRegionsInput, []request.Option) {
	fake.describeSourceRegionsWithContextMutex.RLock()
	defer fake.describeSourceRegionsWithContextMutex.RUnlock()
	argsForCall := fake.describeSourceRegionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeSourceRegionsWithContextReturns(result1 *rds.DescribeSourceRegionsOutput, result2 error) {
	fake.describeSourceRegionsWithContextMutex.Lock()
	defer fake.describeSourceRegionsWithContextMutex.Unlock()
	fake.DescribeSourceRegionsWithContextStub = nil
	fake.describeSourceRegionsWithContextReturns = struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeSourceRegionsWithContextReturnsOnCall(i int, result1 *rds.DescribeSourceRegionsOutput, result2 error) {
	fake.describeSourceRegionsWithContextMutex.Lock()
	defer fake.describeSourceRegionsWithContextMutex.Unlock()
	fake.DescribeSourceRegionsWithContextStub = nil
	if fake.describeSourceRegionsWithContextReturnsOnCall == nil {
		fake.describeSourceRegionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeSourceRegionsOutput
			result2 error
		})
	}
	fake.describeSourceRegionsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeSourceRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModifications(arg1 *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	fake.describeValidDBInstanceModificationsMutex.Lock()
	ret, specificReturn := fake.describeValidDBInstanceModificationsReturnsOnCall[len(fake.describeValidDBInstanceModificationsArgsForCall)]
	fake.describeValidDBInstanceModificationsArgsForCall = append(fake.describeValidDBInstanceModificationsArgsForCall, struct {
		arg1 *rds.DescribeValidDBInstanceModificationsInput
	}{arg1})
	stub := fake.DescribeValidDBInstanceModificationsStub
	fakeReturns := fake.describeValidDBInstanceModificationsReturns
	fake.recordInvocation("DescribeValidDBInstanceModifications", []interface{}{arg1})
	fake.describeValidDBInstanceModificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsCallCount() int {
	fake.describeValidDBInstanceModificationsMutex.RLock()
	defer fake.describeValidDBInstanceModificationsMutex.RUnlock()
	return len(fake.describeValidDBInstanceModificationsArgsForCall)
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsCalls(stub func(*rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error)) {
	fake.describeValidDBInstanceModificationsMutex.Lock()
	defer fake.describeValidDBInstanceModificationsMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsStub = stub
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsArgsForCall(i int) *rds.DescribeValidDBInstanceModificationsInput {
	fake.describeValidDBInstanceModificationsMutex.RLock()
	defer fake.describeValidDBInstanceModificationsMutex.RUnlock()
	argsForCall := fake.describeValidDBInstanceModificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsReturns(result1 *rds.DescribeValidDBInstanceModificationsOutput, result2 error) {
	fake.describeValidDBInstanceModificationsMutex.Lock()
	defer fake.describeValidDBInstanceModificationsMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsStub = nil
	fake.describeValidDBInstanceModificationsReturns = struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsReturnsOnCall(i int, result1 *rds.DescribeValidDBInstanceModificationsOutput, result2 error) {
	fake.describeValidDBInstanceModificationsMutex.Lock()
	defer fake.describeValidDBInstanceModificationsMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsStub = nil
	if fake.describeValidDBInstanceModificationsReturnsOnCall == nil {
		fake.describeValidDBInstanceModificationsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeValidDBInstanceModificationsOutput
			result2 error
		})
	}
	fake.describeValidDBInstanceModificationsReturnsOnCall[i] = struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsRequest(arg1 *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput) {
	fake.describeValidDBInstanceModificationsRequestMutex.Lock()
	ret, specificReturn := fake.describeValidDBInstanceModificationsRequestReturnsOnCall[len(fake.describeValidDBInstanceModificationsRequestArgsForCall)]
	fake.describeValidDBInstanceModificationsRequestArgsForCall = append(fake.describeValidDBInstanceModificationsRequestArgsForCall, struct {
		arg1 *rds.DescribeValidDBInstanceModificationsInput
	}{arg1})
	stub := fake.DescribeValidDBInstanceModificationsRequestStub
	fakeReturns := fake.describeValidDBInstanceModificationsRequestReturns
	fake.recordInvocation("DescribeValidDBInstanceModificationsRequest", []interface{}{arg1})
	fake.describeValidDBInstanceModificationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsRequestCallCount() int {
	fake.describeValidDBInstanceModificationsRequestMutex.RLock()
	defer fake.describeValidDBInstanceModificationsRequestMutex.RUnlock()
	return len(fake.describeValidDBInstanceModificationsRequestArgsForCall)
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsRequestCalls(stub func(*rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput)) {
	fake.describeValidDBInstanceModificationsRequestMutex.Lock()
	defer fake.describeValidDBInstanceModificationsRequestMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsRequestStub = stub
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsRequestArgsForCall(i int) *rds.DescribeValidDBInstanceModificationsInput {
	fake.describeValidDBInstanceModificationsRequestMutex.RLock()
	defer fake.describeValidDBInstanceModificationsRequestMutex.RUnlock()
	argsForCall := fake.describeValidDBInstanceModificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsRequestReturns(result1 *request.Request, result2 *rds.DescribeValidDBInstanceModificationsOutput) {
	fake.describeValidDBInstanceModificationsRequestMutex.Lock()
	defer fake.describeValidDBInstanceModificationsRequestMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsRequestStub = nil
	fake.describeValidDBInstanceModificationsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DescribeValidDBInstanceModificationsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DescribeValidDBInstanceModificationsOutput) {
	fake.describeValidDBInstanceModificationsRequestMutex.Lock()
	defer fake.describeValidDBInstanceModificationsRequestMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsRequestStub = nil
	if fake.describeValidDBInstanceModificationsRequestReturnsOnCall == nil {
		fake.describeValidDBInstanceModificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DescribeValidDBInstanceModificationsOutput
		})
	}
	fake.describeValidDBInstanceModificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DescribeValidDBInstanceModificationsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsWithContext(arg1 context.Context, arg2 *rds.DescribeValidDBInstanceModificationsInput, arg3 ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	fake.describeValidDBInstanceModificationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeValidDBInstanceModificationsWithContextReturnsOnCall[len(fake.describeValidDBInstanceModificationsWithContextArgsForCall)]
	fake.describeValidDBInstanceModificationsWithContextArgsForCall = append(fake.describeValidDBInstanceModificationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeValidDBInstanceModificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeValidDBInstanceModificationsWithContextStub
	fakeReturns := fake.describeValidDBInstanceModificationsWithContextReturns
	fake.recordInvocation("DescribeValidDBInstanceModificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeValidDBInstanceModificationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsWithContextCallCount() int {
	fake.describeValidDBInstanceModificationsWithContextMutex.RLock()
	defer fake.describeValidDBInstanceModificationsWithContextMutex.RUnlock()
	return len(fake.describeValidDBInstanceModificationsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsWithContextCalls(stub func(context.Context, *rds.DescribeValidDBInstanceModificationsInput, ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error)) {
	fake.describeValidDBInstanceModificationsWithContextMutex.Lock()
	defer fake.describeValidDBInstanceModificationsWithContextMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsWithContextStub = stub
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsWithContextArgsForCall(i int) (context.Context, *rds.DescribeValidDBInstanceModificationsInput, []request.Option) {
	fake.describeValidDBInstanceModificationsWithContextMutex.RLock()
	defer fake.describeValidDBInstanceModificationsWithContextMutex.RUnlock()
	argsForCall := fake.describeValidDBInstanceModificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsWithContextReturns(result1 *rds.DescribeValidDBInstanceModificationsOutput, result2 error) {
	fake.describeValidDBInstanceModificationsWithContextMutex.Lock()
	defer fake.describeValidDBInstanceModificationsWithContextMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsWithContextStub = nil
	fake.describeValidDBInstanceModificationsWithContextReturns = struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DescribeValidDBInstanceModificationsWithContextReturnsOnCall(i int, result1 *rds.DescribeValidDBInstanceModificationsOutput, result2 error) {
	fake.describeValidDBInstanceModificationsWithContextMutex.Lock()
	defer fake.describeValidDBInstanceModificationsWithContextMutex.Unlock()
	fake.DescribeValidDBInstanceModificationsWithContextStub = nil
	if fake.describeValidDBInstanceModificationsWithContextReturnsOnCall == nil {
		fake.describeValidDBInstanceModificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeValidDBInstanceModificationsOutput
			result2 error
		})
	}
	fake.describeValidDBInstanceModificationsWithContextReturnsOnCall[i] = struct {
		result1 *rds.DescribeValidDBInstanceModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortion(arg1 *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
	fake.downloadDBLogFilePortionMutex.Lock()
	ret, specificReturn := fake.downloadDBLogFilePortionReturnsOnCall[len(fake.downloadDBLogFilePortionArgsForCall)]
	fake.downloadDBLogFilePortionArgsForCall = append(fake.downloadDBLogFilePortionArgsForCall, struct {
		arg1 *rds.DownloadDBLogFilePortionInput
	}{arg1})
	stub := fake.DownloadDBLogFilePortionStub
	fakeReturns := fake.downloadDBLogFilePortionReturns
	fake.recordInvocation("DownloadDBLogFilePortion", []interface{}{arg1})
	fake.downloadDBLogFilePortionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionCallCount() int {
	fake.downloadDBLogFilePortionMutex.RLock()
	defer fake.downloadDBLogFilePortionMutex.RUnlock()
	return len(fake.downloadDBLogFilePortionArgsForCall)
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionCalls(stub func(*rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error)) {
	fake.downloadDBLogFilePortionMutex.Lock()
	defer fake.downloadDBLogFilePortionMutex.Unlock()
	fake.DownloadDBLogFilePortionStub = stub
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionArgsForCall(i int) *rds.DownloadDBLogFilePortionInput {
	fake.downloadDBLogFilePortionMutex.RLock()
	defer fake.downloadDBLogFilePortionMutex.RUnlock()
	argsForCall := fake.downloadDBLogFilePortionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionReturns(result1 *rds.DownloadDBLogFilePortionOutput, result2 error) {
	fake.downloadDBLogFilePortionMutex.Lock()
	defer fake.downloadDBLogFilePortionMutex.Unlock()
	fake.DownloadDBLogFilePortionStub = nil
	fake.downloadDBLogFilePortionReturns = struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionReturnsOnCall(i int, result1 *rds.DownloadDBLogFilePortionOutput, result2 error) {
	fake.downloadDBLogFilePortionMutex.Lock()
	defer fake.downloadDBLogFilePortionMutex.Unlock()
	fake.DownloadDBLogFilePortionStub = nil
	if fake.downloadDBLogFilePortionReturnsOnCall == nil {
		fake.downloadDBLogFilePortionReturnsOnCall = make(map[int]struct {
			result1 *rds.DownloadDBLogFilePortionOutput
			result2 error
		})
	}
	fake.downloadDBLogFilePortionReturnsOnCall[i] = struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPages(arg1 *rds.DownloadDBLogFilePortionInput, arg2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error {
	fake.downloadDBLogFilePortionPagesMutex.Lock()
	ret, specificReturn := fake.downloadDBLogFilePortionPagesReturnsOnCall[len(fake.downloadDBLogFilePortionPagesArgsForCall)]
	fake.downloadDBLogFilePortionPagesArgsForCall = append(fake.downloadDBLogFilePortionPagesArgsForCall, struct {
		arg1 *rds.DownloadDBLogFilePortionInput
		arg2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DownloadDBLogFilePortionPagesStub
	fakeReturns := fake.downloadDBLogFilePortionPagesReturns
	fake.recordInvocation("DownloadDBLogFilePortionPages", []interface{}{arg1, arg2})
	fake.downloadDBLogFilePortionPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesCallCount() int {
	fake.downloadDBLogFilePortionPagesMutex.RLock()
	defer fake.downloadDBLogFilePortionPagesMutex.RUnlock()
	return len(fake.downloadDBLogFilePortionPagesArgsForCall)
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesCalls(stub func(*rds.DownloadDBLogFilePortionInput, func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error) {
	fake.downloadDBLogFilePortionPagesMutex.Lock()
	defer fake.downloadDBLogFilePortionPagesMutex.Unlock()
	fake.DownloadDBLogFilePortionPagesStub = stub
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesArgsForCall(i int) (*rds.DownloadDBLogFilePortionInput, func(*rds.DownloadDBLogFilePortionOutput, bool) bool) {
	fake.downloadDBLogFilePortionPagesMutex.RLock()
	defer fake.downloadDBLogFilePortionPagesMutex.RUnlock()
	argsForCall := fake.downloadDBLogFilePortionPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesReturns(result1 error) {
	fake.downloadDBLogFilePortionPagesMutex.Lock()
	defer fake.downloadDBLogFilePortionPagesMutex.Unlock()
	fake.DownloadDBLogFilePortionPagesStub = nil
	fake.downloadDBLogFilePortionPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesReturnsOnCall(i int, result1 error) {
	fake.downloadDBLogFilePortionPagesMutex.Lock()
	defer fake.downloadDBLogFilePortionPagesMutex.Unlock()
	fake.DownloadDBLogFilePortionPagesStub = nil
	if fake.downloadDBLogFilePortionPagesReturnsOnCall == nil {
		fake.downloadDBLogFilePortionPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadDBLogFilePortionPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesWithContext(arg1 context.Context, arg2 *rds.DownloadDBLogFilePortionInput, arg3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool, arg4 ...request.Option) error {
	fake.downloadDBLogFilePortionPagesWithContextMutex.Lock()
	ret, specificReturn := fake.downloadDBLogFilePortionPagesWithContextReturnsOnCall[len(fake.downloadDBLogFilePortionPagesWithContextArgsForCall)]
	fake.downloadDBLogFilePortionPagesWithContextArgsForCall = append(fake.downloadDBLogFilePortionPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DownloadDBLogFilePortionInput
		arg3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DownloadDBLogFilePortionPagesWithContextStub
	fakeReturns := fake.downloadDBLogFilePortionPagesWithContextReturns
	fake.recordInvocation("DownloadDBLogFilePortionPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.downloadDBLogFilePortionPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesWithContextCallCount() int {
	fake.downloadDBLogFilePortionPagesWithContextMutex.RLock()
	defer fake.downloadDBLogFilePortionPagesWithContextMutex.RUnlock()
	return len(fake.downloadDBLogFilePortionPagesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesWithContextCalls(stub func(context.Context, *rds.DownloadDBLogFilePortionInput, func(*rds.DownloadDBLogFilePortionOutput, bool) bool, ...request.Option) error) {
	fake.downloadDBLogFilePortionPagesWithContextMutex.Lock()
	defer fake.downloadDBLogFilePortionPagesWithContextMutex.Unlock()
	fake.DownloadDBLogFilePortionPagesWithContextStub = stub
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesWithContextArgsForCall(i int) (context.Context, *rds.DownloadDBLogFilePortionInput, func(*rds.DownloadDBLogFilePortionOutput, bool) bool, []request.Option) {
	fake.downloadDBLogFilePortionPagesWithContextMutex.RLock()
	defer fake.downloadDBLogFilePortionPagesWithContextMutex.RUnlock()
	argsForCall := fake.downloadDBLogFilePortionPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesWithContextReturns(result1 error) {
	fake.downloadDBLogFilePortionPagesWithContextMutex.Lock()
	defer fake.downloadDBLogFilePortionPagesWithContextMutex.Unlock()
	fake.DownloadDBLogFilePortionPagesWithContextStub = nil
	fake.downloadDBLogFilePortionPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.downloadDBLogFilePortionPagesWithContextMutex.Lock()
	defer fake.downloadDBLogFilePortionPagesWithContextMutex.Unlock()
	fake.DownloadDBLogFilePortionPagesWithContextStub = nil
	if fake.downloadDBLogFilePortionPagesWithContextReturnsOnCall == nil {
		fake.downloadDBLogFilePortionPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadDBLogFilePortionPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionRequest(arg1 *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput) {
	fake.downloadDBLogFilePortionRequestMutex.Lock()
	ret, specificReturn := fake.downloadDBLogFilePortionRequestReturnsOnCall[len(fake.downloadDBLogFilePortionRequestArgsForCall)]
	fake.downloadDBLogFilePortionRequestArgsForCall = append(fake.downloadDBLogFilePortionRequestArgsForCall, struct {
		arg1 *rds.DownloadDBLogFilePortionInput
	}{arg1})
	stub := fake.DownloadDBLogFilePortionRequestStub
	fakeReturns := fake.downloadDBLogFilePortionRequestReturns
	fake.recordInvocation("DownloadDBLogFilePortionRequest", []interface{}{arg1})
	fake.downloadDBLogFilePortionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionRequestCallCount() int {
	fake.downloadDBLogFilePortionRequestMutex.RLock()
	defer fake.downloadDBLogFilePortionRequestMutex.RUnlock()
	return len(fake.downloadDBLogFilePortionRequestArgsForCall)
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionRequestCalls(stub func(*rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput)) {
	fake.downloadDBLogFilePortionRequestMutex.Lock()
	defer fake.downloadDBLogFilePortionRequestMutex.Unlock()
	fake.DownloadDBLogFilePortionRequestStub = stub
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionRequestArgsForCall(i int) *rds.DownloadDBLogFilePortionInput {
	fake.downloadDBLogFilePortionRequestMutex.RLock()
	defer fake.downloadDBLogFilePortionRequestMutex.RUnlock()
	argsForCall := fake.downloadDBLogFilePortionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionRequestReturns(result1 *request.Request, result2 *rds.DownloadDBLogFilePortionOutput) {
	fake.downloadDBLogFilePortionRequestMutex.Lock()
	defer fake.downloadDBLogFilePortionRequestMutex.Unlock()
	fake.DownloadDBLogFilePortionRequestStub = nil
	fake.downloadDBLogFilePortionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DownloadDBLogFilePortionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DownloadDBLogFilePortionOutput) {
	fake.downloadDBLogFilePortionRequestMutex.Lock()
	defer fake.downloadDBLogFilePortionRequestMutex.Unlock()
	fake.DownloadDBLogFilePortionRequestStub = nil
	if fake.downloadDBLogFilePortionRequestReturnsOnCall == nil {
		fake.downloadDBLogFilePortionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DownloadDBLogFilePortionOutput
		})
	}
	fake.downloadDBLogFilePortionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DownloadDBLogFilePortionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionWithContext(arg1 context.Context, arg2 *rds.DownloadDBLogFilePortionInput, arg3 ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {
	fake.downloadDBLogFilePortionWithContextMutex.Lock()
	ret, specificReturn := fake.downloadDBLogFilePortionWithContextReturnsOnCall[len(fake.downloadDBLogFilePortionWithContextArgsForCall)]
	fake.downloadDBLogFilePortionWithContextArgsForCall = append(fake.downloadDBLogFilePortionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DownloadDBLogFilePortionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DownloadDBLogFilePortionWithContextStub
	fakeReturns := fake.downloadDBLogFilePortionWithContextReturns
	fake.recordInvocation("DownloadDBLogFilePortionWithContext", []interface{}{arg1, arg2, arg3})
	fake.downloadDBLogFilePortionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionWithContextCallCount() int {
	fake.downloadDBLogFilePortionWithContextMutex.RLock()
	defer fake.downloadDBLogFilePortionWithContextMutex.RUnlock()
	return len(fake.downloadDBLogFilePortionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionWithContextCalls(stub func(context.Context, *rds.DownloadDBLogFilePortionInput, ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error)) {
	fake.downloadDBLogFilePortionWithContextMutex.Lock()
	defer fake.downloadDBLogFilePortionWithContextMutex.Unlock()
	fake.DownloadDBLogFilePortionWithContextStub = stub
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionWithContextArgsForCall(i int) (context.Context, *rds.DownloadDBLogFilePortionInput, []request.Option) {
	fake.downloadDBLogFilePortionWithContextMutex.RLock()
	defer fake.downloadDBLogFilePortionWithContextMutex.RUnlock()
	argsForCall := fake.downloadDBLogFilePortionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionWithContextReturns(result1 *rds.DownloadDBLogFilePortionOutput, result2 error) {
	fake.downloadDBLogFilePortionWithContextMutex.Lock()
	defer fake.downloadDBLogFilePortionWithContextMutex.Unlock()
	fake.DownloadDBLogFilePortionWithContextStub = nil
	fake.downloadDBLogFilePortionWithContextReturns = struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) DownloadDBLogFilePortionWithContextReturnsOnCall(i int, result1 *rds.DownloadDBLogFilePortionOutput, result2 error) {
	fake.downloadDBLogFilePortionWithContextMutex.Lock()
	defer fake.downloadDBLogFilePortionWithContextMutex.Unlock()
	fake.DownloadDBLogFilePortionWithContextStub = nil
	if fake.downloadDBLogFilePortionWithContextReturnsOnCall == nil {
		fake.downloadDBLogFilePortionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DownloadDBLogFilePortionOutput
			result2 error
		})
	}
	fake.downloadDBLogFilePortionWithContextReturnsOnCall[i] = struct {
		result1 *rds.DownloadDBLogFilePortionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) FailoverDBCluster(arg1 *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
	fake.failoverDBClusterMutex.Lock()
	ret, specificReturn := fake.failoverDBClusterReturnsOnCall[len(fake.failoverDBClusterArgsForCall)]
	fake.failoverDBClusterArgsForCall = append(fake.failoverDBClusterArgsForCall, struct {
		arg1 *rds.FailoverDBClusterInput
	}{arg1})
	stub := fake.FailoverDBClusterStub
	fakeReturns := fake.failoverDBClusterReturns
	fake.recordInvocation("FailoverDBCluster", []interface{}{arg1})
	fake.failoverDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) FailoverDBClusterCallCount() int {
	fake.failoverDBClusterMutex.RLock()
	defer fake.failoverDBClusterMutex.RUnlock()
	return len(fake.failoverDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) FailoverDBClusterCalls(stub func(*rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error)) {
	fake.failoverDBClusterMutex.Lock()
	defer fake.failoverDBClusterMutex.Unlock()
	fake.FailoverDBClusterStub = stub
}

func (fake *FakeRDSAPI) FailoverDBClusterArgsForCall(i int) *rds.FailoverDBClusterInput {
	fake.failoverDBClusterMutex.RLock()
	defer fake.failoverDBClusterMutex.RUnlock()
	argsForCall := fake.failoverDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) FailoverDBClusterReturns(result1 *rds.FailoverDBClusterOutput, result2 error) {
	fake.failoverDBClusterMutex.Lock()
	defer fake.failoverDBClusterMutex.Unlock()
	fake.FailoverDBClusterStub = nil
	fake.failoverDBClusterReturns = struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) FailoverDBClusterReturnsOnCall(i int, result1 *rds.FailoverDBClusterOutput, result2 error) {
	fake.failoverDBClusterMutex.Lock()
	defer fake.failoverDBClusterMutex.Unlock()
	fake.FailoverDBClusterStub = nil
	if fake.failoverDBClusterReturnsOnCall == nil {
		fake.failoverDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.FailoverDBClusterOutput
			result2 error
		})
	}
	fake.failoverDBClusterReturnsOnCall[i] = struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) FailoverDBClusterRequest(arg1 *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput) {
	fake.failoverDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.failoverDBClusterRequestReturnsOnCall[len(fake.failoverDBClusterRequestArgsForCall)]
	fake.failoverDBClusterRequestArgsForCall = append(fake.failoverDBClusterRequestArgsForCall, struct {
		arg1 *rds.FailoverDBClusterInput
	}{arg1})
	stub := fake.FailoverDBClusterRequestStub
	fakeReturns := fake.failoverDBClusterRequestReturns
	fake.recordInvocation("FailoverDBClusterRequest", []interface{}{arg1})
	fake.failoverDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) FailoverDBClusterRequestCallCount() int {
	fake.failoverDBClusterRequestMutex.RLock()
	defer fake.failoverDBClusterRequestMutex.RUnlock()
	return len(fake.failoverDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) FailoverDBClusterRequestCalls(stub func(*rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput)) {
	fake.failoverDBClusterRequestMutex.Lock()
	defer fake.failoverDBClusterRequestMutex.Unlock()
	fake.FailoverDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) FailoverDBClusterRequestArgsForCall(i int) *rds.FailoverDBClusterInput {
	fake.failoverDBClusterRequestMutex.RLock()
	defer fake.failoverDBClusterRequestMutex.RUnlock()
	argsForCall := fake.failoverDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) FailoverDBClusterRequestReturns(result1 *request.Request, result2 *rds.FailoverDBClusterOutput) {
	fake.failoverDBClusterRequestMutex.Lock()
	defer fake.failoverDBClusterRequestMutex.Unlock()
	fake.FailoverDBClusterRequestStub = nil
	fake.failoverDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.FailoverDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) FailoverDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.FailoverDBClusterOutput) {
	fake.failoverDBClusterRequestMutex.Lock()
	defer fake.failoverDBClusterRequestMutex.Unlock()
	fake.FailoverDBClusterRequestStub = nil
	if fake.failoverDBClusterRequestReturnsOnCall == nil {
		fake.failoverDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.FailoverDBClusterOutput
		})
	}
	fake.failoverDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.FailoverDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) FailoverDBClusterWithContext(arg1 context.Context, arg2 *rds.FailoverDBClusterInput, arg3 ...request.Option) (*rds.FailoverDBClusterOutput, error) {
	fake.failoverDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.failoverDBClusterWithContextReturnsOnCall[len(fake.failoverDBClusterWithContextArgsForCall)]
	fake.failoverDBClusterWithContextArgsForCall = append(fake.failoverDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.FailoverDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.FailoverDBClusterWithContextStub
	fakeReturns := fake.failoverDBClusterWithContextReturns
	fake.recordInvocation("FailoverDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.failoverDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) FailoverDBClusterWithContextCallCount() int {
	fake.failoverDBClusterWithContextMutex.RLock()
	defer fake.failoverDBClusterWithContextMutex.RUnlock()
	return len(fake.failoverDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) FailoverDBClusterWithContextCalls(stub func(context.Context, *rds.FailoverDBClusterInput, ...request.Option) (*rds.FailoverDBClusterOutput, error)) {
	fake.failoverDBClusterWithContextMutex.Lock()
	defer fake.failoverDBClusterWithContextMutex.Unlock()
	fake.FailoverDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) FailoverDBClusterWithContextArgsForCall(i int) (context.Context, *rds.FailoverDBClusterInput, []request.Option) {
	fake.failoverDBClusterWithContextMutex.RLock()
	defer fake.failoverDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.failoverDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) FailoverDBClusterWithContextReturns(result1 *rds.FailoverDBClusterOutput, result2 error) {
	fake.failoverDBClusterWithContextMutex.Lock()
	defer fake.failoverDBClusterWithContextMutex.Unlock()
	fake.FailoverDBClusterWithContextStub = nil
	fake.failoverDBClusterWithContextReturns = struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) FailoverDBClusterWithContextReturnsOnCall(i int, result1 *rds.FailoverDBClusterOutput, result2 error) {
	fake.failoverDBClusterWithContextMutex.Lock()
	defer fake.failoverDBClusterWithContextMutex.Unlock()
	fake.FailoverDBClusterWithContextStub = nil
	if fake.failoverDBClusterWithContextReturnsOnCall == nil {
		fake.failoverDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.FailoverDBClusterOutput
			result2 error
		})
	}
	fake.failoverDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.FailoverDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ImportInstallationMedia(arg1 *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error) {
	fake.importInstallationMediaMutex.Lock()
	ret, specificReturn := fake.importInstallationMediaReturnsOnCall[len(fake.importInstallationMediaArgsForCall)]
	fake.importInstallationMediaArgsForCall = append(fake.importInstallationMediaArgsForCall, struct {
		arg1 *rds.ImportInstallationMediaInput
	}{arg1})
	stub := fake.ImportInstallationMediaStub
	fakeReturns := fake.importInstallationMediaReturns
	fake.recordInvocation("ImportInstallationMedia", []interface{}{arg1})
	fake.importInstallationMediaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ImportInstallationMediaCallCount() int {
	fake.importInstallationMediaMutex.RLock()
	defer fake.importInstallationMediaMutex.RUnlock()
	return len(fake.importInstallationMediaArgsForCall)
}

func (fake *FakeRDSAPI) ImportInstallationMediaCalls(stub func(*rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error)) {
	fake.importInstallationMediaMutex.Lock()
	defer fake.importInstallationMediaMutex.Unlock()
	fake.ImportInstallationMediaStub = stub
}

func (fake *FakeRDSAPI) ImportInstallationMediaArgsForCall(i int) *rds.ImportInstallationMediaInput {
	fake.importInstallationMediaMutex.RLock()
	defer fake.importInstallationMediaMutex.RUnlock()
	argsForCall := fake.importInstallationMediaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ImportInstallationMediaReturns(result1 *rds.ImportInstallationMediaOutput, result2 error) {
	fake.importInstallationMediaMutex.Lock()
	defer fake.importInstallationMediaMutex.Unlock()
	fake.ImportInstallationMediaStub = nil
	fake.importInstallationMediaReturns = struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ImportInstallationMediaReturnsOnCall(i int, result1 *rds.ImportInstallationMediaOutput, result2 error) {
	fake.importInstallationMediaMutex.Lock()
	defer fake.importInstallationMediaMutex.Unlock()
	fake.ImportInstallationMediaStub = nil
	if fake.importInstallationMediaReturnsOnCall == nil {
		fake.importInstallationMediaReturnsOnCall = make(map[int]struct {
			result1 *rds.ImportInstallationMediaOutput
			result2 error
		})
	}
	fake.importInstallationMediaReturnsOnCall[i] = struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ImportInstallationMediaRequest(arg1 *rds.ImportInstallationMediaInput) (*request.Request, *rds.ImportInstallationMediaOutput) {
	fake.importInstallationMediaRequestMutex.Lock()
	ret, specificReturn := fake.importInstallationMediaRequestReturnsOnCall[len(fake.importInstallationMediaRequestArgsForCall)]
	fake.importInstallationMediaRequestArgsForCall = append(fake.importInstallationMediaRequestArgsForCall, struct {
		arg1 *rds.ImportInstallationMediaInput
	}{arg1})
	stub := fake.ImportInstallationMediaRequestStub
	fakeReturns := fake.importInstallationMediaRequestReturns
	fake.recordInvocation("ImportInstallationMediaRequest", []interface{}{arg1})
	fake.importInstallationMediaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ImportInstallationMediaRequestCallCount() int {
	fake.importInstallationMediaRequestMutex.RLock()
	defer fake.importInstallationMediaRequestMutex.RUnlock()
	return len(fake.importInstallationMediaRequestArgsForCall)
}

func (fake *FakeRDSAPI) ImportInstallationMediaRequestCalls(stub func(*rds.ImportInstallationMediaInput) (*request.Request, *rds.ImportInstallationMediaOutput)) {
	fake.importInstallationMediaRequestMutex.Lock()
	defer fake.importInstallationMediaRequestMutex.Unlock()
	fake.ImportInstallationMediaRequestStub = stub
}

func (fake *FakeRDSAPI) ImportInstallationMediaRequestArgsForCall(i int) *rds.ImportInstallationMediaInput {
	fake.importInstallationMediaRequestMutex.RLock()
	defer fake.importInstallationMediaRequestMutex.RUnlock()
	argsForCall := fake.importInstallationMediaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ImportInstallationMediaRequestReturns(result1 *request.Request, result2 *rds.ImportInstallationMediaOutput) {
	fake.importInstallationMediaRequestMutex.Lock()
	defer fake.importInstallationMediaRequestMutex.Unlock()
	fake.ImportInstallationMediaRequestStub = nil
	fake.importInstallationMediaRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ImportInstallationMediaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ImportInstallationMediaRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ImportInstallationMediaOutput) {
	fake.importInstallationMediaRequestMutex.Lock()
	defer fake.importInstallationMediaRequestMutex.Unlock()
	fake.ImportInstallationMediaRequestStub = nil
	if fake.importInstallationMediaRequestReturnsOnCall == nil {
		fake.importInstallationMediaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ImportInstallationMediaOutput
		})
	}
	fake.importInstallationMediaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ImportInstallationMediaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ImportInstallationMediaWithContext(arg1 context.Context, arg2 *rds.ImportInstallationMediaInput, arg3 ...request.Option) (*rds.ImportInstallationMediaOutput, error) {
	fake.importInstallationMediaWithContextMutex.Lock()
	ret, specificReturn := fake.importInstallationMediaWithContextReturnsOnCall[len(fake.importInstallationMediaWithContextArgsForCall)]
	fake.importInstallationMediaWithContextArgsForCall = append(fake.importInstallationMediaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ImportInstallationMediaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ImportInstallationMediaWithContextStub
	fakeReturns := fake.importInstallationMediaWithContextReturns
	fake.recordInvocation("ImportInstallationMediaWithContext", []interface{}{arg1, arg2, arg3})
	fake.importInstallationMediaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ImportInstallationMediaWithContextCallCount() int {
	fake.importInstallationMediaWithContextMutex.RLock()
	defer fake.importInstallationMediaWithContextMutex.RUnlock()
	return len(fake.importInstallationMediaWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ImportInstallationMediaWithContextCalls(stub func(context.Context, *rds.ImportInstallationMediaInput, ...request.Option) (*rds.ImportInstallationMediaOutput, error)) {
	fake.importInstallationMediaWithContextMutex.Lock()
	defer fake.importInstallationMediaWithContextMutex.Unlock()
	fake.ImportInstallationMediaWithContextStub = stub
}

func (fake *FakeRDSAPI) ImportInstallationMediaWithContextArgsForCall(i int) (context.Context, *rds.ImportInstallationMediaInput, []request.Option) {
	fake.importInstallationMediaWithContextMutex.RLock()
	defer fake.importInstallationMediaWithContextMutex.RUnlock()
	argsForCall := fake.importInstallationMediaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ImportInstallationMediaWithContextReturns(result1 *rds.ImportInstallationMediaOutput, result2 error) {
	fake.importInstallationMediaWithContextMutex.Lock()
	defer fake.importInstallationMediaWithContextMutex.Unlock()
	fake.ImportInstallationMediaWithContextStub = nil
	fake.importInstallationMediaWithContextReturns = struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ImportInstallationMediaWithContextReturnsOnCall(i int, result1 *rds.ImportInstallationMediaOutput, result2 error) {
	fake.importInstallationMediaWithContextMutex.Lock()
	defer fake.importInstallationMediaWithContextMutex.Unlock()
	fake.ImportInstallationMediaWithContextStub = nil
	if fake.importInstallationMediaWithContextReturnsOnCall == nil {
		fake.importInstallationMediaWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ImportInstallationMediaOutput
			result2 error
		})
	}
	fake.importInstallationMediaWithContextReturnsOnCall[i] = struct {
		result1 *rds.ImportInstallationMediaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ListTagsForResource(arg1 *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *rds.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceStub
	fakeReturns := fake.listTagsForResourceReturns
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeRDSAPI) ListTagsForResourceCalls(stub func(*rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeRDSAPI) ListTagsForResourceArgsForCall(i int) *rds.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ListTagsForResourceReturns(result1 *rds.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ListTagsForResourceReturnsOnCall(i int, result1 *rds.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *rds.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ListTagsForResourceRequest(arg1 *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *rds.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceRequestStub
	fakeReturns := fake.listTagsForResourceRequestReturns
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeRDSAPI) ListTagsForResourceRequestCalls(stub func(*rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeRDSAPI) ListTagsForResourceRequestArgsForCall(i int) *rds.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *rds.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ListTagsForResourceWithContext(arg1 context.Context, arg2 *rds.ListTagsForResourceInput, arg3 ...request.Option) (*rds.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ListTagsForResourceWithContextCalls(stub func(context.Context, *rds.ListTagsForResourceInput, ...request.Option) (*rds.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeRDSAPI) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *rds.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ListTagsForResourceWithContextReturns(result1 *rds.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *rds.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *rds.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCertificates(arg1 *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
	fake.modifyCertificatesMutex.Lock()
	ret, specificReturn := fake.modifyCertificatesReturnsOnCall[len(fake.modifyCertificatesArgsForCall)]
	fake.modifyCertificatesArgsForCall = append(fake.modifyCertificatesArgsForCall, struct {
		arg1 *rds.ModifyCertificatesInput
	}{arg1})
	stub := fake.ModifyCertificatesStub
	fakeReturns := fake.modifyCertificatesReturns
	fake.recordInvocation("ModifyCertificates", []interface{}{arg1})
	fake.modifyCertificatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyCertificatesCallCount() int {
	fake.modifyCertificatesMutex.RLock()
	defer fake.modifyCertificatesMutex.RUnlock()
	return len(fake.modifyCertificatesArgsForCall)
}

func (fake *FakeRDSAPI) ModifyCertificatesCalls(stub func(*rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error)) {
	fake.modifyCertificatesMutex.Lock()
	defer fake.modifyCertificatesMutex.Unlock()
	fake.ModifyCertificatesStub = stub
}

func (fake *FakeRDSAPI) ModifyCertificatesArgsForCall(i int) *rds.ModifyCertificatesInput {
	fake.modifyCertificatesMutex.RLock()
	defer fake.modifyCertificatesMutex.RUnlock()
	argsForCall := fake.modifyCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyCertificatesReturns(result1 *rds.ModifyCertificatesOutput, result2 error) {
	fake.modifyCertificatesMutex.Lock()
	defer fake.modifyCertificatesMutex.Unlock()
	fake.ModifyCertificatesStub = nil
	fake.modifyCertificatesReturns = struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCertificatesReturnsOnCall(i int, result1 *rds.ModifyCertificatesOutput, result2 error) {
	fake.modifyCertificatesMutex.Lock()
	defer fake.modifyCertificatesMutex.Unlock()
	fake.ModifyCertificatesStub = nil
	if fake.modifyCertificatesReturnsOnCall == nil {
		fake.modifyCertificatesReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyCertificatesOutput
			result2 error
		})
	}
	fake.modifyCertificatesReturnsOnCall[i] = struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCertificatesRequest(arg1 *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput) {
	fake.modifyCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.modifyCertificatesRequestReturnsOnCall[len(fake.modifyCertificatesRequestArgsForCall)]
	fake.modifyCertificatesRequestArgsForCall = append(fake.modifyCertificatesRequestArgsForCall, struct {
		arg1 *rds.ModifyCertificatesInput
	}{arg1})
	stub := fake.ModifyCertificatesRequestStub
	fakeReturns := fake.modifyCertificatesRequestReturns
	fake.recordInvocation("ModifyCertificatesRequest", []interface{}{arg1})
	fake.modifyCertificatesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyCertificatesRequestCallCount() int {
	fake.modifyCertificatesRequestMutex.RLock()
	defer fake.modifyCertificatesRequestMutex.RUnlock()
	return len(fake.modifyCertificatesRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyCertificatesRequestCalls(stub func(*rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput)) {
	fake.modifyCertificatesRequestMutex.Lock()
	defer fake.modifyCertificatesRequestMutex.Unlock()
	fake.ModifyCertificatesRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyCertificatesRequestArgsForCall(i int) *rds.ModifyCertificatesInput {
	fake.modifyCertificatesRequestMutex.RLock()
	defer fake.modifyCertificatesRequestMutex.RUnlock()
	argsForCall := fake.modifyCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyCertificatesRequestReturns(result1 *request.Request, result2 *rds.ModifyCertificatesOutput) {
	fake.modifyCertificatesRequestMutex.Lock()
	defer fake.modifyCertificatesRequestMutex.Unlock()
	fake.ModifyCertificatesRequestStub = nil
	fake.modifyCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyCertificatesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyCertificatesOutput) {
	fake.modifyCertificatesRequestMutex.Lock()
	defer fake.modifyCertificatesRequestMutex.Unlock()
	fake.ModifyCertificatesRequestStub = nil
	if fake.modifyCertificatesRequestReturnsOnCall == nil {
		fake.modifyCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyCertificatesOutput
		})
	}
	fake.modifyCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyCertificatesOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCertificatesWithContext(arg1 context.Context, arg2 *rds.ModifyCertificatesInput, arg3 ...request.Option) (*rds.ModifyCertificatesOutput, error) {
	fake.modifyCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCertificatesWithContextReturnsOnCall[len(fake.modifyCertificatesWithContextArgsForCall)]
	fake.modifyCertificatesWithContextArgsForCall = append(fake.modifyCertificatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyCertificatesWithContextStub
	fakeReturns := fake.modifyCertificatesWithContextReturns
	fake.recordInvocation("ModifyCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCertificatesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyCertificatesWithContextCallCount() int {
	fake.modifyCertificatesWithContextMutex.RLock()
	defer fake.modifyCertificatesWithContextMutex.RUnlock()
	return len(fake.modifyCertificatesWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyCertificatesWithContextCalls(stub func(context.Context, *rds.ModifyCertificatesInput, ...request.Option) (*rds.ModifyCertificatesOutput, error)) {
	fake.modifyCertificatesWithContextMutex.Lock()
	defer fake.modifyCertificatesWithContextMutex.Unlock()
	fake.ModifyCertificatesWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyCertificatesWithContextArgsForCall(i int) (context.Context, *rds.ModifyCertificatesInput, []request.Option) {
	fake.modifyCertificatesWithContextMutex.RLock()
	defer fake.modifyCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.modifyCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyCertificatesWithContextReturns(result1 *rds.ModifyCertificatesOutput, result2 error) {
	fake.modifyCertificatesWithContextMutex.Lock()
	defer fake.modifyCertificatesWithContextMutex.Unlock()
	fake.ModifyCertificatesWithContextStub = nil
	fake.modifyCertificatesWithContextReturns = struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCertificatesWithContextReturnsOnCall(i int, result1 *rds.ModifyCertificatesOutput, result2 error) {
	fake.modifyCertificatesWithContextMutex.Lock()
	defer fake.modifyCertificatesWithContextMutex.Unlock()
	fake.ModifyCertificatesWithContextStub = nil
	if fake.modifyCertificatesWithContextReturnsOnCall == nil {
		fake.modifyCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyCertificatesOutput
			result2 error
		})
	}
	fake.modifyCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacity(arg1 *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	fake.modifyCurrentDBClusterCapacityMutex.Lock()
	ret, specificReturn := fake.modifyCurrentDBClusterCapacityReturnsOnCall[len(fake.modifyCurrentDBClusterCapacityArgsForCall)]
	fake.modifyCurrentDBClusterCapacityArgsForCall = append(fake.modifyCurrentDBClusterCapacityArgsForCall, struct {
		arg1 *rds.ModifyCurrentDBClusterCapacityInput
	}{arg1})
	stub := fake.ModifyCurrentDBClusterCapacityStub
	fakeReturns := fake.modifyCurrentDBClusterCapacityReturns
	fake.recordInvocation("ModifyCurrentDBClusterCapacity", []interface{}{arg1})
	fake.modifyCurrentDBClusterCapacityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityCallCount() int {
	fake.modifyCurrentDBClusterCapacityMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityMutex.RUnlock()
	return len(fake.modifyCurrentDBClusterCapacityArgsForCall)
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityCalls(stub func(*rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error)) {
	fake.modifyCurrentDBClusterCapacityMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityStub = stub
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityArgsForCall(i int) *rds.ModifyCurrentDBClusterCapacityInput {
	fake.modifyCurrentDBClusterCapacityMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityMutex.RUnlock()
	argsForCall := fake.modifyCurrentDBClusterCapacityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityReturns(result1 *rds.ModifyCurrentDBClusterCapacityOutput, result2 error) {
	fake.modifyCurrentDBClusterCapacityMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityStub = nil
	fake.modifyCurrentDBClusterCapacityReturns = struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityReturnsOnCall(i int, result1 *rds.ModifyCurrentDBClusterCapacityOutput, result2 error) {
	fake.modifyCurrentDBClusterCapacityMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityStub = nil
	if fake.modifyCurrentDBClusterCapacityReturnsOnCall == nil {
		fake.modifyCurrentDBClusterCapacityReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyCurrentDBClusterCapacityOutput
			result2 error
		})
	}
	fake.modifyCurrentDBClusterCapacityReturnsOnCall[i] = struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityRequest(arg1 *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput) {
	fake.modifyCurrentDBClusterCapacityRequestMutex.Lock()
	ret, specificReturn := fake.modifyCurrentDBClusterCapacityRequestReturnsOnCall[len(fake.modifyCurrentDBClusterCapacityRequestArgsForCall)]
	fake.modifyCurrentDBClusterCapacityRequestArgsForCall = append(fake.modifyCurrentDBClusterCapacityRequestArgsForCall, struct {
		arg1 *rds.ModifyCurrentDBClusterCapacityInput
	}{arg1})
	stub := fake.ModifyCurrentDBClusterCapacityRequestStub
	fakeReturns := fake.modifyCurrentDBClusterCapacityRequestReturns
	fake.recordInvocation("ModifyCurrentDBClusterCapacityRequest", []interface{}{arg1})
	fake.modifyCurrentDBClusterCapacityRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityRequestCallCount() int {
	fake.modifyCurrentDBClusterCapacityRequestMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityRequestMutex.RUnlock()
	return len(fake.modifyCurrentDBClusterCapacityRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityRequestCalls(stub func(*rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput)) {
	fake.modifyCurrentDBClusterCapacityRequestMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityRequestMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityRequestArgsForCall(i int) *rds.ModifyCurrentDBClusterCapacityInput {
	fake.modifyCurrentDBClusterCapacityRequestMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityRequestMutex.RUnlock()
	argsForCall := fake.modifyCurrentDBClusterCapacityRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityRequestReturns(result1 *request.Request, result2 *rds.ModifyCurrentDBClusterCapacityOutput) {
	fake.modifyCurrentDBClusterCapacityRequestMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityRequestMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityRequestStub = nil
	fake.modifyCurrentDBClusterCapacityRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyCurrentDBClusterCapacityOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyCurrentDBClusterCapacityOutput) {
	fake.modifyCurrentDBClusterCapacityRequestMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityRequestMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityRequestStub = nil
	if fake.modifyCurrentDBClusterCapacityRequestReturnsOnCall == nil {
		fake.modifyCurrentDBClusterCapacityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyCurrentDBClusterCapacityOutput
		})
	}
	fake.modifyCurrentDBClusterCapacityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyCurrentDBClusterCapacityOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityWithContext(arg1 context.Context, arg2 *rds.ModifyCurrentDBClusterCapacityInput, arg3 ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	fake.modifyCurrentDBClusterCapacityWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCurrentDBClusterCapacityWithContextReturnsOnCall[len(fake.modifyCurrentDBClusterCapacityWithContextArgsForCall)]
	fake.modifyCurrentDBClusterCapacityWithContextArgsForCall = append(fake.modifyCurrentDBClusterCapacityWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyCurrentDBClusterCapacityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyCurrentDBClusterCapacityWithContextStub
	fakeReturns := fake.modifyCurrentDBClusterCapacityWithContextReturns
	fake.recordInvocation("ModifyCurrentDBClusterCapacityWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCurrentDBClusterCapacityWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityWithContextCallCount() int {
	fake.modifyCurrentDBClusterCapacityWithContextMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityWithContextMutex.RUnlock()
	return len(fake.modifyCurrentDBClusterCapacityWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityWithContextCalls(stub func(context.Context, *rds.ModifyCurrentDBClusterCapacityInput, ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error)) {
	fake.modifyCurrentDBClusterCapacityWithContextMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityWithContextMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityWithContextArgsForCall(i int) (context.Context, *rds.ModifyCurrentDBClusterCapacityInput, []request.Option) {
	fake.modifyCurrentDBClusterCapacityWithContextMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityWithContextMutex.RUnlock()
	argsForCall := fake.modifyCurrentDBClusterCapacityWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityWithContextReturns(result1 *rds.ModifyCurrentDBClusterCapacityOutput, result2 error) {
	fake.modifyCurrentDBClusterCapacityWithContextMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityWithContextMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityWithContextStub = nil
	fake.modifyCurrentDBClusterCapacityWithContextReturns = struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyCurrentDBClusterCapacityWithContextReturnsOnCall(i int, result1 *rds.ModifyCurrentDBClusterCapacityOutput, result2 error) {
	fake.modifyCurrentDBClusterCapacityWithContextMutex.Lock()
	defer fake.modifyCurrentDBClusterCapacityWithContextMutex.Unlock()
	fake.ModifyCurrentDBClusterCapacityWithContextStub = nil
	if fake.modifyCurrentDBClusterCapacityWithContextReturnsOnCall == nil {
		fake.modifyCurrentDBClusterCapacityWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyCurrentDBClusterCapacityOutput
			result2 error
		})
	}
	fake.modifyCurrentDBClusterCapacityWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyCurrentDBClusterCapacityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBCluster(arg1 *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
	fake.modifyDBClusterMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterReturnsOnCall[len(fake.modifyDBClusterArgsForCall)]
	fake.modifyDBClusterArgsForCall = append(fake.modifyDBClusterArgsForCall, struct {
		arg1 *rds.ModifyDBClusterInput
	}{arg1})
	stub := fake.ModifyDBClusterStub
	fakeReturns := fake.modifyDBClusterReturns
	fake.recordInvocation("ModifyDBCluster", []interface{}{arg1})
	fake.modifyDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterCallCount() int {
	fake.modifyDBClusterMutex.RLock()
	defer fake.modifyDBClusterMutex.RUnlock()
	return len(fake.modifyDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterCalls(stub func(*rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error)) {
	fake.modifyDBClusterMutex.Lock()
	defer fake.modifyDBClusterMutex.Unlock()
	fake.ModifyDBClusterStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterArgsForCall(i int) *rds.ModifyDBClusterInput {
	fake.modifyDBClusterMutex.RLock()
	defer fake.modifyDBClusterMutex.RUnlock()
	argsForCall := fake.modifyDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterReturns(result1 *rds.ModifyDBClusterOutput, result2 error) {
	fake.modifyDBClusterMutex.Lock()
	defer fake.modifyDBClusterMutex.Unlock()
	fake.ModifyDBClusterStub = nil
	fake.modifyDBClusterReturns = struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterReturnsOnCall(i int, result1 *rds.ModifyDBClusterOutput, result2 error) {
	fake.modifyDBClusterMutex.Lock()
	defer fake.modifyDBClusterMutex.Unlock()
	fake.ModifyDBClusterStub = nil
	if fake.modifyDBClusterReturnsOnCall == nil {
		fake.modifyDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBClusterOutput
			result2 error
		})
	}
	fake.modifyDBClusterReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpoint(arg1 *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
	fake.modifyDBClusterEndpointMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterEndpointReturnsOnCall[len(fake.modifyDBClusterEndpointArgsForCall)]
	fake.modifyDBClusterEndpointArgsForCall = append(fake.modifyDBClusterEndpointArgsForCall, struct {
		arg1 *rds.ModifyDBClusterEndpointInput
	}{arg1})
	stub := fake.ModifyDBClusterEndpointStub
	fakeReturns := fake.modifyDBClusterEndpointReturns
	fake.recordInvocation("ModifyDBClusterEndpoint", []interface{}{arg1})
	fake.modifyDBClusterEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointCallCount() int {
	fake.modifyDBClusterEndpointMutex.RLock()
	defer fake.modifyDBClusterEndpointMutex.RUnlock()
	return len(fake.modifyDBClusterEndpointArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointCalls(stub func(*rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error)) {
	fake.modifyDBClusterEndpointMutex.Lock()
	defer fake.modifyDBClusterEndpointMutex.Unlock()
	fake.ModifyDBClusterEndpointStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointArgsForCall(i int) *rds.ModifyDBClusterEndpointInput {
	fake.modifyDBClusterEndpointMutex.RLock()
	defer fake.modifyDBClusterEndpointMutex.RUnlock()
	argsForCall := fake.modifyDBClusterEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointReturns(result1 *rds.ModifyDBClusterEndpointOutput, result2 error) {
	fake.modifyDBClusterEndpointMutex.Lock()
	defer fake.modifyDBClusterEndpointMutex.Unlock()
	fake.ModifyDBClusterEndpointStub = nil
	fake.modifyDBClusterEndpointReturns = struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointReturnsOnCall(i int, result1 *rds.ModifyDBClusterEndpointOutput, result2 error) {
	fake.modifyDBClusterEndpointMutex.Lock()
	defer fake.modifyDBClusterEndpointMutex.Unlock()
	fake.ModifyDBClusterEndpointStub = nil
	if fake.modifyDBClusterEndpointReturnsOnCall == nil {
		fake.modifyDBClusterEndpointReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBClusterEndpointOutput
			result2 error
		})
	}
	fake.modifyDBClusterEndpointReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointRequest(arg1 *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput) {
	fake.modifyDBClusterEndpointRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterEndpointRequestReturnsOnCall[len(fake.modifyDBClusterEndpointRequestArgsForCall)]
	fake.modifyDBClusterEndpointRequestArgsForCall = append(fake.modifyDBClusterEndpointRequestArgsForCall, struct {
		arg1 *rds.ModifyDBClusterEndpointInput
	}{arg1})
	stub := fake.ModifyDBClusterEndpointRequestStub
	fakeReturns := fake.modifyDBClusterEndpointRequestReturns
	fake.recordInvocation("ModifyDBClusterEndpointRequest", []interface{}{arg1})
	fake.modifyDBClusterEndpointRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointRequestCallCount() int {
	fake.modifyDBClusterEndpointRequestMutex.RLock()
	defer fake.modifyDBClusterEndpointRequestMutex.RUnlock()
	return len(fake.modifyDBClusterEndpointRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointRequestCalls(stub func(*rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput)) {
	fake.modifyDBClusterEndpointRequestMutex.Lock()
	defer fake.modifyDBClusterEndpointRequestMutex.Unlock()
	fake.ModifyDBClusterEndpointRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointRequestArgsForCall(i int) *rds.ModifyDBClusterEndpointInput {
	fake.modifyDBClusterEndpointRequestMutex.RLock()
	defer fake.modifyDBClusterEndpointRequestMutex.RUnlock()
	argsForCall := fake.modifyDBClusterEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointRequestReturns(result1 *request.Request, result2 *rds.ModifyDBClusterEndpointOutput) {
	fake.modifyDBClusterEndpointRequestMutex.Lock()
	defer fake.modifyDBClusterEndpointRequestMutex.Unlock()
	fake.ModifyDBClusterEndpointRequestStub = nil
	fake.modifyDBClusterEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterEndpointOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBClusterEndpointOutput) {
	fake.modifyDBClusterEndpointRequestMutex.Lock()
	defer fake.modifyDBClusterEndpointRequestMutex.Unlock()
	fake.ModifyDBClusterEndpointRequestStub = nil
	if fake.modifyDBClusterEndpointRequestReturnsOnCall == nil {
		fake.modifyDBClusterEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBClusterEndpointOutput
		})
	}
	fake.modifyDBClusterEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterEndpointOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointWithContext(arg1 context.Context, arg2 *rds.ModifyDBClusterEndpointInput, arg3 ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {
	fake.modifyDBClusterEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterEndpointWithContextReturnsOnCall[len(fake.modifyDBClusterEndpointWithContextArgsForCall)]
	fake.modifyDBClusterEndpointWithContextArgsForCall = append(fake.modifyDBClusterEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBClusterEndpointWithContextStub
	fakeReturns := fake.modifyDBClusterEndpointWithContextReturns
	fake.recordInvocation("ModifyDBClusterEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBClusterEndpointWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointWithContextCallCount() int {
	fake.modifyDBClusterEndpointWithContextMutex.RLock()
	defer fake.modifyDBClusterEndpointWithContextMutex.RUnlock()
	return len(fake.modifyDBClusterEndpointWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointWithContextCalls(stub func(context.Context, *rds.ModifyDBClusterEndpointInput, ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error)) {
	fake.modifyDBClusterEndpointWithContextMutex.Lock()
	defer fake.modifyDBClusterEndpointWithContextMutex.Unlock()
	fake.ModifyDBClusterEndpointWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBClusterEndpointInput, []request.Option) {
	fake.modifyDBClusterEndpointWithContextMutex.RLock()
	defer fake.modifyDBClusterEndpointWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBClusterEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointWithContextReturns(result1 *rds.ModifyDBClusterEndpointOutput, result2 error) {
	fake.modifyDBClusterEndpointWithContextMutex.Lock()
	defer fake.modifyDBClusterEndpointWithContextMutex.Unlock()
	fake.ModifyDBClusterEndpointWithContextStub = nil
	fake.modifyDBClusterEndpointWithContextReturns = struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterEndpointWithContextReturnsOnCall(i int, result1 *rds.ModifyDBClusterEndpointOutput, result2 error) {
	fake.modifyDBClusterEndpointWithContextMutex.Lock()
	defer fake.modifyDBClusterEndpointWithContextMutex.Unlock()
	fake.ModifyDBClusterEndpointWithContextStub = nil
	if fake.modifyDBClusterEndpointWithContextReturnsOnCall == nil {
		fake.modifyDBClusterEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBClusterEndpointOutput
			result2 error
		})
	}
	fake.modifyDBClusterEndpointWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBClusterEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroup(arg1 *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	fake.modifyDBClusterParameterGroupMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterParameterGroupReturnsOnCall[len(fake.modifyDBClusterParameterGroupArgsForCall)]
	fake.modifyDBClusterParameterGroupArgsForCall = append(fake.modifyDBClusterParameterGroupArgsForCall, struct {
		arg1 *rds.ModifyDBClusterParameterGroupInput
	}{arg1})
	stub := fake.ModifyDBClusterParameterGroupStub
	fakeReturns := fake.modifyDBClusterParameterGroupReturns
	fake.recordInvocation("ModifyDBClusterParameterGroup", []interface{}{arg1})
	fake.modifyDBClusterParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupCallCount() int {
	fake.modifyDBClusterParameterGroupMutex.RLock()
	defer fake.modifyDBClusterParameterGroupMutex.RUnlock()
	return len(fake.modifyDBClusterParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupCalls(stub func(*rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)) {
	fake.modifyDBClusterParameterGroupMutex.Lock()
	defer fake.modifyDBClusterParameterGroupMutex.Unlock()
	fake.ModifyDBClusterParameterGroupStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupArgsForCall(i int) *rds.ModifyDBClusterParameterGroupInput {
	fake.modifyDBClusterParameterGroupMutex.RLock()
	defer fake.modifyDBClusterParameterGroupMutex.RUnlock()
	argsForCall := fake.modifyDBClusterParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupReturns(result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.modifyDBClusterParameterGroupMutex.Lock()
	defer fake.modifyDBClusterParameterGroupMutex.Unlock()
	fake.ModifyDBClusterParameterGroupStub = nil
	fake.modifyDBClusterParameterGroupReturns = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupReturnsOnCall(i int, result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.modifyDBClusterParameterGroupMutex.Lock()
	defer fake.modifyDBClusterParameterGroupMutex.Unlock()
	fake.ModifyDBClusterParameterGroupStub = nil
	if fake.modifyDBClusterParameterGroupReturnsOnCall == nil {
		fake.modifyDBClusterParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DBClusterParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyDBClusterParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupRequest(arg1 *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
	fake.modifyDBClusterParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterParameterGroupRequestReturnsOnCall[len(fake.modifyDBClusterParameterGroupRequestArgsForCall)]
	fake.modifyDBClusterParameterGroupRequestArgsForCall = append(fake.modifyDBClusterParameterGroupRequestArgsForCall, struct {
		arg1 *rds.ModifyDBClusterParameterGroupInput
	}{arg1})
	stub := fake.ModifyDBClusterParameterGroupRequestStub
	fakeReturns := fake.modifyDBClusterParameterGroupRequestReturns
	fake.recordInvocation("ModifyDBClusterParameterGroupRequest", []interface{}{arg1})
	fake.modifyDBClusterParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupRequestCallCount() int {
	fake.modifyDBClusterParameterGroupRequestMutex.RLock()
	defer fake.modifyDBClusterParameterGroupRequestMutex.RUnlock()
	return len(fake.modifyDBClusterParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupRequestCalls(stub func(*rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)) {
	fake.modifyDBClusterParameterGroupRequestMutex.Lock()
	defer fake.modifyDBClusterParameterGroupRequestMutex.Unlock()
	fake.ModifyDBClusterParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupRequestArgsForCall(i int) *rds.ModifyDBClusterParameterGroupInput {
	fake.modifyDBClusterParameterGroupRequestMutex.RLock()
	defer fake.modifyDBClusterParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyDBClusterParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupRequestReturns(result1 *request.Request, result2 *rds.DBClusterParameterGroupNameMessage) {
	fake.modifyDBClusterParameterGroupRequestMutex.Lock()
	defer fake.modifyDBClusterParameterGroupRequestMutex.Unlock()
	fake.ModifyDBClusterParameterGroupRequestStub = nil
	fake.modifyDBClusterParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DBClusterParameterGroupNameMessage) {
	fake.modifyDBClusterParameterGroupRequestMutex.Lock()
	defer fake.modifyDBClusterParameterGroupRequestMutex.Unlock()
	fake.ModifyDBClusterParameterGroupRequestStub = nil
	if fake.modifyDBClusterParameterGroupRequestReturnsOnCall == nil {
		fake.modifyDBClusterParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DBClusterParameterGroupNameMessage
		})
	}
	fake.modifyDBClusterParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupWithContext(arg1 context.Context, arg2 *rds.ModifyDBClusterParameterGroupInput, arg3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	fake.modifyDBClusterParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterParameterGroupWithContextReturnsOnCall[len(fake.modifyDBClusterParameterGroupWithContextArgsForCall)]
	fake.modifyDBClusterParameterGroupWithContextArgsForCall = append(fake.modifyDBClusterParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBClusterParameterGroupWithContextStub
	fakeReturns := fake.modifyDBClusterParameterGroupWithContextReturns
	fake.recordInvocation("ModifyDBClusterParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBClusterParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupWithContextCallCount() int {
	fake.modifyDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.modifyDBClusterParameterGroupWithContextMutex.RUnlock()
	return len(fake.modifyDBClusterParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupWithContextCalls(stub func(context.Context, *rds.ModifyDBClusterParameterGroupInput, ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)) {
	fake.modifyDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.modifyDBClusterParameterGroupWithContextMutex.Unlock()
	fake.ModifyDBClusterParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBClusterParameterGroupInput, []request.Option) {
	fake.modifyDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.modifyDBClusterParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBClusterParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupWithContextReturns(result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.modifyDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.modifyDBClusterParameterGroupWithContextMutex.Unlock()
	fake.ModifyDBClusterParameterGroupWithContextStub = nil
	fake.modifyDBClusterParameterGroupWithContextReturns = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterParameterGroupWithContextReturnsOnCall(i int, result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.modifyDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.modifyDBClusterParameterGroupWithContextMutex.Unlock()
	fake.ModifyDBClusterParameterGroupWithContextStub = nil
	if fake.modifyDBClusterParameterGroupWithContextReturnsOnCall == nil {
		fake.modifyDBClusterParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DBClusterParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyDBClusterParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterRequest(arg1 *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput) {
	fake.modifyDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterRequestReturnsOnCall[len(fake.modifyDBClusterRequestArgsForCall)]
	fake.modifyDBClusterRequestArgsForCall = append(fake.modifyDBClusterRequestArgsForCall, struct {
		arg1 *rds.ModifyDBClusterInput
	}{arg1})
	stub := fake.ModifyDBClusterRequestStub
	fakeReturns := fake.modifyDBClusterRequestReturns
	fake.recordInvocation("ModifyDBClusterRequest", []interface{}{arg1})
	fake.modifyDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterRequestCallCount() int {
	fake.modifyDBClusterRequestMutex.RLock()
	defer fake.modifyDBClusterRequestMutex.RUnlock()
	return len(fake.modifyDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterRequestCalls(stub func(*rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput)) {
	fake.modifyDBClusterRequestMutex.Lock()
	defer fake.modifyDBClusterRequestMutex.Unlock()
	fake.ModifyDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterRequestArgsForCall(i int) *rds.ModifyDBClusterInput {
	fake.modifyDBClusterRequestMutex.RLock()
	defer fake.modifyDBClusterRequestMutex.RUnlock()
	argsForCall := fake.modifyDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterRequestReturns(result1 *request.Request, result2 *rds.ModifyDBClusterOutput) {
	fake.modifyDBClusterRequestMutex.Lock()
	defer fake.modifyDBClusterRequestMutex.Unlock()
	fake.ModifyDBClusterRequestStub = nil
	fake.modifyDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBClusterOutput) {
	fake.modifyDBClusterRequestMutex.Lock()
	defer fake.modifyDBClusterRequestMutex.Unlock()
	fake.ModifyDBClusterRequestStub = nil
	if fake.modifyDBClusterRequestReturnsOnCall == nil {
		fake.modifyDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBClusterOutput
		})
	}
	fake.modifyDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttribute(arg1 *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	fake.modifyDBClusterSnapshotAttributeMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterSnapshotAttributeReturnsOnCall[len(fake.modifyDBClusterSnapshotAttributeArgsForCall)]
	fake.modifyDBClusterSnapshotAttributeArgsForCall = append(fake.modifyDBClusterSnapshotAttributeArgsForCall, struct {
		arg1 *rds.ModifyDBClusterSnapshotAttributeInput
	}{arg1})
	stub := fake.ModifyDBClusterSnapshotAttributeStub
	fakeReturns := fake.modifyDBClusterSnapshotAttributeReturns
	fake.recordInvocation("ModifyDBClusterSnapshotAttribute", []interface{}{arg1})
	fake.modifyDBClusterSnapshotAttributeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeCallCount() int {
	fake.modifyDBClusterSnapshotAttributeMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeMutex.RUnlock()
	return len(fake.modifyDBClusterSnapshotAttributeArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeCalls(stub func(*rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)) {
	fake.modifyDBClusterSnapshotAttributeMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeArgsForCall(i int) *rds.ModifyDBClusterSnapshotAttributeInput {
	fake.modifyDBClusterSnapshotAttributeMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeMutex.RUnlock()
	argsForCall := fake.modifyDBClusterSnapshotAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeReturns(result1 *rds.ModifyDBClusterSnapshotAttributeOutput, result2 error) {
	fake.modifyDBClusterSnapshotAttributeMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeStub = nil
	fake.modifyDBClusterSnapshotAttributeReturns = struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeReturnsOnCall(i int, result1 *rds.ModifyDBClusterSnapshotAttributeOutput, result2 error) {
	fake.modifyDBClusterSnapshotAttributeMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeStub = nil
	if fake.modifyDBClusterSnapshotAttributeReturnsOnCall == nil {
		fake.modifyDBClusterSnapshotAttributeReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBClusterSnapshotAttributeOutput
			result2 error
		})
	}
	fake.modifyDBClusterSnapshotAttributeReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeRequest(arg1 *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput) {
	fake.modifyDBClusterSnapshotAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterSnapshotAttributeRequestReturnsOnCall[len(fake.modifyDBClusterSnapshotAttributeRequestArgsForCall)]
	fake.modifyDBClusterSnapshotAttributeRequestArgsForCall = append(fake.modifyDBClusterSnapshotAttributeRequestArgsForCall, struct {
		arg1 *rds.ModifyDBClusterSnapshotAttributeInput
	}{arg1})
	stub := fake.ModifyDBClusterSnapshotAttributeRequestStub
	fakeReturns := fake.modifyDBClusterSnapshotAttributeRequestReturns
	fake.recordInvocation("ModifyDBClusterSnapshotAttributeRequest", []interface{}{arg1})
	fake.modifyDBClusterSnapshotAttributeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeRequestCallCount() int {
	fake.modifyDBClusterSnapshotAttributeRequestMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeRequestMutex.RUnlock()
	return len(fake.modifyDBClusterSnapshotAttributeRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeRequestCalls(stub func(*rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput)) {
	fake.modifyDBClusterSnapshotAttributeRequestMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeRequestMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeRequestArgsForCall(i int) *rds.ModifyDBClusterSnapshotAttributeInput {
	fake.modifyDBClusterSnapshotAttributeRequestMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyDBClusterSnapshotAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeRequestReturns(result1 *request.Request, result2 *rds.ModifyDBClusterSnapshotAttributeOutput) {
	fake.modifyDBClusterSnapshotAttributeRequestMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeRequestMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeRequestStub = nil
	fake.modifyDBClusterSnapshotAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBClusterSnapshotAttributeOutput) {
	fake.modifyDBClusterSnapshotAttributeRequestMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeRequestMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeRequestStub = nil
	if fake.modifyDBClusterSnapshotAttributeRequestReturnsOnCall == nil {
		fake.modifyDBClusterSnapshotAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBClusterSnapshotAttributeOutput
		})
	}
	fake.modifyDBClusterSnapshotAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBClusterSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeWithContext(arg1 context.Context, arg2 *rds.ModifyDBClusterSnapshotAttributeInput, arg3 ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterSnapshotAttributeWithContextReturnsOnCall[len(fake.modifyDBClusterSnapshotAttributeWithContextArgsForCall)]
	fake.modifyDBClusterSnapshotAttributeWithContextArgsForCall = append(fake.modifyDBClusterSnapshotAttributeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterSnapshotAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBClusterSnapshotAttributeWithContextStub
	fakeReturns := fake.modifyDBClusterSnapshotAttributeWithContextReturns
	fake.recordInvocation("ModifyDBClusterSnapshotAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeWithContextCallCount() int {
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeWithContextMutex.RUnlock()
	return len(fake.modifyDBClusterSnapshotAttributeWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeWithContextCalls(stub func(context.Context, *rds.ModifyDBClusterSnapshotAttributeInput, ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)) {
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeWithContextMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBClusterSnapshotAttributeInput, []request.Option) {
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBClusterSnapshotAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeWithContextReturns(result1 *rds.ModifyDBClusterSnapshotAttributeOutput, result2 error) {
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeWithContextMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeWithContextStub = nil
	fake.modifyDBClusterSnapshotAttributeWithContextReturns = struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterSnapshotAttributeWithContextReturnsOnCall(i int, result1 *rds.ModifyDBClusterSnapshotAttributeOutput, result2 error) {
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.Lock()
	defer fake.modifyDBClusterSnapshotAttributeWithContextMutex.Unlock()
	fake.ModifyDBClusterSnapshotAttributeWithContextStub = nil
	if fake.modifyDBClusterSnapshotAttributeWithContextReturnsOnCall == nil {
		fake.modifyDBClusterSnapshotAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBClusterSnapshotAttributeOutput
			result2 error
		})
	}
	fake.modifyDBClusterSnapshotAttributeWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBClusterSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterWithContext(arg1 context.Context, arg2 *rds.ModifyDBClusterInput, arg3 ...request.Option) (*rds.ModifyDBClusterOutput, error) {
	fake.modifyDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBClusterWithContextReturnsOnCall[len(fake.modifyDBClusterWithContextArgsForCall)]
	fake.modifyDBClusterWithContextArgsForCall = append(fake.modifyDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBClusterWithContextStub
	fakeReturns := fake.modifyDBClusterWithContextReturns
	fake.recordInvocation("ModifyDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBClusterWithContextCallCount() int {
	fake.modifyDBClusterWithContextMutex.RLock()
	defer fake.modifyDBClusterWithContextMutex.RUnlock()
	return len(fake.modifyDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBClusterWithContextCalls(stub func(context.Context, *rds.ModifyDBClusterInput, ...request.Option) (*rds.ModifyDBClusterOutput, error)) {
	fake.modifyDBClusterWithContextMutex.Lock()
	defer fake.modifyDBClusterWithContextMutex.Unlock()
	fake.ModifyDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBClusterWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBClusterInput, []request.Option) {
	fake.modifyDBClusterWithContextMutex.RLock()
	defer fake.modifyDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBClusterWithContextReturns(result1 *rds.ModifyDBClusterOutput, result2 error) {
	fake.modifyDBClusterWithContextMutex.Lock()
	defer fake.modifyDBClusterWithContextMutex.Unlock()
	fake.ModifyDBClusterWithContextStub = nil
	fake.modifyDBClusterWithContextReturns = struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBClusterWithContextReturnsOnCall(i int, result1 *rds.ModifyDBClusterOutput, result2 error) {
	fake.modifyDBClusterWithContextMutex.Lock()
	defer fake.modifyDBClusterWithContextMutex.Unlock()
	fake.ModifyDBClusterWithContextStub = nil
	if fake.modifyDBClusterWithContextReturnsOnCall == nil {
		fake.modifyDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBClusterOutput
			result2 error
		})
	}
	fake.modifyDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBInstance(arg1 *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
	fake.modifyDBInstanceMutex.Lock()
	ret, specificReturn := fake.modifyDBInstanceReturnsOnCall[len(fake.modifyDBInstanceArgsForCall)]
	fake.modifyDBInstanceArgsForCall = append(fake.modifyDBInstanceArgsForCall, struct {
		arg1 *rds.ModifyDBInstanceInput
	}{arg1})
	stub := fake.ModifyDBInstanceStub
	fakeReturns := fake.modifyDBInstanceReturns
	fake.recordInvocation("ModifyDBInstance", []interface{}{arg1})
	fake.modifyDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBInstanceCallCount() int {
	fake.modifyDBInstanceMutex.RLock()
	defer fake.modifyDBInstanceMutex.RUnlock()
	return len(fake.modifyDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBInstanceCalls(stub func(*rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error)) {
	fake.modifyDBInstanceMutex.Lock()
	defer fake.modifyDBInstanceMutex.Unlock()
	fake.ModifyDBInstanceStub = stub
}

func (fake *FakeRDSAPI) ModifyDBInstanceArgsForCall(i int) *rds.ModifyDBInstanceInput {
	fake.modifyDBInstanceMutex.RLock()
	defer fake.modifyDBInstanceMutex.RUnlock()
	argsForCall := fake.modifyDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBInstanceReturns(result1 *rds.ModifyDBInstanceOutput, result2 error) {
	fake.modifyDBInstanceMutex.Lock()
	defer fake.modifyDBInstanceMutex.Unlock()
	fake.ModifyDBInstanceStub = nil
	fake.modifyDBInstanceReturns = struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBInstanceReturnsOnCall(i int, result1 *rds.ModifyDBInstanceOutput, result2 error) {
	fake.modifyDBInstanceMutex.Lock()
	defer fake.modifyDBInstanceMutex.Unlock()
	fake.ModifyDBInstanceStub = nil
	if fake.modifyDBInstanceReturnsOnCall == nil {
		fake.modifyDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBInstanceOutput
			result2 error
		})
	}
	fake.modifyDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBInstanceRequest(arg1 *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput) {
	fake.modifyDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBInstanceRequestReturnsOnCall[len(fake.modifyDBInstanceRequestArgsForCall)]
	fake.modifyDBInstanceRequestArgsForCall = append(fake.modifyDBInstanceRequestArgsForCall, struct {
		arg1 *rds.ModifyDBInstanceInput
	}{arg1})
	stub := fake.ModifyDBInstanceRequestStub
	fakeReturns := fake.modifyDBInstanceRequestReturns
	fake.recordInvocation("ModifyDBInstanceRequest", []interface{}{arg1})
	fake.modifyDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBInstanceRequestCallCount() int {
	fake.modifyDBInstanceRequestMutex.RLock()
	defer fake.modifyDBInstanceRequestMutex.RUnlock()
	return len(fake.modifyDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBInstanceRequestCalls(stub func(*rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput)) {
	fake.modifyDBInstanceRequestMutex.Lock()
	defer fake.modifyDBInstanceRequestMutex.Unlock()
	fake.ModifyDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBInstanceRequestArgsForCall(i int) *rds.ModifyDBInstanceInput {
	fake.modifyDBInstanceRequestMutex.RLock()
	defer fake.modifyDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.modifyDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBInstanceRequestReturns(result1 *request.Request, result2 *rds.ModifyDBInstanceOutput) {
	fake.modifyDBInstanceRequestMutex.Lock()
	defer fake.modifyDBInstanceRequestMutex.Unlock()
	fake.ModifyDBInstanceRequestStub = nil
	fake.modifyDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBInstanceOutput) {
	fake.modifyDBInstanceRequestMutex.Lock()
	defer fake.modifyDBInstanceRequestMutex.Unlock()
	fake.ModifyDBInstanceRequestStub = nil
	if fake.modifyDBInstanceRequestReturnsOnCall == nil {
		fake.modifyDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBInstanceOutput
		})
	}
	fake.modifyDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBInstanceWithContext(arg1 context.Context, arg2 *rds.ModifyDBInstanceInput, arg3 ...request.Option) (*rds.ModifyDBInstanceOutput, error) {
	fake.modifyDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBInstanceWithContextReturnsOnCall[len(fake.modifyDBInstanceWithContextArgsForCall)]
	fake.modifyDBInstanceWithContextArgsForCall = append(fake.modifyDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBInstanceWithContextStub
	fakeReturns := fake.modifyDBInstanceWithContextReturns
	fake.recordInvocation("ModifyDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBInstanceWithContextCallCount() int {
	fake.modifyDBInstanceWithContextMutex.RLock()
	defer fake.modifyDBInstanceWithContextMutex.RUnlock()
	return len(fake.modifyDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBInstanceWithContextCalls(stub func(context.Context, *rds.ModifyDBInstanceInput, ...request.Option) (*rds.ModifyDBInstanceOutput, error)) {
	fake.modifyDBInstanceWithContextMutex.Lock()
	defer fake.modifyDBInstanceWithContextMutex.Unlock()
	fake.ModifyDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBInstanceInput, []request.Option) {
	fake.modifyDBInstanceWithContextMutex.RLock()
	defer fake.modifyDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBInstanceWithContextReturns(result1 *rds.ModifyDBInstanceOutput, result2 error) {
	fake.modifyDBInstanceWithContextMutex.Lock()
	defer fake.modifyDBInstanceWithContextMutex.Unlock()
	fake.ModifyDBInstanceWithContextStub = nil
	fake.modifyDBInstanceWithContextReturns = struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBInstanceWithContextReturnsOnCall(i int, result1 *rds.ModifyDBInstanceOutput, result2 error) {
	fake.modifyDBInstanceWithContextMutex.Lock()
	defer fake.modifyDBInstanceWithContextMutex.Unlock()
	fake.ModifyDBInstanceWithContextStub = nil
	if fake.modifyDBInstanceWithContextReturnsOnCall == nil {
		fake.modifyDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBInstanceOutput
			result2 error
		})
	}
	fake.modifyDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBParameterGroup(arg1 *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	fake.modifyDBParameterGroupMutex.Lock()
	ret, specificReturn := fake.modifyDBParameterGroupReturnsOnCall[len(fake.modifyDBParameterGroupArgsForCall)]
	fake.modifyDBParameterGroupArgsForCall = append(fake.modifyDBParameterGroupArgsForCall, struct {
		arg1 *rds.ModifyDBParameterGroupInput
	}{arg1})
	stub := fake.ModifyDBParameterGroupStub
	fakeReturns := fake.modifyDBParameterGroupReturns
	fake.recordInvocation("ModifyDBParameterGroup", []interface{}{arg1})
	fake.modifyDBParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupCallCount() int {
	fake.modifyDBParameterGroupMutex.RLock()
	defer fake.modifyDBParameterGroupMutex.RUnlock()
	return len(fake.modifyDBParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupCalls(stub func(*rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)) {
	fake.modifyDBParameterGroupMutex.Lock()
	defer fake.modifyDBParameterGroupMutex.Unlock()
	fake.ModifyDBParameterGroupStub = stub
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupArgsForCall(i int) *rds.ModifyDBParameterGroupInput {
	fake.modifyDBParameterGroupMutex.RLock()
	defer fake.modifyDBParameterGroupMutex.RUnlock()
	argsForCall := fake.modifyDBParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupReturns(result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.modifyDBParameterGroupMutex.Lock()
	defer fake.modifyDBParameterGroupMutex.Unlock()
	fake.ModifyDBParameterGroupStub = nil
	fake.modifyDBParameterGroupReturns = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupReturnsOnCall(i int, result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.modifyDBParameterGroupMutex.Lock()
	defer fake.modifyDBParameterGroupMutex.Unlock()
	fake.ModifyDBParameterGroupStub = nil
	if fake.modifyDBParameterGroupReturnsOnCall == nil {
		fake.modifyDBParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DBParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyDBParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupRequest(arg1 *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
	fake.modifyDBParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBParameterGroupRequestReturnsOnCall[len(fake.modifyDBParameterGroupRequestArgsForCall)]
	fake.modifyDBParameterGroupRequestArgsForCall = append(fake.modifyDBParameterGroupRequestArgsForCall, struct {
		arg1 *rds.ModifyDBParameterGroupInput
	}{arg1})
	stub := fake.ModifyDBParameterGroupRequestStub
	fakeReturns := fake.modifyDBParameterGroupRequestReturns
	fake.recordInvocation("ModifyDBParameterGroupRequest", []interface{}{arg1})
	fake.modifyDBParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupRequestCallCount() int {
	fake.modifyDBParameterGroupRequestMutex.RLock()
	defer fake.modifyDBParameterGroupRequestMutex.RUnlock()
	return len(fake.modifyDBParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupRequestCalls(stub func(*rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)) {
	fake.modifyDBParameterGroupRequestMutex.Lock()
	defer fake.modifyDBParameterGroupRequestMutex.Unlock()
	fake.ModifyDBParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupRequestArgsForCall(i int) *rds.ModifyDBParameterGroupInput {
	fake.modifyDBParameterGroupRequestMutex.RLock()
	defer fake.modifyDBParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyDBParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupRequestReturns(result1 *request.Request, result2 *rds.DBParameterGroupNameMessage) {
	fake.modifyDBParameterGroupRequestMutex.Lock()
	defer fake.modifyDBParameterGroupRequestMutex.Unlock()
	fake.ModifyDBParameterGroupRequestStub = nil
	fake.modifyDBParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DBParameterGroupNameMessage) {
	fake.modifyDBParameterGroupRequestMutex.Lock()
	defer fake.modifyDBParameterGroupRequestMutex.Unlock()
	fake.ModifyDBParameterGroupRequestStub = nil
	if fake.modifyDBParameterGroupRequestReturnsOnCall == nil {
		fake.modifyDBParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DBParameterGroupNameMessage
		})
	}
	fake.modifyDBParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupWithContext(arg1 context.Context, arg2 *rds.ModifyDBParameterGroupInput, arg3 ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	fake.modifyDBParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBParameterGroupWithContextReturnsOnCall[len(fake.modifyDBParameterGroupWithContextArgsForCall)]
	fake.modifyDBParameterGroupWithContextArgsForCall = append(fake.modifyDBParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBParameterGroupWithContextStub
	fakeReturns := fake.modifyDBParameterGroupWithContextReturns
	fake.recordInvocation("ModifyDBParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupWithContextCallCount() int {
	fake.modifyDBParameterGroupWithContextMutex.RLock()
	defer fake.modifyDBParameterGroupWithContextMutex.RUnlock()
	return len(fake.modifyDBParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupWithContextCalls(stub func(context.Context, *rds.ModifyDBParameterGroupInput, ...request.Option) (*rds.DBParameterGroupNameMessage, error)) {
	fake.modifyDBParameterGroupWithContextMutex.Lock()
	defer fake.modifyDBParameterGroupWithContextMutex.Unlock()
	fake.ModifyDBParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBParameterGroupInput, []request.Option) {
	fake.modifyDBParameterGroupWithContextMutex.RLock()
	defer fake.modifyDBParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupWithContextReturns(result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.modifyDBParameterGroupWithContextMutex.Lock()
	defer fake.modifyDBParameterGroupWithContextMutex.Unlock()
	fake.ModifyDBParameterGroupWithContextStub = nil
	fake.modifyDBParameterGroupWithContextReturns = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBParameterGroupWithContextReturnsOnCall(i int, result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.modifyDBParameterGroupWithContextMutex.Lock()
	defer fake.modifyDBParameterGroupWithContextMutex.Unlock()
	fake.ModifyDBParameterGroupWithContextStub = nil
	if fake.modifyDBParameterGroupWithContextReturnsOnCall == nil {
		fake.modifyDBParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DBParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyDBParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxy(arg1 *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
	fake.modifyDBProxyMutex.Lock()
	ret, specificReturn := fake.modifyDBProxyReturnsOnCall[len(fake.modifyDBProxyArgsForCall)]
	fake.modifyDBProxyArgsForCall = append(fake.modifyDBProxyArgsForCall, struct {
		arg1 *rds.ModifyDBProxyInput
	}{arg1})
	stub := fake.ModifyDBProxyStub
	fakeReturns := fake.modifyDBProxyReturns
	fake.recordInvocation("ModifyDBProxy", []interface{}{arg1})
	fake.modifyDBProxyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBProxyCallCount() int {
	fake.modifyDBProxyMutex.RLock()
	defer fake.modifyDBProxyMutex.RUnlock()
	return len(fake.modifyDBProxyArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBProxyCalls(stub func(*rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error)) {
	fake.modifyDBProxyMutex.Lock()
	defer fake.modifyDBProxyMutex.Unlock()
	fake.ModifyDBProxyStub = stub
}

func (fake *FakeRDSAPI) ModifyDBProxyArgsForCall(i int) *rds.ModifyDBProxyInput {
	fake.modifyDBProxyMutex.RLock()
	defer fake.modifyDBProxyMutex.RUnlock()
	argsForCall := fake.modifyDBProxyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBProxyReturns(result1 *rds.ModifyDBProxyOutput, result2 error) {
	fake.modifyDBProxyMutex.Lock()
	defer fake.modifyDBProxyMutex.Unlock()
	fake.ModifyDBProxyStub = nil
	fake.modifyDBProxyReturns = struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyReturnsOnCall(i int, result1 *rds.ModifyDBProxyOutput, result2 error) {
	fake.modifyDBProxyMutex.Lock()
	defer fake.modifyDBProxyMutex.Unlock()
	fake.ModifyDBProxyStub = nil
	if fake.modifyDBProxyReturnsOnCall == nil {
		fake.modifyDBProxyReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBProxyOutput
			result2 error
		})
	}
	fake.modifyDBProxyReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyRequest(arg1 *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput) {
	fake.modifyDBProxyRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBProxyRequestReturnsOnCall[len(fake.modifyDBProxyRequestArgsForCall)]
	fake.modifyDBProxyRequestArgsForCall = append(fake.modifyDBProxyRequestArgsForCall, struct {
		arg1 *rds.ModifyDBProxyInput
	}{arg1})
	stub := fake.ModifyDBProxyRequestStub
	fakeReturns := fake.modifyDBProxyRequestReturns
	fake.recordInvocation("ModifyDBProxyRequest", []interface{}{arg1})
	fake.modifyDBProxyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBProxyRequestCallCount() int {
	fake.modifyDBProxyRequestMutex.RLock()
	defer fake.modifyDBProxyRequestMutex.RUnlock()
	return len(fake.modifyDBProxyRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBProxyRequestCalls(stub func(*rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput)) {
	fake.modifyDBProxyRequestMutex.Lock()
	defer fake.modifyDBProxyRequestMutex.Unlock()
	fake.ModifyDBProxyRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBProxyRequestArgsForCall(i int) *rds.ModifyDBProxyInput {
	fake.modifyDBProxyRequestMutex.RLock()
	defer fake.modifyDBProxyRequestMutex.RUnlock()
	argsForCall := fake.modifyDBProxyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBProxyRequestReturns(result1 *request.Request, result2 *rds.ModifyDBProxyOutput) {
	fake.modifyDBProxyRequestMutex.Lock()
	defer fake.modifyDBProxyRequestMutex.Unlock()
	fake.ModifyDBProxyRequestStub = nil
	fake.modifyDBProxyRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBProxyOutput) {
	fake.modifyDBProxyRequestMutex.Lock()
	defer fake.modifyDBProxyRequestMutex.Unlock()
	fake.ModifyDBProxyRequestStub = nil
	if fake.modifyDBProxyRequestReturnsOnCall == nil {
		fake.modifyDBProxyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBProxyOutput
		})
	}
	fake.modifyDBProxyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroup(arg1 *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	fake.modifyDBProxyTargetGroupMutex.Lock()
	ret, specificReturn := fake.modifyDBProxyTargetGroupReturnsOnCall[len(fake.modifyDBProxyTargetGroupArgsForCall)]
	fake.modifyDBProxyTargetGroupArgsForCall = append(fake.modifyDBProxyTargetGroupArgsForCall, struct {
		arg1 *rds.ModifyDBProxyTargetGroupInput
	}{arg1})
	stub := fake.ModifyDBProxyTargetGroupStub
	fakeReturns := fake.modifyDBProxyTargetGroupReturns
	fake.recordInvocation("ModifyDBProxyTargetGroup", []interface{}{arg1})
	fake.modifyDBProxyTargetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupCallCount() int {
	fake.modifyDBProxyTargetGroupMutex.RLock()
	defer fake.modifyDBProxyTargetGroupMutex.RUnlock()
	return len(fake.modifyDBProxyTargetGroupArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupCalls(stub func(*rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error)) {
	fake.modifyDBProxyTargetGroupMutex.Lock()
	defer fake.modifyDBProxyTargetGroupMutex.Unlock()
	fake.ModifyDBProxyTargetGroupStub = stub
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupArgsForCall(i int) *rds.ModifyDBProxyTargetGroupInput {
	fake.modifyDBProxyTargetGroupMutex.RLock()
	defer fake.modifyDBProxyTargetGroupMutex.RUnlock()
	argsForCall := fake.modifyDBProxyTargetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupReturns(result1 *rds.ModifyDBProxyTargetGroupOutput, result2 error) {
	fake.modifyDBProxyTargetGroupMutex.Lock()
	defer fake.modifyDBProxyTargetGroupMutex.Unlock()
	fake.ModifyDBProxyTargetGroupStub = nil
	fake.modifyDBProxyTargetGroupReturns = struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupReturnsOnCall(i int, result1 *rds.ModifyDBProxyTargetGroupOutput, result2 error) {
	fake.modifyDBProxyTargetGroupMutex.Lock()
	defer fake.modifyDBProxyTargetGroupMutex.Unlock()
	fake.ModifyDBProxyTargetGroupStub = nil
	if fake.modifyDBProxyTargetGroupReturnsOnCall == nil {
		fake.modifyDBProxyTargetGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBProxyTargetGroupOutput
			result2 error
		})
	}
	fake.modifyDBProxyTargetGroupReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupRequest(arg1 *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput) {
	fake.modifyDBProxyTargetGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBProxyTargetGroupRequestReturnsOnCall[len(fake.modifyDBProxyTargetGroupRequestArgsForCall)]
	fake.modifyDBProxyTargetGroupRequestArgsForCall = append(fake.modifyDBProxyTargetGroupRequestArgsForCall, struct {
		arg1 *rds.ModifyDBProxyTargetGroupInput
	}{arg1})
	stub := fake.ModifyDBProxyTargetGroupRequestStub
	fakeReturns := fake.modifyDBProxyTargetGroupRequestReturns
	fake.recordInvocation("ModifyDBProxyTargetGroupRequest", []interface{}{arg1})
	fake.modifyDBProxyTargetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupRequestCallCount() int {
	fake.modifyDBProxyTargetGroupRequestMutex.RLock()
	defer fake.modifyDBProxyTargetGroupRequestMutex.RUnlock()
	return len(fake.modifyDBProxyTargetGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupRequestCalls(stub func(*rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput)) {
	fake.modifyDBProxyTargetGroupRequestMutex.Lock()
	defer fake.modifyDBProxyTargetGroupRequestMutex.Unlock()
	fake.ModifyDBProxyTargetGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupRequestArgsForCall(i int) *rds.ModifyDBProxyTargetGroupInput {
	fake.modifyDBProxyTargetGroupRequestMutex.RLock()
	defer fake.modifyDBProxyTargetGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyDBProxyTargetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupRequestReturns(result1 *request.Request, result2 *rds.ModifyDBProxyTargetGroupOutput) {
	fake.modifyDBProxyTargetGroupRequestMutex.Lock()
	defer fake.modifyDBProxyTargetGroupRequestMutex.Unlock()
	fake.ModifyDBProxyTargetGroupRequestStub = nil
	fake.modifyDBProxyTargetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBProxyTargetGroupOutput) {
	fake.modifyDBProxyTargetGroupRequestMutex.Lock()
	defer fake.modifyDBProxyTargetGroupRequestMutex.Unlock()
	fake.ModifyDBProxyTargetGroupRequestStub = nil
	if fake.modifyDBProxyTargetGroupRequestReturnsOnCall == nil {
		fake.modifyDBProxyTargetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBProxyTargetGroupOutput
		})
	}
	fake.modifyDBProxyTargetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBProxyTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupWithContext(arg1 context.Context, arg2 *rds.ModifyDBProxyTargetGroupInput, arg3 ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	fake.modifyDBProxyTargetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBProxyTargetGroupWithContextReturnsOnCall[len(fake.modifyDBProxyTargetGroupWithContextArgsForCall)]
	fake.modifyDBProxyTargetGroupWithContextArgsForCall = append(fake.modifyDBProxyTargetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBProxyTargetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBProxyTargetGroupWithContextStub
	fakeReturns := fake.modifyDBProxyTargetGroupWithContextReturns
	fake.recordInvocation("ModifyDBProxyTargetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBProxyTargetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupWithContextCallCount() int {
	fake.modifyDBProxyTargetGroupWithContextMutex.RLock()
	defer fake.modifyDBProxyTargetGroupWithContextMutex.RUnlock()
	return len(fake.modifyDBProxyTargetGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupWithContextCalls(stub func(context.Context, *rds.ModifyDBProxyTargetGroupInput, ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error)) {
	fake.modifyDBProxyTargetGroupWithContextMutex.Lock()
	defer fake.modifyDBProxyTargetGroupWithContextMutex.Unlock()
	fake.ModifyDBProxyTargetGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBProxyTargetGroupInput, []request.Option) {
	fake.modifyDBProxyTargetGroupWithContextMutex.RLock()
	defer fake.modifyDBProxyTargetGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBProxyTargetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupWithContextReturns(result1 *rds.ModifyDBProxyTargetGroupOutput, result2 error) {
	fake.modifyDBProxyTargetGroupWithContextMutex.Lock()
	defer fake.modifyDBProxyTargetGroupWithContextMutex.Unlock()
	fake.ModifyDBProxyTargetGroupWithContextStub = nil
	fake.modifyDBProxyTargetGroupWithContextReturns = struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyTargetGroupWithContextReturnsOnCall(i int, result1 *rds.ModifyDBProxyTargetGroupOutput, result2 error) {
	fake.modifyDBProxyTargetGroupWithContextMutex.Lock()
	defer fake.modifyDBProxyTargetGroupWithContextMutex.Unlock()
	fake.ModifyDBProxyTargetGroupWithContextStub = nil
	if fake.modifyDBProxyTargetGroupWithContextReturnsOnCall == nil {
		fake.modifyDBProxyTargetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBProxyTargetGroupOutput
			result2 error
		})
	}
	fake.modifyDBProxyTargetGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBProxyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyWithContext(arg1 context.Context, arg2 *rds.ModifyDBProxyInput, arg3 ...request.Option) (*rds.ModifyDBProxyOutput, error) {
	fake.modifyDBProxyWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBProxyWithContextReturnsOnCall[len(fake.modifyDBProxyWithContextArgsForCall)]
	fake.modifyDBProxyWithContextArgsForCall = append(fake.modifyDBProxyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBProxyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBProxyWithContextStub
	fakeReturns := fake.modifyDBProxyWithContextReturns
	fake.recordInvocation("ModifyDBProxyWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBProxyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBProxyWithContextCallCount() int {
	fake.modifyDBProxyWithContextMutex.RLock()
	defer fake.modifyDBProxyWithContextMutex.RUnlock()
	return len(fake.modifyDBProxyWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBProxyWithContextCalls(stub func(context.Context, *rds.ModifyDBProxyInput, ...request.Option) (*rds.ModifyDBProxyOutput, error)) {
	fake.modifyDBProxyWithContextMutex.Lock()
	defer fake.modifyDBProxyWithContextMutex.Unlock()
	fake.ModifyDBProxyWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBProxyWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBProxyInput, []request.Option) {
	fake.modifyDBProxyWithContextMutex.RLock()
	defer fake.modifyDBProxyWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBProxyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBProxyWithContextReturns(result1 *rds.ModifyDBProxyOutput, result2 error) {
	fake.modifyDBProxyWithContextMutex.Lock()
	defer fake.modifyDBProxyWithContextMutex.Unlock()
	fake.ModifyDBProxyWithContextStub = nil
	fake.modifyDBProxyWithContextReturns = struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBProxyWithContextReturnsOnCall(i int, result1 *rds.ModifyDBProxyOutput, result2 error) {
	fake.modifyDBProxyWithContextMutex.Lock()
	defer fake.modifyDBProxyWithContextMutex.Unlock()
	fake.ModifyDBProxyWithContextStub = nil
	if fake.modifyDBProxyWithContextReturnsOnCall == nil {
		fake.modifyDBProxyWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBProxyOutput
			result2 error
		})
	}
	fake.modifyDBProxyWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBProxyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshot(arg1 *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
	fake.modifyDBSnapshotMutex.Lock()
	ret, specificReturn := fake.modifyDBSnapshotReturnsOnCall[len(fake.modifyDBSnapshotArgsForCall)]
	fake.modifyDBSnapshotArgsForCall = append(fake.modifyDBSnapshotArgsForCall, struct {
		arg1 *rds.ModifyDBSnapshotInput
	}{arg1})
	stub := fake.ModifyDBSnapshotStub
	fakeReturns := fake.modifyDBSnapshotReturns
	fake.recordInvocation("ModifyDBSnapshot", []interface{}{arg1})
	fake.modifyDBSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSnapshotCallCount() int {
	fake.modifyDBSnapshotMutex.RLock()
	defer fake.modifyDBSnapshotMutex.RUnlock()
	return len(fake.modifyDBSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSnapshotCalls(stub func(*rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error)) {
	fake.modifyDBSnapshotMutex.Lock()
	defer fake.modifyDBSnapshotMutex.Unlock()
	fake.ModifyDBSnapshotStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSnapshotArgsForCall(i int) *rds.ModifyDBSnapshotInput {
	fake.modifyDBSnapshotMutex.RLock()
	defer fake.modifyDBSnapshotMutex.RUnlock()
	argsForCall := fake.modifyDBSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBSnapshotReturns(result1 *rds.ModifyDBSnapshotOutput, result2 error) {
	fake.modifyDBSnapshotMutex.Lock()
	defer fake.modifyDBSnapshotMutex.Unlock()
	fake.ModifyDBSnapshotStub = nil
	fake.modifyDBSnapshotReturns = struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotReturnsOnCall(i int, result1 *rds.ModifyDBSnapshotOutput, result2 error) {
	fake.modifyDBSnapshotMutex.Lock()
	defer fake.modifyDBSnapshotMutex.Unlock()
	fake.ModifyDBSnapshotStub = nil
	if fake.modifyDBSnapshotReturnsOnCall == nil {
		fake.modifyDBSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBSnapshotOutput
			result2 error
		})
	}
	fake.modifyDBSnapshotReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttribute(arg1 *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	fake.modifyDBSnapshotAttributeMutex.Lock()
	ret, specificReturn := fake.modifyDBSnapshotAttributeReturnsOnCall[len(fake.modifyDBSnapshotAttributeArgsForCall)]
	fake.modifyDBSnapshotAttributeArgsForCall = append(fake.modifyDBSnapshotAttributeArgsForCall, struct {
		arg1 *rds.ModifyDBSnapshotAttributeInput
	}{arg1})
	stub := fake.ModifyDBSnapshotAttributeStub
	fakeReturns := fake.modifyDBSnapshotAttributeReturns
	fake.recordInvocation("ModifyDBSnapshotAttribute", []interface{}{arg1})
	fake.modifyDBSnapshotAttributeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeCallCount() int {
	fake.modifyDBSnapshotAttributeMutex.RLock()
	defer fake.modifyDBSnapshotAttributeMutex.RUnlock()
	return len(fake.modifyDBSnapshotAttributeArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeCalls(stub func(*rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error)) {
	fake.modifyDBSnapshotAttributeMutex.Lock()
	defer fake.modifyDBSnapshotAttributeMutex.Unlock()
	fake.ModifyDBSnapshotAttributeStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeArgsForCall(i int) *rds.ModifyDBSnapshotAttributeInput {
	fake.modifyDBSnapshotAttributeMutex.RLock()
	defer fake.modifyDBSnapshotAttributeMutex.RUnlock()
	argsForCall := fake.modifyDBSnapshotAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeReturns(result1 *rds.ModifyDBSnapshotAttributeOutput, result2 error) {
	fake.modifyDBSnapshotAttributeMutex.Lock()
	defer fake.modifyDBSnapshotAttributeMutex.Unlock()
	fake.ModifyDBSnapshotAttributeStub = nil
	fake.modifyDBSnapshotAttributeReturns = struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeReturnsOnCall(i int, result1 *rds.ModifyDBSnapshotAttributeOutput, result2 error) {
	fake.modifyDBSnapshotAttributeMutex.Lock()
	defer fake.modifyDBSnapshotAttributeMutex.Unlock()
	fake.ModifyDBSnapshotAttributeStub = nil
	if fake.modifyDBSnapshotAttributeReturnsOnCall == nil {
		fake.modifyDBSnapshotAttributeReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBSnapshotAttributeOutput
			result2 error
		})
	}
	fake.modifyDBSnapshotAttributeReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeRequest(arg1 *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput) {
	fake.modifyDBSnapshotAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBSnapshotAttributeRequestReturnsOnCall[len(fake.modifyDBSnapshotAttributeRequestArgsForCall)]
	fake.modifyDBSnapshotAttributeRequestArgsForCall = append(fake.modifyDBSnapshotAttributeRequestArgsForCall, struct {
		arg1 *rds.ModifyDBSnapshotAttributeInput
	}{arg1})
	stub := fake.ModifyDBSnapshotAttributeRequestStub
	fakeReturns := fake.modifyDBSnapshotAttributeRequestReturns
	fake.recordInvocation("ModifyDBSnapshotAttributeRequest", []interface{}{arg1})
	fake.modifyDBSnapshotAttributeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeRequestCallCount() int {
	fake.modifyDBSnapshotAttributeRequestMutex.RLock()
	defer fake.modifyDBSnapshotAttributeRequestMutex.RUnlock()
	return len(fake.modifyDBSnapshotAttributeRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeRequestCalls(stub func(*rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput)) {
	fake.modifyDBSnapshotAttributeRequestMutex.Lock()
	defer fake.modifyDBSnapshotAttributeRequestMutex.Unlock()
	fake.ModifyDBSnapshotAttributeRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeRequestArgsForCall(i int) *rds.ModifyDBSnapshotAttributeInput {
	fake.modifyDBSnapshotAttributeRequestMutex.RLock()
	defer fake.modifyDBSnapshotAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyDBSnapshotAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeRequestReturns(result1 *request.Request, result2 *rds.ModifyDBSnapshotAttributeOutput) {
	fake.modifyDBSnapshotAttributeRequestMutex.Lock()
	defer fake.modifyDBSnapshotAttributeRequestMutex.Unlock()
	fake.ModifyDBSnapshotAttributeRequestStub = nil
	fake.modifyDBSnapshotAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBSnapshotAttributeOutput) {
	fake.modifyDBSnapshotAttributeRequestMutex.Lock()
	defer fake.modifyDBSnapshotAttributeRequestMutex.Unlock()
	fake.ModifyDBSnapshotAttributeRequestStub = nil
	if fake.modifyDBSnapshotAttributeRequestReturnsOnCall == nil {
		fake.modifyDBSnapshotAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBSnapshotAttributeOutput
		})
	}
	fake.modifyDBSnapshotAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeWithContext(arg1 context.Context, arg2 *rds.ModifyDBSnapshotAttributeInput, arg3 ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	fake.modifyDBSnapshotAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBSnapshotAttributeWithContextReturnsOnCall[len(fake.modifyDBSnapshotAttributeWithContextArgsForCall)]
	fake.modifyDBSnapshotAttributeWithContextArgsForCall = append(fake.modifyDBSnapshotAttributeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBSnapshotAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBSnapshotAttributeWithContextStub
	fakeReturns := fake.modifyDBSnapshotAttributeWithContextReturns
	fake.recordInvocation("ModifyDBSnapshotAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBSnapshotAttributeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeWithContextCallCount() int {
	fake.modifyDBSnapshotAttributeWithContextMutex.RLock()
	defer fake.modifyDBSnapshotAttributeWithContextMutex.RUnlock()
	return len(fake.modifyDBSnapshotAttributeWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeWithContextCalls(stub func(context.Context, *rds.ModifyDBSnapshotAttributeInput, ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error)) {
	fake.modifyDBSnapshotAttributeWithContextMutex.Lock()
	defer fake.modifyDBSnapshotAttributeWithContextMutex.Unlock()
	fake.ModifyDBSnapshotAttributeWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBSnapshotAttributeInput, []request.Option) {
	fake.modifyDBSnapshotAttributeWithContextMutex.RLock()
	defer fake.modifyDBSnapshotAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBSnapshotAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeWithContextReturns(result1 *rds.ModifyDBSnapshotAttributeOutput, result2 error) {
	fake.modifyDBSnapshotAttributeWithContextMutex.Lock()
	defer fake.modifyDBSnapshotAttributeWithContextMutex.Unlock()
	fake.ModifyDBSnapshotAttributeWithContextStub = nil
	fake.modifyDBSnapshotAttributeWithContextReturns = struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotAttributeWithContextReturnsOnCall(i int, result1 *rds.ModifyDBSnapshotAttributeOutput, result2 error) {
	fake.modifyDBSnapshotAttributeWithContextMutex.Lock()
	defer fake.modifyDBSnapshotAttributeWithContextMutex.Unlock()
	fake.ModifyDBSnapshotAttributeWithContextStub = nil
	if fake.modifyDBSnapshotAttributeWithContextReturnsOnCall == nil {
		fake.modifyDBSnapshotAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBSnapshotAttributeOutput
			result2 error
		})
	}
	fake.modifyDBSnapshotAttributeWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotRequest(arg1 *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput) {
	fake.modifyDBSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBSnapshotRequestReturnsOnCall[len(fake.modifyDBSnapshotRequestArgsForCall)]
	fake.modifyDBSnapshotRequestArgsForCall = append(fake.modifyDBSnapshotRequestArgsForCall, struct {
		arg1 *rds.ModifyDBSnapshotInput
	}{arg1})
	stub := fake.ModifyDBSnapshotRequestStub
	fakeReturns := fake.modifyDBSnapshotRequestReturns
	fake.recordInvocation("ModifyDBSnapshotRequest", []interface{}{arg1})
	fake.modifyDBSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSnapshotRequestCallCount() int {
	fake.modifyDBSnapshotRequestMutex.RLock()
	defer fake.modifyDBSnapshotRequestMutex.RUnlock()
	return len(fake.modifyDBSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSnapshotRequestCalls(stub func(*rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput)) {
	fake.modifyDBSnapshotRequestMutex.Lock()
	defer fake.modifyDBSnapshotRequestMutex.Unlock()
	fake.ModifyDBSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSnapshotRequestArgsForCall(i int) *rds.ModifyDBSnapshotInput {
	fake.modifyDBSnapshotRequestMutex.RLock()
	defer fake.modifyDBSnapshotRequestMutex.RUnlock()
	argsForCall := fake.modifyDBSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBSnapshotRequestReturns(result1 *request.Request, result2 *rds.ModifyDBSnapshotOutput) {
	fake.modifyDBSnapshotRequestMutex.Lock()
	defer fake.modifyDBSnapshotRequestMutex.Unlock()
	fake.ModifyDBSnapshotRequestStub = nil
	fake.modifyDBSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBSnapshotOutput) {
	fake.modifyDBSnapshotRequestMutex.Lock()
	defer fake.modifyDBSnapshotRequestMutex.Unlock()
	fake.ModifyDBSnapshotRequestStub = nil
	if fake.modifyDBSnapshotRequestReturnsOnCall == nil {
		fake.modifyDBSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBSnapshotOutput
		})
	}
	fake.modifyDBSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotWithContext(arg1 context.Context, arg2 *rds.ModifyDBSnapshotInput, arg3 ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {
	fake.modifyDBSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBSnapshotWithContextReturnsOnCall[len(fake.modifyDBSnapshotWithContextArgsForCall)]
	fake.modifyDBSnapshotWithContextArgsForCall = append(fake.modifyDBSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBSnapshotWithContextStub
	fakeReturns := fake.modifyDBSnapshotWithContextReturns
	fake.recordInvocation("ModifyDBSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSnapshotWithContextCallCount() int {
	fake.modifyDBSnapshotWithContextMutex.RLock()
	defer fake.modifyDBSnapshotWithContextMutex.RUnlock()
	return len(fake.modifyDBSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSnapshotWithContextCalls(stub func(context.Context, *rds.ModifyDBSnapshotInput, ...request.Option) (*rds.ModifyDBSnapshotOutput, error)) {
	fake.modifyDBSnapshotWithContextMutex.Lock()
	defer fake.modifyDBSnapshotWithContextMutex.Unlock()
	fake.ModifyDBSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSnapshotWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBSnapshotInput, []request.Option) {
	fake.modifyDBSnapshotWithContextMutex.RLock()
	defer fake.modifyDBSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBSnapshotWithContextReturns(result1 *rds.ModifyDBSnapshotOutput, result2 error) {
	fake.modifyDBSnapshotWithContextMutex.Lock()
	defer fake.modifyDBSnapshotWithContextMutex.Unlock()
	fake.ModifyDBSnapshotWithContextStub = nil
	fake.modifyDBSnapshotWithContextReturns = struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSnapshotWithContextReturnsOnCall(i int, result1 *rds.ModifyDBSnapshotOutput, result2 error) {
	fake.modifyDBSnapshotWithContextMutex.Lock()
	defer fake.modifyDBSnapshotWithContextMutex.Unlock()
	fake.ModifyDBSnapshotWithContextStub = nil
	if fake.modifyDBSnapshotWithContextReturnsOnCall == nil {
		fake.modifyDBSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBSnapshotOutput
			result2 error
		})
	}
	fake.modifyDBSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroup(arg1 *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
	fake.modifyDBSubnetGroupMutex.Lock()
	ret, specificReturn := fake.modifyDBSubnetGroupReturnsOnCall[len(fake.modifyDBSubnetGroupArgsForCall)]
	fake.modifyDBSubnetGroupArgsForCall = append(fake.modifyDBSubnetGroupArgsForCall, struct {
		arg1 *rds.ModifyDBSubnetGroupInput
	}{arg1})
	stub := fake.ModifyDBSubnetGroupStub
	fakeReturns := fake.modifyDBSubnetGroupReturns
	fake.recordInvocation("ModifyDBSubnetGroup", []interface{}{arg1})
	fake.modifyDBSubnetGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupCallCount() int {
	fake.modifyDBSubnetGroupMutex.RLock()
	defer fake.modifyDBSubnetGroupMutex.RUnlock()
	return len(fake.modifyDBSubnetGroupArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupCalls(stub func(*rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error)) {
	fake.modifyDBSubnetGroupMutex.Lock()
	defer fake.modifyDBSubnetGroupMutex.Unlock()
	fake.ModifyDBSubnetGroupStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupArgsForCall(i int) *rds.ModifyDBSubnetGroupInput {
	fake.modifyDBSubnetGroupMutex.RLock()
	defer fake.modifyDBSubnetGroupMutex.RUnlock()
	argsForCall := fake.modifyDBSubnetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupReturns(result1 *rds.ModifyDBSubnetGroupOutput, result2 error) {
	fake.modifyDBSubnetGroupMutex.Lock()
	defer fake.modifyDBSubnetGroupMutex.Unlock()
	fake.ModifyDBSubnetGroupStub = nil
	fake.modifyDBSubnetGroupReturns = struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupReturnsOnCall(i int, result1 *rds.ModifyDBSubnetGroupOutput, result2 error) {
	fake.modifyDBSubnetGroupMutex.Lock()
	defer fake.modifyDBSubnetGroupMutex.Unlock()
	fake.ModifyDBSubnetGroupStub = nil
	if fake.modifyDBSubnetGroupReturnsOnCall == nil {
		fake.modifyDBSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBSubnetGroupOutput
			result2 error
		})
	}
	fake.modifyDBSubnetGroupReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupRequest(arg1 *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput) {
	fake.modifyDBSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyDBSubnetGroupRequestReturnsOnCall[len(fake.modifyDBSubnetGroupRequestArgsForCall)]
	fake.modifyDBSubnetGroupRequestArgsForCall = append(fake.modifyDBSubnetGroupRequestArgsForCall, struct {
		arg1 *rds.ModifyDBSubnetGroupInput
	}{arg1})
	stub := fake.ModifyDBSubnetGroupRequestStub
	fakeReturns := fake.modifyDBSubnetGroupRequestReturns
	fake.recordInvocation("ModifyDBSubnetGroupRequest", []interface{}{arg1})
	fake.modifyDBSubnetGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupRequestCallCount() int {
	fake.modifyDBSubnetGroupRequestMutex.RLock()
	defer fake.modifyDBSubnetGroupRequestMutex.RUnlock()
	return len(fake.modifyDBSubnetGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupRequestCalls(stub func(*rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput)) {
	fake.modifyDBSubnetGroupRequestMutex.Lock()
	defer fake.modifyDBSubnetGroupRequestMutex.Unlock()
	fake.ModifyDBSubnetGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupRequestArgsForCall(i int) *rds.ModifyDBSubnetGroupInput {
	fake.modifyDBSubnetGroupRequestMutex.RLock()
	defer fake.modifyDBSubnetGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyDBSubnetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupRequestReturns(result1 *request.Request, result2 *rds.ModifyDBSubnetGroupOutput) {
	fake.modifyDBSubnetGroupRequestMutex.Lock()
	defer fake.modifyDBSubnetGroupRequestMutex.Unlock()
	fake.ModifyDBSubnetGroupRequestStub = nil
	fake.modifyDBSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyDBSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyDBSubnetGroupOutput) {
	fake.modifyDBSubnetGroupRequestMutex.Lock()
	defer fake.modifyDBSubnetGroupRequestMutex.Unlock()
	fake.ModifyDBSubnetGroupRequestStub = nil
	if fake.modifyDBSubnetGroupRequestReturnsOnCall == nil {
		fake.modifyDBSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyDBSubnetGroupOutput
		})
	}
	fake.modifyDBSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyDBSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupWithContext(arg1 context.Context, arg2 *rds.ModifyDBSubnetGroupInput, arg3 ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {
	fake.modifyDBSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDBSubnetGroupWithContextReturnsOnCall[len(fake.modifyDBSubnetGroupWithContextArgsForCall)]
	fake.modifyDBSubnetGroupWithContextArgsForCall = append(fake.modifyDBSubnetGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyDBSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDBSubnetGroupWithContextStub
	fakeReturns := fake.modifyDBSubnetGroupWithContextReturns
	fake.recordInvocation("ModifyDBSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDBSubnetGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupWithContextCallCount() int {
	fake.modifyDBSubnetGroupWithContextMutex.RLock()
	defer fake.modifyDBSubnetGroupWithContextMutex.RUnlock()
	return len(fake.modifyDBSubnetGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupWithContextCalls(stub func(context.Context, *rds.ModifyDBSubnetGroupInput, ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error)) {
	fake.modifyDBSubnetGroupWithContextMutex.Lock()
	defer fake.modifyDBSubnetGroupWithContextMutex.Unlock()
	fake.ModifyDBSubnetGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupWithContextArgsForCall(i int) (context.Context, *rds.ModifyDBSubnetGroupInput, []request.Option) {
	fake.modifyDBSubnetGroupWithContextMutex.RLock()
	defer fake.modifyDBSubnetGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyDBSubnetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupWithContextReturns(result1 *rds.ModifyDBSubnetGroupOutput, result2 error) {
	fake.modifyDBSubnetGroupWithContextMutex.Lock()
	defer fake.modifyDBSubnetGroupWithContextMutex.Unlock()
	fake.ModifyDBSubnetGroupWithContextStub = nil
	fake.modifyDBSubnetGroupWithContextReturns = struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyDBSubnetGroupWithContextReturnsOnCall(i int, result1 *rds.ModifyDBSubnetGroupOutput, result2 error) {
	fake.modifyDBSubnetGroupWithContextMutex.Lock()
	defer fake.modifyDBSubnetGroupWithContextMutex.Unlock()
	fake.ModifyDBSubnetGroupWithContextStub = nil
	if fake.modifyDBSubnetGroupWithContextReturnsOnCall == nil {
		fake.modifyDBSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyDBSubnetGroupOutput
			result2 error
		})
	}
	fake.modifyDBSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyDBSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyEventSubscription(arg1 *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
	fake.modifyEventSubscriptionMutex.Lock()
	ret, specificReturn := fake.modifyEventSubscriptionReturnsOnCall[len(fake.modifyEventSubscriptionArgsForCall)]
	fake.modifyEventSubscriptionArgsForCall = append(fake.modifyEventSubscriptionArgsForCall, struct {
		arg1 *rds.ModifyEventSubscriptionInput
	}{arg1})
	stub := fake.ModifyEventSubscriptionStub
	fakeReturns := fake.modifyEventSubscriptionReturns
	fake.recordInvocation("ModifyEventSubscription", []interface{}{arg1})
	fake.modifyEventSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionCallCount() int {
	fake.modifyEventSubscriptionMutex.RLock()
	defer fake.modifyEventSubscriptionMutex.RUnlock()
	return len(fake.modifyEventSubscriptionArgsForCall)
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionCalls(stub func(*rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error)) {
	fake.modifyEventSubscriptionMutex.Lock()
	defer fake.modifyEventSubscriptionMutex.Unlock()
	fake.ModifyEventSubscriptionStub = stub
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionArgsForCall(i int) *rds.ModifyEventSubscriptionInput {
	fake.modifyEventSubscriptionMutex.RLock()
	defer fake.modifyEventSubscriptionMutex.RUnlock()
	argsForCall := fake.modifyEventSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionReturns(result1 *rds.ModifyEventSubscriptionOutput, result2 error) {
	fake.modifyEventSubscriptionMutex.Lock()
	defer fake.modifyEventSubscriptionMutex.Unlock()
	fake.ModifyEventSubscriptionStub = nil
	fake.modifyEventSubscriptionReturns = struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionReturnsOnCall(i int, result1 *rds.ModifyEventSubscriptionOutput, result2 error) {
	fake.modifyEventSubscriptionMutex.Lock()
	defer fake.modifyEventSubscriptionMutex.Unlock()
	fake.ModifyEventSubscriptionStub = nil
	if fake.modifyEventSubscriptionReturnsOnCall == nil {
		fake.modifyEventSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyEventSubscriptionOutput
			result2 error
		})
	}
	fake.modifyEventSubscriptionReturnsOnCall[i] = struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionRequest(arg1 *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput) {
	fake.modifyEventSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.modifyEventSubscriptionRequestReturnsOnCall[len(fake.modifyEventSubscriptionRequestArgsForCall)]
	fake.modifyEventSubscriptionRequestArgsForCall = append(fake.modifyEventSubscriptionRequestArgsForCall, struct {
		arg1 *rds.ModifyEventSubscriptionInput
	}{arg1})
	stub := fake.ModifyEventSubscriptionRequestStub
	fakeReturns := fake.modifyEventSubscriptionRequestReturns
	fake.recordInvocation("ModifyEventSubscriptionRequest", []interface{}{arg1})
	fake.modifyEventSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionRequestCallCount() int {
	fake.modifyEventSubscriptionRequestMutex.RLock()
	defer fake.modifyEventSubscriptionRequestMutex.RUnlock()
	return len(fake.modifyEventSubscriptionRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionRequestCalls(stub func(*rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput)) {
	fake.modifyEventSubscriptionRequestMutex.Lock()
	defer fake.modifyEventSubscriptionRequestMutex.Unlock()
	fake.ModifyEventSubscriptionRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionRequestArgsForCall(i int) *rds.ModifyEventSubscriptionInput {
	fake.modifyEventSubscriptionRequestMutex.RLock()
	defer fake.modifyEventSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.modifyEventSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionRequestReturns(result1 *request.Request, result2 *rds.ModifyEventSubscriptionOutput) {
	fake.modifyEventSubscriptionRequestMutex.Lock()
	defer fake.modifyEventSubscriptionRequestMutex.Unlock()
	fake.ModifyEventSubscriptionRequestStub = nil
	fake.modifyEventSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyEventSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyEventSubscriptionOutput) {
	fake.modifyEventSubscriptionRequestMutex.Lock()
	defer fake.modifyEventSubscriptionRequestMutex.Unlock()
	fake.ModifyEventSubscriptionRequestStub = nil
	if fake.modifyEventSubscriptionRequestReturnsOnCall == nil {
		fake.modifyEventSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyEventSubscriptionOutput
		})
	}
	fake.modifyEventSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyEventSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionWithContext(arg1 context.Context, arg2 *rds.ModifyEventSubscriptionInput, arg3 ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {
	fake.modifyEventSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.modifyEventSubscriptionWithContextReturnsOnCall[len(fake.modifyEventSubscriptionWithContextArgsForCall)]
	fake.modifyEventSubscriptionWithContextArgsForCall = append(fake.modifyEventSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyEventSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyEventSubscriptionWithContextStub
	fakeReturns := fake.modifyEventSubscriptionWithContextReturns
	fake.recordInvocation("ModifyEventSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyEventSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionWithContextCallCount() int {
	fake.modifyEventSubscriptionWithContextMutex.RLock()
	defer fake.modifyEventSubscriptionWithContextMutex.RUnlock()
	return len(fake.modifyEventSubscriptionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionWithContextCalls(stub func(context.Context, *rds.ModifyEventSubscriptionInput, ...request.Option) (*rds.ModifyEventSubscriptionOutput, error)) {
	fake.modifyEventSubscriptionWithContextMutex.Lock()
	defer fake.modifyEventSubscriptionWithContextMutex.Unlock()
	fake.ModifyEventSubscriptionWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionWithContextArgsForCall(i int) (context.Context, *rds.ModifyEventSubscriptionInput, []request.Option) {
	fake.modifyEventSubscriptionWithContextMutex.RLock()
	defer fake.modifyEventSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.modifyEventSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionWithContextReturns(result1 *rds.ModifyEventSubscriptionOutput, result2 error) {
	fake.modifyEventSubscriptionWithContextMutex.Lock()
	defer fake.modifyEventSubscriptionWithContextMutex.Unlock()
	fake.ModifyEventSubscriptionWithContextStub = nil
	fake.modifyEventSubscriptionWithContextReturns = struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyEventSubscriptionWithContextReturnsOnCall(i int, result1 *rds.ModifyEventSubscriptionOutput, result2 error) {
	fake.modifyEventSubscriptionWithContextMutex.Lock()
	defer fake.modifyEventSubscriptionWithContextMutex.Unlock()
	fake.ModifyEventSubscriptionWithContextStub = nil
	if fake.modifyEventSubscriptionWithContextReturnsOnCall == nil {
		fake.modifyEventSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyEventSubscriptionOutput
			result2 error
		})
	}
	fake.modifyEventSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyEventSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyGlobalCluster(arg1 *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
	fake.modifyGlobalClusterMutex.Lock()
	ret, specificReturn := fake.modifyGlobalClusterReturnsOnCall[len(fake.modifyGlobalClusterArgsForCall)]
	fake.modifyGlobalClusterArgsForCall = append(fake.modifyGlobalClusterArgsForCall, struct {
		arg1 *rds.ModifyGlobalClusterInput
	}{arg1})
	stub := fake.ModifyGlobalClusterStub
	fakeReturns := fake.modifyGlobalClusterReturns
	fake.recordInvocation("ModifyGlobalCluster", []interface{}{arg1})
	fake.modifyGlobalClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyGlobalClusterCallCount() int {
	fake.modifyGlobalClusterMutex.RLock()
	defer fake.modifyGlobalClusterMutex.RUnlock()
	return len(fake.modifyGlobalClusterArgsForCall)
}

func (fake *FakeRDSAPI) ModifyGlobalClusterCalls(stub func(*rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error)) {
	fake.modifyGlobalClusterMutex.Lock()
	defer fake.modifyGlobalClusterMutex.Unlock()
	fake.ModifyGlobalClusterStub = stub
}

func (fake *FakeRDSAPI) ModifyGlobalClusterArgsForCall(i int) *rds.ModifyGlobalClusterInput {
	fake.modifyGlobalClusterMutex.RLock()
	defer fake.modifyGlobalClusterMutex.RUnlock()
	argsForCall := fake.modifyGlobalClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyGlobalClusterReturns(result1 *rds.ModifyGlobalClusterOutput, result2 error) {
	fake.modifyGlobalClusterMutex.Lock()
	defer fake.modifyGlobalClusterMutex.Unlock()
	fake.ModifyGlobalClusterStub = nil
	fake.modifyGlobalClusterReturns = struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyGlobalClusterReturnsOnCall(i int, result1 *rds.ModifyGlobalClusterOutput, result2 error) {
	fake.modifyGlobalClusterMutex.Lock()
	defer fake.modifyGlobalClusterMutex.Unlock()
	fake.ModifyGlobalClusterStub = nil
	if fake.modifyGlobalClusterReturnsOnCall == nil {
		fake.modifyGlobalClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyGlobalClusterOutput
			result2 error
		})
	}
	fake.modifyGlobalClusterReturnsOnCall[i] = struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyGlobalClusterRequest(arg1 *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput) {
	fake.modifyGlobalClusterRequestMutex.Lock()
	ret, specificReturn := fake.modifyGlobalClusterRequestReturnsOnCall[len(fake.modifyGlobalClusterRequestArgsForCall)]
	fake.modifyGlobalClusterRequestArgsForCall = append(fake.modifyGlobalClusterRequestArgsForCall, struct {
		arg1 *rds.ModifyGlobalClusterInput
	}{arg1})
	stub := fake.ModifyGlobalClusterRequestStub
	fakeReturns := fake.modifyGlobalClusterRequestReturns
	fake.recordInvocation("ModifyGlobalClusterRequest", []interface{}{arg1})
	fake.modifyGlobalClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyGlobalClusterRequestCallCount() int {
	fake.modifyGlobalClusterRequestMutex.RLock()
	defer fake.modifyGlobalClusterRequestMutex.RUnlock()
	return len(fake.modifyGlobalClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyGlobalClusterRequestCalls(stub func(*rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput)) {
	fake.modifyGlobalClusterRequestMutex.Lock()
	defer fake.modifyGlobalClusterRequestMutex.Unlock()
	fake.ModifyGlobalClusterRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyGlobalClusterRequestArgsForCall(i int) *rds.ModifyGlobalClusterInput {
	fake.modifyGlobalClusterRequestMutex.RLock()
	defer fake.modifyGlobalClusterRequestMutex.RUnlock()
	argsForCall := fake.modifyGlobalClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyGlobalClusterRequestReturns(result1 *request.Request, result2 *rds.ModifyGlobalClusterOutput) {
	fake.modifyGlobalClusterRequestMutex.Lock()
	defer fake.modifyGlobalClusterRequestMutex.Unlock()
	fake.ModifyGlobalClusterRequestStub = nil
	fake.modifyGlobalClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyGlobalClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyGlobalClusterOutput) {
	fake.modifyGlobalClusterRequestMutex.Lock()
	defer fake.modifyGlobalClusterRequestMutex.Unlock()
	fake.ModifyGlobalClusterRequestStub = nil
	if fake.modifyGlobalClusterRequestReturnsOnCall == nil {
		fake.modifyGlobalClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyGlobalClusterOutput
		})
	}
	fake.modifyGlobalClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyGlobalClusterWithContext(arg1 context.Context, arg2 *rds.ModifyGlobalClusterInput, arg3 ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {
	fake.modifyGlobalClusterWithContextMutex.Lock()
	ret, specificReturn := fake.modifyGlobalClusterWithContextReturnsOnCall[len(fake.modifyGlobalClusterWithContextArgsForCall)]
	fake.modifyGlobalClusterWithContextArgsForCall = append(fake.modifyGlobalClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyGlobalClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyGlobalClusterWithContextStub
	fakeReturns := fake.modifyGlobalClusterWithContextReturns
	fake.recordInvocation("ModifyGlobalClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyGlobalClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyGlobalClusterWithContextCallCount() int {
	fake.modifyGlobalClusterWithContextMutex.RLock()
	defer fake.modifyGlobalClusterWithContextMutex.RUnlock()
	return len(fake.modifyGlobalClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyGlobalClusterWithContextCalls(stub func(context.Context, *rds.ModifyGlobalClusterInput, ...request.Option) (*rds.ModifyGlobalClusterOutput, error)) {
	fake.modifyGlobalClusterWithContextMutex.Lock()
	defer fake.modifyGlobalClusterWithContextMutex.Unlock()
	fake.ModifyGlobalClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyGlobalClusterWithContextArgsForCall(i int) (context.Context, *rds.ModifyGlobalClusterInput, []request.Option) {
	fake.modifyGlobalClusterWithContextMutex.RLock()
	defer fake.modifyGlobalClusterWithContextMutex.RUnlock()
	argsForCall := fake.modifyGlobalClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyGlobalClusterWithContextReturns(result1 *rds.ModifyGlobalClusterOutput, result2 error) {
	fake.modifyGlobalClusterWithContextMutex.Lock()
	defer fake.modifyGlobalClusterWithContextMutex.Unlock()
	fake.ModifyGlobalClusterWithContextStub = nil
	fake.modifyGlobalClusterWithContextReturns = struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyGlobalClusterWithContextReturnsOnCall(i int, result1 *rds.ModifyGlobalClusterOutput, result2 error) {
	fake.modifyGlobalClusterWithContextMutex.Lock()
	defer fake.modifyGlobalClusterWithContextMutex.Unlock()
	fake.ModifyGlobalClusterWithContextStub = nil
	if fake.modifyGlobalClusterWithContextReturnsOnCall == nil {
		fake.modifyGlobalClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyGlobalClusterOutput
			result2 error
		})
	}
	fake.modifyGlobalClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyOptionGroup(arg1 *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
	fake.modifyOptionGroupMutex.Lock()
	ret, specificReturn := fake.modifyOptionGroupReturnsOnCall[len(fake.modifyOptionGroupArgsForCall)]
	fake.modifyOptionGroupArgsForCall = append(fake.modifyOptionGroupArgsForCall, struct {
		arg1 *rds.ModifyOptionGroupInput
	}{arg1})
	stub := fake.ModifyOptionGroupStub
	fakeReturns := fake.modifyOptionGroupReturns
	fake.recordInvocation("ModifyOptionGroup", []interface{}{arg1})
	fake.modifyOptionGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyOptionGroupCallCount() int {
	fake.modifyOptionGroupMutex.RLock()
	defer fake.modifyOptionGroupMutex.RUnlock()
	return len(fake.modifyOptionGroupArgsForCall)
}

func (fake *FakeRDSAPI) ModifyOptionGroupCalls(stub func(*rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error)) {
	fake.modifyOptionGroupMutex.Lock()
	defer fake.modifyOptionGroupMutex.Unlock()
	fake.ModifyOptionGroupStub = stub
}

func (fake *FakeRDSAPI) ModifyOptionGroupArgsForCall(i int) *rds.ModifyOptionGroupInput {
	fake.modifyOptionGroupMutex.RLock()
	defer fake.modifyOptionGroupMutex.RUnlock()
	argsForCall := fake.modifyOptionGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyOptionGroupReturns(result1 *rds.ModifyOptionGroupOutput, result2 error) {
	fake.modifyOptionGroupMutex.Lock()
	defer fake.modifyOptionGroupMutex.Unlock()
	fake.ModifyOptionGroupStub = nil
	fake.modifyOptionGroupReturns = struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyOptionGroupReturnsOnCall(i int, result1 *rds.ModifyOptionGroupOutput, result2 error) {
	fake.modifyOptionGroupMutex.Lock()
	defer fake.modifyOptionGroupMutex.Unlock()
	fake.ModifyOptionGroupStub = nil
	if fake.modifyOptionGroupReturnsOnCall == nil {
		fake.modifyOptionGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyOptionGroupOutput
			result2 error
		})
	}
	fake.modifyOptionGroupReturnsOnCall[i] = struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyOptionGroupRequest(arg1 *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput) {
	fake.modifyOptionGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyOptionGroupRequestReturnsOnCall[len(fake.modifyOptionGroupRequestArgsForCall)]
	fake.modifyOptionGroupRequestArgsForCall = append(fake.modifyOptionGroupRequestArgsForCall, struct {
		arg1 *rds.ModifyOptionGroupInput
	}{arg1})
	stub := fake.ModifyOptionGroupRequestStub
	fakeReturns := fake.modifyOptionGroupRequestReturns
	fake.recordInvocation("ModifyOptionGroupRequest", []interface{}{arg1})
	fake.modifyOptionGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyOptionGroupRequestCallCount() int {
	fake.modifyOptionGroupRequestMutex.RLock()
	defer fake.modifyOptionGroupRequestMutex.RUnlock()
	return len(fake.modifyOptionGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ModifyOptionGroupRequestCalls(stub func(*rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput)) {
	fake.modifyOptionGroupRequestMutex.Lock()
	defer fake.modifyOptionGroupRequestMutex.Unlock()
	fake.ModifyOptionGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ModifyOptionGroupRequestArgsForCall(i int) *rds.ModifyOptionGroupInput {
	fake.modifyOptionGroupRequestMutex.RLock()
	defer fake.modifyOptionGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyOptionGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ModifyOptionGroupRequestReturns(result1 *request.Request, result2 *rds.ModifyOptionGroupOutput) {
	fake.modifyOptionGroupRequestMutex.Lock()
	defer fake.modifyOptionGroupRequestMutex.Unlock()
	fake.ModifyOptionGroupRequestStub = nil
	fake.modifyOptionGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.ModifyOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyOptionGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.ModifyOptionGroupOutput) {
	fake.modifyOptionGroupRequestMutex.Lock()
	defer fake.modifyOptionGroupRequestMutex.Unlock()
	fake.ModifyOptionGroupRequestStub = nil
	if fake.modifyOptionGroupRequestReturnsOnCall == nil {
		fake.modifyOptionGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.ModifyOptionGroupOutput
		})
	}
	fake.modifyOptionGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.ModifyOptionGroupOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyOptionGroupWithContext(arg1 context.Context, arg2 *rds.ModifyOptionGroupInput, arg3 ...request.Option) (*rds.ModifyOptionGroupOutput, error) {
	fake.modifyOptionGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyOptionGroupWithContextReturnsOnCall[len(fake.modifyOptionGroupWithContextArgsForCall)]
	fake.modifyOptionGroupWithContextArgsForCall = append(fake.modifyOptionGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ModifyOptionGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyOptionGroupWithContextStub
	fakeReturns := fake.modifyOptionGroupWithContextReturns
	fake.recordInvocation("ModifyOptionGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyOptionGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ModifyOptionGroupWithContextCallCount() int {
	fake.modifyOptionGroupWithContextMutex.RLock()
	defer fake.modifyOptionGroupWithContextMutex.RUnlock()
	return len(fake.modifyOptionGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ModifyOptionGroupWithContextCalls(stub func(context.Context, *rds.ModifyOptionGroupInput, ...request.Option) (*rds.ModifyOptionGroupOutput, error)) {
	fake.modifyOptionGroupWithContextMutex.Lock()
	defer fake.modifyOptionGroupWithContextMutex.Unlock()
	fake.ModifyOptionGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ModifyOptionGroupWithContextArgsForCall(i int) (context.Context, *rds.ModifyOptionGroupInput, []request.Option) {
	fake.modifyOptionGroupWithContextMutex.RLock()
	defer fake.modifyOptionGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyOptionGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ModifyOptionGroupWithContextReturns(result1 *rds.ModifyOptionGroupOutput, result2 error) {
	fake.modifyOptionGroupWithContextMutex.Lock()
	defer fake.modifyOptionGroupWithContextMutex.Unlock()
	fake.ModifyOptionGroupWithContextStub = nil
	fake.modifyOptionGroupWithContextReturns = struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ModifyOptionGroupWithContextReturnsOnCall(i int, result1 *rds.ModifyOptionGroupOutput, result2 error) {
	fake.modifyOptionGroupWithContextMutex.Lock()
	defer fake.modifyOptionGroupWithContextMutex.Unlock()
	fake.ModifyOptionGroupWithContextStub = nil
	if fake.modifyOptionGroupWithContextReturnsOnCall == nil {
		fake.modifyOptionGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.ModifyOptionGroupOutput
			result2 error
		})
	}
	fake.modifyOptionGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.ModifyOptionGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplica(arg1 *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
	fake.promoteReadReplicaMutex.Lock()
	ret, specificReturn := fake.promoteReadReplicaReturnsOnCall[len(fake.promoteReadReplicaArgsForCall)]
	fake.promoteReadReplicaArgsForCall = append(fake.promoteReadReplicaArgsForCall, struct {
		arg1 *rds.PromoteReadReplicaInput
	}{arg1})
	stub := fake.PromoteReadReplicaStub
	fakeReturns := fake.promoteReadReplicaReturns
	fake.recordInvocation("PromoteReadReplica", []interface{}{arg1})
	fake.promoteReadReplicaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PromoteReadReplicaCallCount() int {
	fake.promoteReadReplicaMutex.RLock()
	defer fake.promoteReadReplicaMutex.RUnlock()
	return len(fake.promoteReadReplicaArgsForCall)
}

func (fake *FakeRDSAPI) PromoteReadReplicaCalls(stub func(*rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error)) {
	fake.promoteReadReplicaMutex.Lock()
	defer fake.promoteReadReplicaMutex.Unlock()
	fake.PromoteReadReplicaStub = stub
}

func (fake *FakeRDSAPI) PromoteReadReplicaArgsForCall(i int) *rds.PromoteReadReplicaInput {
	fake.promoteReadReplicaMutex.RLock()
	defer fake.promoteReadReplicaMutex.RUnlock()
	argsForCall := fake.promoteReadReplicaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) PromoteReadReplicaReturns(result1 *rds.PromoteReadReplicaOutput, result2 error) {
	fake.promoteReadReplicaMutex.Lock()
	defer fake.promoteReadReplicaMutex.Unlock()
	fake.PromoteReadReplicaStub = nil
	fake.promoteReadReplicaReturns = struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaReturnsOnCall(i int, result1 *rds.PromoteReadReplicaOutput, result2 error) {
	fake.promoteReadReplicaMutex.Lock()
	defer fake.promoteReadReplicaMutex.Unlock()
	fake.PromoteReadReplicaStub = nil
	if fake.promoteReadReplicaReturnsOnCall == nil {
		fake.promoteReadReplicaReturnsOnCall = make(map[int]struct {
			result1 *rds.PromoteReadReplicaOutput
			result2 error
		})
	}
	fake.promoteReadReplicaReturnsOnCall[i] = struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBCluster(arg1 *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	fake.promoteReadReplicaDBClusterMutex.Lock()
	ret, specificReturn := fake.promoteReadReplicaDBClusterReturnsOnCall[len(fake.promoteReadReplicaDBClusterArgsForCall)]
	fake.promoteReadReplicaDBClusterArgsForCall = append(fake.promoteReadReplicaDBClusterArgsForCall, struct {
		arg1 *rds.PromoteReadReplicaDBClusterInput
	}{arg1})
	stub := fake.PromoteReadReplicaDBClusterStub
	fakeReturns := fake.promoteReadReplicaDBClusterReturns
	fake.recordInvocation("PromoteReadReplicaDBCluster", []interface{}{arg1})
	fake.promoteReadReplicaDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterCallCount() int {
	fake.promoteReadReplicaDBClusterMutex.RLock()
	defer fake.promoteReadReplicaDBClusterMutex.RUnlock()
	return len(fake.promoteReadReplicaDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterCalls(stub func(*rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error)) {
	fake.promoteReadReplicaDBClusterMutex.Lock()
	defer fake.promoteReadReplicaDBClusterMutex.Unlock()
	fake.PromoteReadReplicaDBClusterStub = stub
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterArgsForCall(i int) *rds.PromoteReadReplicaDBClusterInput {
	fake.promoteReadReplicaDBClusterMutex.RLock()
	defer fake.promoteReadReplicaDBClusterMutex.RUnlock()
	argsForCall := fake.promoteReadReplicaDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterReturns(result1 *rds.PromoteReadReplicaDBClusterOutput, result2 error) {
	fake.promoteReadReplicaDBClusterMutex.Lock()
	defer fake.promoteReadReplicaDBClusterMutex.Unlock()
	fake.PromoteReadReplicaDBClusterStub = nil
	fake.promoteReadReplicaDBClusterReturns = struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterReturnsOnCall(i int, result1 *rds.PromoteReadReplicaDBClusterOutput, result2 error) {
	fake.promoteReadReplicaDBClusterMutex.Lock()
	defer fake.promoteReadReplicaDBClusterMutex.Unlock()
	fake.PromoteReadReplicaDBClusterStub = nil
	if fake.promoteReadReplicaDBClusterReturnsOnCall == nil {
		fake.promoteReadReplicaDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.PromoteReadReplicaDBClusterOutput
			result2 error
		})
	}
	fake.promoteReadReplicaDBClusterReturnsOnCall[i] = struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterRequest(arg1 *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput) {
	fake.promoteReadReplicaDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.promoteReadReplicaDBClusterRequestReturnsOnCall[len(fake.promoteReadReplicaDBClusterRequestArgsForCall)]
	fake.promoteReadReplicaDBClusterRequestArgsForCall = append(fake.promoteReadReplicaDBClusterRequestArgsForCall, struct {
		arg1 *rds.PromoteReadReplicaDBClusterInput
	}{arg1})
	stub := fake.PromoteReadReplicaDBClusterRequestStub
	fakeReturns := fake.promoteReadReplicaDBClusterRequestReturns
	fake.recordInvocation("PromoteReadReplicaDBClusterRequest", []interface{}{arg1})
	fake.promoteReadReplicaDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterRequestCallCount() int {
	fake.promoteReadReplicaDBClusterRequestMutex.RLock()
	defer fake.promoteReadReplicaDBClusterRequestMutex.RUnlock()
	return len(fake.promoteReadReplicaDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterRequestCalls(stub func(*rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput)) {
	fake.promoteReadReplicaDBClusterRequestMutex.Lock()
	defer fake.promoteReadReplicaDBClusterRequestMutex.Unlock()
	fake.PromoteReadReplicaDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterRequestArgsForCall(i int) *rds.PromoteReadReplicaDBClusterInput {
	fake.promoteReadReplicaDBClusterRequestMutex.RLock()
	defer fake.promoteReadReplicaDBClusterRequestMutex.RUnlock()
	argsForCall := fake.promoteReadReplicaDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterRequestReturns(result1 *request.Request, result2 *rds.PromoteReadReplicaDBClusterOutput) {
	fake.promoteReadReplicaDBClusterRequestMutex.Lock()
	defer fake.promoteReadReplicaDBClusterRequestMutex.Unlock()
	fake.PromoteReadReplicaDBClusterRequestStub = nil
	fake.promoteReadReplicaDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.PromoteReadReplicaDBClusterOutput) {
	fake.promoteReadReplicaDBClusterRequestMutex.Lock()
	defer fake.promoteReadReplicaDBClusterRequestMutex.Unlock()
	fake.PromoteReadReplicaDBClusterRequestStub = nil
	if fake.promoteReadReplicaDBClusterRequestReturnsOnCall == nil {
		fake.promoteReadReplicaDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.PromoteReadReplicaDBClusterOutput
		})
	}
	fake.promoteReadReplicaDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterWithContext(arg1 context.Context, arg2 *rds.PromoteReadReplicaDBClusterInput, arg3 ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	fake.promoteReadReplicaDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.promoteReadReplicaDBClusterWithContextReturnsOnCall[len(fake.promoteReadReplicaDBClusterWithContextArgsForCall)]
	fake.promoteReadReplicaDBClusterWithContextArgsForCall = append(fake.promoteReadReplicaDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.PromoteReadReplicaDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PromoteReadReplicaDBClusterWithContextStub
	fakeReturns := fake.promoteReadReplicaDBClusterWithContextReturns
	fake.recordInvocation("PromoteReadReplicaDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.promoteReadReplicaDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterWithContextCallCount() int {
	fake.promoteReadReplicaDBClusterWithContextMutex.RLock()
	defer fake.promoteReadReplicaDBClusterWithContextMutex.RUnlock()
	return len(fake.promoteReadReplicaDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterWithContextCalls(stub func(context.Context, *rds.PromoteReadReplicaDBClusterInput, ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error)) {
	fake.promoteReadReplicaDBClusterWithContextMutex.Lock()
	defer fake.promoteReadReplicaDBClusterWithContextMutex.Unlock()
	fake.PromoteReadReplicaDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterWithContextArgsForCall(i int) (context.Context, *rds.PromoteReadReplicaDBClusterInput, []request.Option) {
	fake.promoteReadReplicaDBClusterWithContextMutex.RLock()
	defer fake.promoteReadReplicaDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.promoteReadReplicaDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterWithContextReturns(result1 *rds.PromoteReadReplicaDBClusterOutput, result2 error) {
	fake.promoteReadReplicaDBClusterWithContextMutex.Lock()
	defer fake.promoteReadReplicaDBClusterWithContextMutex.Unlock()
	fake.PromoteReadReplicaDBClusterWithContextStub = nil
	fake.promoteReadReplicaDBClusterWithContextReturns = struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaDBClusterWithContextReturnsOnCall(i int, result1 *rds.PromoteReadReplicaDBClusterOutput, result2 error) {
	fake.promoteReadReplicaDBClusterWithContextMutex.Lock()
	defer fake.promoteReadReplicaDBClusterWithContextMutex.Unlock()
	fake.PromoteReadReplicaDBClusterWithContextStub = nil
	if fake.promoteReadReplicaDBClusterWithContextReturnsOnCall == nil {
		fake.promoteReadReplicaDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.PromoteReadReplicaDBClusterOutput
			result2 error
		})
	}
	fake.promoteReadReplicaDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.PromoteReadReplicaDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaRequest(arg1 *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput) {
	fake.promoteReadReplicaRequestMutex.Lock()
	ret, specificReturn := fake.promoteReadReplicaRequestReturnsOnCall[len(fake.promoteReadReplicaRequestArgsForCall)]
	fake.promoteReadReplicaRequestArgsForCall = append(fake.promoteReadReplicaRequestArgsForCall, struct {
		arg1 *rds.PromoteReadReplicaInput
	}{arg1})
	stub := fake.PromoteReadReplicaRequestStub
	fakeReturns := fake.promoteReadReplicaRequestReturns
	fake.recordInvocation("PromoteReadReplicaRequest", []interface{}{arg1})
	fake.promoteReadReplicaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PromoteReadReplicaRequestCallCount() int {
	fake.promoteReadReplicaRequestMutex.RLock()
	defer fake.promoteReadReplicaRequestMutex.RUnlock()
	return len(fake.promoteReadReplicaRequestArgsForCall)
}

func (fake *FakeRDSAPI) PromoteReadReplicaRequestCalls(stub func(*rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput)) {
	fake.promoteReadReplicaRequestMutex.Lock()
	defer fake.promoteReadReplicaRequestMutex.Unlock()
	fake.PromoteReadReplicaRequestStub = stub
}

func (fake *FakeRDSAPI) PromoteReadReplicaRequestArgsForCall(i int) *rds.PromoteReadReplicaInput {
	fake.promoteReadReplicaRequestMutex.RLock()
	defer fake.promoteReadReplicaRequestMutex.RUnlock()
	argsForCall := fake.promoteReadReplicaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) PromoteReadReplicaRequestReturns(result1 *request.Request, result2 *rds.PromoteReadReplicaOutput) {
	fake.promoteReadReplicaRequestMutex.Lock()
	defer fake.promoteReadReplicaRequestMutex.Unlock()
	fake.PromoteReadReplicaRequestStub = nil
	fake.promoteReadReplicaRequestReturns = struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.PromoteReadReplicaOutput) {
	fake.promoteReadReplicaRequestMutex.Lock()
	defer fake.promoteReadReplicaRequestMutex.Unlock()
	fake.PromoteReadReplicaRequestStub = nil
	if fake.promoteReadReplicaRequestReturnsOnCall == nil {
		fake.promoteReadReplicaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.PromoteReadReplicaOutput
		})
	}
	fake.promoteReadReplicaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.PromoteReadReplicaOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaWithContext(arg1 context.Context, arg2 *rds.PromoteReadReplicaInput, arg3 ...request.Option) (*rds.PromoteReadReplicaOutput, error) {
	fake.promoteReadReplicaWithContextMutex.Lock()
	ret, specificReturn := fake.promoteReadReplicaWithContextReturnsOnCall[len(fake.promoteReadReplicaWithContextArgsForCall)]
	fake.promoteReadReplicaWithContextArgsForCall = append(fake.promoteReadReplicaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.PromoteReadReplicaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PromoteReadReplicaWithContextStub
	fakeReturns := fake.promoteReadReplicaWithContextReturns
	fake.recordInvocation("PromoteReadReplicaWithContext", []interface{}{arg1, arg2, arg3})
	fake.promoteReadReplicaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PromoteReadReplicaWithContextCallCount() int {
	fake.promoteReadReplicaWithContextMutex.RLock()
	defer fake.promoteReadReplicaWithContextMutex.RUnlock()
	return len(fake.promoteReadReplicaWithContextArgsForCall)
}

func (fake *FakeRDSAPI) PromoteReadReplicaWithContextCalls(stub func(context.Context, *rds.PromoteReadReplicaInput, ...request.Option) (*rds.PromoteReadReplicaOutput, error)) {
	fake.promoteReadReplicaWithContextMutex.Lock()
	defer fake.promoteReadReplicaWithContextMutex.Unlock()
	fake.PromoteReadReplicaWithContextStub = stub
}

func (fake *FakeRDSAPI) PromoteReadReplicaWithContextArgsForCall(i int) (context.Context, *rds.PromoteReadReplicaInput, []request.Option) {
	fake.promoteReadReplicaWithContextMutex.RLock()
	defer fake.promoteReadReplicaWithContextMutex.RUnlock()
	argsForCall := fake.promoteReadReplicaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) PromoteReadReplicaWithContextReturns(result1 *rds.PromoteReadReplicaOutput, result2 error) {
	fake.promoteReadReplicaWithContextMutex.Lock()
	defer fake.promoteReadReplicaWithContextMutex.Unlock()
	fake.PromoteReadReplicaWithContextStub = nil
	fake.promoteReadReplicaWithContextReturns = struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PromoteReadReplicaWithContextReturnsOnCall(i int, result1 *rds.PromoteReadReplicaOutput, result2 error) {
	fake.promoteReadReplicaWithContextMutex.Lock()
	defer fake.promoteReadReplicaWithContextMutex.Unlock()
	fake.PromoteReadReplicaWithContextStub = nil
	if fake.promoteReadReplicaWithContextReturnsOnCall == nil {
		fake.promoteReadReplicaWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.PromoteReadReplicaOutput
			result2 error
		})
	}
	fake.promoteReadReplicaWithContextReturnsOnCall[i] = struct {
		result1 *rds.PromoteReadReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOffering(arg1 *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	fake.purchaseReservedDBInstancesOfferingMutex.Lock()
	ret, specificReturn := fake.purchaseReservedDBInstancesOfferingReturnsOnCall[len(fake.purchaseReservedDBInstancesOfferingArgsForCall)]
	fake.purchaseReservedDBInstancesOfferingArgsForCall = append(fake.purchaseReservedDBInstancesOfferingArgsForCall, struct {
		arg1 *rds.PurchaseReservedDBInstancesOfferingInput
	}{arg1})
	stub := fake.PurchaseReservedDBInstancesOfferingStub
	fakeReturns := fake.purchaseReservedDBInstancesOfferingReturns
	fake.recordInvocation("PurchaseReservedDBInstancesOffering", []interface{}{arg1})
	fake.purchaseReservedDBInstancesOfferingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingCallCount() int {
	fake.purchaseReservedDBInstancesOfferingMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingMutex.RUnlock()
	return len(fake.purchaseReservedDBInstancesOfferingArgsForCall)
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingCalls(stub func(*rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)) {
	fake.purchaseReservedDBInstancesOfferingMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingStub = stub
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingArgsForCall(i int) *rds.PurchaseReservedDBInstancesOfferingInput {
	fake.purchaseReservedDBInstancesOfferingMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingMutex.RUnlock()
	argsForCall := fake.purchaseReservedDBInstancesOfferingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingReturns(result1 *rds.PurchaseReservedDBInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedDBInstancesOfferingMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingStub = nil
	fake.purchaseReservedDBInstancesOfferingReturns = struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingReturnsOnCall(i int, result1 *rds.PurchaseReservedDBInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedDBInstancesOfferingMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingStub = nil
	if fake.purchaseReservedDBInstancesOfferingReturnsOnCall == nil {
		fake.purchaseReservedDBInstancesOfferingReturnsOnCall = make(map[int]struct {
			result1 *rds.PurchaseReservedDBInstancesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedDBInstancesOfferingReturnsOnCall[i] = struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingRequest(arg1 *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput) {
	fake.purchaseReservedDBInstancesOfferingRequestMutex.Lock()
	ret, specificReturn := fake.purchaseReservedDBInstancesOfferingRequestReturnsOnCall[len(fake.purchaseReservedDBInstancesOfferingRequestArgsForCall)]
	fake.purchaseReservedDBInstancesOfferingRequestArgsForCall = append(fake.purchaseReservedDBInstancesOfferingRequestArgsForCall, struct {
		arg1 *rds.PurchaseReservedDBInstancesOfferingInput
	}{arg1})
	stub := fake.PurchaseReservedDBInstancesOfferingRequestStub
	fakeReturns := fake.purchaseReservedDBInstancesOfferingRequestReturns
	fake.recordInvocation("PurchaseReservedDBInstancesOfferingRequest", []interface{}{arg1})
	fake.purchaseReservedDBInstancesOfferingRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingRequestCallCount() int {
	fake.purchaseReservedDBInstancesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingRequestMutex.RUnlock()
	return len(fake.purchaseReservedDBInstancesOfferingRequestArgsForCall)
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingRequestCalls(stub func(*rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput)) {
	fake.purchaseReservedDBInstancesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingRequestStub = stub
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingRequestArgsForCall(i int) *rds.PurchaseReservedDBInstancesOfferingInput {
	fake.purchaseReservedDBInstancesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingRequestMutex.RUnlock()
	argsForCall := fake.purchaseReservedDBInstancesOfferingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingRequestReturns(result1 *request.Request, result2 *rds.PurchaseReservedDBInstancesOfferingOutput) {
	fake.purchaseReservedDBInstancesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingRequestStub = nil
	fake.purchaseReservedDBInstancesOfferingRequestReturns = struct {
		result1 *request.Request
		result2 *rds.PurchaseReservedDBInstancesOfferingOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.PurchaseReservedDBInstancesOfferingOutput) {
	fake.purchaseReservedDBInstancesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingRequestStub = nil
	if fake.purchaseReservedDBInstancesOfferingRequestReturnsOnCall == nil {
		fake.purchaseReservedDBInstancesOfferingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.PurchaseReservedDBInstancesOfferingOutput
		})
	}
	fake.purchaseReservedDBInstancesOfferingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.PurchaseReservedDBInstancesOfferingOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingWithContext(arg1 context.Context, arg2 *rds.PurchaseReservedDBInstancesOfferingInput, arg3 ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.Lock()
	ret, specificReturn := fake.purchaseReservedDBInstancesOfferingWithContextReturnsOnCall[len(fake.purchaseReservedDBInstancesOfferingWithContextArgsForCall)]
	fake.purchaseReservedDBInstancesOfferingWithContextArgsForCall = append(fake.purchaseReservedDBInstancesOfferingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.PurchaseReservedDBInstancesOfferingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PurchaseReservedDBInstancesOfferingWithContextStub
	fakeReturns := fake.purchaseReservedDBInstancesOfferingWithContextReturns
	fake.recordInvocation("PurchaseReservedDBInstancesOfferingWithContext", []interface{}{arg1, arg2, arg3})
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingWithContextCallCount() int {
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingWithContextMutex.RUnlock()
	return len(fake.purchaseReservedDBInstancesOfferingWithContextArgsForCall)
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingWithContextCalls(stub func(context.Context, *rds.PurchaseReservedDBInstancesOfferingInput, ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)) {
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingWithContextStub = stub
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingWithContextArgsForCall(i int) (context.Context, *rds.PurchaseReservedDBInstancesOfferingInput, []request.Option) {
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingWithContextMutex.RUnlock()
	argsForCall := fake.purchaseReservedDBInstancesOfferingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingWithContextReturns(result1 *rds.PurchaseReservedDBInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingWithContextStub = nil
	fake.purchaseReservedDBInstancesOfferingWithContextReturns = struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) PurchaseReservedDBInstancesOfferingWithContextReturnsOnCall(i int, result1 *rds.PurchaseReservedDBInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedDBInstancesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedDBInstancesOfferingWithContextStub = nil
	if fake.purchaseReservedDBInstancesOfferingWithContextReturnsOnCall == nil {
		fake.purchaseReservedDBInstancesOfferingWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.PurchaseReservedDBInstancesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedDBInstancesOfferingWithContextReturnsOnCall[i] = struct {
		result1 *rds.PurchaseReservedDBInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RebootDBInstance(arg1 *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
	fake.rebootDBInstanceMutex.Lock()
	ret, specificReturn := fake.rebootDBInstanceReturnsOnCall[len(fake.rebootDBInstanceArgsForCall)]
	fake.rebootDBInstanceArgsForCall = append(fake.rebootDBInstanceArgsForCall, struct {
		arg1 *rds.RebootDBInstanceInput
	}{arg1})
	stub := fake.RebootDBInstanceStub
	fakeReturns := fake.rebootDBInstanceReturns
	fake.recordInvocation("RebootDBInstance", []interface{}{arg1})
	fake.rebootDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RebootDBInstanceCallCount() int {
	fake.rebootDBInstanceMutex.RLock()
	defer fake.rebootDBInstanceMutex.RUnlock()
	return len(fake.rebootDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) RebootDBInstanceCalls(stub func(*rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error)) {
	fake.rebootDBInstanceMutex.Lock()
	defer fake.rebootDBInstanceMutex.Unlock()
	fake.RebootDBInstanceStub = stub
}

func (fake *FakeRDSAPI) RebootDBInstanceArgsForCall(i int) *rds.RebootDBInstanceInput {
	fake.rebootDBInstanceMutex.RLock()
	defer fake.rebootDBInstanceMutex.RUnlock()
	argsForCall := fake.rebootDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RebootDBInstanceReturns(result1 *rds.RebootDBInstanceOutput, result2 error) {
	fake.rebootDBInstanceMutex.Lock()
	defer fake.rebootDBInstanceMutex.Unlock()
	fake.RebootDBInstanceStub = nil
	fake.rebootDBInstanceReturns = struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RebootDBInstanceReturnsOnCall(i int, result1 *rds.RebootDBInstanceOutput, result2 error) {
	fake.rebootDBInstanceMutex.Lock()
	defer fake.rebootDBInstanceMutex.Unlock()
	fake.RebootDBInstanceStub = nil
	if fake.rebootDBInstanceReturnsOnCall == nil {
		fake.rebootDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.RebootDBInstanceOutput
			result2 error
		})
	}
	fake.rebootDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RebootDBInstanceRequest(arg1 *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput) {
	fake.rebootDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.rebootDBInstanceRequestReturnsOnCall[len(fake.rebootDBInstanceRequestArgsForCall)]
	fake.rebootDBInstanceRequestArgsForCall = append(fake.rebootDBInstanceRequestArgsForCall, struct {
		arg1 *rds.RebootDBInstanceInput
	}{arg1})
	stub := fake.RebootDBInstanceRequestStub
	fakeReturns := fake.rebootDBInstanceRequestReturns
	fake.recordInvocation("RebootDBInstanceRequest", []interface{}{arg1})
	fake.rebootDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RebootDBInstanceRequestCallCount() int {
	fake.rebootDBInstanceRequestMutex.RLock()
	defer fake.rebootDBInstanceRequestMutex.RUnlock()
	return len(fake.rebootDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) RebootDBInstanceRequestCalls(stub func(*rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput)) {
	fake.rebootDBInstanceRequestMutex.Lock()
	defer fake.rebootDBInstanceRequestMutex.Unlock()
	fake.RebootDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) RebootDBInstanceRequestArgsForCall(i int) *rds.RebootDBInstanceInput {
	fake.rebootDBInstanceRequestMutex.RLock()
	defer fake.rebootDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.rebootDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RebootDBInstanceRequestReturns(result1 *request.Request, result2 *rds.RebootDBInstanceOutput) {
	fake.rebootDBInstanceRequestMutex.Lock()
	defer fake.rebootDBInstanceRequestMutex.Unlock()
	fake.RebootDBInstanceRequestStub = nil
	fake.rebootDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RebootDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RebootDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RebootDBInstanceOutput) {
	fake.rebootDBInstanceRequestMutex.Lock()
	defer fake.rebootDBInstanceRequestMutex.Unlock()
	fake.RebootDBInstanceRequestStub = nil
	if fake.rebootDBInstanceRequestReturnsOnCall == nil {
		fake.rebootDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RebootDBInstanceOutput
		})
	}
	fake.rebootDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RebootDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RebootDBInstanceWithContext(arg1 context.Context, arg2 *rds.RebootDBInstanceInput, arg3 ...request.Option) (*rds.RebootDBInstanceOutput, error) {
	fake.rebootDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.rebootDBInstanceWithContextReturnsOnCall[len(fake.rebootDBInstanceWithContextArgsForCall)]
	fake.rebootDBInstanceWithContextArgsForCall = append(fake.rebootDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RebootDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RebootDBInstanceWithContextStub
	fakeReturns := fake.rebootDBInstanceWithContextReturns
	fake.recordInvocation("RebootDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.rebootDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RebootDBInstanceWithContextCallCount() int {
	fake.rebootDBInstanceWithContextMutex.RLock()
	defer fake.rebootDBInstanceWithContextMutex.RUnlock()
	return len(fake.rebootDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RebootDBInstanceWithContextCalls(stub func(context.Context, *rds.RebootDBInstanceInput, ...request.Option) (*rds.RebootDBInstanceOutput, error)) {
	fake.rebootDBInstanceWithContextMutex.Lock()
	defer fake.rebootDBInstanceWithContextMutex.Unlock()
	fake.RebootDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) RebootDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.RebootDBInstanceInput, []request.Option) {
	fake.rebootDBInstanceWithContextMutex.RLock()
	defer fake.rebootDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.rebootDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RebootDBInstanceWithContextReturns(result1 *rds.RebootDBInstanceOutput, result2 error) {
	fake.rebootDBInstanceWithContextMutex.Lock()
	defer fake.rebootDBInstanceWithContextMutex.Unlock()
	fake.RebootDBInstanceWithContextStub = nil
	fake.rebootDBInstanceWithContextReturns = struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RebootDBInstanceWithContextReturnsOnCall(i int, result1 *rds.RebootDBInstanceOutput, result2 error) {
	fake.rebootDBInstanceWithContextMutex.Lock()
	defer fake.rebootDBInstanceWithContextMutex.Unlock()
	fake.RebootDBInstanceWithContextStub = nil
	if fake.rebootDBInstanceWithContextReturnsOnCall == nil {
		fake.rebootDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RebootDBInstanceOutput
			result2 error
		})
	}
	fake.rebootDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.RebootDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RegisterDBProxyTargets(arg1 *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
	fake.registerDBProxyTargetsMutex.Lock()
	ret, specificReturn := fake.registerDBProxyTargetsReturnsOnCall[len(fake.registerDBProxyTargetsArgsForCall)]
	fake.registerDBProxyTargetsArgsForCall = append(fake.registerDBProxyTargetsArgsForCall, struct {
		arg1 *rds.RegisterDBProxyTargetsInput
	}{arg1})
	stub := fake.RegisterDBProxyTargetsStub
	fakeReturns := fake.registerDBProxyTargetsReturns
	fake.recordInvocation("RegisterDBProxyTargets", []interface{}{arg1})
	fake.registerDBProxyTargetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsCallCount() int {
	fake.registerDBProxyTargetsMutex.RLock()
	defer fake.registerDBProxyTargetsMutex.RUnlock()
	return len(fake.registerDBProxyTargetsArgsForCall)
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsCalls(stub func(*rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error)) {
	fake.registerDBProxyTargetsMutex.Lock()
	defer fake.registerDBProxyTargetsMutex.Unlock()
	fake.RegisterDBProxyTargetsStub = stub
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsArgsForCall(i int) *rds.RegisterDBProxyTargetsInput {
	fake.registerDBProxyTargetsMutex.RLock()
	defer fake.registerDBProxyTargetsMutex.RUnlock()
	argsForCall := fake.registerDBProxyTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsReturns(result1 *rds.RegisterDBProxyTargetsOutput, result2 error) {
	fake.registerDBProxyTargetsMutex.Lock()
	defer fake.registerDBProxyTargetsMutex.Unlock()
	fake.RegisterDBProxyTargetsStub = nil
	fake.registerDBProxyTargetsReturns = struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsReturnsOnCall(i int, result1 *rds.RegisterDBProxyTargetsOutput, result2 error) {
	fake.registerDBProxyTargetsMutex.Lock()
	defer fake.registerDBProxyTargetsMutex.Unlock()
	fake.RegisterDBProxyTargetsStub = nil
	if fake.registerDBProxyTargetsReturnsOnCall == nil {
		fake.registerDBProxyTargetsReturnsOnCall = make(map[int]struct {
			result1 *rds.RegisterDBProxyTargetsOutput
			result2 error
		})
	}
	fake.registerDBProxyTargetsReturnsOnCall[i] = struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsRequest(arg1 *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput) {
	fake.registerDBProxyTargetsRequestMutex.Lock()
	ret, specificReturn := fake.registerDBProxyTargetsRequestReturnsOnCall[len(fake.registerDBProxyTargetsRequestArgsForCall)]
	fake.registerDBProxyTargetsRequestArgsForCall = append(fake.registerDBProxyTargetsRequestArgsForCall, struct {
		arg1 *rds.RegisterDBProxyTargetsInput
	}{arg1})
	stub := fake.RegisterDBProxyTargetsRequestStub
	fakeReturns := fake.registerDBProxyTargetsRequestReturns
	fake.recordInvocation("RegisterDBProxyTargetsRequest", []interface{}{arg1})
	fake.registerDBProxyTargetsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsRequestCallCount() int {
	fake.registerDBProxyTargetsRequestMutex.RLock()
	defer fake.registerDBProxyTargetsRequestMutex.RUnlock()
	return len(fake.registerDBProxyTargetsRequestArgsForCall)
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsRequestCalls(stub func(*rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput)) {
	fake.registerDBProxyTargetsRequestMutex.Lock()
	defer fake.registerDBProxyTargetsRequestMutex.Unlock()
	fake.RegisterDBProxyTargetsRequestStub = stub
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsRequestArgsForCall(i int) *rds.RegisterDBProxyTargetsInput {
	fake.registerDBProxyTargetsRequestMutex.RLock()
	defer fake.registerDBProxyTargetsRequestMutex.RUnlock()
	argsForCall := fake.registerDBProxyTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsRequestReturns(result1 *request.Request, result2 *rds.RegisterDBProxyTargetsOutput) {
	fake.registerDBProxyTargetsRequestMutex.Lock()
	defer fake.registerDBProxyTargetsRequestMutex.Unlock()
	fake.RegisterDBProxyTargetsRequestStub = nil
	fake.registerDBProxyTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RegisterDBProxyTargetsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RegisterDBProxyTargetsOutput) {
	fake.registerDBProxyTargetsRequestMutex.Lock()
	defer fake.registerDBProxyTargetsRequestMutex.Unlock()
	fake.RegisterDBProxyTargetsRequestStub = nil
	if fake.registerDBProxyTargetsRequestReturnsOnCall == nil {
		fake.registerDBProxyTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RegisterDBProxyTargetsOutput
		})
	}
	fake.registerDBProxyTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RegisterDBProxyTargetsOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsWithContext(arg1 context.Context, arg2 *rds.RegisterDBProxyTargetsInput, arg3 ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {
	fake.registerDBProxyTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.registerDBProxyTargetsWithContextReturnsOnCall[len(fake.registerDBProxyTargetsWithContextArgsForCall)]
	fake.registerDBProxyTargetsWithContextArgsForCall = append(fake.registerDBProxyTargetsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RegisterDBProxyTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RegisterDBProxyTargetsWithContextStub
	fakeReturns := fake.registerDBProxyTargetsWithContextReturns
	fake.recordInvocation("RegisterDBProxyTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerDBProxyTargetsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsWithContextCallCount() int {
	fake.registerDBProxyTargetsWithContextMutex.RLock()
	defer fake.registerDBProxyTargetsWithContextMutex.RUnlock()
	return len(fake.registerDBProxyTargetsWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsWithContextCalls(stub func(context.Context, *rds.RegisterDBProxyTargetsInput, ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error)) {
	fake.registerDBProxyTargetsWithContextMutex.Lock()
	defer fake.registerDBProxyTargetsWithContextMutex.Unlock()
	fake.RegisterDBProxyTargetsWithContextStub = stub
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsWithContextArgsForCall(i int) (context.Context, *rds.RegisterDBProxyTargetsInput, []request.Option) {
	fake.registerDBProxyTargetsWithContextMutex.RLock()
	defer fake.registerDBProxyTargetsWithContextMutex.RUnlock()
	argsForCall := fake.registerDBProxyTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsWithContextReturns(result1 *rds.RegisterDBProxyTargetsOutput, result2 error) {
	fake.registerDBProxyTargetsWithContextMutex.Lock()
	defer fake.registerDBProxyTargetsWithContextMutex.Unlock()
	fake.RegisterDBProxyTargetsWithContextStub = nil
	fake.registerDBProxyTargetsWithContextReturns = struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RegisterDBProxyTargetsWithContextReturnsOnCall(i int, result1 *rds.RegisterDBProxyTargetsOutput, result2 error) {
	fake.registerDBProxyTargetsWithContextMutex.Lock()
	defer fake.registerDBProxyTargetsWithContextMutex.Unlock()
	fake.RegisterDBProxyTargetsWithContextStub = nil
	if fake.registerDBProxyTargetsWithContextReturnsOnCall == nil {
		fake.registerDBProxyTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RegisterDBProxyTargetsOutput
			result2 error
		})
	}
	fake.registerDBProxyTargetsWithContextReturnsOnCall[i] = struct {
		result1 *rds.RegisterDBProxyTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveFromGlobalCluster(arg1 *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
	fake.removeFromGlobalClusterMutex.Lock()
	ret, specificReturn := fake.removeFromGlobalClusterReturnsOnCall[len(fake.removeFromGlobalClusterArgsForCall)]
	fake.removeFromGlobalClusterArgsForCall = append(fake.removeFromGlobalClusterArgsForCall, struct {
		arg1 *rds.RemoveFromGlobalClusterInput
	}{arg1})
	stub := fake.RemoveFromGlobalClusterStub
	fakeReturns := fake.removeFromGlobalClusterReturns
	fake.recordInvocation("RemoveFromGlobalCluster", []interface{}{arg1})
	fake.removeFromGlobalClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterCallCount() int {
	fake.removeFromGlobalClusterMutex.RLock()
	defer fake.removeFromGlobalClusterMutex.RUnlock()
	return len(fake.removeFromGlobalClusterArgsForCall)
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterCalls(stub func(*rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error)) {
	fake.removeFromGlobalClusterMutex.Lock()
	defer fake.removeFromGlobalClusterMutex.Unlock()
	fake.RemoveFromGlobalClusterStub = stub
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterArgsForCall(i int) *rds.RemoveFromGlobalClusterInput {
	fake.removeFromGlobalClusterMutex.RLock()
	defer fake.removeFromGlobalClusterMutex.RUnlock()
	argsForCall := fake.removeFromGlobalClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterReturns(result1 *rds.RemoveFromGlobalClusterOutput, result2 error) {
	fake.removeFromGlobalClusterMutex.Lock()
	defer fake.removeFromGlobalClusterMutex.Unlock()
	fake.RemoveFromGlobalClusterStub = nil
	fake.removeFromGlobalClusterReturns = struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterReturnsOnCall(i int, result1 *rds.RemoveFromGlobalClusterOutput, result2 error) {
	fake.removeFromGlobalClusterMutex.Lock()
	defer fake.removeFromGlobalClusterMutex.Unlock()
	fake.RemoveFromGlobalClusterStub = nil
	if fake.removeFromGlobalClusterReturnsOnCall == nil {
		fake.removeFromGlobalClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveFromGlobalClusterOutput
			result2 error
		})
	}
	fake.removeFromGlobalClusterReturnsOnCall[i] = struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterRequest(arg1 *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput) {
	fake.removeFromGlobalClusterRequestMutex.Lock()
	ret, specificReturn := fake.removeFromGlobalClusterRequestReturnsOnCall[len(fake.removeFromGlobalClusterRequestArgsForCall)]
	fake.removeFromGlobalClusterRequestArgsForCall = append(fake.removeFromGlobalClusterRequestArgsForCall, struct {
		arg1 *rds.RemoveFromGlobalClusterInput
	}{arg1})
	stub := fake.RemoveFromGlobalClusterRequestStub
	fakeReturns := fake.removeFromGlobalClusterRequestReturns
	fake.recordInvocation("RemoveFromGlobalClusterRequest", []interface{}{arg1})
	fake.removeFromGlobalClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterRequestCallCount() int {
	fake.removeFromGlobalClusterRequestMutex.RLock()
	defer fake.removeFromGlobalClusterRequestMutex.RUnlock()
	return len(fake.removeFromGlobalClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterRequestCalls(stub func(*rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput)) {
	fake.removeFromGlobalClusterRequestMutex.Lock()
	defer fake.removeFromGlobalClusterRequestMutex.Unlock()
	fake.RemoveFromGlobalClusterRequestStub = stub
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterRequestArgsForCall(i int) *rds.RemoveFromGlobalClusterInput {
	fake.removeFromGlobalClusterRequestMutex.RLock()
	defer fake.removeFromGlobalClusterRequestMutex.RUnlock()
	argsForCall := fake.removeFromGlobalClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterRequestReturns(result1 *request.Request, result2 *rds.RemoveFromGlobalClusterOutput) {
	fake.removeFromGlobalClusterRequestMutex.Lock()
	defer fake.removeFromGlobalClusterRequestMutex.Unlock()
	fake.RemoveFromGlobalClusterRequestStub = nil
	fake.removeFromGlobalClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RemoveFromGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RemoveFromGlobalClusterOutput) {
	fake.removeFromGlobalClusterRequestMutex.Lock()
	defer fake.removeFromGlobalClusterRequestMutex.Unlock()
	fake.RemoveFromGlobalClusterRequestStub = nil
	if fake.removeFromGlobalClusterRequestReturnsOnCall == nil {
		fake.removeFromGlobalClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RemoveFromGlobalClusterOutput
		})
	}
	fake.removeFromGlobalClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RemoveFromGlobalClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterWithContext(arg1 context.Context, arg2 *rds.RemoveFromGlobalClusterInput, arg3 ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {
	fake.removeFromGlobalClusterWithContextMutex.Lock()
	ret, specificReturn := fake.removeFromGlobalClusterWithContextReturnsOnCall[len(fake.removeFromGlobalClusterWithContextArgsForCall)]
	fake.removeFromGlobalClusterWithContextArgsForCall = append(fake.removeFromGlobalClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RemoveFromGlobalClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveFromGlobalClusterWithContextStub
	fakeReturns := fake.removeFromGlobalClusterWithContextReturns
	fake.recordInvocation("RemoveFromGlobalClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeFromGlobalClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterWithContextCallCount() int {
	fake.removeFromGlobalClusterWithContextMutex.RLock()
	defer fake.removeFromGlobalClusterWithContextMutex.RUnlock()
	return len(fake.removeFromGlobalClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterWithContextCalls(stub func(context.Context, *rds.RemoveFromGlobalClusterInput, ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error)) {
	fake.removeFromGlobalClusterWithContextMutex.Lock()
	defer fake.removeFromGlobalClusterWithContextMutex.Unlock()
	fake.RemoveFromGlobalClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterWithContextArgsForCall(i int) (context.Context, *rds.RemoveFromGlobalClusterInput, []request.Option) {
	fake.removeFromGlobalClusterWithContextMutex.RLock()
	defer fake.removeFromGlobalClusterWithContextMutex.RUnlock()
	argsForCall := fake.removeFromGlobalClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterWithContextReturns(result1 *rds.RemoveFromGlobalClusterOutput, result2 error) {
	fake.removeFromGlobalClusterWithContextMutex.Lock()
	defer fake.removeFromGlobalClusterWithContextMutex.Unlock()
	fake.RemoveFromGlobalClusterWithContextStub = nil
	fake.removeFromGlobalClusterWithContextReturns = struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveFromGlobalClusterWithContextReturnsOnCall(i int, result1 *rds.RemoveFromGlobalClusterOutput, result2 error) {
	fake.removeFromGlobalClusterWithContextMutex.Lock()
	defer fake.removeFromGlobalClusterWithContextMutex.Unlock()
	fake.RemoveFromGlobalClusterWithContextStub = nil
	if fake.removeFromGlobalClusterWithContextReturnsOnCall == nil {
		fake.removeFromGlobalClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveFromGlobalClusterOutput
			result2 error
		})
	}
	fake.removeFromGlobalClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.RemoveFromGlobalClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBCluster(arg1 *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
	fake.removeRoleFromDBClusterMutex.Lock()
	ret, specificReturn := fake.removeRoleFromDBClusterReturnsOnCall[len(fake.removeRoleFromDBClusterArgsForCall)]
	fake.removeRoleFromDBClusterArgsForCall = append(fake.removeRoleFromDBClusterArgsForCall, struct {
		arg1 *rds.RemoveRoleFromDBClusterInput
	}{arg1})
	stub := fake.RemoveRoleFromDBClusterStub
	fakeReturns := fake.removeRoleFromDBClusterReturns
	fake.recordInvocation("RemoveRoleFromDBCluster", []interface{}{arg1})
	fake.removeRoleFromDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterCallCount() int {
	fake.removeRoleFromDBClusterMutex.RLock()
	defer fake.removeRoleFromDBClusterMutex.RUnlock()
	return len(fake.removeRoleFromDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterCalls(stub func(*rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error)) {
	fake.removeRoleFromDBClusterMutex.Lock()
	defer fake.removeRoleFromDBClusterMutex.Unlock()
	fake.RemoveRoleFromDBClusterStub = stub
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterArgsForCall(i int) *rds.RemoveRoleFromDBClusterInput {
	fake.removeRoleFromDBClusterMutex.RLock()
	defer fake.removeRoleFromDBClusterMutex.RUnlock()
	argsForCall := fake.removeRoleFromDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterReturns(result1 *rds.RemoveRoleFromDBClusterOutput, result2 error) {
	fake.removeRoleFromDBClusterMutex.Lock()
	defer fake.removeRoleFromDBClusterMutex.Unlock()
	fake.RemoveRoleFromDBClusterStub = nil
	fake.removeRoleFromDBClusterReturns = struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterReturnsOnCall(i int, result1 *rds.RemoveRoleFromDBClusterOutput, result2 error) {
	fake.removeRoleFromDBClusterMutex.Lock()
	defer fake.removeRoleFromDBClusterMutex.Unlock()
	fake.RemoveRoleFromDBClusterStub = nil
	if fake.removeRoleFromDBClusterReturnsOnCall == nil {
		fake.removeRoleFromDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveRoleFromDBClusterOutput
			result2 error
		})
	}
	fake.removeRoleFromDBClusterReturnsOnCall[i] = struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterRequest(arg1 *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput) {
	fake.removeRoleFromDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.removeRoleFromDBClusterRequestReturnsOnCall[len(fake.removeRoleFromDBClusterRequestArgsForCall)]
	fake.removeRoleFromDBClusterRequestArgsForCall = append(fake.removeRoleFromDBClusterRequestArgsForCall, struct {
		arg1 *rds.RemoveRoleFromDBClusterInput
	}{arg1})
	stub := fake.RemoveRoleFromDBClusterRequestStub
	fakeReturns := fake.removeRoleFromDBClusterRequestReturns
	fake.recordInvocation("RemoveRoleFromDBClusterRequest", []interface{}{arg1})
	fake.removeRoleFromDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterRequestCallCount() int {
	fake.removeRoleFromDBClusterRequestMutex.RLock()
	defer fake.removeRoleFromDBClusterRequestMutex.RUnlock()
	return len(fake.removeRoleFromDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterRequestCalls(stub func(*rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput)) {
	fake.removeRoleFromDBClusterRequestMutex.Lock()
	defer fake.removeRoleFromDBClusterRequestMutex.Unlock()
	fake.RemoveRoleFromDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterRequestArgsForCall(i int) *rds.RemoveRoleFromDBClusterInput {
	fake.removeRoleFromDBClusterRequestMutex.RLock()
	defer fake.removeRoleFromDBClusterRequestMutex.RUnlock()
	argsForCall := fake.removeRoleFromDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterRequestReturns(result1 *request.Request, result2 *rds.RemoveRoleFromDBClusterOutput) {
	fake.removeRoleFromDBClusterRequestMutex.Lock()
	defer fake.removeRoleFromDBClusterRequestMutex.Unlock()
	fake.RemoveRoleFromDBClusterRequestStub = nil
	fake.removeRoleFromDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RemoveRoleFromDBClusterOutput) {
	fake.removeRoleFromDBClusterRequestMutex.Lock()
	defer fake.removeRoleFromDBClusterRequestMutex.Unlock()
	fake.RemoveRoleFromDBClusterRequestStub = nil
	if fake.removeRoleFromDBClusterRequestReturnsOnCall == nil {
		fake.removeRoleFromDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RemoveRoleFromDBClusterOutput
		})
	}
	fake.removeRoleFromDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterWithContext(arg1 context.Context, arg2 *rds.RemoveRoleFromDBClusterInput, arg3 ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {
	fake.removeRoleFromDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.removeRoleFromDBClusterWithContextReturnsOnCall[len(fake.removeRoleFromDBClusterWithContextArgsForCall)]
	fake.removeRoleFromDBClusterWithContextArgsForCall = append(fake.removeRoleFromDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RemoveRoleFromDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveRoleFromDBClusterWithContextStub
	fakeReturns := fake.removeRoleFromDBClusterWithContextReturns
	fake.recordInvocation("RemoveRoleFromDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeRoleFromDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterWithContextCallCount() int {
	fake.removeRoleFromDBClusterWithContextMutex.RLock()
	defer fake.removeRoleFromDBClusterWithContextMutex.RUnlock()
	return len(fake.removeRoleFromDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterWithContextCalls(stub func(context.Context, *rds.RemoveRoleFromDBClusterInput, ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error)) {
	fake.removeRoleFromDBClusterWithContextMutex.Lock()
	defer fake.removeRoleFromDBClusterWithContextMutex.Unlock()
	fake.RemoveRoleFromDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterWithContextArgsForCall(i int) (context.Context, *rds.RemoveRoleFromDBClusterInput, []request.Option) {
	fake.removeRoleFromDBClusterWithContextMutex.RLock()
	defer fake.removeRoleFromDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.removeRoleFromDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterWithContextReturns(result1 *rds.RemoveRoleFromDBClusterOutput, result2 error) {
	fake.removeRoleFromDBClusterWithContextMutex.Lock()
	defer fake.removeRoleFromDBClusterWithContextMutex.Unlock()
	fake.RemoveRoleFromDBClusterWithContextStub = nil
	fake.removeRoleFromDBClusterWithContextReturns = struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBClusterWithContextReturnsOnCall(i int, result1 *rds.RemoveRoleFromDBClusterOutput, result2 error) {
	fake.removeRoleFromDBClusterWithContextMutex.Lock()
	defer fake.removeRoleFromDBClusterWithContextMutex.Unlock()
	fake.RemoveRoleFromDBClusterWithContextStub = nil
	if fake.removeRoleFromDBClusterWithContextReturnsOnCall == nil {
		fake.removeRoleFromDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveRoleFromDBClusterOutput
			result2 error
		})
	}
	fake.removeRoleFromDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.RemoveRoleFromDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstance(arg1 *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	fake.removeRoleFromDBInstanceMutex.Lock()
	ret, specificReturn := fake.removeRoleFromDBInstanceReturnsOnCall[len(fake.removeRoleFromDBInstanceArgsForCall)]
	fake.removeRoleFromDBInstanceArgsForCall = append(fake.removeRoleFromDBInstanceArgsForCall, struct {
		arg1 *rds.RemoveRoleFromDBInstanceInput
	}{arg1})
	stub := fake.RemoveRoleFromDBInstanceStub
	fakeReturns := fake.removeRoleFromDBInstanceReturns
	fake.recordInvocation("RemoveRoleFromDBInstance", []interface{}{arg1})
	fake.removeRoleFromDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceCallCount() int {
	fake.removeRoleFromDBInstanceMutex.RLock()
	defer fake.removeRoleFromDBInstanceMutex.RUnlock()
	return len(fake.removeRoleFromDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceCalls(stub func(*rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error)) {
	fake.removeRoleFromDBInstanceMutex.Lock()
	defer fake.removeRoleFromDBInstanceMutex.Unlock()
	fake.RemoveRoleFromDBInstanceStub = stub
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceArgsForCall(i int) *rds.RemoveRoleFromDBInstanceInput {
	fake.removeRoleFromDBInstanceMutex.RLock()
	defer fake.removeRoleFromDBInstanceMutex.RUnlock()
	argsForCall := fake.removeRoleFromDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceReturns(result1 *rds.RemoveRoleFromDBInstanceOutput, result2 error) {
	fake.removeRoleFromDBInstanceMutex.Lock()
	defer fake.removeRoleFromDBInstanceMutex.Unlock()
	fake.RemoveRoleFromDBInstanceStub = nil
	fake.removeRoleFromDBInstanceReturns = struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceReturnsOnCall(i int, result1 *rds.RemoveRoleFromDBInstanceOutput, result2 error) {
	fake.removeRoleFromDBInstanceMutex.Lock()
	defer fake.removeRoleFromDBInstanceMutex.Unlock()
	fake.RemoveRoleFromDBInstanceStub = nil
	if fake.removeRoleFromDBInstanceReturnsOnCall == nil {
		fake.removeRoleFromDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveRoleFromDBInstanceOutput
			result2 error
		})
	}
	fake.removeRoleFromDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceRequest(arg1 *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput) {
	fake.removeRoleFromDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.removeRoleFromDBInstanceRequestReturnsOnCall[len(fake.removeRoleFromDBInstanceRequestArgsForCall)]
	fake.removeRoleFromDBInstanceRequestArgsForCall = append(fake.removeRoleFromDBInstanceRequestArgsForCall, struct {
		arg1 *rds.RemoveRoleFromDBInstanceInput
	}{arg1})
	stub := fake.RemoveRoleFromDBInstanceRequestStub
	fakeReturns := fake.removeRoleFromDBInstanceRequestReturns
	fake.recordInvocation("RemoveRoleFromDBInstanceRequest", []interface{}{arg1})
	fake.removeRoleFromDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceRequestCallCount() int {
	fake.removeRoleFromDBInstanceRequestMutex.RLock()
	defer fake.removeRoleFromDBInstanceRequestMutex.RUnlock()
	return len(fake.removeRoleFromDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceRequestCalls(stub func(*rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput)) {
	fake.removeRoleFromDBInstanceRequestMutex.Lock()
	defer fake.removeRoleFromDBInstanceRequestMutex.Unlock()
	fake.RemoveRoleFromDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceRequestArgsForCall(i int) *rds.RemoveRoleFromDBInstanceInput {
	fake.removeRoleFromDBInstanceRequestMutex.RLock()
	defer fake.removeRoleFromDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.removeRoleFromDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceRequestReturns(result1 *request.Request, result2 *rds.RemoveRoleFromDBInstanceOutput) {
	fake.removeRoleFromDBInstanceRequestMutex.Lock()
	defer fake.removeRoleFromDBInstanceRequestMutex.Unlock()
	fake.RemoveRoleFromDBInstanceRequestStub = nil
	fake.removeRoleFromDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RemoveRoleFromDBInstanceOutput) {
	fake.removeRoleFromDBInstanceRequestMutex.Lock()
	defer fake.removeRoleFromDBInstanceRequestMutex.Unlock()
	fake.RemoveRoleFromDBInstanceRequestStub = nil
	if fake.removeRoleFromDBInstanceRequestReturnsOnCall == nil {
		fake.removeRoleFromDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RemoveRoleFromDBInstanceOutput
		})
	}
	fake.removeRoleFromDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RemoveRoleFromDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceWithContext(arg1 context.Context, arg2 *rds.RemoveRoleFromDBInstanceInput, arg3 ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	fake.removeRoleFromDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.removeRoleFromDBInstanceWithContextReturnsOnCall[len(fake.removeRoleFromDBInstanceWithContextArgsForCall)]
	fake.removeRoleFromDBInstanceWithContextArgsForCall = append(fake.removeRoleFromDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RemoveRoleFromDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveRoleFromDBInstanceWithContextStub
	fakeReturns := fake.removeRoleFromDBInstanceWithContextReturns
	fake.recordInvocation("RemoveRoleFromDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeRoleFromDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceWithContextCallCount() int {
	fake.removeRoleFromDBInstanceWithContextMutex.RLock()
	defer fake.removeRoleFromDBInstanceWithContextMutex.RUnlock()
	return len(fake.removeRoleFromDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceWithContextCalls(stub func(context.Context, *rds.RemoveRoleFromDBInstanceInput, ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error)) {
	fake.removeRoleFromDBInstanceWithContextMutex.Lock()
	defer fake.removeRoleFromDBInstanceWithContextMutex.Unlock()
	fake.RemoveRoleFromDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.RemoveRoleFromDBInstanceInput, []request.Option) {
	fake.removeRoleFromDBInstanceWithContextMutex.RLock()
	defer fake.removeRoleFromDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.removeRoleFromDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceWithContextReturns(result1 *rds.RemoveRoleFromDBInstanceOutput, result2 error) {
	fake.removeRoleFromDBInstanceWithContextMutex.Lock()
	defer fake.removeRoleFromDBInstanceWithContextMutex.Unlock()
	fake.RemoveRoleFromDBInstanceWithContextStub = nil
	fake.removeRoleFromDBInstanceWithContextReturns = struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveRoleFromDBInstanceWithContextReturnsOnCall(i int, result1 *rds.RemoveRoleFromDBInstanceOutput, result2 error) {
	fake.removeRoleFromDBInstanceWithContextMutex.Lock()
	defer fake.removeRoleFromDBInstanceWithContextMutex.Unlock()
	fake.RemoveRoleFromDBInstanceWithContextStub = nil
	if fake.removeRoleFromDBInstanceWithContextReturnsOnCall == nil {
		fake.removeRoleFromDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveRoleFromDBInstanceOutput
			result2 error
		})
	}
	fake.removeRoleFromDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.RemoveRoleFromDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscription(arg1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	fake.removeSourceIdentifierFromSubscriptionMutex.Lock()
	ret, specificReturn := fake.removeSourceIdentifierFromSubscriptionReturnsOnCall[len(fake.removeSourceIdentifierFromSubscriptionArgsForCall)]
	fake.removeSourceIdentifierFromSubscriptionArgsForCall = append(fake.removeSourceIdentifierFromSubscriptionArgsForCall, struct {
		arg1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}{arg1})
	stub := fake.RemoveSourceIdentifierFromSubscriptionStub
	fakeReturns := fake.removeSourceIdentifierFromSubscriptionReturns
	fake.recordInvocation("RemoveSourceIdentifierFromSubscription", []interface{}{arg1})
	fake.removeSourceIdentifierFromSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionCallCount() int {
	fake.removeSourceIdentifierFromSubscriptionMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionMutex.RUnlock()
	return len(fake.removeSourceIdentifierFromSubscriptionArgsForCall)
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionCalls(stub func(*rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)) {
	fake.removeSourceIdentifierFromSubscriptionMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionStub = stub
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionArgsForCall(i int) *rds.RemoveSourceIdentifierFromSubscriptionInput {
	fake.removeSourceIdentifierFromSubscriptionMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionMutex.RUnlock()
	argsForCall := fake.removeSourceIdentifierFromSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionReturns(result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput, result2 error) {
	fake.removeSourceIdentifierFromSubscriptionMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionStub = nil
	fake.removeSourceIdentifierFromSubscriptionReturns = struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionReturnsOnCall(i int, result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput, result2 error) {
	fake.removeSourceIdentifierFromSubscriptionMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionStub = nil
	if fake.removeSourceIdentifierFromSubscriptionReturnsOnCall == nil {
		fake.removeSourceIdentifierFromSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
			result2 error
		})
	}
	fake.removeSourceIdentifierFromSubscriptionReturnsOnCall[i] = struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionRequest(arg1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.removeSourceIdentifierFromSubscriptionRequestReturnsOnCall[len(fake.removeSourceIdentifierFromSubscriptionRequestArgsForCall)]
	fake.removeSourceIdentifierFromSubscriptionRequestArgsForCall = append(fake.removeSourceIdentifierFromSubscriptionRequestArgsForCall, struct {
		arg1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}{arg1})
	stub := fake.RemoveSourceIdentifierFromSubscriptionRequestStub
	fakeReturns := fake.removeSourceIdentifierFromSubscriptionRequestReturns
	fake.recordInvocation("RemoveSourceIdentifierFromSubscriptionRequest", []interface{}{arg1})
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionRequestCallCount() int {
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionRequestMutex.RUnlock()
	return len(fake.removeSourceIdentifierFromSubscriptionRequestArgsForCall)
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionRequestCalls(stub func(*rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput)) {
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionRequestMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionRequestStub = stub
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionRequestArgsForCall(i int) *rds.RemoveSourceIdentifierFromSubscriptionInput {
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.removeSourceIdentifierFromSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionRequestReturns(result1 *request.Request, result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionRequestMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionRequestStub = nil
	fake.removeSourceIdentifierFromSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionRequestMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionRequestStub = nil
	if fake.removeSourceIdentifierFromSubscriptionRequestReturnsOnCall == nil {
		fake.removeSourceIdentifierFromSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		})
	}
	fake.removeSourceIdentifierFromSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RemoveSourceIdentifierFromSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionWithContext(arg1 context.Context, arg2 *rds.RemoveSourceIdentifierFromSubscriptionInput, arg3 ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.removeSourceIdentifierFromSubscriptionWithContextReturnsOnCall[len(fake.removeSourceIdentifierFromSubscriptionWithContextArgsForCall)]
	fake.removeSourceIdentifierFromSubscriptionWithContextArgsForCall = append(fake.removeSourceIdentifierFromSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RemoveSourceIdentifierFromSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveSourceIdentifierFromSubscriptionWithContextStub
	fakeReturns := fake.removeSourceIdentifierFromSubscriptionWithContextReturns
	fake.recordInvocation("RemoveSourceIdentifierFromSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionWithContextCallCount() int {
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionWithContextMutex.RUnlock()
	return len(fake.removeSourceIdentifierFromSubscriptionWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionWithContextCalls(stub func(context.Context, *rds.RemoveSourceIdentifierFromSubscriptionInput, ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)) {
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionWithContextStub = stub
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionWithContextArgsForCall(i int) (context.Context, *rds.RemoveSourceIdentifierFromSubscriptionInput, []request.Option) {
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.removeSourceIdentifierFromSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionWithContextReturns(result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput, result2 error) {
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionWithContextStub = nil
	fake.removeSourceIdentifierFromSubscriptionWithContextReturns = struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveSourceIdentifierFromSubscriptionWithContextReturnsOnCall(i int, result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput, result2 error) {
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Lock()
	defer fake.removeSourceIdentifierFromSubscriptionWithContextMutex.Unlock()
	fake.RemoveSourceIdentifierFromSubscriptionWithContextStub = nil
	if fake.removeSourceIdentifierFromSubscriptionWithContextReturnsOnCall == nil {
		fake.removeSourceIdentifierFromSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
			result2 error
		})
	}
	fake.removeSourceIdentifierFromSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *rds.RemoveSourceIdentifierFromSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveTagsFromResource(arg1 *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
	fake.removeTagsFromResourceMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceReturnsOnCall[len(fake.removeTagsFromResourceArgsForCall)]
	fake.removeTagsFromResourceArgsForCall = append(fake.removeTagsFromResourceArgsForCall, struct {
		arg1 *rds.RemoveTagsFromResourceInput
	}{arg1})
	stub := fake.RemoveTagsFromResourceStub
	fakeReturns := fake.removeTagsFromResourceReturns
	fake.recordInvocation("RemoveTagsFromResource", []interface{}{arg1})
	fake.removeTagsFromResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceCallCount() int {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	return len(fake.removeTagsFromResourceArgsForCall)
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceCalls(stub func(*rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error)) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = stub
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceArgsForCall(i int) *rds.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceReturns(result1 *rds.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = nil
	fake.removeTagsFromResourceReturns = struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceReturnsOnCall(i int, result1 *rds.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = nil
	if fake.removeTagsFromResourceReturnsOnCall == nil {
		fake.removeTagsFromResourceReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveTagsFromResourceOutput
			result2 error
		})
	}
	fake.removeTagsFromResourceReturnsOnCall[i] = struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceRequest(arg1 *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceRequestReturnsOnCall[len(fake.removeTagsFromResourceRequestArgsForCall)]
	fake.removeTagsFromResourceRequestArgsForCall = append(fake.removeTagsFromResourceRequestArgsForCall, struct {
		arg1 *rds.RemoveTagsFromResourceInput
	}{arg1})
	stub := fake.RemoveTagsFromResourceRequestStub
	fakeReturns := fake.removeTagsFromResourceRequestReturns
	fake.recordInvocation("RemoveTagsFromResourceRequest", []interface{}{arg1})
	fake.removeTagsFromResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceRequestCallCount() int {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	return len(fake.removeTagsFromResourceRequestArgsForCall)
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceRequestCalls(stub func(*rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput)) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = stub
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceRequestArgsForCall(i int) *rds.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceRequestReturns(result1 *request.Request, result2 *rds.RemoveTagsFromResourceOutput) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = nil
	fake.removeTagsFromResourceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RemoveTagsFromResourceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RemoveTagsFromResourceOutput) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = nil
	if fake.removeTagsFromResourceRequestReturnsOnCall == nil {
		fake.removeTagsFromResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RemoveTagsFromResourceOutput
		})
	}
	fake.removeTagsFromResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RemoveTagsFromResourceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceWithContext(arg1 context.Context, arg2 *rds.RemoveTagsFromResourceInput, arg3 ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceWithContextReturnsOnCall[len(fake.removeTagsFromResourceWithContextArgsForCall)]
	fake.removeTagsFromResourceWithContextArgsForCall = append(fake.removeTagsFromResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RemoveTagsFromResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveTagsFromResourceWithContextStub
	fakeReturns := fake.removeTagsFromResourceWithContextReturns
	fake.recordInvocation("RemoveTagsFromResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeTagsFromResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceWithContextCallCount() int {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	return len(fake.removeTagsFromResourceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceWithContextCalls(stub func(context.Context, *rds.RemoveTagsFromResourceInput, ...request.Option) (*rds.RemoveTagsFromResourceOutput, error)) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = stub
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceWithContextArgsForCall(i int) (context.Context, *rds.RemoveTagsFromResourceInput, []request.Option) {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceWithContextReturns(result1 *rds.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	fake.removeTagsFromResourceWithContextReturns = struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RemoveTagsFromResourceWithContextReturnsOnCall(i int, result1 *rds.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	if fake.removeTagsFromResourceWithContextReturnsOnCall == nil {
		fake.removeTagsFromResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RemoveTagsFromResourceOutput
			result2 error
		})
	}
	fake.removeTagsFromResourceWithContextReturnsOnCall[i] = struct {
		result1 *rds.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroup(arg1 *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	fake.resetDBClusterParameterGroupMutex.Lock()
	ret, specificReturn := fake.resetDBClusterParameterGroupReturnsOnCall[len(fake.resetDBClusterParameterGroupArgsForCall)]
	fake.resetDBClusterParameterGroupArgsForCall = append(fake.resetDBClusterParameterGroupArgsForCall, struct {
		arg1 *rds.ResetDBClusterParameterGroupInput
	}{arg1})
	stub := fake.ResetDBClusterParameterGroupStub
	fakeReturns := fake.resetDBClusterParameterGroupReturns
	fake.recordInvocation("ResetDBClusterParameterGroup", []interface{}{arg1})
	fake.resetDBClusterParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupCallCount() int {
	fake.resetDBClusterParameterGroupMutex.RLock()
	defer fake.resetDBClusterParameterGroupMutex.RUnlock()
	return len(fake.resetDBClusterParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupCalls(stub func(*rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)) {
	fake.resetDBClusterParameterGroupMutex.Lock()
	defer fake.resetDBClusterParameterGroupMutex.Unlock()
	fake.ResetDBClusterParameterGroupStub = stub
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupArgsForCall(i int) *rds.ResetDBClusterParameterGroupInput {
	fake.resetDBClusterParameterGroupMutex.RLock()
	defer fake.resetDBClusterParameterGroupMutex.RUnlock()
	argsForCall := fake.resetDBClusterParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupReturns(result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.resetDBClusterParameterGroupMutex.Lock()
	defer fake.resetDBClusterParameterGroupMutex.Unlock()
	fake.ResetDBClusterParameterGroupStub = nil
	fake.resetDBClusterParameterGroupReturns = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupReturnsOnCall(i int, result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.resetDBClusterParameterGroupMutex.Lock()
	defer fake.resetDBClusterParameterGroupMutex.Unlock()
	fake.ResetDBClusterParameterGroupStub = nil
	if fake.resetDBClusterParameterGroupReturnsOnCall == nil {
		fake.resetDBClusterParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DBClusterParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetDBClusterParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupRequest(arg1 *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
	fake.resetDBClusterParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.resetDBClusterParameterGroupRequestReturnsOnCall[len(fake.resetDBClusterParameterGroupRequestArgsForCall)]
	fake.resetDBClusterParameterGroupRequestArgsForCall = append(fake.resetDBClusterParameterGroupRequestArgsForCall, struct {
		arg1 *rds.ResetDBClusterParameterGroupInput
	}{arg1})
	stub := fake.ResetDBClusterParameterGroupRequestStub
	fakeReturns := fake.resetDBClusterParameterGroupRequestReturns
	fake.recordInvocation("ResetDBClusterParameterGroupRequest", []interface{}{arg1})
	fake.resetDBClusterParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupRequestCallCount() int {
	fake.resetDBClusterParameterGroupRequestMutex.RLock()
	defer fake.resetDBClusterParameterGroupRequestMutex.RUnlock()
	return len(fake.resetDBClusterParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupRequestCalls(stub func(*rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)) {
	fake.resetDBClusterParameterGroupRequestMutex.Lock()
	defer fake.resetDBClusterParameterGroupRequestMutex.Unlock()
	fake.ResetDBClusterParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupRequestArgsForCall(i int) *rds.ResetDBClusterParameterGroupInput {
	fake.resetDBClusterParameterGroupRequestMutex.RLock()
	defer fake.resetDBClusterParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.resetDBClusterParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupRequestReturns(result1 *request.Request, result2 *rds.DBClusterParameterGroupNameMessage) {
	fake.resetDBClusterParameterGroupRequestMutex.Lock()
	defer fake.resetDBClusterParameterGroupRequestMutex.Unlock()
	fake.ResetDBClusterParameterGroupRequestStub = nil
	fake.resetDBClusterParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DBClusterParameterGroupNameMessage) {
	fake.resetDBClusterParameterGroupRequestMutex.Lock()
	defer fake.resetDBClusterParameterGroupRequestMutex.Unlock()
	fake.ResetDBClusterParameterGroupRequestStub = nil
	if fake.resetDBClusterParameterGroupRequestReturnsOnCall == nil {
		fake.resetDBClusterParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DBClusterParameterGroupNameMessage
		})
	}
	fake.resetDBClusterParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DBClusterParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupWithContext(arg1 context.Context, arg2 *rds.ResetDBClusterParameterGroupInput, arg3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	fake.resetDBClusterParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.resetDBClusterParameterGroupWithContextReturnsOnCall[len(fake.resetDBClusterParameterGroupWithContextArgsForCall)]
	fake.resetDBClusterParameterGroupWithContextArgsForCall = append(fake.resetDBClusterParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ResetDBClusterParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ResetDBClusterParameterGroupWithContextStub
	fakeReturns := fake.resetDBClusterParameterGroupWithContextReturns
	fake.recordInvocation("ResetDBClusterParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetDBClusterParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupWithContextCallCount() int {
	fake.resetDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.resetDBClusterParameterGroupWithContextMutex.RUnlock()
	return len(fake.resetDBClusterParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupWithContextCalls(stub func(context.Context, *rds.ResetDBClusterParameterGroupInput, ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)) {
	fake.resetDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.resetDBClusterParameterGroupWithContextMutex.Unlock()
	fake.ResetDBClusterParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.ResetDBClusterParameterGroupInput, []request.Option) {
	fake.resetDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.resetDBClusterParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.resetDBClusterParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupWithContextReturns(result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.resetDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.resetDBClusterParameterGroupWithContextMutex.Unlock()
	fake.ResetDBClusterParameterGroupWithContextStub = nil
	fake.resetDBClusterParameterGroupWithContextReturns = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBClusterParameterGroupWithContextReturnsOnCall(i int, result1 *rds.DBClusterParameterGroupNameMessage, result2 error) {
	fake.resetDBClusterParameterGroupWithContextMutex.Lock()
	defer fake.resetDBClusterParameterGroupWithContextMutex.Unlock()
	fake.ResetDBClusterParameterGroupWithContextStub = nil
	if fake.resetDBClusterParameterGroupWithContextReturnsOnCall == nil {
		fake.resetDBClusterParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DBClusterParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetDBClusterParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DBClusterParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBParameterGroup(arg1 *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	fake.resetDBParameterGroupMutex.Lock()
	ret, specificReturn := fake.resetDBParameterGroupReturnsOnCall[len(fake.resetDBParameterGroupArgsForCall)]
	fake.resetDBParameterGroupArgsForCall = append(fake.resetDBParameterGroupArgsForCall, struct {
		arg1 *rds.ResetDBParameterGroupInput
	}{arg1})
	stub := fake.ResetDBParameterGroupStub
	fakeReturns := fake.resetDBParameterGroupReturns
	fake.recordInvocation("ResetDBParameterGroup", []interface{}{arg1})
	fake.resetDBParameterGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ResetDBParameterGroupCallCount() int {
	fake.resetDBParameterGroupMutex.RLock()
	defer fake.resetDBParameterGroupMutex.RUnlock()
	return len(fake.resetDBParameterGroupArgsForCall)
}

func (fake *FakeRDSAPI) ResetDBParameterGroupCalls(stub func(*rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)) {
	fake.resetDBParameterGroupMutex.Lock()
	defer fake.resetDBParameterGroupMutex.Unlock()
	fake.ResetDBParameterGroupStub = stub
}

func (fake *FakeRDSAPI) ResetDBParameterGroupArgsForCall(i int) *rds.ResetDBParameterGroupInput {
	fake.resetDBParameterGroupMutex.RLock()
	defer fake.resetDBParameterGroupMutex.RUnlock()
	argsForCall := fake.resetDBParameterGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ResetDBParameterGroupReturns(result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.resetDBParameterGroupMutex.Lock()
	defer fake.resetDBParameterGroupMutex.Unlock()
	fake.ResetDBParameterGroupStub = nil
	fake.resetDBParameterGroupReturns = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBParameterGroupReturnsOnCall(i int, result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.resetDBParameterGroupMutex.Lock()
	defer fake.resetDBParameterGroupMutex.Unlock()
	fake.ResetDBParameterGroupStub = nil
	if fake.resetDBParameterGroupReturnsOnCall == nil {
		fake.resetDBParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *rds.DBParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetDBParameterGroupReturnsOnCall[i] = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBParameterGroupRequest(arg1 *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
	fake.resetDBParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.resetDBParameterGroupRequestReturnsOnCall[len(fake.resetDBParameterGroupRequestArgsForCall)]
	fake.resetDBParameterGroupRequestArgsForCall = append(fake.resetDBParameterGroupRequestArgsForCall, struct {
		arg1 *rds.ResetDBParameterGroupInput
	}{arg1})
	stub := fake.ResetDBParameterGroupRequestStub
	fakeReturns := fake.resetDBParameterGroupRequestReturns
	fake.recordInvocation("ResetDBParameterGroupRequest", []interface{}{arg1})
	fake.resetDBParameterGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ResetDBParameterGroupRequestCallCount() int {
	fake.resetDBParameterGroupRequestMutex.RLock()
	defer fake.resetDBParameterGroupRequestMutex.RUnlock()
	return len(fake.resetDBParameterGroupRequestArgsForCall)
}

func (fake *FakeRDSAPI) ResetDBParameterGroupRequestCalls(stub func(*rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)) {
	fake.resetDBParameterGroupRequestMutex.Lock()
	defer fake.resetDBParameterGroupRequestMutex.Unlock()
	fake.ResetDBParameterGroupRequestStub = stub
}

func (fake *FakeRDSAPI) ResetDBParameterGroupRequestArgsForCall(i int) *rds.ResetDBParameterGroupInput {
	fake.resetDBParameterGroupRequestMutex.RLock()
	defer fake.resetDBParameterGroupRequestMutex.RUnlock()
	argsForCall := fake.resetDBParameterGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) ResetDBParameterGroupRequestReturns(result1 *request.Request, result2 *rds.DBParameterGroupNameMessage) {
	fake.resetDBParameterGroupRequestMutex.Lock()
	defer fake.resetDBParameterGroupRequestMutex.Unlock()
	fake.ResetDBParameterGroupRequestStub = nil
	fake.resetDBParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.DBParameterGroupNameMessage) {
	fake.resetDBParameterGroupRequestMutex.Lock()
	defer fake.resetDBParameterGroupRequestMutex.Unlock()
	fake.ResetDBParameterGroupRequestStub = nil
	if fake.resetDBParameterGroupRequestReturnsOnCall == nil {
		fake.resetDBParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.DBParameterGroupNameMessage
		})
	}
	fake.resetDBParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.DBParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBParameterGroupWithContext(arg1 context.Context, arg2 *rds.ResetDBParameterGroupInput, arg3 ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	fake.resetDBParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.resetDBParameterGroupWithContextReturnsOnCall[len(fake.resetDBParameterGroupWithContextArgsForCall)]
	fake.resetDBParameterGroupWithContextArgsForCall = append(fake.resetDBParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.ResetDBParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ResetDBParameterGroupWithContextStub
	fakeReturns := fake.resetDBParameterGroupWithContextReturns
	fake.recordInvocation("ResetDBParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetDBParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) ResetDBParameterGroupWithContextCallCount() int {
	fake.resetDBParameterGroupWithContextMutex.RLock()
	defer fake.resetDBParameterGroupWithContextMutex.RUnlock()
	return len(fake.resetDBParameterGroupWithContextArgsForCall)
}

func (fake *FakeRDSAPI) ResetDBParameterGroupWithContextCalls(stub func(context.Context, *rds.ResetDBParameterGroupInput, ...request.Option) (*rds.DBParameterGroupNameMessage, error)) {
	fake.resetDBParameterGroupWithContextMutex.Lock()
	defer fake.resetDBParameterGroupWithContextMutex.Unlock()
	fake.ResetDBParameterGroupWithContextStub = stub
}

func (fake *FakeRDSAPI) ResetDBParameterGroupWithContextArgsForCall(i int) (context.Context, *rds.ResetDBParameterGroupInput, []request.Option) {
	fake.resetDBParameterGroupWithContextMutex.RLock()
	defer fake.resetDBParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.resetDBParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) ResetDBParameterGroupWithContextReturns(result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.resetDBParameterGroupWithContextMutex.Lock()
	defer fake.resetDBParameterGroupWithContextMutex.Unlock()
	fake.ResetDBParameterGroupWithContextStub = nil
	fake.resetDBParameterGroupWithContextReturns = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) ResetDBParameterGroupWithContextReturnsOnCall(i int, result1 *rds.DBParameterGroupNameMessage, result2 error) {
	fake.resetDBParameterGroupWithContextMutex.Lock()
	defer fake.resetDBParameterGroupWithContextMutex.Unlock()
	fake.ResetDBParameterGroupWithContextStub = nil
	if fake.resetDBParameterGroupWithContextReturnsOnCall == nil {
		fake.resetDBParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.DBParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetDBParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *rds.DBParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3(arg1 *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
	fake.restoreDBClusterFromS3Mutex.Lock()
	ret, specificReturn := fake.restoreDBClusterFromS3ReturnsOnCall[len(fake.restoreDBClusterFromS3ArgsForCall)]
	fake.restoreDBClusterFromS3ArgsForCall = append(fake.restoreDBClusterFromS3ArgsForCall, struct {
		arg1 *rds.RestoreDBClusterFromS3Input
	}{arg1})
	stub := fake.RestoreDBClusterFromS3Stub
	fakeReturns := fake.restoreDBClusterFromS3Returns
	fake.recordInvocation("RestoreDBClusterFromS3", []interface{}{arg1})
	fake.restoreDBClusterFromS3Mutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3CallCount() int {
	fake.restoreDBClusterFromS3Mutex.RLock()
	defer fake.restoreDBClusterFromS3Mutex.RUnlock()
	return len(fake.restoreDBClusterFromS3ArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3Calls(stub func(*rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error)) {
	fake.restoreDBClusterFromS3Mutex.Lock()
	defer fake.restoreDBClusterFromS3Mutex.Unlock()
	fake.RestoreDBClusterFromS3Stub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3ArgsForCall(i int) *rds.RestoreDBClusterFromS3Input {
	fake.restoreDBClusterFromS3Mutex.RLock()
	defer fake.restoreDBClusterFromS3Mutex.RUnlock()
	argsForCall := fake.restoreDBClusterFromS3ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3Returns(result1 *rds.RestoreDBClusterFromS3Output, result2 error) {
	fake.restoreDBClusterFromS3Mutex.Lock()
	defer fake.restoreDBClusterFromS3Mutex.Unlock()
	fake.RestoreDBClusterFromS3Stub = nil
	fake.restoreDBClusterFromS3Returns = struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3ReturnsOnCall(i int, result1 *rds.RestoreDBClusterFromS3Output, result2 error) {
	fake.restoreDBClusterFromS3Mutex.Lock()
	defer fake.restoreDBClusterFromS3Mutex.Unlock()
	fake.RestoreDBClusterFromS3Stub = nil
	if fake.restoreDBClusterFromS3ReturnsOnCall == nil {
		fake.restoreDBClusterFromS3ReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBClusterFromS3Output
			result2 error
		})
	}
	fake.restoreDBClusterFromS3ReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3Request(arg1 *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output) {
	fake.restoreDBClusterFromS3RequestMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterFromS3RequestReturnsOnCall[len(fake.restoreDBClusterFromS3RequestArgsForCall)]
	fake.restoreDBClusterFromS3RequestArgsForCall = append(fake.restoreDBClusterFromS3RequestArgsForCall, struct {
		arg1 *rds.RestoreDBClusterFromS3Input
	}{arg1})
	stub := fake.RestoreDBClusterFromS3RequestStub
	fakeReturns := fake.restoreDBClusterFromS3RequestReturns
	fake.recordInvocation("RestoreDBClusterFromS3Request", []interface{}{arg1})
	fake.restoreDBClusterFromS3RequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3RequestCallCount() int {
	fake.restoreDBClusterFromS3RequestMutex.RLock()
	defer fake.restoreDBClusterFromS3RequestMutex.RUnlock()
	return len(fake.restoreDBClusterFromS3RequestArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3RequestCalls(stub func(*rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output)) {
	fake.restoreDBClusterFromS3RequestMutex.Lock()
	defer fake.restoreDBClusterFromS3RequestMutex.Unlock()
	fake.RestoreDBClusterFromS3RequestStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3RequestArgsForCall(i int) *rds.RestoreDBClusterFromS3Input {
	fake.restoreDBClusterFromS3RequestMutex.RLock()
	defer fake.restoreDBClusterFromS3RequestMutex.RUnlock()
	argsForCall := fake.restoreDBClusterFromS3RequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3RequestReturns(result1 *request.Request, result2 *rds.RestoreDBClusterFromS3Output) {
	fake.restoreDBClusterFromS3RequestMutex.Lock()
	defer fake.restoreDBClusterFromS3RequestMutex.Unlock()
	fake.RestoreDBClusterFromS3RequestStub = nil
	fake.restoreDBClusterFromS3RequestReturns = struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromS3Output
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3RequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RestoreDBClusterFromS3Output) {
	fake.restoreDBClusterFromS3RequestMutex.Lock()
	defer fake.restoreDBClusterFromS3RequestMutex.Unlock()
	fake.RestoreDBClusterFromS3RequestStub = nil
	if fake.restoreDBClusterFromS3RequestReturnsOnCall == nil {
		fake.restoreDBClusterFromS3RequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RestoreDBClusterFromS3Output
		})
	}
	fake.restoreDBClusterFromS3RequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromS3Output
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3WithContext(arg1 context.Context, arg2 *rds.RestoreDBClusterFromS3Input, arg3 ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {
	fake.restoreDBClusterFromS3WithContextMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterFromS3WithContextReturnsOnCall[len(fake.restoreDBClusterFromS3WithContextArgsForCall)]
	fake.restoreDBClusterFromS3WithContextArgsForCall = append(fake.restoreDBClusterFromS3WithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RestoreDBClusterFromS3Input
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreDBClusterFromS3WithContextStub
	fakeReturns := fake.restoreDBClusterFromS3WithContextReturns
	fake.recordInvocation("RestoreDBClusterFromS3WithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreDBClusterFromS3WithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3WithContextCallCount() int {
	fake.restoreDBClusterFromS3WithContextMutex.RLock()
	defer fake.restoreDBClusterFromS3WithContextMutex.RUnlock()
	return len(fake.restoreDBClusterFromS3WithContextArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3WithContextCalls(stub func(context.Context, *rds.RestoreDBClusterFromS3Input, ...request.Option) (*rds.RestoreDBClusterFromS3Output, error)) {
	fake.restoreDBClusterFromS3WithContextMutex.Lock()
	defer fake.restoreDBClusterFromS3WithContextMutex.Unlock()
	fake.RestoreDBClusterFromS3WithContextStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3WithContextArgsForCall(i int) (context.Context, *rds.RestoreDBClusterFromS3Input, []request.Option) {
	fake.restoreDBClusterFromS3WithContextMutex.RLock()
	defer fake.restoreDBClusterFromS3WithContextMutex.RUnlock()
	argsForCall := fake.restoreDBClusterFromS3WithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3WithContextReturns(result1 *rds.RestoreDBClusterFromS3Output, result2 error) {
	fake.restoreDBClusterFromS3WithContextMutex.Lock()
	defer fake.restoreDBClusterFromS3WithContextMutex.Unlock()
	fake.RestoreDBClusterFromS3WithContextStub = nil
	fake.restoreDBClusterFromS3WithContextReturns = struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromS3WithContextReturnsOnCall(i int, result1 *rds.RestoreDBClusterFromS3Output, result2 error) {
	fake.restoreDBClusterFromS3WithContextMutex.Lock()
	defer fake.restoreDBClusterFromS3WithContextMutex.Unlock()
	fake.RestoreDBClusterFromS3WithContextStub = nil
	if fake.restoreDBClusterFromS3WithContextReturnsOnCall == nil {
		fake.restoreDBClusterFromS3WithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBClusterFromS3Output
			result2 error
		})
	}
	fake.restoreDBClusterFromS3WithContextReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBClusterFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshot(arg1 *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	fake.restoreDBClusterFromSnapshotMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterFromSnapshotReturnsOnCall[len(fake.restoreDBClusterFromSnapshotArgsForCall)]
	fake.restoreDBClusterFromSnapshotArgsForCall = append(fake.restoreDBClusterFromSnapshotArgsForCall, struct {
		arg1 *rds.RestoreDBClusterFromSnapshotInput
	}{arg1})
	stub := fake.RestoreDBClusterFromSnapshotStub
	fakeReturns := fake.restoreDBClusterFromSnapshotReturns
	fake.recordInvocation("RestoreDBClusterFromSnapshot", []interface{}{arg1})
	fake.restoreDBClusterFromSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotCallCount() int {
	fake.restoreDBClusterFromSnapshotMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotMutex.RUnlock()
	return len(fake.restoreDBClusterFromSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotCalls(stub func(*rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error)) {
	fake.restoreDBClusterFromSnapshotMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotArgsForCall(i int) *rds.RestoreDBClusterFromSnapshotInput {
	fake.restoreDBClusterFromSnapshotMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotMutex.RUnlock()
	argsForCall := fake.restoreDBClusterFromSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotReturns(result1 *rds.RestoreDBClusterFromSnapshotOutput, result2 error) {
	fake.restoreDBClusterFromSnapshotMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotStub = nil
	fake.restoreDBClusterFromSnapshotReturns = struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotReturnsOnCall(i int, result1 *rds.RestoreDBClusterFromSnapshotOutput, result2 error) {
	fake.restoreDBClusterFromSnapshotMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotStub = nil
	if fake.restoreDBClusterFromSnapshotReturnsOnCall == nil {
		fake.restoreDBClusterFromSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBClusterFromSnapshotOutput
			result2 error
		})
	}
	fake.restoreDBClusterFromSnapshotReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotRequest(arg1 *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput) {
	fake.restoreDBClusterFromSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterFromSnapshotRequestReturnsOnCall[len(fake.restoreDBClusterFromSnapshotRequestArgsForCall)]
	fake.restoreDBClusterFromSnapshotRequestArgsForCall = append(fake.restoreDBClusterFromSnapshotRequestArgsForCall, struct {
		arg1 *rds.RestoreDBClusterFromSnapshotInput
	}{arg1})
	stub := fake.RestoreDBClusterFromSnapshotRequestStub
	fakeReturns := fake.restoreDBClusterFromSnapshotRequestReturns
	fake.recordInvocation("RestoreDBClusterFromSnapshotRequest", []interface{}{arg1})
	fake.restoreDBClusterFromSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotRequestCallCount() int {
	fake.restoreDBClusterFromSnapshotRequestMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotRequestMutex.RUnlock()
	return len(fake.restoreDBClusterFromSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotRequestCalls(stub func(*rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput)) {
	fake.restoreDBClusterFromSnapshotRequestMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotRequestMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotRequestArgsForCall(i int) *rds.RestoreDBClusterFromSnapshotInput {
	fake.restoreDBClusterFromSnapshotRequestMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotRequestMutex.RUnlock()
	argsForCall := fake.restoreDBClusterFromSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotRequestReturns(result1 *request.Request, result2 *rds.RestoreDBClusterFromSnapshotOutput) {
	fake.restoreDBClusterFromSnapshotRequestMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotRequestMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotRequestStub = nil
	fake.restoreDBClusterFromSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RestoreDBClusterFromSnapshotOutput) {
	fake.restoreDBClusterFromSnapshotRequestMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotRequestMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotRequestStub = nil
	if fake.restoreDBClusterFromSnapshotRequestReturnsOnCall == nil {
		fake.restoreDBClusterFromSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RestoreDBClusterFromSnapshotOutput
		})
	}
	fake.restoreDBClusterFromSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterFromSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotWithContext(arg1 context.Context, arg2 *rds.RestoreDBClusterFromSnapshotInput, arg3 ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	fake.restoreDBClusterFromSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterFromSnapshotWithContextReturnsOnCall[len(fake.restoreDBClusterFromSnapshotWithContextArgsForCall)]
	fake.restoreDBClusterFromSnapshotWithContextArgsForCall = append(fake.restoreDBClusterFromSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RestoreDBClusterFromSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreDBClusterFromSnapshotWithContextStub
	fakeReturns := fake.restoreDBClusterFromSnapshotWithContextReturns
	fake.recordInvocation("RestoreDBClusterFromSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreDBClusterFromSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotWithContextCallCount() int {
	fake.restoreDBClusterFromSnapshotWithContextMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotWithContextMutex.RUnlock()
	return len(fake.restoreDBClusterFromSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotWithContextCalls(stub func(context.Context, *rds.RestoreDBClusterFromSnapshotInput, ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error)) {
	fake.restoreDBClusterFromSnapshotWithContextMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotWithContextMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotWithContextArgsForCall(i int) (context.Context, *rds.RestoreDBClusterFromSnapshotInput, []request.Option) {
	fake.restoreDBClusterFromSnapshotWithContextMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.restoreDBClusterFromSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotWithContextReturns(result1 *rds.RestoreDBClusterFromSnapshotOutput, result2 error) {
	fake.restoreDBClusterFromSnapshotWithContextMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotWithContextMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotWithContextStub = nil
	fake.restoreDBClusterFromSnapshotWithContextReturns = struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterFromSnapshotWithContextReturnsOnCall(i int, result1 *rds.RestoreDBClusterFromSnapshotOutput, result2 error) {
	fake.restoreDBClusterFromSnapshotWithContextMutex.Lock()
	defer fake.restoreDBClusterFromSnapshotWithContextMutex.Unlock()
	fake.RestoreDBClusterFromSnapshotWithContextStub = nil
	if fake.restoreDBClusterFromSnapshotWithContextReturnsOnCall == nil {
		fake.restoreDBClusterFromSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBClusterFromSnapshotOutput
			result2 error
		})
	}
	fake.restoreDBClusterFromSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBClusterFromSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTime(arg1 *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	fake.restoreDBClusterToPointInTimeMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterToPointInTimeReturnsOnCall[len(fake.restoreDBClusterToPointInTimeArgsForCall)]
	fake.restoreDBClusterToPointInTimeArgsForCall = append(fake.restoreDBClusterToPointInTimeArgsForCall, struct {
		arg1 *rds.RestoreDBClusterToPointInTimeInput
	}{arg1})
	stub := fake.RestoreDBClusterToPointInTimeStub
	fakeReturns := fake.restoreDBClusterToPointInTimeReturns
	fake.recordInvocation("RestoreDBClusterToPointInTime", []interface{}{arg1})
	fake.restoreDBClusterToPointInTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeCallCount() int {
	fake.restoreDBClusterToPointInTimeMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeMutex.RUnlock()
	return len(fake.restoreDBClusterToPointInTimeArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeCalls(stub func(*rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error)) {
	fake.restoreDBClusterToPointInTimeMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeArgsForCall(i int) *rds.RestoreDBClusterToPointInTimeInput {
	fake.restoreDBClusterToPointInTimeMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeMutex.RUnlock()
	argsForCall := fake.restoreDBClusterToPointInTimeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeReturns(result1 *rds.RestoreDBClusterToPointInTimeOutput, result2 error) {
	fake.restoreDBClusterToPointInTimeMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeStub = nil
	fake.restoreDBClusterToPointInTimeReturns = struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeReturnsOnCall(i int, result1 *rds.RestoreDBClusterToPointInTimeOutput, result2 error) {
	fake.restoreDBClusterToPointInTimeMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeStub = nil
	if fake.restoreDBClusterToPointInTimeReturnsOnCall == nil {
		fake.restoreDBClusterToPointInTimeReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBClusterToPointInTimeOutput
			result2 error
		})
	}
	fake.restoreDBClusterToPointInTimeReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeRequest(arg1 *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput) {
	fake.restoreDBClusterToPointInTimeRequestMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterToPointInTimeRequestReturnsOnCall[len(fake.restoreDBClusterToPointInTimeRequestArgsForCall)]
	fake.restoreDBClusterToPointInTimeRequestArgsForCall = append(fake.restoreDBClusterToPointInTimeRequestArgsForCall, struct {
		arg1 *rds.RestoreDBClusterToPointInTimeInput
	}{arg1})
	stub := fake.RestoreDBClusterToPointInTimeRequestStub
	fakeReturns := fake.restoreDBClusterToPointInTimeRequestReturns
	fake.recordInvocation("RestoreDBClusterToPointInTimeRequest", []interface{}{arg1})
	fake.restoreDBClusterToPointInTimeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeRequestCallCount() int {
	fake.restoreDBClusterToPointInTimeRequestMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeRequestMutex.RUnlock()
	return len(fake.restoreDBClusterToPointInTimeRequestArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeRequestCalls(stub func(*rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput)) {
	fake.restoreDBClusterToPointInTimeRequestMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeRequestMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeRequestStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeRequestArgsForCall(i int) *rds.RestoreDBClusterToPointInTimeInput {
	fake.restoreDBClusterToPointInTimeRequestMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeRequestMutex.RUnlock()
	argsForCall := fake.restoreDBClusterToPointInTimeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeRequestReturns(result1 *request.Request, result2 *rds.RestoreDBClusterToPointInTimeOutput) {
	fake.restoreDBClusterToPointInTimeRequestMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeRequestMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeRequestStub = nil
	fake.restoreDBClusterToPointInTimeRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterToPointInTimeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RestoreDBClusterToPointInTimeOutput) {
	fake.restoreDBClusterToPointInTimeRequestMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeRequestMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeRequestStub = nil
	if fake.restoreDBClusterToPointInTimeRequestReturnsOnCall == nil {
		fake.restoreDBClusterToPointInTimeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RestoreDBClusterToPointInTimeOutput
		})
	}
	fake.restoreDBClusterToPointInTimeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RestoreDBClusterToPointInTimeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeWithContext(arg1 context.Context, arg2 *rds.RestoreDBClusterToPointInTimeInput, arg3 ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	fake.restoreDBClusterToPointInTimeWithContextMutex.Lock()
	ret, specificReturn := fake.restoreDBClusterToPointInTimeWithContextReturnsOnCall[len(fake.restoreDBClusterToPointInTimeWithContextArgsForCall)]
	fake.restoreDBClusterToPointInTimeWithContextArgsForCall = append(fake.restoreDBClusterToPointInTimeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RestoreDBClusterToPointInTimeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreDBClusterToPointInTimeWithContextStub
	fakeReturns := fake.restoreDBClusterToPointInTimeWithContextReturns
	fake.recordInvocation("RestoreDBClusterToPointInTimeWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreDBClusterToPointInTimeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeWithContextCallCount() int {
	fake.restoreDBClusterToPointInTimeWithContextMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeWithContextMutex.RUnlock()
	return len(fake.restoreDBClusterToPointInTimeWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeWithContextCalls(stub func(context.Context, *rds.RestoreDBClusterToPointInTimeInput, ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error)) {
	fake.restoreDBClusterToPointInTimeWithContextMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeWithContextMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeWithContextStub = stub
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeWithContextArgsForCall(i int) (context.Context, *rds.RestoreDBClusterToPointInTimeInput, []request.Option) {
	fake.restoreDBClusterToPointInTimeWithContextMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeWithContextMutex.RUnlock()
	argsForCall := fake.restoreDBClusterToPointInTimeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeWithContextReturns(result1 *rds.RestoreDBClusterToPointInTimeOutput, result2 error) {
	fake.restoreDBClusterToPointInTimeWithContextMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeWithContextMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeWithContextStub = nil
	fake.restoreDBClusterToPointInTimeWithContextReturns = struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBClusterToPointInTimeWithContextReturnsOnCall(i int, result1 *rds.RestoreDBClusterToPointInTimeOutput, result2 error) {
	fake.restoreDBClusterToPointInTimeWithContextMutex.Lock()
	defer fake.restoreDBClusterToPointInTimeWithContextMutex.Unlock()
	fake.RestoreDBClusterToPointInTimeWithContextStub = nil
	if fake.restoreDBClusterToPointInTimeWithContextReturnsOnCall == nil {
		fake.restoreDBClusterToPointInTimeWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBClusterToPointInTimeOutput
			result2 error
		})
	}
	fake.restoreDBClusterToPointInTimeWithContextReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBClusterToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshot(arg1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	fake.restoreDBInstanceFromDBSnapshotMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceFromDBSnapshotReturnsOnCall[len(fake.restoreDBInstanceFromDBSnapshotArgsForCall)]
	fake.restoreDBInstanceFromDBSnapshotArgsForCall = append(fake.restoreDBInstanceFromDBSnapshotArgsForCall, struct {
		arg1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}{arg1})
	stub := fake.RestoreDBInstanceFromDBSnapshotStub
	fakeReturns := fake.restoreDBInstanceFromDBSnapshotReturns
	fake.recordInvocation("RestoreDBInstanceFromDBSnapshot", []interface{}{arg1})
	fake.restoreDBInstanceFromDBSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotCallCount() int {
	fake.restoreDBInstanceFromDBSnapshotMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotMutex.RUnlock()
	return len(fake.restoreDBInstanceFromDBSnapshotArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotCalls(stub func(*rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)) {
	fake.restoreDBInstanceFromDBSnapshotMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotArgsForCall(i int) *rds.RestoreDBInstanceFromDBSnapshotInput {
	fake.restoreDBInstanceFromDBSnapshotMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceFromDBSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotReturns(result1 *rds.RestoreDBInstanceFromDBSnapshotOutput, result2 error) {
	fake.restoreDBInstanceFromDBSnapshotMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotStub = nil
	fake.restoreDBInstanceFromDBSnapshotReturns = struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotReturnsOnCall(i int, result1 *rds.RestoreDBInstanceFromDBSnapshotOutput, result2 error) {
	fake.restoreDBInstanceFromDBSnapshotMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotStub = nil
	if fake.restoreDBInstanceFromDBSnapshotReturnsOnCall == nil {
		fake.restoreDBInstanceFromDBSnapshotReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
			result2 error
		})
	}
	fake.restoreDBInstanceFromDBSnapshotReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotRequest(arg1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput) {
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceFromDBSnapshotRequestReturnsOnCall[len(fake.restoreDBInstanceFromDBSnapshotRequestArgsForCall)]
	fake.restoreDBInstanceFromDBSnapshotRequestArgsForCall = append(fake.restoreDBInstanceFromDBSnapshotRequestArgsForCall, struct {
		arg1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}{arg1})
	stub := fake.RestoreDBInstanceFromDBSnapshotRequestStub
	fakeReturns := fake.restoreDBInstanceFromDBSnapshotRequestReturns
	fake.recordInvocation("RestoreDBInstanceFromDBSnapshotRequest", []interface{}{arg1})
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotRequestCallCount() int {
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotRequestMutex.RUnlock()
	return len(fake.restoreDBInstanceFromDBSnapshotRequestArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotRequestCalls(stub func(*rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput)) {
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotRequestMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotRequestStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotRequestArgsForCall(i int) *rds.RestoreDBInstanceFromDBSnapshotInput {
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotRequestMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceFromDBSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotRequestReturns(result1 *request.Request, result2 *rds.RestoreDBInstanceFromDBSnapshotOutput) {
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotRequestMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotRequestStub = nil
	fake.restoreDBInstanceFromDBSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RestoreDBInstanceFromDBSnapshotOutput) {
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotRequestMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotRequestStub = nil
	if fake.restoreDBInstanceFromDBSnapshotRequestReturnsOnCall == nil {
		fake.restoreDBInstanceFromDBSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RestoreDBInstanceFromDBSnapshotOutput
		})
	}
	fake.restoreDBInstanceFromDBSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromDBSnapshotOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotWithContext(arg1 context.Context, arg2 *rds.RestoreDBInstanceFromDBSnapshotInput, arg3 ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceFromDBSnapshotWithContextReturnsOnCall[len(fake.restoreDBInstanceFromDBSnapshotWithContextArgsForCall)]
	fake.restoreDBInstanceFromDBSnapshotWithContextArgsForCall = append(fake.restoreDBInstanceFromDBSnapshotWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RestoreDBInstanceFromDBSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreDBInstanceFromDBSnapshotWithContextStub
	fakeReturns := fake.restoreDBInstanceFromDBSnapshotWithContextReturns
	fake.recordInvocation("RestoreDBInstanceFromDBSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotWithContextCallCount() int {
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotWithContextMutex.RUnlock()
	return len(fake.restoreDBInstanceFromDBSnapshotWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotWithContextCalls(stub func(context.Context, *rds.RestoreDBInstanceFromDBSnapshotInput, ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)) {
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotWithContextStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotWithContextArgsForCall(i int) (context.Context, *rds.RestoreDBInstanceFromDBSnapshotInput, []request.Option) {
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceFromDBSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotWithContextReturns(result1 *rds.RestoreDBInstanceFromDBSnapshotOutput, result2 error) {
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotWithContextStub = nil
	fake.restoreDBInstanceFromDBSnapshotWithContextReturns = struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromDBSnapshotWithContextReturnsOnCall(i int, result1 *rds.RestoreDBInstanceFromDBSnapshotOutput, result2 error) {
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Lock()
	defer fake.restoreDBInstanceFromDBSnapshotWithContextMutex.Unlock()
	fake.RestoreDBInstanceFromDBSnapshotWithContextStub = nil
	if fake.restoreDBInstanceFromDBSnapshotWithContextReturnsOnCall == nil {
		fake.restoreDBInstanceFromDBSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
			result2 error
		})
	}
	fake.restoreDBInstanceFromDBSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBInstanceFromDBSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3(arg1 *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
	fake.restoreDBInstanceFromS3Mutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceFromS3ReturnsOnCall[len(fake.restoreDBInstanceFromS3ArgsForCall)]
	fake.restoreDBInstanceFromS3ArgsForCall = append(fake.restoreDBInstanceFromS3ArgsForCall, struct {
		arg1 *rds.RestoreDBInstanceFromS3Input
	}{arg1})
	stub := fake.RestoreDBInstanceFromS3Stub
	fakeReturns := fake.restoreDBInstanceFromS3Returns
	fake.recordInvocation("RestoreDBInstanceFromS3", []interface{}{arg1})
	fake.restoreDBInstanceFromS3Mutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3CallCount() int {
	fake.restoreDBInstanceFromS3Mutex.RLock()
	defer fake.restoreDBInstanceFromS3Mutex.RUnlock()
	return len(fake.restoreDBInstanceFromS3ArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3Calls(stub func(*rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error)) {
	fake.restoreDBInstanceFromS3Mutex.Lock()
	defer fake.restoreDBInstanceFromS3Mutex.Unlock()
	fake.RestoreDBInstanceFromS3Stub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3ArgsForCall(i int) *rds.RestoreDBInstanceFromS3Input {
	fake.restoreDBInstanceFromS3Mutex.RLock()
	defer fake.restoreDBInstanceFromS3Mutex.RUnlock()
	argsForCall := fake.restoreDBInstanceFromS3ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3Returns(result1 *rds.RestoreDBInstanceFromS3Output, result2 error) {
	fake.restoreDBInstanceFromS3Mutex.Lock()
	defer fake.restoreDBInstanceFromS3Mutex.Unlock()
	fake.RestoreDBInstanceFromS3Stub = nil
	fake.restoreDBInstanceFromS3Returns = struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3ReturnsOnCall(i int, result1 *rds.RestoreDBInstanceFromS3Output, result2 error) {
	fake.restoreDBInstanceFromS3Mutex.Lock()
	defer fake.restoreDBInstanceFromS3Mutex.Unlock()
	fake.RestoreDBInstanceFromS3Stub = nil
	if fake.restoreDBInstanceFromS3ReturnsOnCall == nil {
		fake.restoreDBInstanceFromS3ReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBInstanceFromS3Output
			result2 error
		})
	}
	fake.restoreDBInstanceFromS3ReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3Request(arg1 *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output) {
	fake.restoreDBInstanceFromS3RequestMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceFromS3RequestReturnsOnCall[len(fake.restoreDBInstanceFromS3RequestArgsForCall)]
	fake.restoreDBInstanceFromS3RequestArgsForCall = append(fake.restoreDBInstanceFromS3RequestArgsForCall, struct {
		arg1 *rds.RestoreDBInstanceFromS3Input
	}{arg1})
	stub := fake.RestoreDBInstanceFromS3RequestStub
	fakeReturns := fake.restoreDBInstanceFromS3RequestReturns
	fake.recordInvocation("RestoreDBInstanceFromS3Request", []interface{}{arg1})
	fake.restoreDBInstanceFromS3RequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3RequestCallCount() int {
	fake.restoreDBInstanceFromS3RequestMutex.RLock()
	defer fake.restoreDBInstanceFromS3RequestMutex.RUnlock()
	return len(fake.restoreDBInstanceFromS3RequestArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3RequestCalls(stub func(*rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output)) {
	fake.restoreDBInstanceFromS3RequestMutex.Lock()
	defer fake.restoreDBInstanceFromS3RequestMutex.Unlock()
	fake.RestoreDBInstanceFromS3RequestStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3RequestArgsForCall(i int) *rds.RestoreDBInstanceFromS3Input {
	fake.restoreDBInstanceFromS3RequestMutex.RLock()
	defer fake.restoreDBInstanceFromS3RequestMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceFromS3RequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3RequestReturns(result1 *request.Request, result2 *rds.RestoreDBInstanceFromS3Output) {
	fake.restoreDBInstanceFromS3RequestMutex.Lock()
	defer fake.restoreDBInstanceFromS3RequestMutex.Unlock()
	fake.RestoreDBInstanceFromS3RequestStub = nil
	fake.restoreDBInstanceFromS3RequestReturns = struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromS3Output
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3RequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RestoreDBInstanceFromS3Output) {
	fake.restoreDBInstanceFromS3RequestMutex.Lock()
	defer fake.restoreDBInstanceFromS3RequestMutex.Unlock()
	fake.RestoreDBInstanceFromS3RequestStub = nil
	if fake.restoreDBInstanceFromS3RequestReturnsOnCall == nil {
		fake.restoreDBInstanceFromS3RequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RestoreDBInstanceFromS3Output
		})
	}
	fake.restoreDBInstanceFromS3RequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceFromS3Output
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3WithContext(arg1 context.Context, arg2 *rds.RestoreDBInstanceFromS3Input, arg3 ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {
	fake.restoreDBInstanceFromS3WithContextMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceFromS3WithContextReturnsOnCall[len(fake.restoreDBInstanceFromS3WithContextArgsForCall)]
	fake.restoreDBInstanceFromS3WithContextArgsForCall = append(fake.restoreDBInstanceFromS3WithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RestoreDBInstanceFromS3Input
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreDBInstanceFromS3WithContextStub
	fakeReturns := fake.restoreDBInstanceFromS3WithContextReturns
	fake.recordInvocation("RestoreDBInstanceFromS3WithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreDBInstanceFromS3WithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3WithContextCallCount() int {
	fake.restoreDBInstanceFromS3WithContextMutex.RLock()
	defer fake.restoreDBInstanceFromS3WithContextMutex.RUnlock()
	return len(fake.restoreDBInstanceFromS3WithContextArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3WithContextCalls(stub func(context.Context, *rds.RestoreDBInstanceFromS3Input, ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error)) {
	fake.restoreDBInstanceFromS3WithContextMutex.Lock()
	defer fake.restoreDBInstanceFromS3WithContextMutex.Unlock()
	fake.RestoreDBInstanceFromS3WithContextStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3WithContextArgsForCall(i int) (context.Context, *rds.RestoreDBInstanceFromS3Input, []request.Option) {
	fake.restoreDBInstanceFromS3WithContextMutex.RLock()
	defer fake.restoreDBInstanceFromS3WithContextMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceFromS3WithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3WithContextReturns(result1 *rds.RestoreDBInstanceFromS3Output, result2 error) {
	fake.restoreDBInstanceFromS3WithContextMutex.Lock()
	defer fake.restoreDBInstanceFromS3WithContextMutex.Unlock()
	fake.RestoreDBInstanceFromS3WithContextStub = nil
	fake.restoreDBInstanceFromS3WithContextReturns = struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceFromS3WithContextReturnsOnCall(i int, result1 *rds.RestoreDBInstanceFromS3Output, result2 error) {
	fake.restoreDBInstanceFromS3WithContextMutex.Lock()
	defer fake.restoreDBInstanceFromS3WithContextMutex.Unlock()
	fake.RestoreDBInstanceFromS3WithContextStub = nil
	if fake.restoreDBInstanceFromS3WithContextReturnsOnCall == nil {
		fake.restoreDBInstanceFromS3WithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBInstanceFromS3Output
			result2 error
		})
	}
	fake.restoreDBInstanceFromS3WithContextReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBInstanceFromS3Output
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTime(arg1 *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	fake.restoreDBInstanceToPointInTimeMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceToPointInTimeReturnsOnCall[len(fake.restoreDBInstanceToPointInTimeArgsForCall)]
	fake.restoreDBInstanceToPointInTimeArgsForCall = append(fake.restoreDBInstanceToPointInTimeArgsForCall, struct {
		arg1 *rds.RestoreDBInstanceToPointInTimeInput
	}{arg1})
	stub := fake.RestoreDBInstanceToPointInTimeStub
	fakeReturns := fake.restoreDBInstanceToPointInTimeReturns
	fake.recordInvocation("RestoreDBInstanceToPointInTime", []interface{}{arg1})
	fake.restoreDBInstanceToPointInTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeCallCount() int {
	fake.restoreDBInstanceToPointInTimeMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeMutex.RUnlock()
	return len(fake.restoreDBInstanceToPointInTimeArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeCalls(stub func(*rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error)) {
	fake.restoreDBInstanceToPointInTimeMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeArgsForCall(i int) *rds.RestoreDBInstanceToPointInTimeInput {
	fake.restoreDBInstanceToPointInTimeMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceToPointInTimeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeReturns(result1 *rds.RestoreDBInstanceToPointInTimeOutput, result2 error) {
	fake.restoreDBInstanceToPointInTimeMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeStub = nil
	fake.restoreDBInstanceToPointInTimeReturns = struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeReturnsOnCall(i int, result1 *rds.RestoreDBInstanceToPointInTimeOutput, result2 error) {
	fake.restoreDBInstanceToPointInTimeMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeStub = nil
	if fake.restoreDBInstanceToPointInTimeReturnsOnCall == nil {
		fake.restoreDBInstanceToPointInTimeReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBInstanceToPointInTimeOutput
			result2 error
		})
	}
	fake.restoreDBInstanceToPointInTimeReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeRequest(arg1 *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput) {
	fake.restoreDBInstanceToPointInTimeRequestMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceToPointInTimeRequestReturnsOnCall[len(fake.restoreDBInstanceToPointInTimeRequestArgsForCall)]
	fake.restoreDBInstanceToPointInTimeRequestArgsForCall = append(fake.restoreDBInstanceToPointInTimeRequestArgsForCall, struct {
		arg1 *rds.RestoreDBInstanceToPointInTimeInput
	}{arg1})
	stub := fake.RestoreDBInstanceToPointInTimeRequestStub
	fakeReturns := fake.restoreDBInstanceToPointInTimeRequestReturns
	fake.recordInvocation("RestoreDBInstanceToPointInTimeRequest", []interface{}{arg1})
	fake.restoreDBInstanceToPointInTimeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeRequestCallCount() int {
	fake.restoreDBInstanceToPointInTimeRequestMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeRequestMutex.RUnlock()
	return len(fake.restoreDBInstanceToPointInTimeRequestArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeRequestCalls(stub func(*rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput)) {
	fake.restoreDBInstanceToPointInTimeRequestMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeRequestMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeRequestStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeRequestArgsForCall(i int) *rds.RestoreDBInstanceToPointInTimeInput {
	fake.restoreDBInstanceToPointInTimeRequestMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeRequestMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceToPointInTimeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeRequestReturns(result1 *request.Request, result2 *rds.RestoreDBInstanceToPointInTimeOutput) {
	fake.restoreDBInstanceToPointInTimeRequestMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeRequestMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeRequestStub = nil
	fake.restoreDBInstanceToPointInTimeRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceToPointInTimeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RestoreDBInstanceToPointInTimeOutput) {
	fake.restoreDBInstanceToPointInTimeRequestMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeRequestMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeRequestStub = nil
	if fake.restoreDBInstanceToPointInTimeRequestReturnsOnCall == nil {
		fake.restoreDBInstanceToPointInTimeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RestoreDBInstanceToPointInTimeOutput
		})
	}
	fake.restoreDBInstanceToPointInTimeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RestoreDBInstanceToPointInTimeOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeWithContext(arg1 context.Context, arg2 *rds.RestoreDBInstanceToPointInTimeInput, arg3 ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	fake.restoreDBInstanceToPointInTimeWithContextMutex.Lock()
	ret, specificReturn := fake.restoreDBInstanceToPointInTimeWithContextReturnsOnCall[len(fake.restoreDBInstanceToPointInTimeWithContextArgsForCall)]
	fake.restoreDBInstanceToPointInTimeWithContextArgsForCall = append(fake.restoreDBInstanceToPointInTimeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RestoreDBInstanceToPointInTimeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreDBInstanceToPointInTimeWithContextStub
	fakeReturns := fake.restoreDBInstanceToPointInTimeWithContextReturns
	fake.recordInvocation("RestoreDBInstanceToPointInTimeWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreDBInstanceToPointInTimeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeWithContextCallCount() int {
	fake.restoreDBInstanceToPointInTimeWithContextMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeWithContextMutex.RUnlock()
	return len(fake.restoreDBInstanceToPointInTimeWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeWithContextCalls(stub func(context.Context, *rds.RestoreDBInstanceToPointInTimeInput, ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error)) {
	fake.restoreDBInstanceToPointInTimeWithContextMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeWithContextMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeWithContextStub = stub
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeWithContextArgsForCall(i int) (context.Context, *rds.RestoreDBInstanceToPointInTimeInput, []request.Option) {
	fake.restoreDBInstanceToPointInTimeWithContextMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeWithContextMutex.RUnlock()
	argsForCall := fake.restoreDBInstanceToPointInTimeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeWithContextReturns(result1 *rds.RestoreDBInstanceToPointInTimeOutput, result2 error) {
	fake.restoreDBInstanceToPointInTimeWithContextMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeWithContextMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeWithContextStub = nil
	fake.restoreDBInstanceToPointInTimeWithContextReturns = struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RestoreDBInstanceToPointInTimeWithContextReturnsOnCall(i int, result1 *rds.RestoreDBInstanceToPointInTimeOutput, result2 error) {
	fake.restoreDBInstanceToPointInTimeWithContextMutex.Lock()
	defer fake.restoreDBInstanceToPointInTimeWithContextMutex.Unlock()
	fake.RestoreDBInstanceToPointInTimeWithContextStub = nil
	if fake.restoreDBInstanceToPointInTimeWithContextReturnsOnCall == nil {
		fake.restoreDBInstanceToPointInTimeWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RestoreDBInstanceToPointInTimeOutput
			result2 error
		})
	}
	fake.restoreDBInstanceToPointInTimeWithContextReturnsOnCall[i] = struct {
		result1 *rds.RestoreDBInstanceToPointInTimeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngress(arg1 *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	fake.revokeDBSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.revokeDBSecurityGroupIngressReturnsOnCall[len(fake.revokeDBSecurityGroupIngressArgsForCall)]
	fake.revokeDBSecurityGroupIngressArgsForCall = append(fake.revokeDBSecurityGroupIngressArgsForCall, struct {
		arg1 *rds.RevokeDBSecurityGroupIngressInput
	}{arg1})
	stub := fake.RevokeDBSecurityGroupIngressStub
	fakeReturns := fake.revokeDBSecurityGroupIngressReturns
	fake.recordInvocation("RevokeDBSecurityGroupIngress", []interface{}{arg1})
	fake.revokeDBSecurityGroupIngressMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressCallCount() int {
	fake.revokeDBSecurityGroupIngressMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressMutex.RUnlock()
	return len(fake.revokeDBSecurityGroupIngressArgsForCall)
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressCalls(stub func(*rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error)) {
	fake.revokeDBSecurityGroupIngressMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressStub = stub
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressArgsForCall(i int) *rds.RevokeDBSecurityGroupIngressInput {
	fake.revokeDBSecurityGroupIngressMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressMutex.RUnlock()
	argsForCall := fake.revokeDBSecurityGroupIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressReturns(result1 *rds.RevokeDBSecurityGroupIngressOutput, result2 error) {
	fake.revokeDBSecurityGroupIngressMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressStub = nil
	fake.revokeDBSecurityGroupIngressReturns = struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressReturnsOnCall(i int, result1 *rds.RevokeDBSecurityGroupIngressOutput, result2 error) {
	fake.revokeDBSecurityGroupIngressMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressStub = nil
	if fake.revokeDBSecurityGroupIngressReturnsOnCall == nil {
		fake.revokeDBSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *rds.RevokeDBSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeDBSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressRequest(arg1 *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput) {
	fake.revokeDBSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.revokeDBSecurityGroupIngressRequestReturnsOnCall[len(fake.revokeDBSecurityGroupIngressRequestArgsForCall)]
	fake.revokeDBSecurityGroupIngressRequestArgsForCall = append(fake.revokeDBSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *rds.RevokeDBSecurityGroupIngressInput
	}{arg1})
	stub := fake.RevokeDBSecurityGroupIngressRequestStub
	fakeReturns := fake.revokeDBSecurityGroupIngressRequestReturns
	fake.recordInvocation("RevokeDBSecurityGroupIngressRequest", []interface{}{arg1})
	fake.revokeDBSecurityGroupIngressRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressRequestCallCount() int {
	fake.revokeDBSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.revokeDBSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressRequestCalls(stub func(*rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput)) {
	fake.revokeDBSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressRequestStub = stub
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressRequestArgsForCall(i int) *rds.RevokeDBSecurityGroupIngressInput {
	fake.revokeDBSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressRequestMutex.RUnlock()
	argsForCall := fake.revokeDBSecurityGroupIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *rds.RevokeDBSecurityGroupIngressOutput) {
	fake.revokeDBSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressRequestStub = nil
	fake.revokeDBSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *rds.RevokeDBSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.RevokeDBSecurityGroupIngressOutput) {
	fake.revokeDBSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressRequestStub = nil
	if fake.revokeDBSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.revokeDBSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.RevokeDBSecurityGroupIngressOutput
		})
	}
	fake.revokeDBSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.RevokeDBSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressWithContext(arg1 context.Context, arg2 *rds.RevokeDBSecurityGroupIngressInput, arg3 ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	fake.revokeDBSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.revokeDBSecurityGroupIngressWithContextReturnsOnCall[len(fake.revokeDBSecurityGroupIngressWithContextArgsForCall)]
	fake.revokeDBSecurityGroupIngressWithContextArgsForCall = append(fake.revokeDBSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.RevokeDBSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RevokeDBSecurityGroupIngressWithContextStub
	fakeReturns := fake.revokeDBSecurityGroupIngressWithContextReturns
	fake.recordInvocation("RevokeDBSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.revokeDBSecurityGroupIngressWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressWithContextCallCount() int {
	fake.revokeDBSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.revokeDBSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressWithContextCalls(stub func(context.Context, *rds.RevokeDBSecurityGroupIngressInput, ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error)) {
	fake.revokeDBSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressWithContextArgsForCall(i int) (context.Context, *rds.RevokeDBSecurityGroupIngressInput, []request.Option) {
	fake.revokeDBSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.revokeDBSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressWithContextReturns(result1 *rds.RevokeDBSecurityGroupIngressOutput, result2 error) {
	fake.revokeDBSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressWithContextStub = nil
	fake.revokeDBSecurityGroupIngressWithContextReturns = struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) RevokeDBSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *rds.RevokeDBSecurityGroupIngressOutput, result2 error) {
	fake.revokeDBSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeDBSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeDBSecurityGroupIngressWithContextStub = nil
	if fake.revokeDBSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.revokeDBSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.RevokeDBSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeDBSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *rds.RevokeDBSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartActivityStream(arg1 *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
	fake.startActivityStreamMutex.Lock()
	ret, specificReturn := fake.startActivityStreamReturnsOnCall[len(fake.startActivityStreamArgsForCall)]
	fake.startActivityStreamArgsForCall = append(fake.startActivityStreamArgsForCall, struct {
		arg1 *rds.StartActivityStreamInput
	}{arg1})
	stub := fake.StartActivityStreamStub
	fakeReturns := fake.startActivityStreamReturns
	fake.recordInvocation("StartActivityStream", []interface{}{arg1})
	fake.startActivityStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartActivityStreamCallCount() int {
	fake.startActivityStreamMutex.RLock()
	defer fake.startActivityStreamMutex.RUnlock()
	return len(fake.startActivityStreamArgsForCall)
}

func (fake *FakeRDSAPI) StartActivityStreamCalls(stub func(*rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error)) {
	fake.startActivityStreamMutex.Lock()
	defer fake.startActivityStreamMutex.Unlock()
	fake.StartActivityStreamStub = stub
}

func (fake *FakeRDSAPI) StartActivityStreamArgsForCall(i int) *rds.StartActivityStreamInput {
	fake.startActivityStreamMutex.RLock()
	defer fake.startActivityStreamMutex.RUnlock()
	argsForCall := fake.startActivityStreamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartActivityStreamReturns(result1 *rds.StartActivityStreamOutput, result2 error) {
	fake.startActivityStreamMutex.Lock()
	defer fake.startActivityStreamMutex.Unlock()
	fake.StartActivityStreamStub = nil
	fake.startActivityStreamReturns = struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartActivityStreamReturnsOnCall(i int, result1 *rds.StartActivityStreamOutput, result2 error) {
	fake.startActivityStreamMutex.Lock()
	defer fake.startActivityStreamMutex.Unlock()
	fake.StartActivityStreamStub = nil
	if fake.startActivityStreamReturnsOnCall == nil {
		fake.startActivityStreamReturnsOnCall = make(map[int]struct {
			result1 *rds.StartActivityStreamOutput
			result2 error
		})
	}
	fake.startActivityStreamReturnsOnCall[i] = struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartActivityStreamRequest(arg1 *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput) {
	fake.startActivityStreamRequestMutex.Lock()
	ret, specificReturn := fake.startActivityStreamRequestReturnsOnCall[len(fake.startActivityStreamRequestArgsForCall)]
	fake.startActivityStreamRequestArgsForCall = append(fake.startActivityStreamRequestArgsForCall, struct {
		arg1 *rds.StartActivityStreamInput
	}{arg1})
	stub := fake.StartActivityStreamRequestStub
	fakeReturns := fake.startActivityStreamRequestReturns
	fake.recordInvocation("StartActivityStreamRequest", []interface{}{arg1})
	fake.startActivityStreamRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartActivityStreamRequestCallCount() int {
	fake.startActivityStreamRequestMutex.RLock()
	defer fake.startActivityStreamRequestMutex.RUnlock()
	return len(fake.startActivityStreamRequestArgsForCall)
}

func (fake *FakeRDSAPI) StartActivityStreamRequestCalls(stub func(*rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput)) {
	fake.startActivityStreamRequestMutex.Lock()
	defer fake.startActivityStreamRequestMutex.Unlock()
	fake.StartActivityStreamRequestStub = stub
}

func (fake *FakeRDSAPI) StartActivityStreamRequestArgsForCall(i int) *rds.StartActivityStreamInput {
	fake.startActivityStreamRequestMutex.RLock()
	defer fake.startActivityStreamRequestMutex.RUnlock()
	argsForCall := fake.startActivityStreamRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartActivityStreamRequestReturns(result1 *request.Request, result2 *rds.StartActivityStreamOutput) {
	fake.startActivityStreamRequestMutex.Lock()
	defer fake.startActivityStreamRequestMutex.Unlock()
	fake.StartActivityStreamRequestStub = nil
	fake.startActivityStreamRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StartActivityStreamOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartActivityStreamRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StartActivityStreamOutput) {
	fake.startActivityStreamRequestMutex.Lock()
	defer fake.startActivityStreamRequestMutex.Unlock()
	fake.StartActivityStreamRequestStub = nil
	if fake.startActivityStreamRequestReturnsOnCall == nil {
		fake.startActivityStreamRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StartActivityStreamOutput
		})
	}
	fake.startActivityStreamRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StartActivityStreamOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartActivityStreamWithContext(arg1 context.Context, arg2 *rds.StartActivityStreamInput, arg3 ...request.Option) (*rds.StartActivityStreamOutput, error) {
	fake.startActivityStreamWithContextMutex.Lock()
	ret, specificReturn := fake.startActivityStreamWithContextReturnsOnCall[len(fake.startActivityStreamWithContextArgsForCall)]
	fake.startActivityStreamWithContextArgsForCall = append(fake.startActivityStreamWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StartActivityStreamInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartActivityStreamWithContextStub
	fakeReturns := fake.startActivityStreamWithContextReturns
	fake.recordInvocation("StartActivityStreamWithContext", []interface{}{arg1, arg2, arg3})
	fake.startActivityStreamWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartActivityStreamWithContextCallCount() int {
	fake.startActivityStreamWithContextMutex.RLock()
	defer fake.startActivityStreamWithContextMutex.RUnlock()
	return len(fake.startActivityStreamWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StartActivityStreamWithContextCalls(stub func(context.Context, *rds.StartActivityStreamInput, ...request.Option) (*rds.StartActivityStreamOutput, error)) {
	fake.startActivityStreamWithContextMutex.Lock()
	defer fake.startActivityStreamWithContextMutex.Unlock()
	fake.StartActivityStreamWithContextStub = stub
}

func (fake *FakeRDSAPI) StartActivityStreamWithContextArgsForCall(i int) (context.Context, *rds.StartActivityStreamInput, []request.Option) {
	fake.startActivityStreamWithContextMutex.RLock()
	defer fake.startActivityStreamWithContextMutex.RUnlock()
	argsForCall := fake.startActivityStreamWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StartActivityStreamWithContextReturns(result1 *rds.StartActivityStreamOutput, result2 error) {
	fake.startActivityStreamWithContextMutex.Lock()
	defer fake.startActivityStreamWithContextMutex.Unlock()
	fake.StartActivityStreamWithContextStub = nil
	fake.startActivityStreamWithContextReturns = struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartActivityStreamWithContextReturnsOnCall(i int, result1 *rds.StartActivityStreamOutput, result2 error) {
	fake.startActivityStreamWithContextMutex.Lock()
	defer fake.startActivityStreamWithContextMutex.Unlock()
	fake.StartActivityStreamWithContextStub = nil
	if fake.startActivityStreamWithContextReturnsOnCall == nil {
		fake.startActivityStreamWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StartActivityStreamOutput
			result2 error
		})
	}
	fake.startActivityStreamWithContextReturnsOnCall[i] = struct {
		result1 *rds.StartActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBCluster(arg1 *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
	fake.startDBClusterMutex.Lock()
	ret, specificReturn := fake.startDBClusterReturnsOnCall[len(fake.startDBClusterArgsForCall)]
	fake.startDBClusterArgsForCall = append(fake.startDBClusterArgsForCall, struct {
		arg1 *rds.StartDBClusterInput
	}{arg1})
	stub := fake.StartDBClusterStub
	fakeReturns := fake.startDBClusterReturns
	fake.recordInvocation("StartDBCluster", []interface{}{arg1})
	fake.startDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartDBClusterCallCount() int {
	fake.startDBClusterMutex.RLock()
	defer fake.startDBClusterMutex.RUnlock()
	return len(fake.startDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) StartDBClusterCalls(stub func(*rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error)) {
	fake.startDBClusterMutex.Lock()
	defer fake.startDBClusterMutex.Unlock()
	fake.StartDBClusterStub = stub
}

func (fake *FakeRDSAPI) StartDBClusterArgsForCall(i int) *rds.StartDBClusterInput {
	fake.startDBClusterMutex.RLock()
	defer fake.startDBClusterMutex.RUnlock()
	argsForCall := fake.startDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartDBClusterReturns(result1 *rds.StartDBClusterOutput, result2 error) {
	fake.startDBClusterMutex.Lock()
	defer fake.startDBClusterMutex.Unlock()
	fake.StartDBClusterStub = nil
	fake.startDBClusterReturns = struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBClusterReturnsOnCall(i int, result1 *rds.StartDBClusterOutput, result2 error) {
	fake.startDBClusterMutex.Lock()
	defer fake.startDBClusterMutex.Unlock()
	fake.StartDBClusterStub = nil
	if fake.startDBClusterReturnsOnCall == nil {
		fake.startDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.StartDBClusterOutput
			result2 error
		})
	}
	fake.startDBClusterReturnsOnCall[i] = struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBClusterRequest(arg1 *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput) {
	fake.startDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.startDBClusterRequestReturnsOnCall[len(fake.startDBClusterRequestArgsForCall)]
	fake.startDBClusterRequestArgsForCall = append(fake.startDBClusterRequestArgsForCall, struct {
		arg1 *rds.StartDBClusterInput
	}{arg1})
	stub := fake.StartDBClusterRequestStub
	fakeReturns := fake.startDBClusterRequestReturns
	fake.recordInvocation("StartDBClusterRequest", []interface{}{arg1})
	fake.startDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartDBClusterRequestCallCount() int {
	fake.startDBClusterRequestMutex.RLock()
	defer fake.startDBClusterRequestMutex.RUnlock()
	return len(fake.startDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) StartDBClusterRequestCalls(stub func(*rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput)) {
	fake.startDBClusterRequestMutex.Lock()
	defer fake.startDBClusterRequestMutex.Unlock()
	fake.StartDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) StartDBClusterRequestArgsForCall(i int) *rds.StartDBClusterInput {
	fake.startDBClusterRequestMutex.RLock()
	defer fake.startDBClusterRequestMutex.RUnlock()
	argsForCall := fake.startDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartDBClusterRequestReturns(result1 *request.Request, result2 *rds.StartDBClusterOutput) {
	fake.startDBClusterRequestMutex.Lock()
	defer fake.startDBClusterRequestMutex.Unlock()
	fake.StartDBClusterRequestStub = nil
	fake.startDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StartDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StartDBClusterOutput) {
	fake.startDBClusterRequestMutex.Lock()
	defer fake.startDBClusterRequestMutex.Unlock()
	fake.StartDBClusterRequestStub = nil
	if fake.startDBClusterRequestReturnsOnCall == nil {
		fake.startDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StartDBClusterOutput
		})
	}
	fake.startDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StartDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBClusterWithContext(arg1 context.Context, arg2 *rds.StartDBClusterInput, arg3 ...request.Option) (*rds.StartDBClusterOutput, error) {
	fake.startDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.startDBClusterWithContextReturnsOnCall[len(fake.startDBClusterWithContextArgsForCall)]
	fake.startDBClusterWithContextArgsForCall = append(fake.startDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StartDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartDBClusterWithContextStub
	fakeReturns := fake.startDBClusterWithContextReturns
	fake.recordInvocation("StartDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.startDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartDBClusterWithContextCallCount() int {
	fake.startDBClusterWithContextMutex.RLock()
	defer fake.startDBClusterWithContextMutex.RUnlock()
	return len(fake.startDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StartDBClusterWithContextCalls(stub func(context.Context, *rds.StartDBClusterInput, ...request.Option) (*rds.StartDBClusterOutput, error)) {
	fake.startDBClusterWithContextMutex.Lock()
	defer fake.startDBClusterWithContextMutex.Unlock()
	fake.StartDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) StartDBClusterWithContextArgsForCall(i int) (context.Context, *rds.StartDBClusterInput, []request.Option) {
	fake.startDBClusterWithContextMutex.RLock()
	defer fake.startDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.startDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StartDBClusterWithContextReturns(result1 *rds.StartDBClusterOutput, result2 error) {
	fake.startDBClusterWithContextMutex.Lock()
	defer fake.startDBClusterWithContextMutex.Unlock()
	fake.StartDBClusterWithContextStub = nil
	fake.startDBClusterWithContextReturns = struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBClusterWithContextReturnsOnCall(i int, result1 *rds.StartDBClusterOutput, result2 error) {
	fake.startDBClusterWithContextMutex.Lock()
	defer fake.startDBClusterWithContextMutex.Unlock()
	fake.StartDBClusterWithContextStub = nil
	if fake.startDBClusterWithContextReturnsOnCall == nil {
		fake.startDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StartDBClusterOutput
			result2 error
		})
	}
	fake.startDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.StartDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBInstance(arg1 *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
	fake.startDBInstanceMutex.Lock()
	ret, specificReturn := fake.startDBInstanceReturnsOnCall[len(fake.startDBInstanceArgsForCall)]
	fake.startDBInstanceArgsForCall = append(fake.startDBInstanceArgsForCall, struct {
		arg1 *rds.StartDBInstanceInput
	}{arg1})
	stub := fake.StartDBInstanceStub
	fakeReturns := fake.startDBInstanceReturns
	fake.recordInvocation("StartDBInstance", []interface{}{arg1})
	fake.startDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartDBInstanceCallCount() int {
	fake.startDBInstanceMutex.RLock()
	defer fake.startDBInstanceMutex.RUnlock()
	return len(fake.startDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) StartDBInstanceCalls(stub func(*rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error)) {
	fake.startDBInstanceMutex.Lock()
	defer fake.startDBInstanceMutex.Unlock()
	fake.StartDBInstanceStub = stub
}

func (fake *FakeRDSAPI) StartDBInstanceArgsForCall(i int) *rds.StartDBInstanceInput {
	fake.startDBInstanceMutex.RLock()
	defer fake.startDBInstanceMutex.RUnlock()
	argsForCall := fake.startDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartDBInstanceReturns(result1 *rds.StartDBInstanceOutput, result2 error) {
	fake.startDBInstanceMutex.Lock()
	defer fake.startDBInstanceMutex.Unlock()
	fake.StartDBInstanceStub = nil
	fake.startDBInstanceReturns = struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBInstanceReturnsOnCall(i int, result1 *rds.StartDBInstanceOutput, result2 error) {
	fake.startDBInstanceMutex.Lock()
	defer fake.startDBInstanceMutex.Unlock()
	fake.StartDBInstanceStub = nil
	if fake.startDBInstanceReturnsOnCall == nil {
		fake.startDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.StartDBInstanceOutput
			result2 error
		})
	}
	fake.startDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBInstanceRequest(arg1 *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput) {
	fake.startDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.startDBInstanceRequestReturnsOnCall[len(fake.startDBInstanceRequestArgsForCall)]
	fake.startDBInstanceRequestArgsForCall = append(fake.startDBInstanceRequestArgsForCall, struct {
		arg1 *rds.StartDBInstanceInput
	}{arg1})
	stub := fake.StartDBInstanceRequestStub
	fakeReturns := fake.startDBInstanceRequestReturns
	fake.recordInvocation("StartDBInstanceRequest", []interface{}{arg1})
	fake.startDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartDBInstanceRequestCallCount() int {
	fake.startDBInstanceRequestMutex.RLock()
	defer fake.startDBInstanceRequestMutex.RUnlock()
	return len(fake.startDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) StartDBInstanceRequestCalls(stub func(*rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput)) {
	fake.startDBInstanceRequestMutex.Lock()
	defer fake.startDBInstanceRequestMutex.Unlock()
	fake.StartDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) StartDBInstanceRequestArgsForCall(i int) *rds.StartDBInstanceInput {
	fake.startDBInstanceRequestMutex.RLock()
	defer fake.startDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.startDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartDBInstanceRequestReturns(result1 *request.Request, result2 *rds.StartDBInstanceOutput) {
	fake.startDBInstanceRequestMutex.Lock()
	defer fake.startDBInstanceRequestMutex.Unlock()
	fake.StartDBInstanceRequestStub = nil
	fake.startDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StartDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StartDBInstanceOutput) {
	fake.startDBInstanceRequestMutex.Lock()
	defer fake.startDBInstanceRequestMutex.Unlock()
	fake.StartDBInstanceRequestStub = nil
	if fake.startDBInstanceRequestReturnsOnCall == nil {
		fake.startDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StartDBInstanceOutput
		})
	}
	fake.startDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StartDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBInstanceWithContext(arg1 context.Context, arg2 *rds.StartDBInstanceInput, arg3 ...request.Option) (*rds.StartDBInstanceOutput, error) {
	fake.startDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.startDBInstanceWithContextReturnsOnCall[len(fake.startDBInstanceWithContextArgsForCall)]
	fake.startDBInstanceWithContextArgsForCall = append(fake.startDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StartDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartDBInstanceWithContextStub
	fakeReturns := fake.startDBInstanceWithContextReturns
	fake.recordInvocation("StartDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.startDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartDBInstanceWithContextCallCount() int {
	fake.startDBInstanceWithContextMutex.RLock()
	defer fake.startDBInstanceWithContextMutex.RUnlock()
	return len(fake.startDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StartDBInstanceWithContextCalls(stub func(context.Context, *rds.StartDBInstanceInput, ...request.Option) (*rds.StartDBInstanceOutput, error)) {
	fake.startDBInstanceWithContextMutex.Lock()
	defer fake.startDBInstanceWithContextMutex.Unlock()
	fake.StartDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) StartDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.StartDBInstanceInput, []request.Option) {
	fake.startDBInstanceWithContextMutex.RLock()
	defer fake.startDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.startDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StartDBInstanceWithContextReturns(result1 *rds.StartDBInstanceOutput, result2 error) {
	fake.startDBInstanceWithContextMutex.Lock()
	defer fake.startDBInstanceWithContextMutex.Unlock()
	fake.StartDBInstanceWithContextStub = nil
	fake.startDBInstanceWithContextReturns = struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartDBInstanceWithContextReturnsOnCall(i int, result1 *rds.StartDBInstanceOutput, result2 error) {
	fake.startDBInstanceWithContextMutex.Lock()
	defer fake.startDBInstanceWithContextMutex.Unlock()
	fake.StartDBInstanceWithContextStub = nil
	if fake.startDBInstanceWithContextReturnsOnCall == nil {
		fake.startDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StartDBInstanceOutput
			result2 error
		})
	}
	fake.startDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.StartDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartExportTask(arg1 *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
	fake.startExportTaskMutex.Lock()
	ret, specificReturn := fake.startExportTaskReturnsOnCall[len(fake.startExportTaskArgsForCall)]
	fake.startExportTaskArgsForCall = append(fake.startExportTaskArgsForCall, struct {
		arg1 *rds.StartExportTaskInput
	}{arg1})
	stub := fake.StartExportTaskStub
	fakeReturns := fake.startExportTaskReturns
	fake.recordInvocation("StartExportTask", []interface{}{arg1})
	fake.startExportTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartExportTaskCallCount() int {
	fake.startExportTaskMutex.RLock()
	defer fake.startExportTaskMutex.RUnlock()
	return len(fake.startExportTaskArgsForCall)
}

func (fake *FakeRDSAPI) StartExportTaskCalls(stub func(*rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error)) {
	fake.startExportTaskMutex.Lock()
	defer fake.startExportTaskMutex.Unlock()
	fake.StartExportTaskStub = stub
}

func (fake *FakeRDSAPI) StartExportTaskArgsForCall(i int) *rds.StartExportTaskInput {
	fake.startExportTaskMutex.RLock()
	defer fake.startExportTaskMutex.RUnlock()
	argsForCall := fake.startExportTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartExportTaskReturns(result1 *rds.StartExportTaskOutput, result2 error) {
	fake.startExportTaskMutex.Lock()
	defer fake.startExportTaskMutex.Unlock()
	fake.StartExportTaskStub = nil
	fake.startExportTaskReturns = struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartExportTaskReturnsOnCall(i int, result1 *rds.StartExportTaskOutput, result2 error) {
	fake.startExportTaskMutex.Lock()
	defer fake.startExportTaskMutex.Unlock()
	fake.StartExportTaskStub = nil
	if fake.startExportTaskReturnsOnCall == nil {
		fake.startExportTaskReturnsOnCall = make(map[int]struct {
			result1 *rds.StartExportTaskOutput
			result2 error
		})
	}
	fake.startExportTaskReturnsOnCall[i] = struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartExportTaskRequest(arg1 *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput) {
	fake.startExportTaskRequestMutex.Lock()
	ret, specificReturn := fake.startExportTaskRequestReturnsOnCall[len(fake.startExportTaskRequestArgsForCall)]
	fake.startExportTaskRequestArgsForCall = append(fake.startExportTaskRequestArgsForCall, struct {
		arg1 *rds.StartExportTaskInput
	}{arg1})
	stub := fake.StartExportTaskRequestStub
	fakeReturns := fake.startExportTaskRequestReturns
	fake.recordInvocation("StartExportTaskRequest", []interface{}{arg1})
	fake.startExportTaskRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartExportTaskRequestCallCount() int {
	fake.startExportTaskRequestMutex.RLock()
	defer fake.startExportTaskRequestMutex.RUnlock()
	return len(fake.startExportTaskRequestArgsForCall)
}

func (fake *FakeRDSAPI) StartExportTaskRequestCalls(stub func(*rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput)) {
	fake.startExportTaskRequestMutex.Lock()
	defer fake.startExportTaskRequestMutex.Unlock()
	fake.StartExportTaskRequestStub = stub
}

func (fake *FakeRDSAPI) StartExportTaskRequestArgsForCall(i int) *rds.StartExportTaskInput {
	fake.startExportTaskRequestMutex.RLock()
	defer fake.startExportTaskRequestMutex.RUnlock()
	argsForCall := fake.startExportTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StartExportTaskRequestReturns(result1 *request.Request, result2 *rds.StartExportTaskOutput) {
	fake.startExportTaskRequestMutex.Lock()
	defer fake.startExportTaskRequestMutex.Unlock()
	fake.StartExportTaskRequestStub = nil
	fake.startExportTaskRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StartExportTaskOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartExportTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StartExportTaskOutput) {
	fake.startExportTaskRequestMutex.Lock()
	defer fake.startExportTaskRequestMutex.Unlock()
	fake.StartExportTaskRequestStub = nil
	if fake.startExportTaskRequestReturnsOnCall == nil {
		fake.startExportTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StartExportTaskOutput
		})
	}
	fake.startExportTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StartExportTaskOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartExportTaskWithContext(arg1 context.Context, arg2 *rds.StartExportTaskInput, arg3 ...request.Option) (*rds.StartExportTaskOutput, error) {
	fake.startExportTaskWithContextMutex.Lock()
	ret, specificReturn := fake.startExportTaskWithContextReturnsOnCall[len(fake.startExportTaskWithContextArgsForCall)]
	fake.startExportTaskWithContextArgsForCall = append(fake.startExportTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StartExportTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartExportTaskWithContextStub
	fakeReturns := fake.startExportTaskWithContextReturns
	fake.recordInvocation("StartExportTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.startExportTaskWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StartExportTaskWithContextCallCount() int {
	fake.startExportTaskWithContextMutex.RLock()
	defer fake.startExportTaskWithContextMutex.RUnlock()
	return len(fake.startExportTaskWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StartExportTaskWithContextCalls(stub func(context.Context, *rds.StartExportTaskInput, ...request.Option) (*rds.StartExportTaskOutput, error)) {
	fake.startExportTaskWithContextMutex.Lock()
	defer fake.startExportTaskWithContextMutex.Unlock()
	fake.StartExportTaskWithContextStub = stub
}

func (fake *FakeRDSAPI) StartExportTaskWithContextArgsForCall(i int) (context.Context, *rds.StartExportTaskInput, []request.Option) {
	fake.startExportTaskWithContextMutex.RLock()
	defer fake.startExportTaskWithContextMutex.RUnlock()
	argsForCall := fake.startExportTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StartExportTaskWithContextReturns(result1 *rds.StartExportTaskOutput, result2 error) {
	fake.startExportTaskWithContextMutex.Lock()
	defer fake.startExportTaskWithContextMutex.Unlock()
	fake.StartExportTaskWithContextStub = nil
	fake.startExportTaskWithContextReturns = struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StartExportTaskWithContextReturnsOnCall(i int, result1 *rds.StartExportTaskOutput, result2 error) {
	fake.startExportTaskWithContextMutex.Lock()
	defer fake.startExportTaskWithContextMutex.Unlock()
	fake.StartExportTaskWithContextStub = nil
	if fake.startExportTaskWithContextReturnsOnCall == nil {
		fake.startExportTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StartExportTaskOutput
			result2 error
		})
	}
	fake.startExportTaskWithContextReturnsOnCall[i] = struct {
		result1 *rds.StartExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopActivityStream(arg1 *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
	fake.stopActivityStreamMutex.Lock()
	ret, specificReturn := fake.stopActivityStreamReturnsOnCall[len(fake.stopActivityStreamArgsForCall)]
	fake.stopActivityStreamArgsForCall = append(fake.stopActivityStreamArgsForCall, struct {
		arg1 *rds.StopActivityStreamInput
	}{arg1})
	stub := fake.StopActivityStreamStub
	fakeReturns := fake.stopActivityStreamReturns
	fake.recordInvocation("StopActivityStream", []interface{}{arg1})
	fake.stopActivityStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopActivityStreamCallCount() int {
	fake.stopActivityStreamMutex.RLock()
	defer fake.stopActivityStreamMutex.RUnlock()
	return len(fake.stopActivityStreamArgsForCall)
}

func (fake *FakeRDSAPI) StopActivityStreamCalls(stub func(*rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error)) {
	fake.stopActivityStreamMutex.Lock()
	defer fake.stopActivityStreamMutex.Unlock()
	fake.StopActivityStreamStub = stub
}

func (fake *FakeRDSAPI) StopActivityStreamArgsForCall(i int) *rds.StopActivityStreamInput {
	fake.stopActivityStreamMutex.RLock()
	defer fake.stopActivityStreamMutex.RUnlock()
	argsForCall := fake.stopActivityStreamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StopActivityStreamReturns(result1 *rds.StopActivityStreamOutput, result2 error) {
	fake.stopActivityStreamMutex.Lock()
	defer fake.stopActivityStreamMutex.Unlock()
	fake.StopActivityStreamStub = nil
	fake.stopActivityStreamReturns = struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopActivityStreamReturnsOnCall(i int, result1 *rds.StopActivityStreamOutput, result2 error) {
	fake.stopActivityStreamMutex.Lock()
	defer fake.stopActivityStreamMutex.Unlock()
	fake.StopActivityStreamStub = nil
	if fake.stopActivityStreamReturnsOnCall == nil {
		fake.stopActivityStreamReturnsOnCall = make(map[int]struct {
			result1 *rds.StopActivityStreamOutput
			result2 error
		})
	}
	fake.stopActivityStreamReturnsOnCall[i] = struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopActivityStreamRequest(arg1 *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput) {
	fake.stopActivityStreamRequestMutex.Lock()
	ret, specificReturn := fake.stopActivityStreamRequestReturnsOnCall[len(fake.stopActivityStreamRequestArgsForCall)]
	fake.stopActivityStreamRequestArgsForCall = append(fake.stopActivityStreamRequestArgsForCall, struct {
		arg1 *rds.StopActivityStreamInput
	}{arg1})
	stub := fake.StopActivityStreamRequestStub
	fakeReturns := fake.stopActivityStreamRequestReturns
	fake.recordInvocation("StopActivityStreamRequest", []interface{}{arg1})
	fake.stopActivityStreamRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopActivityStreamRequestCallCount() int {
	fake.stopActivityStreamRequestMutex.RLock()
	defer fake.stopActivityStreamRequestMutex.RUnlock()
	return len(fake.stopActivityStreamRequestArgsForCall)
}

func (fake *FakeRDSAPI) StopActivityStreamRequestCalls(stub func(*rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput)) {
	fake.stopActivityStreamRequestMutex.Lock()
	defer fake.stopActivityStreamRequestMutex.Unlock()
	fake.StopActivityStreamRequestStub = stub
}

func (fake *FakeRDSAPI) StopActivityStreamRequestArgsForCall(i int) *rds.StopActivityStreamInput {
	fake.stopActivityStreamRequestMutex.RLock()
	defer fake.stopActivityStreamRequestMutex.RUnlock()
	argsForCall := fake.stopActivityStreamRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StopActivityStreamRequestReturns(result1 *request.Request, result2 *rds.StopActivityStreamOutput) {
	fake.stopActivityStreamRequestMutex.Lock()
	defer fake.stopActivityStreamRequestMutex.Unlock()
	fake.StopActivityStreamRequestStub = nil
	fake.stopActivityStreamRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StopActivityStreamOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopActivityStreamRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StopActivityStreamOutput) {
	fake.stopActivityStreamRequestMutex.Lock()
	defer fake.stopActivityStreamRequestMutex.Unlock()
	fake.StopActivityStreamRequestStub = nil
	if fake.stopActivityStreamRequestReturnsOnCall == nil {
		fake.stopActivityStreamRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StopActivityStreamOutput
		})
	}
	fake.stopActivityStreamRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StopActivityStreamOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopActivityStreamWithContext(arg1 context.Context, arg2 *rds.StopActivityStreamInput, arg3 ...request.Option) (*rds.StopActivityStreamOutput, error) {
	fake.stopActivityStreamWithContextMutex.Lock()
	ret, specificReturn := fake.stopActivityStreamWithContextReturnsOnCall[len(fake.stopActivityStreamWithContextArgsForCall)]
	fake.stopActivityStreamWithContextArgsForCall = append(fake.stopActivityStreamWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StopActivityStreamInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StopActivityStreamWithContextStub
	fakeReturns := fake.stopActivityStreamWithContextReturns
	fake.recordInvocation("StopActivityStreamWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopActivityStreamWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopActivityStreamWithContextCallCount() int {
	fake.stopActivityStreamWithContextMutex.RLock()
	defer fake.stopActivityStreamWithContextMutex.RUnlock()
	return len(fake.stopActivityStreamWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StopActivityStreamWithContextCalls(stub func(context.Context, *rds.StopActivityStreamInput, ...request.Option) (*rds.StopActivityStreamOutput, error)) {
	fake.stopActivityStreamWithContextMutex.Lock()
	defer fake.stopActivityStreamWithContextMutex.Unlock()
	fake.StopActivityStreamWithContextStub = stub
}

func (fake *FakeRDSAPI) StopActivityStreamWithContextArgsForCall(i int) (context.Context, *rds.StopActivityStreamInput, []request.Option) {
	fake.stopActivityStreamWithContextMutex.RLock()
	defer fake.stopActivityStreamWithContextMutex.RUnlock()
	argsForCall := fake.stopActivityStreamWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StopActivityStreamWithContextReturns(result1 *rds.StopActivityStreamOutput, result2 error) {
	fake.stopActivityStreamWithContextMutex.Lock()
	defer fake.stopActivityStreamWithContextMutex.Unlock()
	fake.StopActivityStreamWithContextStub = nil
	fake.stopActivityStreamWithContextReturns = struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopActivityStreamWithContextReturnsOnCall(i int, result1 *rds.StopActivityStreamOutput, result2 error) {
	fake.stopActivityStreamWithContextMutex.Lock()
	defer fake.stopActivityStreamWithContextMutex.Unlock()
	fake.StopActivityStreamWithContextStub = nil
	if fake.stopActivityStreamWithContextReturnsOnCall == nil {
		fake.stopActivityStreamWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StopActivityStreamOutput
			result2 error
		})
	}
	fake.stopActivityStreamWithContextReturnsOnCall[i] = struct {
		result1 *rds.StopActivityStreamOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBCluster(arg1 *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
	fake.stopDBClusterMutex.Lock()
	ret, specificReturn := fake.stopDBClusterReturnsOnCall[len(fake.stopDBClusterArgsForCall)]
	fake.stopDBClusterArgsForCall = append(fake.stopDBClusterArgsForCall, struct {
		arg1 *rds.StopDBClusterInput
	}{arg1})
	stub := fake.StopDBClusterStub
	fakeReturns := fake.stopDBClusterReturns
	fake.recordInvocation("StopDBCluster", []interface{}{arg1})
	fake.stopDBClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopDBClusterCallCount() int {
	fake.stopDBClusterMutex.RLock()
	defer fake.stopDBClusterMutex.RUnlock()
	return len(fake.stopDBClusterArgsForCall)
}

func (fake *FakeRDSAPI) StopDBClusterCalls(stub func(*rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error)) {
	fake.stopDBClusterMutex.Lock()
	defer fake.stopDBClusterMutex.Unlock()
	fake.StopDBClusterStub = stub
}

func (fake *FakeRDSAPI) StopDBClusterArgsForCall(i int) *rds.StopDBClusterInput {
	fake.stopDBClusterMutex.RLock()
	defer fake.stopDBClusterMutex.RUnlock()
	argsForCall := fake.stopDBClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StopDBClusterReturns(result1 *rds.StopDBClusterOutput, result2 error) {
	fake.stopDBClusterMutex.Lock()
	defer fake.stopDBClusterMutex.Unlock()
	fake.StopDBClusterStub = nil
	fake.stopDBClusterReturns = struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBClusterReturnsOnCall(i int, result1 *rds.StopDBClusterOutput, result2 error) {
	fake.stopDBClusterMutex.Lock()
	defer fake.stopDBClusterMutex.Unlock()
	fake.StopDBClusterStub = nil
	if fake.stopDBClusterReturnsOnCall == nil {
		fake.stopDBClusterReturnsOnCall = make(map[int]struct {
			result1 *rds.StopDBClusterOutput
			result2 error
		})
	}
	fake.stopDBClusterReturnsOnCall[i] = struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBClusterRequest(arg1 *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput) {
	fake.stopDBClusterRequestMutex.Lock()
	ret, specificReturn := fake.stopDBClusterRequestReturnsOnCall[len(fake.stopDBClusterRequestArgsForCall)]
	fake.stopDBClusterRequestArgsForCall = append(fake.stopDBClusterRequestArgsForCall, struct {
		arg1 *rds.StopDBClusterInput
	}{arg1})
	stub := fake.StopDBClusterRequestStub
	fakeReturns := fake.stopDBClusterRequestReturns
	fake.recordInvocation("StopDBClusterRequest", []interface{}{arg1})
	fake.stopDBClusterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopDBClusterRequestCallCount() int {
	fake.stopDBClusterRequestMutex.RLock()
	defer fake.stopDBClusterRequestMutex.RUnlock()
	return len(fake.stopDBClusterRequestArgsForCall)
}

func (fake *FakeRDSAPI) StopDBClusterRequestCalls(stub func(*rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput)) {
	fake.stopDBClusterRequestMutex.Lock()
	defer fake.stopDBClusterRequestMutex.Unlock()
	fake.StopDBClusterRequestStub = stub
}

func (fake *FakeRDSAPI) StopDBClusterRequestArgsForCall(i int) *rds.StopDBClusterInput {
	fake.stopDBClusterRequestMutex.RLock()
	defer fake.stopDBClusterRequestMutex.RUnlock()
	argsForCall := fake.stopDBClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StopDBClusterRequestReturns(result1 *request.Request, result2 *rds.StopDBClusterOutput) {
	fake.stopDBClusterRequestMutex.Lock()
	defer fake.stopDBClusterRequestMutex.Unlock()
	fake.StopDBClusterRequestStub = nil
	fake.stopDBClusterRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StopDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StopDBClusterOutput) {
	fake.stopDBClusterRequestMutex.Lock()
	defer fake.stopDBClusterRequestMutex.Unlock()
	fake.StopDBClusterRequestStub = nil
	if fake.stopDBClusterRequestReturnsOnCall == nil {
		fake.stopDBClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StopDBClusterOutput
		})
	}
	fake.stopDBClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StopDBClusterOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBClusterWithContext(arg1 context.Context, arg2 *rds.StopDBClusterInput, arg3 ...request.Option) (*rds.StopDBClusterOutput, error) {
	fake.stopDBClusterWithContextMutex.Lock()
	ret, specificReturn := fake.stopDBClusterWithContextReturnsOnCall[len(fake.stopDBClusterWithContextArgsForCall)]
	fake.stopDBClusterWithContextArgsForCall = append(fake.stopDBClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StopDBClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StopDBClusterWithContextStub
	fakeReturns := fake.stopDBClusterWithContextReturns
	fake.recordInvocation("StopDBClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopDBClusterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopDBClusterWithContextCallCount() int {
	fake.stopDBClusterWithContextMutex.RLock()
	defer fake.stopDBClusterWithContextMutex.RUnlock()
	return len(fake.stopDBClusterWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StopDBClusterWithContextCalls(stub func(context.Context, *rds.StopDBClusterInput, ...request.Option) (*rds.StopDBClusterOutput, error)) {
	fake.stopDBClusterWithContextMutex.Lock()
	defer fake.stopDBClusterWithContextMutex.Unlock()
	fake.StopDBClusterWithContextStub = stub
}

func (fake *FakeRDSAPI) StopDBClusterWithContextArgsForCall(i int) (context.Context, *rds.StopDBClusterInput, []request.Option) {
	fake.stopDBClusterWithContextMutex.RLock()
	defer fake.stopDBClusterWithContextMutex.RUnlock()
	argsForCall := fake.stopDBClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StopDBClusterWithContextReturns(result1 *rds.StopDBClusterOutput, result2 error) {
	fake.stopDBClusterWithContextMutex.Lock()
	defer fake.stopDBClusterWithContextMutex.Unlock()
	fake.StopDBClusterWithContextStub = nil
	fake.stopDBClusterWithContextReturns = struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBClusterWithContextReturnsOnCall(i int, result1 *rds.StopDBClusterOutput, result2 error) {
	fake.stopDBClusterWithContextMutex.Lock()
	defer fake.stopDBClusterWithContextMutex.Unlock()
	fake.StopDBClusterWithContextStub = nil
	if fake.stopDBClusterWithContextReturnsOnCall == nil {
		fake.stopDBClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StopDBClusterOutput
			result2 error
		})
	}
	fake.stopDBClusterWithContextReturnsOnCall[i] = struct {
		result1 *rds.StopDBClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBInstance(arg1 *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
	fake.stopDBInstanceMutex.Lock()
	ret, specificReturn := fake.stopDBInstanceReturnsOnCall[len(fake.stopDBInstanceArgsForCall)]
	fake.stopDBInstanceArgsForCall = append(fake.stopDBInstanceArgsForCall, struct {
		arg1 *rds.StopDBInstanceInput
	}{arg1})
	stub := fake.StopDBInstanceStub
	fakeReturns := fake.stopDBInstanceReturns
	fake.recordInvocation("StopDBInstance", []interface{}{arg1})
	fake.stopDBInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopDBInstanceCallCount() int {
	fake.stopDBInstanceMutex.RLock()
	defer fake.stopDBInstanceMutex.RUnlock()
	return len(fake.stopDBInstanceArgsForCall)
}

func (fake *FakeRDSAPI) StopDBInstanceCalls(stub func(*rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error)) {
	fake.stopDBInstanceMutex.Lock()
	defer fake.stopDBInstanceMutex.Unlock()
	fake.StopDBInstanceStub = stub
}

func (fake *FakeRDSAPI) StopDBInstanceArgsForCall(i int) *rds.StopDBInstanceInput {
	fake.stopDBInstanceMutex.RLock()
	defer fake.stopDBInstanceMutex.RUnlock()
	argsForCall := fake.stopDBInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StopDBInstanceReturns(result1 *rds.StopDBInstanceOutput, result2 error) {
	fake.stopDBInstanceMutex.Lock()
	defer fake.stopDBInstanceMutex.Unlock()
	fake.StopDBInstanceStub = nil
	fake.stopDBInstanceReturns = struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBInstanceReturnsOnCall(i int, result1 *rds.StopDBInstanceOutput, result2 error) {
	fake.stopDBInstanceMutex.Lock()
	defer fake.stopDBInstanceMutex.Unlock()
	fake.StopDBInstanceStub = nil
	if fake.stopDBInstanceReturnsOnCall == nil {
		fake.stopDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.StopDBInstanceOutput
			result2 error
		})
	}
	fake.stopDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBInstanceRequest(arg1 *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput) {
	fake.stopDBInstanceRequestMutex.Lock()
	ret, specificReturn := fake.stopDBInstanceRequestReturnsOnCall[len(fake.stopDBInstanceRequestArgsForCall)]
	fake.stopDBInstanceRequestArgsForCall = append(fake.stopDBInstanceRequestArgsForCall, struct {
		arg1 *rds.StopDBInstanceInput
	}{arg1})
	stub := fake.StopDBInstanceRequestStub
	fakeReturns := fake.stopDBInstanceRequestReturns
	fake.recordInvocation("StopDBInstanceRequest", []interface{}{arg1})
	fake.stopDBInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopDBInstanceRequestCallCount() int {
	fake.stopDBInstanceRequestMutex.RLock()
	defer fake.stopDBInstanceRequestMutex.RUnlock()
	return len(fake.stopDBInstanceRequestArgsForCall)
}

func (fake *FakeRDSAPI) StopDBInstanceRequestCalls(stub func(*rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput)) {
	fake.stopDBInstanceRequestMutex.Lock()
	defer fake.stopDBInstanceRequestMutex.Unlock()
	fake.StopDBInstanceRequestStub = stub
}

func (fake *FakeRDSAPI) StopDBInstanceRequestArgsForCall(i int) *rds.StopDBInstanceInput {
	fake.stopDBInstanceRequestMutex.RLock()
	defer fake.stopDBInstanceRequestMutex.RUnlock()
	argsForCall := fake.stopDBInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) StopDBInstanceRequestReturns(result1 *request.Request, result2 *rds.StopDBInstanceOutput) {
	fake.stopDBInstanceRequestMutex.Lock()
	defer fake.stopDBInstanceRequestMutex.Unlock()
	fake.StopDBInstanceRequestStub = nil
	fake.stopDBInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *rds.StopDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *rds.StopDBInstanceOutput) {
	fake.stopDBInstanceRequestMutex.Lock()
	defer fake.stopDBInstanceRequestMutex.Unlock()
	fake.StopDBInstanceRequestStub = nil
	if fake.stopDBInstanceRequestReturnsOnCall == nil {
		fake.stopDBInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *rds.StopDBInstanceOutput
		})
	}
	fake.stopDBInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *rds.StopDBInstanceOutput
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBInstanceWithContext(arg1 context.Context, arg2 *rds.StopDBInstanceInput, arg3 ...request.Option) (*rds.StopDBInstanceOutput, error) {
	fake.stopDBInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.stopDBInstanceWithContextReturnsOnCall[len(fake.stopDBInstanceWithContextArgsForCall)]
	fake.stopDBInstanceWithContextArgsForCall = append(fake.stopDBInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.StopDBInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StopDBInstanceWithContextStub
	fakeReturns := fake.stopDBInstanceWithContextReturns
	fake.recordInvocation("StopDBInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopDBInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRDSAPI) StopDBInstanceWithContextCallCount() int {
	fake.stopDBInstanceWithContextMutex.RLock()
	defer fake.stopDBInstanceWithContextMutex.RUnlock()
	return len(fake.stopDBInstanceWithContextArgsForCall)
}

func (fake *FakeRDSAPI) StopDBInstanceWithContextCalls(stub func(context.Context, *rds.StopDBInstanceInput, ...request.Option) (*rds.StopDBInstanceOutput, error)) {
	fake.stopDBInstanceWithContextMutex.Lock()
	defer fake.stopDBInstanceWithContextMutex.Unlock()
	fake.StopDBInstanceWithContextStub = stub
}

func (fake *FakeRDSAPI) StopDBInstanceWithContextArgsForCall(i int) (context.Context, *rds.StopDBInstanceInput, []request.Option) {
	fake.stopDBInstanceWithContextMutex.RLock()
	defer fake.stopDBInstanceWithContextMutex.RUnlock()
	argsForCall := fake.stopDBInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) StopDBInstanceWithContextReturns(result1 *rds.StopDBInstanceOutput, result2 error) {
	fake.stopDBInstanceWithContextMutex.Lock()
	defer fake.stopDBInstanceWithContextMutex.Unlock()
	fake.StopDBInstanceWithContextStub = nil
	fake.stopDBInstanceWithContextReturns = struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) StopDBInstanceWithContextReturnsOnCall(i int, result1 *rds.StopDBInstanceOutput, result2 error) {
	fake.stopDBInstanceWithContextMutex.Lock()
	defer fake.stopDBInstanceWithContextMutex.Unlock()
	fake.StopDBInstanceWithContextStub = nil
	if fake.stopDBInstanceWithContextReturnsOnCall == nil {
		fake.stopDBInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *rds.StopDBInstanceOutput
			result2 error
		})
	}
	fake.stopDBInstanceWithContextReturnsOnCall[i] = struct {
		result1 *rds.StopDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailable(arg1 *rds.DescribeDBClusterSnapshotsInput) error {
	fake.waitUntilDBClusterSnapshotAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilDBClusterSnapshotAvailableReturnsOnCall[len(fake.waitUntilDBClusterSnapshotAvailableArgsForCall)]
	fake.waitUntilDBClusterSnapshotAvailableArgsForCall = append(fake.waitUntilDBClusterSnapshotAvailableArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}{arg1})
	stub := fake.WaitUntilDBClusterSnapshotAvailableStub
	fakeReturns := fake.waitUntilDBClusterSnapshotAvailableReturns
	fake.recordInvocation("WaitUntilDBClusterSnapshotAvailable", []interface{}{arg1})
	fake.waitUntilDBClusterSnapshotAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableCallCount() int {
	fake.waitUntilDBClusterSnapshotAvailableMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotAvailableMutex.RUnlock()
	return len(fake.waitUntilDBClusterSnapshotAvailableArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableCalls(stub func(*rds.DescribeDBClusterSnapshotsInput) error) {
	fake.waitUntilDBClusterSnapshotAvailableMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotAvailableMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotAvailableStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableArgsForCall(i int) *rds.DescribeDBClusterSnapshotsInput {
	fake.waitUntilDBClusterSnapshotAvailableMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilDBClusterSnapshotAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableReturns(result1 error) {
	fake.waitUntilDBClusterSnapshotAvailableMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotAvailableMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotAvailableStub = nil
	fake.waitUntilDBClusterSnapshotAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBClusterSnapshotAvailableMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotAvailableMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotAvailableStub = nil
	if fake.waitUntilDBClusterSnapshotAvailableReturnsOnCall == nil {
		fake.waitUntilDBClusterSnapshotAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBClusterSnapshotAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterSnapshotsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDBClusterSnapshotAvailableWithContextReturnsOnCall[len(fake.waitUntilDBClusterSnapshotAvailableWithContextArgsForCall)]
	fake.waitUntilDBClusterSnapshotAvailableWithContextArgsForCall = append(fake.waitUntilDBClusterSnapshotAvailableWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDBClusterSnapshotAvailableWithContextStub
	fakeReturns := fake.waitUntilDBClusterSnapshotAvailableWithContextReturns
	fake.recordInvocation("WaitUntilDBClusterSnapshotAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableWithContextCallCount() int {
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilDBClusterSnapshotAvailableWithContextArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...request.WaiterOption) error) {
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotAvailableWithContextStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterSnapshotsInput, []request.WaiterOption) {
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDBClusterSnapshotAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableWithContextReturns(result1 error) {
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotAvailableWithContextStub = nil
	fake.waitUntilDBClusterSnapshotAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotAvailableWithContextStub = nil
	if fake.waitUntilDBClusterSnapshotAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilDBClusterSnapshotAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBClusterSnapshotAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeleted(arg1 *rds.DescribeDBClusterSnapshotsInput) error {
	fake.waitUntilDBClusterSnapshotDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilDBClusterSnapshotDeletedReturnsOnCall[len(fake.waitUntilDBClusterSnapshotDeletedArgsForCall)]
	fake.waitUntilDBClusterSnapshotDeletedArgsForCall = append(fake.waitUntilDBClusterSnapshotDeletedArgsForCall, struct {
		arg1 *rds.DescribeDBClusterSnapshotsInput
	}{arg1})
	stub := fake.WaitUntilDBClusterSnapshotDeletedStub
	fakeReturns := fake.waitUntilDBClusterSnapshotDeletedReturns
	fake.recordInvocation("WaitUntilDBClusterSnapshotDeleted", []interface{}{arg1})
	fake.waitUntilDBClusterSnapshotDeletedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedCallCount() int {
	fake.waitUntilDBClusterSnapshotDeletedMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotDeletedMutex.RUnlock()
	return len(fake.waitUntilDBClusterSnapshotDeletedArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedCalls(stub func(*rds.DescribeDBClusterSnapshotsInput) error) {
	fake.waitUntilDBClusterSnapshotDeletedMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotDeletedMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotDeletedStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedArgsForCall(i int) *rds.DescribeDBClusterSnapshotsInput {
	fake.waitUntilDBClusterSnapshotDeletedMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilDBClusterSnapshotDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedReturns(result1 error) {
	fake.waitUntilDBClusterSnapshotDeletedMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotDeletedMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotDeletedStub = nil
	fake.waitUntilDBClusterSnapshotDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBClusterSnapshotDeletedMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotDeletedMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotDeletedStub = nil
	if fake.waitUntilDBClusterSnapshotDeletedReturnsOnCall == nil {
		fake.waitUntilDBClusterSnapshotDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBClusterSnapshotDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedWithContext(arg1 context.Context, arg2 *rds.DescribeDBClusterSnapshotsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDBClusterSnapshotDeletedWithContextReturnsOnCall[len(fake.waitUntilDBClusterSnapshotDeletedWithContextArgsForCall)]
	fake.waitUntilDBClusterSnapshotDeletedWithContextArgsForCall = append(fake.waitUntilDBClusterSnapshotDeletedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBClusterSnapshotsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDBClusterSnapshotDeletedWithContextStub
	fakeReturns := fake.waitUntilDBClusterSnapshotDeletedWithContextReturns
	fake.recordInvocation("WaitUntilDBClusterSnapshotDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedWithContextCallCount() int {
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilDBClusterSnapshotDeletedWithContextArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedWithContextCalls(stub func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...request.WaiterOption) error) {
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotDeletedWithContextStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBClusterSnapshotsInput, []request.WaiterOption) {
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDBClusterSnapshotDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedWithContextReturns(result1 error) {
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotDeletedWithContextStub = nil
	fake.waitUntilDBClusterSnapshotDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBClusterSnapshotDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBClusterSnapshotDeletedWithContextStub = nil
	if fake.waitUntilDBClusterSnapshotDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilDBClusterSnapshotDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBClusterSnapshotDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailable(arg1 *rds.DescribeDBInstancesInput) error {
	fake.waitUntilDBInstanceAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilDBInstanceAvailableReturnsOnCall[len(fake.waitUntilDBInstanceAvailableArgsForCall)]
	fake.waitUntilDBInstanceAvailableArgsForCall = append(fake.waitUntilDBInstanceAvailableArgsForCall, struct {
		arg1 *rds.DescribeDBInstancesInput
	}{arg1})
	stub := fake.WaitUntilDBInstanceAvailableStub
	fakeReturns := fake.waitUntilDBInstanceAvailableReturns
	fake.recordInvocation("WaitUntilDBInstanceAvailable", []interface{}{arg1})
	fake.waitUntilDBInstanceAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableCallCount() int {
	fake.waitUntilDBInstanceAvailableMutex.RLock()
	defer fake.waitUntilDBInstanceAvailableMutex.RUnlock()
	return len(fake.waitUntilDBInstanceAvailableArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableCalls(stub func(*rds.DescribeDBInstancesInput) error) {
	fake.waitUntilDBInstanceAvailableMutex.Lock()
	defer fake.waitUntilDBInstanceAvailableMutex.Unlock()
	fake.WaitUntilDBInstanceAvailableStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableArgsForCall(i int) *rds.DescribeDBInstancesInput {
	fake.waitUntilDBInstanceAvailableMutex.RLock()
	defer fake.waitUntilDBInstanceAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilDBInstanceAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableReturns(result1 error) {
	fake.waitUntilDBInstanceAvailableMutex.Lock()
	defer fake.waitUntilDBInstanceAvailableMutex.Unlock()
	fake.WaitUntilDBInstanceAvailableStub = nil
	fake.waitUntilDBInstanceAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBInstanceAvailableMutex.Lock()
	defer fake.waitUntilDBInstanceAvailableMutex.Unlock()
	fake.WaitUntilDBInstanceAvailableStub = nil
	if fake.waitUntilDBInstanceAvailableReturnsOnCall == nil {
		fake.waitUntilDBInstanceAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBInstanceAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableWithContext(arg1 context.Context, arg2 *rds.DescribeDBInstancesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDBInstanceAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDBInstanceAvailableWithContextReturnsOnCall[len(fake.waitUntilDBInstanceAvailableWithContextArgsForCall)]
	fake.waitUntilDBInstanceAvailableWithContextArgsForCall = append(fake.waitUntilDBInstanceAvailableWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDBInstanceAvailableWithContextStub
	fakeReturns := fake.waitUntilDBInstanceAvailableWithContextReturns
	fake.recordInvocation("WaitUntilDBInstanceAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDBInstanceAvailableWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableWithContextCallCount() int {
	fake.waitUntilDBInstanceAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBInstanceAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilDBInstanceAvailableWithContextArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableWithContextCalls(stub func(context.Context, *rds.DescribeDBInstancesInput, ...request.WaiterOption) error) {
	fake.waitUntilDBInstanceAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBInstanceAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBInstanceAvailableWithContextStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBInstancesInput, []request.WaiterOption) {
	fake.waitUntilDBInstanceAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBInstanceAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDBInstanceAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableWithContextReturns(result1 error) {
	fake.waitUntilDBInstanceAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBInstanceAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBInstanceAvailableWithContextStub = nil
	fake.waitUntilDBInstanceAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBInstanceAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBInstanceAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBInstanceAvailableWithContextStub = nil
	if fake.waitUntilDBInstanceAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilDBInstanceAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBInstanceAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeleted(arg1 *rds.DescribeDBInstancesInput) error {
	fake.waitUntilDBInstanceDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilDBInstanceDeletedReturnsOnCall[len(fake.waitUntilDBInstanceDeletedArgsForCall)]
	fake.waitUntilDBInstanceDeletedArgsForCall = append(fake.waitUntilDBInstanceDeletedArgsForCall, struct {
		arg1 *rds.DescribeDBInstancesInput
	}{arg1})
	stub := fake.WaitUntilDBInstanceDeletedStub
	fakeReturns := fake.waitUntilDBInstanceDeletedReturns
	fake.recordInvocation("WaitUntilDBInstanceDeleted", []interface{}{arg1})
	fake.waitUntilDBInstanceDeletedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedCallCount() int {
	fake.waitUntilDBInstanceDeletedMutex.RLock()
	defer fake.waitUntilDBInstanceDeletedMutex.RUnlock()
	return len(fake.waitUntilDBInstanceDeletedArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedCalls(stub func(*rds.DescribeDBInstancesInput) error) {
	fake.waitUntilDBInstanceDeletedMutex.Lock()
	defer fake.waitUntilDBInstanceDeletedMutex.Unlock()
	fake.WaitUntilDBInstanceDeletedStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedArgsForCall(i int) *rds.DescribeDBInstancesInput {
	fake.waitUntilDBInstanceDeletedMutex.RLock()
	defer fake.waitUntilDBInstanceDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilDBInstanceDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedReturns(result1 error) {
	fake.waitUntilDBInstanceDeletedMutex.Lock()
	defer fake.waitUntilDBInstanceDeletedMutex.Unlock()
	fake.WaitUntilDBInstanceDeletedStub = nil
	fake.waitUntilDBInstanceDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBInstanceDeletedMutex.Lock()
	defer fake.waitUntilDBInstanceDeletedMutex.Unlock()
	fake.WaitUntilDBInstanceDeletedStub = nil
	if fake.waitUntilDBInstanceDeletedReturnsOnCall == nil {
		fake.waitUntilDBInstanceDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBInstanceDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedWithContext(arg1 context.Context, arg2 *rds.DescribeDBInstancesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDBInstanceDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDBInstanceDeletedWithContextReturnsOnCall[len(fake.waitUntilDBInstanceDeletedWithContextArgsForCall)]
	fake.waitUntilDBInstanceDeletedWithContextArgsForCall = append(fake.waitUntilDBInstanceDeletedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBInstancesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDBInstanceDeletedWithContextStub
	fakeReturns := fake.waitUntilDBInstanceDeletedWithContextReturns
	fake.recordInvocation("WaitUntilDBInstanceDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDBInstanceDeletedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedWithContextCallCount() int {
	fake.waitUntilDBInstanceDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBInstanceDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilDBInstanceDeletedWithContextArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedWithContextCalls(stub func(context.Context, *rds.DescribeDBInstancesInput, ...request.WaiterOption) error) {
	fake.waitUntilDBInstanceDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBInstanceDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBInstanceDeletedWithContextStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBInstancesInput, []request.WaiterOption) {
	fake.waitUntilDBInstanceDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBInstanceDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDBInstanceDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedWithContextReturns(result1 error) {
	fake.waitUntilDBInstanceDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBInstanceDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBInstanceDeletedWithContextStub = nil
	fake.waitUntilDBInstanceDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBInstanceDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBInstanceDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBInstanceDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBInstanceDeletedWithContextStub = nil
	if fake.waitUntilDBInstanceDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilDBInstanceDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBInstanceDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailable(arg1 *rds.DescribeDBSnapshotsInput) error {
	fake.waitUntilDBSnapshotAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilDBSnapshotAvailableReturnsOnCall[len(fake.waitUntilDBSnapshotAvailableArgsForCall)]
	fake.waitUntilDBSnapshotAvailableArgsForCall = append(fake.waitUntilDBSnapshotAvailableArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}{arg1})
	stub := fake.WaitUntilDBSnapshotAvailableStub
	fakeReturns := fake.waitUntilDBSnapshotAvailableReturns
	fake.recordInvocation("WaitUntilDBSnapshotAvailable", []interface{}{arg1})
	fake.waitUntilDBSnapshotAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableCallCount() int {
	fake.waitUntilDBSnapshotAvailableMutex.RLock()
	defer fake.waitUntilDBSnapshotAvailableMutex.RUnlock()
	return len(fake.waitUntilDBSnapshotAvailableArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableCalls(stub func(*rds.DescribeDBSnapshotsInput) error) {
	fake.waitUntilDBSnapshotAvailableMutex.Lock()
	defer fake.waitUntilDBSnapshotAvailableMutex.Unlock()
	fake.WaitUntilDBSnapshotAvailableStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableArgsForCall(i int) *rds.DescribeDBSnapshotsInput {
	fake.waitUntilDBSnapshotAvailableMutex.RLock()
	defer fake.waitUntilDBSnapshotAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilDBSnapshotAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableReturns(result1 error) {
	fake.waitUntilDBSnapshotAvailableMutex.Lock()
	defer fake.waitUntilDBSnapshotAvailableMutex.Unlock()
	fake.WaitUntilDBSnapshotAvailableStub = nil
	fake.waitUntilDBSnapshotAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBSnapshotAvailableMutex.Lock()
	defer fake.waitUntilDBSnapshotAvailableMutex.Unlock()
	fake.WaitUntilDBSnapshotAvailableStub = nil
	if fake.waitUntilDBSnapshotAvailableReturnsOnCall == nil {
		fake.waitUntilDBSnapshotAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBSnapshotAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableWithContext(arg1 context.Context, arg2 *rds.DescribeDBSnapshotsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDBSnapshotAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDBSnapshotAvailableWithContextReturnsOnCall[len(fake.waitUntilDBSnapshotAvailableWithContextArgsForCall)]
	fake.waitUntilDBSnapshotAvailableWithContextArgsForCall = append(fake.waitUntilDBSnapshotAvailableWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDBSnapshotAvailableWithContextStub
	fakeReturns := fake.waitUntilDBSnapshotAvailableWithContextReturns
	fake.recordInvocation("WaitUntilDBSnapshotAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDBSnapshotAvailableWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableWithContextCallCount() int {
	fake.waitUntilDBSnapshotAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBSnapshotAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilDBSnapshotAvailableWithContextArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableWithContextCalls(stub func(context.Context, *rds.DescribeDBSnapshotsInput, ...request.WaiterOption) error) {
	fake.waitUntilDBSnapshotAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBSnapshotAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBSnapshotAvailableWithContextStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSnapshotsInput, []request.WaiterOption) {
	fake.waitUntilDBSnapshotAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBSnapshotAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDBSnapshotAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableWithContextReturns(result1 error) {
	fake.waitUntilDBSnapshotAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBSnapshotAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBSnapshotAvailableWithContextStub = nil
	fake.waitUntilDBSnapshotAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBSnapshotAvailableWithContextMutex.Lock()
	defer fake.waitUntilDBSnapshotAvailableWithContextMutex.Unlock()
	fake.WaitUntilDBSnapshotAvailableWithContextStub = nil
	if fake.waitUntilDBSnapshotAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilDBSnapshotAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBSnapshotAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeleted(arg1 *rds.DescribeDBSnapshotsInput) error {
	fake.waitUntilDBSnapshotDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilDBSnapshotDeletedReturnsOnCall[len(fake.waitUntilDBSnapshotDeletedArgsForCall)]
	fake.waitUntilDBSnapshotDeletedArgsForCall = append(fake.waitUntilDBSnapshotDeletedArgsForCall, struct {
		arg1 *rds.DescribeDBSnapshotsInput
	}{arg1})
	stub := fake.WaitUntilDBSnapshotDeletedStub
	fakeReturns := fake.waitUntilDBSnapshotDeletedReturns
	fake.recordInvocation("WaitUntilDBSnapshotDeleted", []interface{}{arg1})
	fake.waitUntilDBSnapshotDeletedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedCallCount() int {
	fake.waitUntilDBSnapshotDeletedMutex.RLock()
	defer fake.waitUntilDBSnapshotDeletedMutex.RUnlock()
	return len(fake.waitUntilDBSnapshotDeletedArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedCalls(stub func(*rds.DescribeDBSnapshotsInput) error) {
	fake.waitUntilDBSnapshotDeletedMutex.Lock()
	defer fake.waitUntilDBSnapshotDeletedMutex.Unlock()
	fake.WaitUntilDBSnapshotDeletedStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedArgsForCall(i int) *rds.DescribeDBSnapshotsInput {
	fake.waitUntilDBSnapshotDeletedMutex.RLock()
	defer fake.waitUntilDBSnapshotDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilDBSnapshotDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedReturns(result1 error) {
	fake.waitUntilDBSnapshotDeletedMutex.Lock()
	defer fake.waitUntilDBSnapshotDeletedMutex.Unlock()
	fake.WaitUntilDBSnapshotDeletedStub = nil
	fake.waitUntilDBSnapshotDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBSnapshotDeletedMutex.Lock()
	defer fake.waitUntilDBSnapshotDeletedMutex.Unlock()
	fake.WaitUntilDBSnapshotDeletedStub = nil
	if fake.waitUntilDBSnapshotDeletedReturnsOnCall == nil {
		fake.waitUntilDBSnapshotDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBSnapshotDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedWithContext(arg1 context.Context, arg2 *rds.DescribeDBSnapshotsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDBSnapshotDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDBSnapshotDeletedWithContextReturnsOnCall[len(fake.waitUntilDBSnapshotDeletedWithContextArgsForCall)]
	fake.waitUntilDBSnapshotDeletedWithContextArgsForCall = append(fake.waitUntilDBSnapshotDeletedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *rds.DescribeDBSnapshotsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDBSnapshotDeletedWithContextStub
	fakeReturns := fake.waitUntilDBSnapshotDeletedWithContextReturns
	fake.recordInvocation("WaitUntilDBSnapshotDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDBSnapshotDeletedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedWithContextCallCount() int {
	fake.waitUntilDBSnapshotDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBSnapshotDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilDBSnapshotDeletedWithContextArgsForCall)
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedWithContextCalls(stub func(context.Context, *rds.DescribeDBSnapshotsInput, ...request.WaiterOption) error) {
	fake.waitUntilDBSnapshotDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBSnapshotDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBSnapshotDeletedWithContextStub = stub
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedWithContextArgsForCall(i int) (context.Context, *rds.DescribeDBSnapshotsInput, []request.WaiterOption) {
	fake.waitUntilDBSnapshotDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBSnapshotDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDBSnapshotDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedWithContextReturns(result1 error) {
	fake.waitUntilDBSnapshotDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBSnapshotDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBSnapshotDeletedWithContextStub = nil
	fake.waitUntilDBSnapshotDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) WaitUntilDBSnapshotDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDBSnapshotDeletedWithContextMutex.Lock()
	defer fake.waitUntilDBSnapshotDeletedWithContextMutex.Unlock()
	fake.WaitUntilDBSnapshotDeletedWithContextStub = nil
	if fake.waitUntilDBSnapshotDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilDBSnapshotDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDBSnapshotDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRDSAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addRoleToDBClusterMutex.RLock()
	defer fake.addRoleToDBClusterMutex.RUnlock()
	fake.addRoleToDBClusterRequestMutex.RLock()
	defer fake.addRoleToDBClusterRequestMutex.RUnlock()
	fake.addRoleToDBClusterWithContextMutex.RLock()
	defer fake.addRoleToDBClusterWithContextMutex.RUnlock()
	fake.addRoleToDBInstanceMutex.RLock()
	defer fake.addRoleToDBInstanceMutex.RUnlock()
	fake.addRoleToDBInstanceRequestMutex.RLock()
	defer fake.addRoleToDBInstanceRequestMutex.RUnlock()
	fake.addRoleToDBInstanceWithContextMutex.RLock()
	defer fake.addRoleToDBInstanceWithContextMutex.RUnlock()
	fake.addSourceIdentifierToSubscriptionMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionMutex.RUnlock()
	fake.addSourceIdentifierToSubscriptionRequestMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionRequestMutex.RUnlock()
	fake.addSourceIdentifierToSubscriptionWithContextMutex.RLock()
	defer fake.addSourceIdentifierToSubscriptionWithContextMutex.RUnlock()
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	fake.applyPendingMaintenanceActionMutex.RLock()
	defer fake.applyPendingMaintenanceActionMutex.RUnlock()
	fake.applyPendingMaintenanceActionRequestMutex.RLock()
	defer fake.applyPendingMaintenanceActionRequestMutex.RUnlock()
	fake.applyPendingMaintenanceActionWithContextMutex.RLock()
	defer fake.applyPendingMaintenanceActionWithContextMutex.RUnlock()
	fake.authorizeDBSecurityGroupIngressMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressMutex.RUnlock()
	fake.authorizeDBSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressRequestMutex.RUnlock()
	fake.authorizeDBSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeDBSecurityGroupIngressWithContextMutex.RUnlock()
	fake.backtrackDBClusterMutex.RLock()
	defer fake.backtrackDBClusterMutex.RUnlock()
	fake.backtrackDBClusterRequestMutex.RLock()
	defer fake.backtrackDBClusterRequestMutex.RUnlock()
	fake.backtrackDBClusterWithContextMutex.RLock()
	defer fake.backtrackDBClusterWithContextMutex.RUnlock()
	fake.cancelExportTaskMutex.RLock()
	defer fake.cancelExportTaskMutex.RUnlock()
	fake.cancelExportTaskRequestMutex.RLock()
	defer fake.cancelExportTaskRequestMutex.RUnlock()
	fake.cancelExportTaskWithContextMutex.RLock()
	defer fake.cancelExportTaskWithContextMutex.RUnlock()
	fake.copyDBClusterParameterGroupMutex.RLock()
	defer fake.copyDBClusterParameterGroupMutex.RUnlock()
	fake.copyDBClusterParameterGroupRequestMutex.RLock()
	defer fake.copyDBClusterParameterGroupRequestMutex.RUnlock()
	fake.copyDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.copyDBClusterParameterGroupWithContextMutex.RUnlock()
	fake.copyDBClusterSnapshotMutex.RLock()
	defer fake.copyDBClusterSnapshotMutex.RUnlock()
	fake.copyDBClusterSnapshotRequestMutex.RLock()
	defer fake.copyDBClusterSnapshotRequestMutex.RUnlock()
	fake.copyDBClusterSnapshotWithContextMutex.RLock()
	defer fake.copyDBClusterSnapshotWithContextMutex.RUnlock()
	fake.copyDBParameterGroupMutex.RLock()
	defer fake.copyDBParameterGroupMutex.RUnlock()
	fake.copyDBParameterGroupRequestMutex.RLock()
	defer fake.copyDBParameterGroupRequestMutex.RUnlock()
	fake.copyDBParameterGroupWithContextMutex.RLock()
	defer fake.copyDBParameterGroupWithContextMutex.RUnlock()
	fake.copyDBSnapshotMutex.RLock()
	defer fake.copyDBSnapshotMutex.RUnlock()
	fake.copyDBSnapshotRequestMutex.RLock()
	defer fake.copyDBSnapshotRequestMutex.RUnlock()
	fake.copyDBSnapshotWithContextMutex.RLock()
	defer fake.copyDBSnapshotWithContextMutex.RUnlock()
	fake.copyOptionGroupMutex.RLock()
	defer fake.copyOptionGroupMutex.RUnlock()
	fake.copyOptionGroupRequestMutex.RLock()
	defer fake.copyOptionGroupRequestMutex.RUnlock()
	fake.copyOptionGroupWithContextMutex.RLock()
	defer fake.copyOptionGroupWithContextMutex.RUnlock()
	fake.createCustomAvailabilityZoneMutex.RLock()
	defer fake.createCustomAvailabilityZoneMutex.RUnlock()
	fake.createCustomAvailabilityZoneRequestMutex.RLock()
	defer fake.createCustomAvailabilityZoneRequestMutex.RUnlock()
	fake.createCustomAvailabilityZoneWithContextMutex.RLock()
	defer fake.createCustomAvailabilityZoneWithContextMutex.RUnlock()
	fake.createDBClusterMutex.RLock()
	defer fake.createDBClusterMutex.RUnlock()
	fake.createDBClusterEndpointMutex.RLock()
	defer fake.createDBClusterEndpointMutex.RUnlock()
	fake.createDBClusterEndpointRequestMutex.RLock()
	defer fake.createDBClusterEndpointRequestMutex.RUnlock()
	fake.createDBClusterEndpointWithContextMutex.RLock()
	defer fake.createDBClusterEndpointWithContextMutex.RUnlock()
	fake.createDBClusterParameterGroupMutex.RLock()
	defer fake.createDBClusterParameterGroupMutex.RUnlock()
	fake.createDBClusterParameterGroupRequestMutex.RLock()
	defer fake.createDBClusterParameterGroupRequestMutex.RUnlock()
	fake.createDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.createDBClusterParameterGroupWithContextMutex.RUnlock()
	fake.createDBClusterRequestMutex.RLock()
	defer fake.createDBClusterRequestMutex.RUnlock()
	fake.createDBClusterSnapshotMutex.RLock()
	defer fake.createDBClusterSnapshotMutex.RUnlock()
	fake.createDBClusterSnapshotRequestMutex.RLock()
	defer fake.createDBClusterSnapshotRequestMutex.RUnlock()
	fake.createDBClusterSnapshotWithContextMutex.RLock()
	defer fake.createDBClusterSnapshotWithContextMutex.RUnlock()
	fake.createDBClusterWithContextMutex.RLock()
	defer fake.createDBClusterWithContextMutex.RUnlock()
	fake.createDBInstanceMutex.RLock()
	defer fake.createDBInstanceMutex.RUnlock()
	fake.createDBInstanceReadReplicaMutex.RLock()
	defer fake.createDBInstanceReadReplicaMutex.RUnlock()
	fake.createDBInstanceReadReplicaRequestMutex.RLock()
	defer fake.createDBInstanceReadReplicaRequestMutex.RUnlock()
	fake.createDBInstanceReadReplicaWithContextMutex.RLock()
	defer fake.createDBInstanceReadReplicaWithContextMutex.RUnlock()
	fake.createDBInstanceRequestMutex.RLock()
	defer fake.createDBInstanceRequestMutex.RUnlock()
	fake.createDBInstanceWithContextMutex.RLock()
	defer fake.createDBInstanceWithContextMutex.RUnlock()
	fake.createDBParameterGroupMutex.RLock()
	defer fake.createDBParameterGroupMutex.RUnlock()
	fake.createDBParameterGroupRequestMutex.RLock()
	defer fake.createDBParameterGroupRequestMutex.RUnlock()
	fake.createDBParameterGroupWithContextMutex.RLock()
	defer fake.createDBParameterGroupWithContextMutex.RUnlock()
	fake.createDBProxyMutex.RLock()
	defer fake.createDBProxyMutex.RUnlock()
	fake.createDBProxyRequestMutex.RLock()
	defer fake.createDBProxyRequestMutex.RUnlock()
	fake.createDBProxyWithContextMutex.RLock()
	defer fake.createDBProxyWithContextMutex.RUnlock()
	fake.createDBSecurityGroupMutex.RLock()
	defer fake.createDBSecurityGroupMutex.RUnlock()
	fake.createDBSecurityGroupRequestMutex.RLock()
	defer fake.createDBSecurityGroupRequestMutex.RUnlock()
	fake.createDBSecurityGroupWithContextMutex.RLock()
	defer fake.createDBSecurityGroupWithContextMutex.RUnlock()
	fake.createDBSnapshotMutex.RLock()
	defer fake.createDBSnapshotMutex.RUnlock()
	fake.createDBSnapshotRequestMutex.RLock()
	defer fake.createDBSnapshotRequestMutex.RUnlock()
	fake.createDBSnapshotWithContextMutex.RLock()
	defer fake.createDBSnapshotWithContextMutex.RUnlock()
	fake.createDBSubnetGroupMutex.RLock()
	defer fake.createDBSubnetGroupMutex.RUnlock()
	fake.createDBSubnetGroupRequestMutex.RLock()
	defer fake.createDBSubnetGroupRequestMutex.RUnlock()
	fake.createDBSubnetGroupWithContextMutex.RLock()
	defer fake.createDBSubnetGroupWithContextMutex.RUnlock()
	fake.createEventSubscriptionMutex.RLock()
	defer fake.createEventSubscriptionMutex.RUnlock()
	fake.createEventSubscriptionRequestMutex.RLock()
	defer fake.createEventSubscriptionRequestMutex.RUnlock()
	fake.createEventSubscriptionWithContextMutex.RLock()
	defer fake.createEventSubscriptionWithContextMutex.RUnlock()
	fake.createGlobalClusterMutex.RLock()
	defer fake.createGlobalClusterMutex.RUnlock()
	fake.createGlobalClusterRequestMutex.RLock()
	defer fake.createGlobalClusterRequestMutex.RUnlock()
	fake.createGlobalClusterWithContextMutex.RLock()
	defer fake.createGlobalClusterWithContextMutex.RUnlock()
	fake.createOptionGroupMutex.RLock()
	defer fake.createOptionGroupMutex.RUnlock()
	fake.createOptionGroupRequestMutex.RLock()
	defer fake.createOptionGroupRequestMutex.RUnlock()
	fake.createOptionGroupWithContextMutex.RLock()
	defer fake.createOptionGroupWithContextMutex.RUnlock()
	fake.deleteCustomAvailabilityZoneMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneMutex.RUnlock()
	fake.deleteCustomAvailabilityZoneRequestMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneRequestMutex.RUnlock()
	fake.deleteCustomAvailabilityZoneWithContextMutex.RLock()
	defer fake.deleteCustomAvailabilityZoneWithContextMutex.RUnlock()
	fake.deleteDBClusterMutex.RLock()
	defer fake.deleteDBClusterMutex.RUnlock()
	fake.deleteDBClusterEndpointMutex.RLock()
	defer fake.deleteDBClusterEndpointMutex.RUnlock()
	fake.deleteDBClusterEndpointRequestMutex.RLock()
	defer fake.deleteDBClusterEndpointRequestMutex.RUnlock()
	fake.deleteDBClusterEndpointWithContextMutex.RLock()
	defer fake.deleteDBClusterEndpointWithContextMutex.RUnlock()
	fake.deleteDBClusterParameterGroupMutex.RLock()
	defer fake.deleteDBClusterParameterGroupMutex.RUnlock()
	fake.deleteDBClusterParameterGroupRequestMutex.RLock()
	defer fake.deleteDBClusterParameterGroupRequestMutex.RUnlock()
	fake.deleteDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.deleteDBClusterParameterGroupWithContextMutex.RUnlock()
	fake.deleteDBClusterRequestMutex.RLock()
	defer fake.deleteDBClusterRequestMutex.RUnlock()
	fake.deleteDBClusterSnapshotMutex.RLock()
	defer fake.deleteDBClusterSnapshotMutex.RUnlock()
	fake.deleteDBClusterSnapshotRequestMutex.RLock()
	defer fake.deleteDBClusterSnapshotRequestMutex.RUnlock()
	fake.deleteDBClusterSnapshotWithContextMutex.RLock()
	defer fake.deleteDBClusterSnapshotWithContextMutex.RUnlock()
	fake.deleteDBClusterWithContextMutex.RLock()
	defer fake.deleteDBClusterWithContextMutex.RUnlock()
	fake.deleteDBInstanceMutex.RLock()
	defer fake.deleteDBInstanceMutex.RUnlock()
	fake.deleteDBInstanceAutomatedBackupMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupMutex.RUnlock()
	fake.deleteDBInstanceAutomatedBackupRequestMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupRequestMutex.RUnlock()
	fake.deleteDBInstanceAutomatedBackupWithContextMutex.RLock()
	defer fake.deleteDBInstanceAutomatedBackupWithContextMutex.RUnlock()
	fake.deleteDBInstanceRequestMutex.RLock()
	defer fake.deleteDBInstanceRequestMutex.RUnlock()
	fake.deleteDBInstanceWithContextMutex.RLock()
	defer fake.deleteDBInstanceWithContextMutex.RUnlock()
	fake.deleteDBParameterGroupMutex.RLock()
	defer fake.deleteDBParameterGroupMutex.RUnlock()
	fake.deleteDBParameterGroupRequestMutex.RLock()
	defer fake.deleteDBParameterGroupRequestMutex.RUnlock()
	fake.deleteDBParameterGroupWithContextMutex.RLock()
	defer fake.deleteDBParameterGroupWithContextMutex.RUnlock()
	fake.deleteDBProxyMutex.RLock()
	defer fake.deleteDBProxyMutex.RUnlock()
	fake.deleteDBProxyRequestMutex.RLock()
	defer fake.deleteDBProxyRequestMutex.RUnlock()
	fake.deleteDBProxyWithContextMutex.RLock()
	defer fake.deleteDBProxyWithContextMutex.RUnlock()
	fake.deleteDBSecurityGroupMutex.RLock()
	defer fake.deleteDBSecurityGroupMutex.RUnlock()
	fake.deleteDBSecurityGroupRequestMutex.RLock()
	defer fake.deleteDBSecurityGroupRequestMutex.RUnlock()
	fake.deleteDBSecurityGroupWithContextMutex.RLock()
	defer fake.deleteDBSecurityGroupWithContextMutex.RUnlock()
	fake.deleteDBSnapshotMutex.RLock()
	defer fake.deleteDBSnapshotMutex.RUnlock()
	fake.deleteDBSnapshotRequestMutex.RLock()
	defer fake.deleteDBSnapshotRequestMutex.RUnlock()
	fake.deleteDBSnapshotWithContextMutex.RLock()
	defer fake.deleteDBSnapshotWithContextMutex.RUnlock()
	fake.deleteDBSubnetGroupMutex.RLock()
	defer fake.deleteDBSubnetGroupMutex.RUnlock()
	fake.deleteDBSubnetGroupRequestMutex.RLock()
	defer fake.deleteDBSubnetGroupRequestMutex.RUnlock()
	fake.deleteDBSubnetGroupWithContextMutex.RLock()
	defer fake.deleteDBSubnetGroupWithContextMutex.RUnlock()
	fake.deleteEventSubscriptionMutex.RLock()
	defer fake.deleteEventSubscriptionMutex.RUnlock()
	fake.deleteEventSubscriptionRequestMutex.RLock()
	defer fake.deleteEventSubscriptionRequestMutex.RUnlock()
	fake.deleteEventSubscriptionWithContextMutex.RLock()
	defer fake.deleteEventSubscriptionWithContextMutex.RUnlock()
	fake.deleteGlobalClusterMutex.RLock()
	defer fake.deleteGlobalClusterMutex.RUnlock()
	fake.deleteGlobalClusterRequestMutex.RLock()
	defer fake.deleteGlobalClusterRequestMutex.RUnlock()
	fake.deleteGlobalClusterWithContextMutex.RLock()
	defer fake.deleteGlobalClusterWithContextMutex.RUnlock()
	fake.deleteInstallationMediaMutex.RLock()
	defer fake.deleteInstallationMediaMutex.RUnlock()
	fake.deleteInstallationMediaRequestMutex.RLock()
	defer fake.deleteInstallationMediaRequestMutex.RUnlock()
	fake.deleteInstallationMediaWithContextMutex.RLock()
	defer fake.deleteInstallationMediaWithContextMutex.RUnlock()
	fake.deleteOptionGroupMutex.RLock()
	defer fake.deleteOptionGroupMutex.RUnlock()
	fake.deleteOptionGroupRequestMutex.RLock()
	defer fake.deleteOptionGroupRequestMutex.RUnlock()
	fake.deleteOptionGroupWithContextMutex.RLock()
	defer fake.deleteOptionGroupWithContextMutex.RUnlock()
	fake.deregisterDBProxyTargetsMutex.RLock()
	defer fake.deregisterDBProxyTargetsMutex.RUnlock()
	fake.deregisterDBProxyTargetsRequestMutex.RLock()
	defer fake.deregisterDBProxyTargetsRequestMutex.RUnlock()
	fake.deregisterDBProxyTargetsWithContextMutex.RLock()
	defer fake.deregisterDBProxyTargetsWithContextMutex.RUnlock()
	fake.describeAccountAttributesMutex.RLock()
	defer fake.describeAccountAttributesMutex.RUnlock()
	fake.describeAccountAttributesRequestMutex.RLock()
	defer fake.describeAccountAttributesRequestMutex.RUnlock()
	fake.describeAccountAttributesWithContextMutex.RLock()
	defer fake.describeAccountAttributesWithContextMutex.RUnlock()
	fake.describeCertificatesMutex.RLock()
	defer fake.describeCertificatesMutex.RUnlock()
	fake.describeCertificatesPagesMutex.RLock()
	defer fake.describeCertificatesPagesMutex.RUnlock()
	fake.describeCertificatesPagesWithContextMutex.RLock()
	defer fake.describeCertificatesPagesWithContextMutex.RUnlock()
	fake.describeCertificatesRequestMutex.RLock()
	defer fake.describeCertificatesRequestMutex.RUnlock()
	fake.describeCertificatesWithContextMutex.RLock()
	defer fake.describeCertificatesWithContextMutex.RUnlock()
	fake.describeCustomAvailabilityZonesMutex.RLock()
	defer fake.describeCustomAvailabilityZonesMutex.RUnlock()
	fake.describeCustomAvailabilityZonesPagesMutex.RLock()
	defer fake.describeCustomAvailabilityZonesPagesMutex.RUnlock()
	fake.describeCustomAvailabilityZonesPagesWithContextMutex.RLock()
	defer fake.describeCustomAvailabilityZonesPagesWithContextMutex.RUnlock()
	fake.describeCustomAvailabilityZonesRequestMutex.RLock()
	defer fake.describeCustomAvailabilityZonesRequestMutex.RUnlock()
	fake.describeCustomAvailabilityZonesWithContextMutex.RLock()
	defer fake.describeCustomAvailabilityZonesWithContextMutex.RUnlock()
	fake.describeDBClusterBacktracksMutex.RLock()
	defer fake.describeDBClusterBacktracksMutex.RUnlock()
	fake.describeDBClusterBacktracksPagesMutex.RLock()
	defer fake.describeDBClusterBacktracksPagesMutex.RUnlock()
	fake.describeDBClusterBacktracksPagesWithContextMutex.RLock()
	defer fake.describeDBClusterBacktracksPagesWithContextMutex.RUnlock()
	fake.describeDBClusterBacktracksRequestMutex.RLock()
	defer fake.describeDBClusterBacktracksRequestMutex.RUnlock()
	fake.describeDBClusterBacktracksWithContextMutex.RLock()
	defer fake.describeDBClusterBacktracksWithContextMutex.RUnlock()
	fake.describeDBClusterEndpointsMutex.RLock()
	defer fake.describeDBClusterEndpointsMutex.RUnlock()
	fake.describeDBClusterEndpointsPagesMutex.RLock()
	defer fake.describeDBClusterEndpointsPagesMutex.RUnlock()
	fake.describeDBClusterEndpointsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterEndpointsPagesWithContextMutex.RUnlock()
	fake.describeDBClusterEndpointsRequestMutex.RLock()
	defer fake.describeDBClusterEndpointsRequestMutex.RUnlock()
	fake.describeDBClusterEndpointsWithContextMutex.RLock()
	defer fake.describeDBClusterEndpointsWithContextMutex.RUnlock()
	fake.describeDBClusterParameterGroupsMutex.RLock()
	defer fake.describeDBClusterParameterGroupsMutex.RUnlock()
	fake.describeDBClusterParameterGroupsPagesMutex.RLock()
	defer fake.describeDBClusterParameterGroupsPagesMutex.RUnlock()
	fake.describeDBClusterParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterParameterGroupsPagesWithContextMutex.RUnlock()
	fake.describeDBClusterParameterGroupsRequestMutex.RLock()
	defer fake.describeDBClusterParameterGroupsRequestMutex.RUnlock()
	fake.describeDBClusterParameterGroupsWithContextMutex.RLock()
	defer fake.describeDBClusterParameterGroupsWithContextMutex.RUnlock()
	fake.describeDBClusterParametersMutex.RLock()
	defer fake.describeDBClusterParametersMutex.RUnlock()
	fake.describeDBClusterParametersPagesMutex.RLock()
	defer fake.describeDBClusterParametersPagesMutex.RUnlock()
	fake.describeDBClusterParametersPagesWithContextMutex.RLock()
	defer fake.describeDBClusterParametersPagesWithContextMutex.RUnlock()
	fake.describeDBClusterParametersRequestMutex.RLock()
	defer fake.describeDBClusterParametersRequestMutex.RUnlock()
	fake.describeDBClusterParametersWithContextMutex.RLock()
	defer fake.describeDBClusterParametersWithContextMutex.RUnlock()
	fake.describeDBClusterSnapshotAttributesMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesMutex.RUnlock()
	fake.describeDBClusterSnapshotAttributesRequestMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesRequestMutex.RUnlock()
	fake.describeDBClusterSnapshotAttributesWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotAttributesWithContextMutex.RUnlock()
	fake.describeDBClusterSnapshotsMutex.RLock()
	defer fake.describeDBClusterSnapshotsMutex.RUnlock()
	fake.describeDBClusterSnapshotsPagesMutex.RLock()
	defer fake.describeDBClusterSnapshotsPagesMutex.RUnlock()
	fake.describeDBClusterSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotsPagesWithContextMutex.RUnlock()
	fake.describeDBClusterSnapshotsRequestMutex.RLock()
	defer fake.describeDBClusterSnapshotsRequestMutex.RUnlock()
	fake.describeDBClusterSnapshotsWithContextMutex.RLock()
	defer fake.describeDBClusterSnapshotsWithContextMutex.RUnlock()
	fake.describeDBClustersMutex.RLock()
	defer fake.describeDBClustersMutex.RUnlock()
	fake.describeDBClustersPagesMutex.RLock()
	defer fake.describeDBClustersPagesMutex.RUnlock()
	fake.describeDBClustersPagesWithContextMutex.RLock()
	defer fake.describeDBClustersPagesWithContextMutex.RUnlock()
	fake.describeDBClustersRequestMutex.RLock()
	defer fake.describeDBClustersRequestMutex.RUnlock()
	fake.describeDBClustersWithContextMutex.RLock()
	defer fake.describeDBClustersWithContextMutex.RUnlock()
	fake.describeDBEngineVersionsMutex.RLock()
	defer fake.describeDBEngineVersionsMutex.RUnlock()
	fake.describeDBEngineVersionsPagesMutex.RLock()
	defer fake.describeDBEngineVersionsPagesMutex.RUnlock()
	fake.describeDBEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeDBEngineVersionsPagesWithContextMutex.RUnlock()
	fake.describeDBEngineVersionsRequestMutex.RLock()
	defer fake.describeDBEngineVersionsRequestMutex.RUnlock()
	fake.describeDBEngineVersionsWithContextMutex.RLock()
	defer fake.describeDBEngineVersionsWithContextMutex.RUnlock()
	fake.describeDBInstanceAutomatedBackupsMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsMutex.RUnlock()
	fake.describeDBInstanceAutomatedBackupsPagesMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsPagesMutex.RUnlock()
	fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsPagesWithContextMutex.RUnlock()
	fake.describeDBInstanceAutomatedBackupsRequestMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsRequestMutex.RUnlock()
	fake.describeDBInstanceAutomatedBackupsWithContextMutex.RLock()
	defer fake.describeDBInstanceAutomatedBackupsWithContextMutex.RUnlock()
	fake.describeDBInstancesMutex.RLock()
	defer fake.describeDBInstancesMutex.RUnlock()
	fake.describeDBInstancesPagesMutex.RLock()
	defer fake.describeDBInstancesPagesMutex.RUnlock()
	fake.describeDBInstancesPagesWithContextMutex.RLock()
	defer fake.describeDBInstancesPagesWithContextMutex.RUnlock()
	fake.describeDBInstancesRequestMutex.RLock()
	defer fake.describeDBInstancesRequestMutex.RUnlock()
	fake.describeDBInstancesWithContextMutex.RLock()
	defer fake.describeDBInstancesWithContextMutex.RUnlock()
	fake.describeDBLogFilesMutex.RLock()
	defer fake.describeDBLogFilesMutex.RUnlock()
	fake.describeDBLogFilesPagesMutex.RLock()
	defer fake.describeDBLogFilesPagesMutex.RUnlock()
	fake.describeDBLogFilesPagesWithContextMutex.RLock()
	defer fake.describeDBLogFilesPagesWithContextMutex.RUnlock()
	fake.describeDBLogFilesRequestMutex.RLock()
	defer fake.describeDBLogFilesRequestMutex.RUnlock()
	fake.describeDBLogFilesWithContextMutex.RLock()
	defer fake.describeDBLogFilesWithContextMutex.RUnlock()
	fake.describeDBParameterGroupsMutex.RLock()
	defer fake.describeDBParameterGroupsMutex.RUnlock()
	fake.describeDBParameterGroupsPagesMutex.RLock()
	defer fake.describeDBParameterGroupsPagesMutex.RUnlock()
	fake.describeDBParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBParameterGroupsPagesWithContextMutex.RUnlock()
	fake.describeDBParameterGroupsRequestMutex.RLock()
	defer fake.describeDBParameterGroupsRequestMutex.RUnlock()
	fake.describeDBParameterGroupsWithContextMutex.RLock()
	defer fake.describeDBParameterGroupsWithContextMutex.RUnlock()
	fake.describeDBParametersMutex.RLock()
	defer fake.describeDBParametersMutex.RUnlock()
	fake.describeDBParametersPagesMutex.RLock()
	defer fake.describeDBParametersPagesMutex.RUnlock()
	fake.describeDBParametersPagesWithContextMutex.RLock()
	defer fake.describeDBParametersPagesWithContextMutex.RUnlock()
	fake.describeDBParametersRequestMutex.RLock()
	defer fake.describeDBParametersRequestMutex.RUnlock()
	fake.describeDBParametersWithContextMutex.RLock()
	defer fake.describeDBParametersWithContextMutex.RUnlock()
	fake.describeDBProxiesMutex.RLock()
	defer fake.describeDBProxiesMutex.RUnlock()
	fake.describeDBProxiesPagesMutex.RLock()
	defer fake.describeDBProxiesPagesMutex.RUnlock()
	fake.describeDBProxiesPagesWithContextMutex.RLock()
	defer fake.describeDBProxiesPagesWithContextMutex.RUnlock()
	fake.describeDBProxiesRequestMutex.RLock()
	defer fake.describeDBProxiesRequestMutex.RUnlock()
	fake.describeDBProxiesWithContextMutex.RLock()
	defer fake.describeDBProxiesWithContextMutex.RUnlock()
	fake.describeDBProxyTargetGroupsMutex.RLock()
	defer fake.describeDBProxyTargetGroupsMutex.RUnlock()
	fake.describeDBProxyTargetGroupsPagesMutex.RLock()
	defer fake.describeDBProxyTargetGroupsPagesMutex.RUnlock()
	fake.describeDBProxyTargetGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBProxyTargetGroupsPagesWithContextMutex.RUnlock()
	fake.describeDBProxyTargetGroupsRequestMutex.RLock()
	defer fake.describeDBProxyTargetGroupsRequestMutex.RUnlock()
	fake.describeDBProxyTargetGroupsWithContextMutex.RLock()
	defer fake.describeDBProxyTargetGroupsWithContextMutex.RUnlock()
	fake.describeDBProxyTargetsMutex.RLock()
	defer fake.describeDBProxyTargetsMutex.RUnlock()
	fake.describeDBProxyTargetsPagesMutex.RLock()
	defer fake.describeDBProxyTargetsPagesMutex.RUnlock()
	fake.describeDBProxyTargetsPagesWithContextMutex.RLock()
	defer fake.describeDBProxyTargetsPagesWithContextMutex.RUnlock()
	fake.describeDBProxyTargetsRequestMutex.RLock()
	defer fake.describeDBProxyTargetsRequestMutex.RUnlock()
	fake.describeDBProxyTargetsWithContextMutex.RLock()
	defer fake.describeDBProxyTargetsWithContextMutex.RUnlock()
	fake.describeDBSecurityGroupsMutex.RLock()
	defer fake.describeDBSecurityGroupsMutex.RUnlock()
	fake.describeDBSecurityGroupsPagesMutex.RLock()
	defer fake.describeDBSecurityGroupsPagesMutex.RUnlock()
	fake.describeDBSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBSecurityGroupsPagesWithContextMutex.RUnlock()
	fake.describeDBSecurityGroupsRequestMutex.RLock()
	defer fake.describeDBSecurityGroupsRequestMutex.RUnlock()
	fake.describeDBSecurityGroupsWithContextMutex.RLock()
	defer fake.describeDBSecurityGroupsWithContextMutex.RUnlock()
	fake.describeDBSnapshotAttributesMutex.RLock()
	defer fake.describeDBSnapshotAttributesMutex.RUnlock()
	fake.describeDBSnapshotAttributesRequestMutex.RLock()
	defer fake.describeDBSnapshotAttributesRequestMutex.RUnlock()
	fake.describeDBSnapshotAttributesWithContextMutex.RLock()
	defer fake.describeDBSnapshotAttributesWithContextMutex.RUnlock()
	fake.describeDBSnapshotsMutex.RLock()
	defer fake.describeDBSnapshotsMutex.RUnlock()
	fake.describeDBSnapshotsPagesMutex.RLock()
	defer fake.describeDBSnapshotsPagesMutex.RUnlock()
	fake.describeDBSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeDBSnapshotsPagesWithContextMutex.RUnlock()
	fake.describeDBSnapshotsRequestMutex.RLock()
	defer fake.describeDBSnapshotsRequestMutex.RUnlock()
	fake.describeDBSnapshotsWithContextMutex.RLock()
	defer fake.describeDBSnapshotsWithContextMutex.RUnlock()
	fake.describeDBSubnetGroupsMutex.RLock()
	defer fake.describeDBSubnetGroupsMutex.RUnlock()
	fake.describeDBSubnetGroupsPagesMutex.RLock()
	defer fake.describeDBSubnetGroupsPagesMutex.RUnlock()
	fake.describeDBSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeDBSubnetGroupsPagesWithContextMutex.RUnlock()
	fake.describeDBSubnetGroupsRequestMutex.RLock()
	defer fake.describeDBSubnetGroupsRequestMutex.RUnlock()
	fake.describeDBSubnetGroupsWithContextMutex.RLock()
	defer fake.describeDBSubnetGroupsWithContextMutex.RUnlock()
	fake.describeEngineDefaultClusterParametersMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersMutex.RUnlock()
	fake.describeEngineDefaultClusterParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersRequestMutex.RUnlock()
	fake.describeEngineDefaultClusterParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultClusterParametersWithContextMutex.RUnlock()
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	fake.describeEventCategoriesMutex.RLock()
	defer fake.describeEventCategoriesMutex.RUnlock()
	fake.describeEventCategoriesRequestMutex.RLock()
	defer fake.describeEventCategoriesRequestMutex.RUnlock()
	fake.describeEventCategoriesWithContextMutex.RLock()
	defer fake.describeEventCategoriesWithContextMutex.RUnlock()
	fake.describeEventSubscriptionsMutex.RLock()
	defer fake.describeEventSubscriptionsMutex.RUnlock()
	fake.describeEventSubscriptionsPagesMutex.RLock()
	defer fake.describeEventSubscriptionsPagesMutex.RUnlock()
	fake.describeEventSubscriptionsPagesWithContextMutex.RLock()
	defer fake.describeEventSubscriptionsPagesWithContextMutex.RUnlock()
	fake.describeEventSubscriptionsRequestMutex.RLock()
	defer fake.describeEventSubscriptionsRequestMutex.RUnlock()
	fake.describeEventSubscriptionsWithContextMutex.RLock()
	defer fake.describeEventSubscriptionsWithContextMutex.RUnlock()
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	fake.describeExportTasksMutex.RLock()
	defer fake.describeExportTasksMutex.RUnlock()
	fake.describeExportTasksPagesMutex.RLock()
	defer fake.describeExportTasksPagesMutex.RUnlock()
	fake.describeExportTasksPagesWithContextMutex.RLock()
	defer fake.describeExportTasksPagesWithContextMutex.RUnlock()
	fake.describeExportTasksRequestMutex.RLock()
	defer fake.describeExportTasksRequestMutex.RUnlock()
	fake.describeExportTasksWithContextMutex.RLock()
	defer fake.describeExportTasksWithContextMutex.RUnlock()
	fake.describeGlobalClustersMutex.RLock()
	defer fake.describeGlobalClustersMutex.RUnlock()
	fake.describeGlobalClustersPagesMutex.RLock()
	defer fake.describeGlobalClustersPagesMutex.RUnlock()
	fake.describeGlobalClustersPagesWithContextMutex.RLock()
	defer fake.describeGlobalClustersPagesWithContextMutex.RUnlock()
	fake.describeGlobalClustersRequestMutex.RLock()
	defer fake.describeGlobalClustersRequestMutex.RUnlock()
	fake.describeGlobalClustersWithContextMutex.RLock()
	defer fake.describeGlobalClustersWithContextMutex.RUnlock()
	fake.describeInstallationMediaMutex.RLock()
	defer fake.describeInstallationMediaMutex.RUnlock()
	fake.describeInstallationMediaPagesMutex.RLock()
	defer fake.describeInstallationMediaPagesMutex.RUnlock()
	fake.describeInstallationMediaPagesWithContextMutex.RLock()
	defer fake.describeInstallationMediaPagesWithContextMutex.RUnlock()
	fake.describeInstallationMediaRequestMutex.RLock()
	defer fake.describeInstallationMediaRequestMutex.RUnlock()
	fake.describeInstallationMediaWithContextMutex.RLock()
	defer fake.describeInstallationMediaWithContextMutex.RUnlock()
	fake.describeOptionGroupOptionsMutex.RLock()
	defer fake.describeOptionGroupOptionsMutex.RUnlock()
	fake.describeOptionGroupOptionsPagesMutex.RLock()
	defer fake.describeOptionGroupOptionsPagesMutex.RUnlock()
	fake.describeOptionGroupOptionsPagesWithContextMutex.RLock()
	defer fake.describeOptionGroupOptionsPagesWithContextMutex.RUnlock()
	fake.describeOptionGroupOptionsRequestMutex.RLock()
	defer fake.describeOptionGroupOptionsRequestMutex.RUnlock()
	fake.describeOptionGroupOptionsWithContextMutex.RLock()
	defer fake.describeOptionGroupOptionsWithContextMutex.RUnlock()
	fake.describeOptionGroupsMutex.RLock()
	defer fake.describeOptionGroupsMutex.RUnlock()
	fake.describeOptionGroupsPagesMutex.RLock()
	defer fake.describeOptionGroupsPagesMutex.RUnlock()
	fake.describeOptionGroupsPagesWithContextMutex.RLock()
	defer fake.describeOptionGroupsPagesWithContextMutex.RUnlock()
	fake.describeOptionGroupsRequestMutex.RLock()
	defer fake.describeOptionGroupsRequestMutex.RUnlock()
	fake.describeOptionGroupsWithContextMutex.RLock()
	defer fake.describeOptionGroupsWithContextMutex.RUnlock()
	fake.describeOrderableDBInstanceOptionsMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsMutex.RUnlock()
	fake.describeOrderableDBInstanceOptionsPagesMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsPagesMutex.RUnlock()
	fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsPagesWithContextMutex.RUnlock()
	fake.describeOrderableDBInstanceOptionsRequestMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsRequestMutex.RUnlock()
	fake.describeOrderableDBInstanceOptionsWithContextMutex.RLock()
	defer fake.describeOrderableDBInstanceOptionsWithContextMutex.RUnlock()
	fake.describePendingMaintenanceActionsMutex.RLock()
	defer fake.describePendingMaintenanceActionsMutex.RUnlock()
	fake.describePendingMaintenanceActionsPagesMutex.RLock()
	defer fake.describePendingMaintenanceActionsPagesMutex.RUnlock()
	fake.describePendingMaintenanceActionsPagesWithContextMutex.RLock()
	defer fake.describePendingMaintenanceActionsPagesWithContextMutex.RUnlock()
	fake.describePendingMaintenanceActionsRequestMutex.RLock()
	defer fake.describePendingMaintenanceActionsRequestMutex.RUnlock()
	fake.describePendingMaintenanceActionsWithContextMutex.RLock()
	defer fake.describePendingMaintenanceActionsWithContextMutex.RUnlock()
	fake.describeReservedDBInstancesMutex.RLock()
	defer fake.describeReservedDBInstancesMutex.RUnlock()
	fake.describeReservedDBInstancesOfferingsMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsMutex.RUnlock()
	fake.describeReservedDBInstancesOfferingsPagesMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsPagesMutex.RUnlock()
	fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsPagesWithContextMutex.RUnlock()
	fake.describeReservedDBInstancesOfferingsRequestMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsRequestMutex.RUnlock()
	fake.describeReservedDBInstancesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesOfferingsWithContextMutex.RUnlock()
	fake.describeReservedDBInstancesPagesMutex.RLock()
	defer fake.describeReservedDBInstancesPagesMutex.RUnlock()
	fake.describeReservedDBInstancesPagesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesPagesWithContextMutex.RUnlock()
	fake.describeReservedDBInstancesRequestMutex.RLock()
	defer fake.describeReservedDBInstancesRequestMutex.RUnlock()
	fake.describeReservedDBInstancesWithContextMutex.RLock()
	defer fake.describeReservedDBInstancesWithContextMutex.RUnlock()
	fake.describeSourceRegionsMutex.RLock()
	defer fake.describeSourceRegionsMutex.RUnlock()
	fake.describeSourceRegionsPagesMutex.RLock()
	defer fake.describeSourceRegionsPagesMutex.RUnlock()
	fake.describeSourceRegionsPagesWithContextMutex.RLock()
	defer fake.describeSourceRegionsPagesWithContextMutex.RUnlock()
	fake.describeSourceRegionsRequestMutex.RLock()
	defer fake.describeSourceRegionsRequestMutex.RUnlock()
	fake.describeSourceRegionsWithContextMutex.RLock()
	defer fake.describeSourceRegionsWithContextMutex.RUnlock()
	fake.describeValidDBInstanceModificationsMutex.RLock()
	defer fake.describeValidDBInstanceModificationsMutex.RUnlock()
	fake.describeValidDBInstanceModificationsRequestMutex.RLock()
	defer fake.describeValidDBInstanceModificationsRequestMutex.RUnlock()
	fake.describeValidDBInstanceModificationsWithContextMutex.RLock()
	defer fake.describeValidDBInstanceModificationsWithContextMutex.RUnlock()
	fake.downloadDBLogFilePortionMutex.RLock()
	defer fake.downloadDBLogFilePortionMutex.RUnlock()
	fake.downloadDBLogFilePortionPagesMutex.RLock()
	defer fake.downloadDBLogFilePortionPagesMutex.RUnlock()
	fake.downloadDBLogFilePortionPagesWithContextMutex.RLock()
	defer fake.downloadDBLogFilePortionPagesWithContextMutex.RUnlock()
	fake.downloadDBLogFilePortionRequestMutex.RLock()
	defer fake.downloadDBLogFilePortionRequestMutex.RUnlock()
	fake.downloadDBLogFilePortionWithContextMutex.RLock()
	defer fake.downloadDBLogFilePortionWithContextMutex.RUnlock()
	fake.failoverDBClusterMutex.RLock()
	defer fake.failoverDBClusterMutex.RUnlock()
	fake.failoverDBClusterRequestMutex.RLock()
	defer fake.failoverDBClusterRequestMutex.RUnlock()
	fake.failoverDBClusterWithContextMutex.RLock()
	defer fake.failoverDBClusterWithContextMutex.RUnlock()
	fake.importInstallationMediaMutex.RLock()
	defer fake.importInstallationMediaMutex.RUnlock()
	fake.importInstallationMediaRequestMutex.RLock()
	defer fake.importInstallationMediaRequestMutex.RUnlock()
	fake.importInstallationMediaWithContextMutex.RLock()
	defer fake.importInstallationMediaWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.modifyCertificatesMutex.RLock()
	defer fake.modifyCertificatesMutex.RUnlock()
	fake.modifyCertificatesRequestMutex.RLock()
	defer fake.modifyCertificatesRequestMutex.RUnlock()
	fake.modifyCertificatesWithContextMutex.RLock()
	defer fake.modifyCertificatesWithContextMutex.RUnlock()
	fake.modifyCurrentDBClusterCapacityMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityMutex.RUnlock()
	fake.modifyCurrentDBClusterCapacityRequestMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityRequestMutex.RUnlock()
	fake.modifyCurrentDBClusterCapacityWithContextMutex.RLock()
	defer fake.modifyCurrentDBClusterCapacityWithContextMutex.RUnlock()
	fake.modifyDBClusterMutex.RLock()
	defer fake.modifyDBClusterMutex.RUnlock()
	fake.modifyDBClusterEndpointMutex.RLock()
	defer fake.modifyDBClusterEndpointMutex.RUnlock()
	fake.modifyDBClusterEndpointRequestMutex.RLock()
	defer fake.modifyDBClusterEndpointRequestMutex.RUnlock()
	fake.modifyDBClusterEndpointWithContextMutex.RLock()
	defer fake.modifyDBClusterEndpointWithContextMutex.RUnlock()
	fake.modifyDBClusterParameterGroupMutex.RLock()
	defer fake.modifyDBClusterParameterGroupMutex.RUnlock()
	fake.modifyDBClusterParameterGroupRequestMutex.RLock()
	defer fake.modifyDBClusterParameterGroupRequestMutex.RUnlock()
	fake.modifyDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.modifyDBClusterParameterGroupWithContextMutex.RUnlock()
	fake.modifyDBClusterRequestMutex.RLock()
	defer fake.modifyDBClusterRequestMutex.RUnlock()
	fake.modifyDBClusterSnapshotAttributeMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeMutex.RUnlock()
	fake.modifyDBClusterSnapshotAttributeRequestMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeRequestMutex.RUnlock()
	fake.modifyDBClusterSnapshotAttributeWithContextMutex.RLock()
	defer fake.modifyDBClusterSnapshotAttributeWithContextMutex.RUnlock()
	fake.modifyDBClusterWithContextMutex.RLock()
	defer fake.modifyDBClusterWithContextMutex.RUnlock()
	fake.modifyDBInstanceMutex.RLock()
	defer fake.modifyDBInstanceMutex.RUnlock()
	fake.modifyDBInstanceRequestMutex.RLock()
	defer fake.modifyDBInstanceRequestMutex.RUnlock()
	fake.modifyDBInstanceWithContextMutex.RLock()
	defer fake.modifyDBInstanceWithContextMutex.RUnlock()
	fake.modifyDBParameterGroupMutex.RLock()
	defer fake.modifyDBParameterGroupMutex.RUnlock()
	fake.modifyDBParameterGroupRequestMutex.RLock()
	defer fake.modifyDBParameterGroupRequestMutex.RUnlock()
	fake.modifyDBParameterGroupWithContextMutex.RLock()
	defer fake.modifyDBParameterGroupWithContextMutex.RUnlock()
	fake.modifyDBProxyMutex.RLock()
	defer fake.modifyDBProxyMutex.RUnlock()
	fake.modifyDBProxyRequestMutex.RLock()
	defer fake.modifyDBProxyRequestMutex.RUnlock()
	fake.modifyDBProxyTargetGroupMutex.RLock()
	defer fake.modifyDBProxyTargetGroupMutex.RUnlock()
	fake.modifyDBProxyTargetGroupRequestMutex.RLock()
	defer fake.modifyDBProxyTargetGroupRequestMutex.RUnlock()
	fake.modifyDBProxyTargetGroupWithContextMutex.RLock()
	defer fake.modifyDBProxyTargetGroupWithContextMutex.RUnlock()
	fake.modifyDBProxyWithContextMutex.RLock()
	defer fake.modifyDBProxyWithContextMutex.RUnlock()
	fake.modifyDBSnapshotMutex.RLock()
	defer fake.modifyDBSnapshotMutex.RUnlock()
	fake.modifyDBSnapshotAttributeMutex.RLock()
	defer fake.modifyDBSnapshotAttributeMutex.RUnlock()
	fake.modifyDBSnapshotAttributeRequestMutex.RLock()
	defer fake.modifyDBSnapshotAttributeRequestMutex.RUnlock()
	fake.modifyDBSnapshotAttributeWithContextMutex.RLock()
	defer fake.modifyDBSnapshotAttributeWithContextMutex.RUnlock()
	fake.modifyDBSnapshotRequestMutex.RLock()
	defer fake.modifyDBSnapshotRequestMutex.RUnlock()
	fake.modifyDBSnapshotWithContextMutex.RLock()
	defer fake.modifyDBSnapshotWithContextMutex.RUnlock()
	fake.modifyDBSubnetGroupMutex.RLock()
	defer fake.modifyDBSubnetGroupMutex.RUnlock()
	fake.modifyDBSubnetGroupRequestMutex.RLock()
	defer fake.modifyDBSubnetGroupRequestMutex.RUnlock()
	fake.modifyDBSubnetGroupWithContextMutex.RLock()
	defer fake.modifyDBSubnetGroupWithContextMutex.RUnlock()
	fake.modifyEventSubscriptionMutex.RLock()
	defer fake.modifyEventSubscriptionMutex.RUnlock()
	fake.modifyEventSubscriptionRequestMutex.RLock()
	defer fake.modifyEventSubscriptionRequestMutex.RUnlock()
	fake.modifyEventSubscriptionWithContextMutex.RLock()
	defer fake.modifyEventSubscriptionWithContextMutex.RUnlock()
	fake.modifyGlobalClusterMutex.RLock()
	defer fake.modifyGlobalClusterMutex.RUnlock()
	fake.modifyGlobalClusterRequestMutex.RLock()
	defer fake.modifyGlobalClusterRequestMutex.RUnlock()
	fake.modifyGlobalClusterWithContextMutex.RLock()
	defer fake.modifyGlobalClusterWithContextMutex.RUnlock()
	fake.modifyOptionGroupMutex.RLock()
	defer fake.modifyOptionGroupMutex.RUnlock()
	fake.modifyOptionGroupRequestMutex.RLock()
	defer fake.modifyOptionGroupRequestMutex.RUnlock()
	fake.modifyOptionGroupWithContextMutex.RLock()
	defer fake.modifyOptionGroupWithContextMutex.RUnlock()
	fake.promoteReadReplicaMutex.RLock()
	defer fake.promoteReadReplicaMutex.RUnlock()
	fake.promoteReadReplicaDBClusterMutex.RLock()
	defer fake.promoteReadReplicaDBClusterMutex.RUnlock()
	fake.promoteReadReplicaDBClusterRequestMutex.RLock()
	defer fake.promoteReadReplicaDBClusterRequestMutex.RUnlock()
	fake.promoteReadReplicaDBClusterWithContextMutex.RLock()
	defer fake.promoteReadReplicaDBClusterWithContextMutex.RUnlock()
	fake.promoteReadReplicaRequestMutex.RLock()
	defer fake.promoteReadReplicaRequestMutex.RUnlock()
	fake.promoteReadReplicaWithContextMutex.RLock()
	defer fake.promoteReadReplicaWithContextMutex.RUnlock()
	fake.purchaseReservedDBInstancesOfferingMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingMutex.RUnlock()
	fake.purchaseReservedDBInstancesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingRequestMutex.RUnlock()
	fake.purchaseReservedDBInstancesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedDBInstancesOfferingWithContextMutex.RUnlock()
	fake.rebootDBInstanceMutex.RLock()
	defer fake.rebootDBInstanceMutex.RUnlock()
	fake.rebootDBInstanceRequestMutex.RLock()
	defer fake.rebootDBInstanceRequestMutex.RUnlock()
	fake.rebootDBInstanceWithContextMutex.RLock()
	defer fake.rebootDBInstanceWithContextMutex.RUnlock()
	fake.registerDBProxyTargetsMutex.RLock()
	defer fake.registerDBProxyTargetsMutex.RUnlock()
	fake.registerDBProxyTargetsRequestMutex.RLock()
	defer fake.registerDBProxyTargetsRequestMutex.RUnlock()
	fake.registerDBProxyTargetsWithContextMutex.RLock()
	defer fake.registerDBProxyTargetsWithContextMutex.RUnlock()
	fake.removeFromGlobalClusterMutex.RLock()
	defer fake.removeFromGlobalClusterMutex.RUnlock()
	fake.removeFromGlobalClusterRequestMutex.RLock()
	defer fake.removeFromGlobalClusterRequestMutex.RUnlock()
	fake.removeFromGlobalClusterWithContextMutex.RLock()
	defer fake.removeFromGlobalClusterWithContextMutex.RUnlock()
	fake.removeRoleFromDBClusterMutex.RLock()
	defer fake.removeRoleFromDBClusterMutex.RUnlock()
	fake.removeRoleFromDBClusterRequestMutex.RLock()
	defer fake.removeRoleFromDBClusterRequestMutex.RUnlock()
	fake.removeRoleFromDBClusterWithContextMutex.RLock()
	defer fake.removeRoleFromDBClusterWithContextMutex.RUnlock()
	fake.removeRoleFromDBInstanceMutex.RLock()
	defer fake.removeRoleFromDBInstanceMutex.RUnlock()
	fake.removeRoleFromDBInstanceRequestMutex.RLock()
	defer fake.removeRoleFromDBInstanceRequestMutex.RUnlock()
	fake.removeRoleFromDBInstanceWithContextMutex.RLock()
	defer fake.removeRoleFromDBInstanceWithContextMutex.RUnlock()
	fake.removeSourceIdentifierFromSubscriptionMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionMutex.RUnlock()
	fake.removeSourceIdentifierFromSubscriptionRequestMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionRequestMutex.RUnlock()
	fake.removeSourceIdentifierFromSubscriptionWithContextMutex.RLock()
	defer fake.removeSourceIdentifierFromSubscriptionWithContextMutex.RUnlock()
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	fake.resetDBClusterParameterGroupMutex.RLock()
	defer fake.resetDBClusterParameterGroupMutex.RUnlock()
	fake.resetDBClusterParameterGroupRequestMutex.RLock()
	defer fake.resetDBClusterParameterGroupRequestMutex.RUnlock()
	fake.resetDBClusterParameterGroupWithContextMutex.RLock()
	defer fake.resetDBClusterParameterGroupWithContextMutex.RUnlock()
	fake.resetDBParameterGroupMutex.RLock()
	defer fake.resetDBParameterGroupMutex.RUnlock()
	fake.resetDBParameterGroupRequestMutex.RLock()
	defer fake.resetDBParameterGroupRequestMutex.RUnlock()
	fake.resetDBParameterGroupWithContextMutex.RLock()
	defer fake.resetDBParameterGroupWithContextMutex.RUnlock()
	fake.restoreDBClusterFromS3Mutex.RLock()
	defer fake.restoreDBClusterFromS3Mutex.RUnlock()
	fake.restoreDBClusterFromS3RequestMutex.RLock()
	defer fake.restoreDBClusterFromS3RequestMutex.RUnlock()
	fake.restoreDBClusterFromS3WithContextMutex.RLock()
	defer fake.restoreDBClusterFromS3WithContextMutex.RUnlock()
	fake.restoreDBClusterFromSnapshotMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotMutex.RUnlock()
	fake.restoreDBClusterFromSnapshotRequestMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotRequestMutex.RUnlock()
	fake.restoreDBClusterFromSnapshotWithContextMutex.RLock()
	defer fake.restoreDBClusterFromSnapshotWithContextMutex.RUnlock()
	fake.restoreDBClusterToPointInTimeMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeMutex.RUnlock()
	fake.restoreDBClusterToPointInTimeRequestMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeRequestMutex.RUnlock()
	fake.restoreDBClusterToPointInTimeWithContextMutex.RLock()
	defer fake.restoreDBClusterToPointInTimeWithContextMutex.RUnlock()
	fake.restoreDBInstanceFromDBSnapshotMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotMutex.RUnlock()
	fake.restoreDBInstanceFromDBSnapshotRequestMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotRequestMutex.RUnlock()
	fake.restoreDBInstanceFromDBSnapshotWithContextMutex.RLock()
	defer fake.restoreDBInstanceFromDBSnapshotWithContextMutex.RUnlock()
	fake.restoreDBInstanceFromS3Mutex.RLock()
	defer fake.restoreDBInstanceFromS3Mutex.RUnlock()
	fake.restoreDBInstanceFromS3RequestMutex.RLock()
	defer fake.restoreDBInstanceFromS3RequestMutex.RUnlock()
	fake.restoreDBInstanceFromS3WithContextMutex.RLock()
	defer fake.restoreDBInstanceFromS3WithContextMutex.RUnlock()
	fake.restoreDBInstanceToPointInTimeMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeMutex.RUnlock()
	fake.restoreDBInstanceToPointInTimeRequestMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeRequestMutex.RUnlock()
	fake.restoreDBInstanceToPointInTimeWithContextMutex.RLock()
	defer fake.restoreDBInstanceToPointInTimeWithContextMutex.RUnlock()
	fake.revokeDBSecurityGroupIngressMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressMutex.RUnlock()
	fake.revokeDBSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressRequestMutex.RUnlock()
	fake.revokeDBSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeDBSecurityGroupIngressWithContextMutex.RUnlock()
	fake.startActivityStreamMutex.RLock()
	defer fake.startActivityStreamMutex.RUnlock()
	fake.startActivityStreamRequestMutex.RLock()
	defer fake.startActivityStreamRequestMutex.RUnlock()
	fake.startActivityStreamWithContextMutex.RLock()
	defer fake.startActivityStreamWithContextMutex.RUnlock()
	fake.startDBClusterMutex.RLock()
	defer fake.startDBClusterMutex.RUnlock()
	fake.startDBClusterRequestMutex.RLock()
	defer fake.startDBClusterRequestMutex.RUnlock()
	fake.startDBClusterWithContextMutex.RLock()
	defer fake.startDBClusterWithContextMutex.RUnlock()
	fake.startDBInstanceMutex.RLock()
	defer fake.startDBInstanceMutex.RUnlock()
	fake.startDBInstanceRequestMutex.RLock()
	defer fake.startDBInstanceRequestMutex.RUnlock()
	fake.startDBInstanceWithContextMutex.RLock()
	defer fake.startDBInstanceWithContextMutex.RUnlock()
	fake.startExportTaskMutex.RLock()
	defer fake.startExportTaskMutex.RUnlock()
	fake.startExportTaskRequestMutex.RLock()
	defer fake.startExportTaskRequestMutex.RUnlock()
	fake.startExportTaskWithContextMutex.RLock()
	defer fake.startExportTaskWithContextMutex.RUnlock()
	fake.stopActivityStreamMutex.RLock()
	defer fake.stopActivityStreamMutex.RUnlock()
	fake.stopActivityStreamRequestMutex.RLock()
	defer fake.stopActivityStreamRequestMutex.RUnlock()
	fake.stopActivityStreamWithContextMutex.RLock()
	defer fake.stopActivityStreamWithContextMutex.RUnlock()
	fake.stopDBClusterMutex.RLock()
	defer fake.stopDBClusterMutex.RUnlock()
	fake.stopDBClusterRequestMutex.RLock()
	defer fake.stopDBClusterRequestMutex.RUnlock()
	fake.stopDBClusterWithContextMutex.RLock()
	defer fake.stopDBClusterWithContextMutex.RUnlock()
	fake.stopDBInstanceMutex.RLock()
	defer fake.stopDBInstanceMutex.RUnlock()
	fake.stopDBInstanceRequestMutex.RLock()
	defer fake.stopDBInstanceRequestMutex.RUnlock()
	fake.stopDBInstanceWithContextMutex.RLock()
	defer fake.stopDBInstanceWithContextMutex.RUnlock()
	fake.waitUntilDBClusterSnapshotAvailableMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotAvailableMutex.RUnlock()
	fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotAvailableWithContextMutex.RUnlock()
	fake.waitUntilDBClusterSnapshotDeletedMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotDeletedMutex.RUnlock()
	fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBClusterSnapshotDeletedWithContextMutex.RUnlock()
	fake.waitUntilDBInstanceAvailableMutex.RLock()
	defer fake.waitUntilDBInstanceAvailableMutex.RUnlock()
	fake.waitUntilDBInstanceAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBInstanceAvailableWithContextMutex.RUnlock()
	fake.waitUntilDBInstanceDeletedMutex.RLock()
	defer fake.waitUntilDBInstanceDeletedMutex.RUnlock()
	fake.waitUntilDBInstanceDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBInstanceDeletedWithContextMutex.RUnlock()
	fake.waitUntilDBSnapshotAvailableMutex.RLock()
	defer fake.waitUntilDBSnapshotAvailableMutex.RUnlock()
	fake.waitUntilDBSnapshotAvailableWithContextMutex.RLock()
	defer fake.waitUntilDBSnapshotAvailableWithContextMutex.RUnlock()
	fake.waitUntilDBSnapshotDeletedMutex.RLock()
	defer fake.waitUntilDBSnapshotDeletedMutex.RUnlock()
	fake.waitUntilDBSnapshotDeletedWithContextMutex.RLock()
	defer fake.waitUntilDBSnapshotDeletedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRDSAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rdsiface.RDSAPI = new(FakeRDSAPI)
