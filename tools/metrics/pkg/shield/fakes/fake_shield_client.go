// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/shield"
	"github.com/aws/aws-sdk-go/service/shield/shieldiface"
)

type FakeShieldAPI struct {
	AssociateDRTLogBucketStub        func(*shield.AssociateDRTLogBucketInput) (*shield.AssociateDRTLogBucketOutput, error)
	associateDRTLogBucketMutex       sync.RWMutex
	associateDRTLogBucketArgsForCall []struct {
		arg1 *shield.AssociateDRTLogBucketInput
	}
	associateDRTLogBucketReturns struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}
	associateDRTLogBucketReturnsOnCall map[int]struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}
	AssociateDRTLogBucketRequestStub        func(*shield.AssociateDRTLogBucketInput) (*request.Request, *shield.AssociateDRTLogBucketOutput)
	associateDRTLogBucketRequestMutex       sync.RWMutex
	associateDRTLogBucketRequestArgsForCall []struct {
		arg1 *shield.AssociateDRTLogBucketInput
	}
	associateDRTLogBucketRequestReturns struct {
		result1 *request.Request
		result2 *shield.AssociateDRTLogBucketOutput
	}
	associateDRTLogBucketRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.AssociateDRTLogBucketOutput
	}
	AssociateDRTLogBucketWithContextStub        func(context.Context, *shield.AssociateDRTLogBucketInput, ...request.Option) (*shield.AssociateDRTLogBucketOutput, error)
	associateDRTLogBucketWithContextMutex       sync.RWMutex
	associateDRTLogBucketWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.AssociateDRTLogBucketInput
		arg3 []request.Option
	}
	associateDRTLogBucketWithContextReturns struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}
	associateDRTLogBucketWithContextReturnsOnCall map[int]struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}
	AssociateDRTRoleStub        func(*shield.AssociateDRTRoleInput) (*shield.AssociateDRTRoleOutput, error)
	associateDRTRoleMutex       sync.RWMutex
	associateDRTRoleArgsForCall []struct {
		arg1 *shield.AssociateDRTRoleInput
	}
	associateDRTRoleReturns struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}
	associateDRTRoleReturnsOnCall map[int]struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}
	AssociateDRTRoleRequestStub        func(*shield.AssociateDRTRoleInput) (*request.Request, *shield.AssociateDRTRoleOutput)
	associateDRTRoleRequestMutex       sync.RWMutex
	associateDRTRoleRequestArgsForCall []struct {
		arg1 *shield.AssociateDRTRoleInput
	}
	associateDRTRoleRequestReturns struct {
		result1 *request.Request
		result2 *shield.AssociateDRTRoleOutput
	}
	associateDRTRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.AssociateDRTRoleOutput
	}
	AssociateDRTRoleWithContextStub        func(context.Context, *shield.AssociateDRTRoleInput, ...request.Option) (*shield.AssociateDRTRoleOutput, error)
	associateDRTRoleWithContextMutex       sync.RWMutex
	associateDRTRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.AssociateDRTRoleInput
		arg3 []request.Option
	}
	associateDRTRoleWithContextReturns struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}
	associateDRTRoleWithContextReturnsOnCall map[int]struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}
	AssociateHealthCheckStub        func(*shield.AssociateHealthCheckInput) (*shield.AssociateHealthCheckOutput, error)
	associateHealthCheckMutex       sync.RWMutex
	associateHealthCheckArgsForCall []struct {
		arg1 *shield.AssociateHealthCheckInput
	}
	associateHealthCheckReturns struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}
	associateHealthCheckReturnsOnCall map[int]struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}
	AssociateHealthCheckRequestStub        func(*shield.AssociateHealthCheckInput) (*request.Request, *shield.AssociateHealthCheckOutput)
	associateHealthCheckRequestMutex       sync.RWMutex
	associateHealthCheckRequestArgsForCall []struct {
		arg1 *shield.AssociateHealthCheckInput
	}
	associateHealthCheckRequestReturns struct {
		result1 *request.Request
		result2 *shield.AssociateHealthCheckOutput
	}
	associateHealthCheckRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.AssociateHealthCheckOutput
	}
	AssociateHealthCheckWithContextStub        func(context.Context, *shield.AssociateHealthCheckInput, ...request.Option) (*shield.AssociateHealthCheckOutput, error)
	associateHealthCheckWithContextMutex       sync.RWMutex
	associateHealthCheckWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.AssociateHealthCheckInput
		arg3 []request.Option
	}
	associateHealthCheckWithContextReturns struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}
	associateHealthCheckWithContextReturnsOnCall map[int]struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}
	AssociateProactiveEngagementDetailsStub        func(*shield.AssociateProactiveEngagementDetailsInput) (*shield.AssociateProactiveEngagementDetailsOutput, error)
	associateProactiveEngagementDetailsMutex       sync.RWMutex
	associateProactiveEngagementDetailsArgsForCall []struct {
		arg1 *shield.AssociateProactiveEngagementDetailsInput
	}
	associateProactiveEngagementDetailsReturns struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}
	associateProactiveEngagementDetailsReturnsOnCall map[int]struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}
	AssociateProactiveEngagementDetailsRequestStub        func(*shield.AssociateProactiveEngagementDetailsInput) (*request.Request, *shield.AssociateProactiveEngagementDetailsOutput)
	associateProactiveEngagementDetailsRequestMutex       sync.RWMutex
	associateProactiveEngagementDetailsRequestArgsForCall []struct {
		arg1 *shield.AssociateProactiveEngagementDetailsInput
	}
	associateProactiveEngagementDetailsRequestReturns struct {
		result1 *request.Request
		result2 *shield.AssociateProactiveEngagementDetailsOutput
	}
	associateProactiveEngagementDetailsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.AssociateProactiveEngagementDetailsOutput
	}
	AssociateProactiveEngagementDetailsWithContextStub        func(context.Context, *shield.AssociateProactiveEngagementDetailsInput, ...request.Option) (*shield.AssociateProactiveEngagementDetailsOutput, error)
	associateProactiveEngagementDetailsWithContextMutex       sync.RWMutex
	associateProactiveEngagementDetailsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.AssociateProactiveEngagementDetailsInput
		arg3 []request.Option
	}
	associateProactiveEngagementDetailsWithContextReturns struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}
	associateProactiveEngagementDetailsWithContextReturnsOnCall map[int]struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}
	CreateProtectionStub        func(*shield.CreateProtectionInput) (*shield.CreateProtectionOutput, error)
	createProtectionMutex       sync.RWMutex
	createProtectionArgsForCall []struct {
		arg1 *shield.CreateProtectionInput
	}
	createProtectionReturns struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}
	createProtectionReturnsOnCall map[int]struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}
	CreateProtectionRequestStub        func(*shield.CreateProtectionInput) (*request.Request, *shield.CreateProtectionOutput)
	createProtectionRequestMutex       sync.RWMutex
	createProtectionRequestArgsForCall []struct {
		arg1 *shield.CreateProtectionInput
	}
	createProtectionRequestReturns struct {
		result1 *request.Request
		result2 *shield.CreateProtectionOutput
	}
	createProtectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.CreateProtectionOutput
	}
	CreateProtectionWithContextStub        func(context.Context, *shield.CreateProtectionInput, ...request.Option) (*shield.CreateProtectionOutput, error)
	createProtectionWithContextMutex       sync.RWMutex
	createProtectionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.CreateProtectionInput
		arg3 []request.Option
	}
	createProtectionWithContextReturns struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}
	createProtectionWithContextReturnsOnCall map[int]struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}
	CreateSubscriptionStub        func(*shield.CreateSubscriptionInput) (*shield.CreateSubscriptionOutput, error)
	createSubscriptionMutex       sync.RWMutex
	createSubscriptionArgsForCall []struct {
		arg1 *shield.CreateSubscriptionInput
	}
	createSubscriptionReturns struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}
	createSubscriptionReturnsOnCall map[int]struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}
	CreateSubscriptionRequestStub        func(*shield.CreateSubscriptionInput) (*request.Request, *shield.CreateSubscriptionOutput)
	createSubscriptionRequestMutex       sync.RWMutex
	createSubscriptionRequestArgsForCall []struct {
		arg1 *shield.CreateSubscriptionInput
	}
	createSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *shield.CreateSubscriptionOutput
	}
	createSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.CreateSubscriptionOutput
	}
	CreateSubscriptionWithContextStub        func(context.Context, *shield.CreateSubscriptionInput, ...request.Option) (*shield.CreateSubscriptionOutput, error)
	createSubscriptionWithContextMutex       sync.RWMutex
	createSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.CreateSubscriptionInput
		arg3 []request.Option
	}
	createSubscriptionWithContextReturns struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}
	createSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}
	DeleteProtectionStub        func(*shield.DeleteProtectionInput) (*shield.DeleteProtectionOutput, error)
	deleteProtectionMutex       sync.RWMutex
	deleteProtectionArgsForCall []struct {
		arg1 *shield.DeleteProtectionInput
	}
	deleteProtectionReturns struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}
	deleteProtectionReturnsOnCall map[int]struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}
	DeleteProtectionRequestStub        func(*shield.DeleteProtectionInput) (*request.Request, *shield.DeleteProtectionOutput)
	deleteProtectionRequestMutex       sync.RWMutex
	deleteProtectionRequestArgsForCall []struct {
		arg1 *shield.DeleteProtectionInput
	}
	deleteProtectionRequestReturns struct {
		result1 *request.Request
		result2 *shield.DeleteProtectionOutput
	}
	deleteProtectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DeleteProtectionOutput
	}
	DeleteProtectionWithContextStub        func(context.Context, *shield.DeleteProtectionInput, ...request.Option) (*shield.DeleteProtectionOutput, error)
	deleteProtectionWithContextMutex       sync.RWMutex
	deleteProtectionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DeleteProtectionInput
		arg3 []request.Option
	}
	deleteProtectionWithContextReturns struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}
	deleteProtectionWithContextReturnsOnCall map[int]struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}
	DeleteSubscriptionStub        func(*shield.DeleteSubscriptionInput) (*shield.DeleteSubscriptionOutput, error)
	deleteSubscriptionMutex       sync.RWMutex
	deleteSubscriptionArgsForCall []struct {
		arg1 *shield.DeleteSubscriptionInput
	}
	deleteSubscriptionReturns struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}
	deleteSubscriptionReturnsOnCall map[int]struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}
	DeleteSubscriptionRequestStub        func(*shield.DeleteSubscriptionInput) (*request.Request, *shield.DeleteSubscriptionOutput)
	deleteSubscriptionRequestMutex       sync.RWMutex
	deleteSubscriptionRequestArgsForCall []struct {
		arg1 *shield.DeleteSubscriptionInput
	}
	deleteSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *shield.DeleteSubscriptionOutput
	}
	deleteSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DeleteSubscriptionOutput
	}
	DeleteSubscriptionWithContextStub        func(context.Context, *shield.DeleteSubscriptionInput, ...request.Option) (*shield.DeleteSubscriptionOutput, error)
	deleteSubscriptionWithContextMutex       sync.RWMutex
	deleteSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DeleteSubscriptionInput
		arg3 []request.Option
	}
	deleteSubscriptionWithContextReturns struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}
	deleteSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}
	DescribeAttackStub        func(*shield.DescribeAttackInput) (*shield.DescribeAttackOutput, error)
	describeAttackMutex       sync.RWMutex
	describeAttackArgsForCall []struct {
		arg1 *shield.DescribeAttackInput
	}
	describeAttackReturns struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}
	describeAttackReturnsOnCall map[int]struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}
	DescribeAttackRequestStub        func(*shield.DescribeAttackInput) (*request.Request, *shield.DescribeAttackOutput)
	describeAttackRequestMutex       sync.RWMutex
	describeAttackRequestArgsForCall []struct {
		arg1 *shield.DescribeAttackInput
	}
	describeAttackRequestReturns struct {
		result1 *request.Request
		result2 *shield.DescribeAttackOutput
	}
	describeAttackRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DescribeAttackOutput
	}
	DescribeAttackWithContextStub        func(context.Context, *shield.DescribeAttackInput, ...request.Option) (*shield.DescribeAttackOutput, error)
	describeAttackWithContextMutex       sync.RWMutex
	describeAttackWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DescribeAttackInput
		arg3 []request.Option
	}
	describeAttackWithContextReturns struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}
	describeAttackWithContextReturnsOnCall map[int]struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}
	DescribeDRTAccessStub        func(*shield.DescribeDRTAccessInput) (*shield.DescribeDRTAccessOutput, error)
	describeDRTAccessMutex       sync.RWMutex
	describeDRTAccessArgsForCall []struct {
		arg1 *shield.DescribeDRTAccessInput
	}
	describeDRTAccessReturns struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}
	describeDRTAccessReturnsOnCall map[int]struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}
	DescribeDRTAccessRequestStub        func(*shield.DescribeDRTAccessInput) (*request.Request, *shield.DescribeDRTAccessOutput)
	describeDRTAccessRequestMutex       sync.RWMutex
	describeDRTAccessRequestArgsForCall []struct {
		arg1 *shield.DescribeDRTAccessInput
	}
	describeDRTAccessRequestReturns struct {
		result1 *request.Request
		result2 *shield.DescribeDRTAccessOutput
	}
	describeDRTAccessRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DescribeDRTAccessOutput
	}
	DescribeDRTAccessWithContextStub        func(context.Context, *shield.DescribeDRTAccessInput, ...request.Option) (*shield.DescribeDRTAccessOutput, error)
	describeDRTAccessWithContextMutex       sync.RWMutex
	describeDRTAccessWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DescribeDRTAccessInput
		arg3 []request.Option
	}
	describeDRTAccessWithContextReturns struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}
	describeDRTAccessWithContextReturnsOnCall map[int]struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}
	DescribeEmergencyContactSettingsStub        func(*shield.DescribeEmergencyContactSettingsInput) (*shield.DescribeEmergencyContactSettingsOutput, error)
	describeEmergencyContactSettingsMutex       sync.RWMutex
	describeEmergencyContactSettingsArgsForCall []struct {
		arg1 *shield.DescribeEmergencyContactSettingsInput
	}
	describeEmergencyContactSettingsReturns struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}
	describeEmergencyContactSettingsReturnsOnCall map[int]struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}
	DescribeEmergencyContactSettingsRequestStub        func(*shield.DescribeEmergencyContactSettingsInput) (*request.Request, *shield.DescribeEmergencyContactSettingsOutput)
	describeEmergencyContactSettingsRequestMutex       sync.RWMutex
	describeEmergencyContactSettingsRequestArgsForCall []struct {
		arg1 *shield.DescribeEmergencyContactSettingsInput
	}
	describeEmergencyContactSettingsRequestReturns struct {
		result1 *request.Request
		result2 *shield.DescribeEmergencyContactSettingsOutput
	}
	describeEmergencyContactSettingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DescribeEmergencyContactSettingsOutput
	}
	DescribeEmergencyContactSettingsWithContextStub        func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...request.Option) (*shield.DescribeEmergencyContactSettingsOutput, error)
	describeEmergencyContactSettingsWithContextMutex       sync.RWMutex
	describeEmergencyContactSettingsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DescribeEmergencyContactSettingsInput
		arg3 []request.Option
	}
	describeEmergencyContactSettingsWithContextReturns struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}
	describeEmergencyContactSettingsWithContextReturnsOnCall map[int]struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}
	DescribeProtectionStub        func(*shield.DescribeProtectionInput) (*shield.DescribeProtectionOutput, error)
	describeProtectionMutex       sync.RWMutex
	describeProtectionArgsForCall []struct {
		arg1 *shield.DescribeProtectionInput
	}
	describeProtectionReturns struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}
	describeProtectionReturnsOnCall map[int]struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}
	DescribeProtectionRequestStub        func(*shield.DescribeProtectionInput) (*request.Request, *shield.DescribeProtectionOutput)
	describeProtectionRequestMutex       sync.RWMutex
	describeProtectionRequestArgsForCall []struct {
		arg1 *shield.DescribeProtectionInput
	}
	describeProtectionRequestReturns struct {
		result1 *request.Request
		result2 *shield.DescribeProtectionOutput
	}
	describeProtectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DescribeProtectionOutput
	}
	DescribeProtectionWithContextStub        func(context.Context, *shield.DescribeProtectionInput, ...request.Option) (*shield.DescribeProtectionOutput, error)
	describeProtectionWithContextMutex       sync.RWMutex
	describeProtectionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DescribeProtectionInput
		arg3 []request.Option
	}
	describeProtectionWithContextReturns struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}
	describeProtectionWithContextReturnsOnCall map[int]struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}
	DescribeSubscriptionStub        func(*shield.DescribeSubscriptionInput) (*shield.DescribeSubscriptionOutput, error)
	describeSubscriptionMutex       sync.RWMutex
	describeSubscriptionArgsForCall []struct {
		arg1 *shield.DescribeSubscriptionInput
	}
	describeSubscriptionReturns struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}
	describeSubscriptionReturnsOnCall map[int]struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}
	DescribeSubscriptionRequestStub        func(*shield.DescribeSubscriptionInput) (*request.Request, *shield.DescribeSubscriptionOutput)
	describeSubscriptionRequestMutex       sync.RWMutex
	describeSubscriptionRequestArgsForCall []struct {
		arg1 *shield.DescribeSubscriptionInput
	}
	describeSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *shield.DescribeSubscriptionOutput
	}
	describeSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DescribeSubscriptionOutput
	}
	DescribeSubscriptionWithContextStub        func(context.Context, *shield.DescribeSubscriptionInput, ...request.Option) (*shield.DescribeSubscriptionOutput, error)
	describeSubscriptionWithContextMutex       sync.RWMutex
	describeSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DescribeSubscriptionInput
		arg3 []request.Option
	}
	describeSubscriptionWithContextReturns struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}
	describeSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}
	DisableProactiveEngagementStub        func(*shield.DisableProactiveEngagementInput) (*shield.DisableProactiveEngagementOutput, error)
	disableProactiveEngagementMutex       sync.RWMutex
	disableProactiveEngagementArgsForCall []struct {
		arg1 *shield.DisableProactiveEngagementInput
	}
	disableProactiveEngagementReturns struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}
	disableProactiveEngagementReturnsOnCall map[int]struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}
	DisableProactiveEngagementRequestStub        func(*shield.DisableProactiveEngagementInput) (*request.Request, *shield.DisableProactiveEngagementOutput)
	disableProactiveEngagementRequestMutex       sync.RWMutex
	disableProactiveEngagementRequestArgsForCall []struct {
		arg1 *shield.DisableProactiveEngagementInput
	}
	disableProactiveEngagementRequestReturns struct {
		result1 *request.Request
		result2 *shield.DisableProactiveEngagementOutput
	}
	disableProactiveEngagementRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DisableProactiveEngagementOutput
	}
	DisableProactiveEngagementWithContextStub        func(context.Context, *shield.DisableProactiveEngagementInput, ...request.Option) (*shield.DisableProactiveEngagementOutput, error)
	disableProactiveEngagementWithContextMutex       sync.RWMutex
	disableProactiveEngagementWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DisableProactiveEngagementInput
		arg3 []request.Option
	}
	disableProactiveEngagementWithContextReturns struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}
	disableProactiveEngagementWithContextReturnsOnCall map[int]struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}
	DisassociateDRTLogBucketStub        func(*shield.DisassociateDRTLogBucketInput) (*shield.DisassociateDRTLogBucketOutput, error)
	disassociateDRTLogBucketMutex       sync.RWMutex
	disassociateDRTLogBucketArgsForCall []struct {
		arg1 *shield.DisassociateDRTLogBucketInput
	}
	disassociateDRTLogBucketReturns struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}
	disassociateDRTLogBucketReturnsOnCall map[int]struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}
	DisassociateDRTLogBucketRequestStub        func(*shield.DisassociateDRTLogBucketInput) (*request.Request, *shield.DisassociateDRTLogBucketOutput)
	disassociateDRTLogBucketRequestMutex       sync.RWMutex
	disassociateDRTLogBucketRequestArgsForCall []struct {
		arg1 *shield.DisassociateDRTLogBucketInput
	}
	disassociateDRTLogBucketRequestReturns struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTLogBucketOutput
	}
	disassociateDRTLogBucketRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTLogBucketOutput
	}
	DisassociateDRTLogBucketWithContextStub        func(context.Context, *shield.DisassociateDRTLogBucketInput, ...request.Option) (*shield.DisassociateDRTLogBucketOutput, error)
	disassociateDRTLogBucketWithContextMutex       sync.RWMutex
	disassociateDRTLogBucketWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DisassociateDRTLogBucketInput
		arg3 []request.Option
	}
	disassociateDRTLogBucketWithContextReturns struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}
	disassociateDRTLogBucketWithContextReturnsOnCall map[int]struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}
	DisassociateDRTRoleStub        func(*shield.DisassociateDRTRoleInput) (*shield.DisassociateDRTRoleOutput, error)
	disassociateDRTRoleMutex       sync.RWMutex
	disassociateDRTRoleArgsForCall []struct {
		arg1 *shield.DisassociateDRTRoleInput
	}
	disassociateDRTRoleReturns struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}
	disassociateDRTRoleReturnsOnCall map[int]struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}
	DisassociateDRTRoleRequestStub        func(*shield.DisassociateDRTRoleInput) (*request.Request, *shield.DisassociateDRTRoleOutput)
	disassociateDRTRoleRequestMutex       sync.RWMutex
	disassociateDRTRoleRequestArgsForCall []struct {
		arg1 *shield.DisassociateDRTRoleInput
	}
	disassociateDRTRoleRequestReturns struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTRoleOutput
	}
	disassociateDRTRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTRoleOutput
	}
	DisassociateDRTRoleWithContextStub        func(context.Context, *shield.DisassociateDRTRoleInput, ...request.Option) (*shield.DisassociateDRTRoleOutput, error)
	disassociateDRTRoleWithContextMutex       sync.RWMutex
	disassociateDRTRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DisassociateDRTRoleInput
		arg3 []request.Option
	}
	disassociateDRTRoleWithContextReturns struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}
	disassociateDRTRoleWithContextReturnsOnCall map[int]struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}
	DisassociateHealthCheckStub        func(*shield.DisassociateHealthCheckInput) (*shield.DisassociateHealthCheckOutput, error)
	disassociateHealthCheckMutex       sync.RWMutex
	disassociateHealthCheckArgsForCall []struct {
		arg1 *shield.DisassociateHealthCheckInput
	}
	disassociateHealthCheckReturns struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}
	disassociateHealthCheckReturnsOnCall map[int]struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}
	DisassociateHealthCheckRequestStub        func(*shield.DisassociateHealthCheckInput) (*request.Request, *shield.DisassociateHealthCheckOutput)
	disassociateHealthCheckRequestMutex       sync.RWMutex
	disassociateHealthCheckRequestArgsForCall []struct {
		arg1 *shield.DisassociateHealthCheckInput
	}
	disassociateHealthCheckRequestReturns struct {
		result1 *request.Request
		result2 *shield.DisassociateHealthCheckOutput
	}
	disassociateHealthCheckRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.DisassociateHealthCheckOutput
	}
	DisassociateHealthCheckWithContextStub        func(context.Context, *shield.DisassociateHealthCheckInput, ...request.Option) (*shield.DisassociateHealthCheckOutput, error)
	disassociateHealthCheckWithContextMutex       sync.RWMutex
	disassociateHealthCheckWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.DisassociateHealthCheckInput
		arg3 []request.Option
	}
	disassociateHealthCheckWithContextReturns struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}
	disassociateHealthCheckWithContextReturnsOnCall map[int]struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}
	EnableProactiveEngagementStub        func(*shield.EnableProactiveEngagementInput) (*shield.EnableProactiveEngagementOutput, error)
	enableProactiveEngagementMutex       sync.RWMutex
	enableProactiveEngagementArgsForCall []struct {
		arg1 *shield.EnableProactiveEngagementInput
	}
	enableProactiveEngagementReturns struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}
	enableProactiveEngagementReturnsOnCall map[int]struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}
	EnableProactiveEngagementRequestStub        func(*shield.EnableProactiveEngagementInput) (*request.Request, *shield.EnableProactiveEngagementOutput)
	enableProactiveEngagementRequestMutex       sync.RWMutex
	enableProactiveEngagementRequestArgsForCall []struct {
		arg1 *shield.EnableProactiveEngagementInput
	}
	enableProactiveEngagementRequestReturns struct {
		result1 *request.Request
		result2 *shield.EnableProactiveEngagementOutput
	}
	enableProactiveEngagementRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.EnableProactiveEngagementOutput
	}
	EnableProactiveEngagementWithContextStub        func(context.Context, *shield.EnableProactiveEngagementInput, ...request.Option) (*shield.EnableProactiveEngagementOutput, error)
	enableProactiveEngagementWithContextMutex       sync.RWMutex
	enableProactiveEngagementWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.EnableProactiveEngagementInput
		arg3 []request.Option
	}
	enableProactiveEngagementWithContextReturns struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}
	enableProactiveEngagementWithContextReturnsOnCall map[int]struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}
	GetSubscriptionStateStub        func(*shield.GetSubscriptionStateInput) (*shield.GetSubscriptionStateOutput, error)
	getSubscriptionStateMutex       sync.RWMutex
	getSubscriptionStateArgsForCall []struct {
		arg1 *shield.GetSubscriptionStateInput
	}
	getSubscriptionStateReturns struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}
	getSubscriptionStateReturnsOnCall map[int]struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}
	GetSubscriptionStateRequestStub        func(*shield.GetSubscriptionStateInput) (*request.Request, *shield.GetSubscriptionStateOutput)
	getSubscriptionStateRequestMutex       sync.RWMutex
	getSubscriptionStateRequestArgsForCall []struct {
		arg1 *shield.GetSubscriptionStateInput
	}
	getSubscriptionStateRequestReturns struct {
		result1 *request.Request
		result2 *shield.GetSubscriptionStateOutput
	}
	getSubscriptionStateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.GetSubscriptionStateOutput
	}
	GetSubscriptionStateWithContextStub        func(context.Context, *shield.GetSubscriptionStateInput, ...request.Option) (*shield.GetSubscriptionStateOutput, error)
	getSubscriptionStateWithContextMutex       sync.RWMutex
	getSubscriptionStateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.GetSubscriptionStateInput
		arg3 []request.Option
	}
	getSubscriptionStateWithContextReturns struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}
	getSubscriptionStateWithContextReturnsOnCall map[int]struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}
	ListAttacksStub        func(*shield.ListAttacksInput) (*shield.ListAttacksOutput, error)
	listAttacksMutex       sync.RWMutex
	listAttacksArgsForCall []struct {
		arg1 *shield.ListAttacksInput
	}
	listAttacksReturns struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}
	listAttacksReturnsOnCall map[int]struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}
	ListAttacksPagesStub        func(*shield.ListAttacksInput, func(*shield.ListAttacksOutput, bool) bool) error
	listAttacksPagesMutex       sync.RWMutex
	listAttacksPagesArgsForCall []struct {
		arg1 *shield.ListAttacksInput
		arg2 func(*shield.ListAttacksOutput, bool) bool
	}
	listAttacksPagesReturns struct {
		result1 error
	}
	listAttacksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttacksPagesWithContextStub        func(context.Context, *shield.ListAttacksInput, func(*shield.ListAttacksOutput, bool) bool, ...request.Option) error
	listAttacksPagesWithContextMutex       sync.RWMutex
	listAttacksPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.ListAttacksInput
		arg3 func(*shield.ListAttacksOutput, bool) bool
		arg4 []request.Option
	}
	listAttacksPagesWithContextReturns struct {
		result1 error
	}
	listAttacksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttacksRequestStub        func(*shield.ListAttacksInput) (*request.Request, *shield.ListAttacksOutput)
	listAttacksRequestMutex       sync.RWMutex
	listAttacksRequestArgsForCall []struct {
		arg1 *shield.ListAttacksInput
	}
	listAttacksRequestReturns struct {
		result1 *request.Request
		result2 *shield.ListAttacksOutput
	}
	listAttacksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.ListAttacksOutput
	}
	ListAttacksWithContextStub        func(context.Context, *shield.ListAttacksInput, ...request.Option) (*shield.ListAttacksOutput, error)
	listAttacksWithContextMutex       sync.RWMutex
	listAttacksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.ListAttacksInput
		arg3 []request.Option
	}
	listAttacksWithContextReturns struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}
	listAttacksWithContextReturnsOnCall map[int]struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}
	ListProtectionsStub        func(*shield.ListProtectionsInput) (*shield.ListProtectionsOutput, error)
	listProtectionsMutex       sync.RWMutex
	listProtectionsArgsForCall []struct {
		arg1 *shield.ListProtectionsInput
	}
	listProtectionsReturns struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}
	listProtectionsReturnsOnCall map[int]struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}
	ListProtectionsPagesStub        func(*shield.ListProtectionsInput, func(*shield.ListProtectionsOutput, bool) bool) error
	listProtectionsPagesMutex       sync.RWMutex
	listProtectionsPagesArgsForCall []struct {
		arg1 *shield.ListProtectionsInput
		arg2 func(*shield.ListProtectionsOutput, bool) bool
	}
	listProtectionsPagesReturns struct {
		result1 error
	}
	listProtectionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListProtectionsPagesWithContextStub        func(context.Context, *shield.ListProtectionsInput, func(*shield.ListProtectionsOutput, bool) bool, ...request.Option) error
	listProtectionsPagesWithContextMutex       sync.RWMutex
	listProtectionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.ListProtectionsInput
		arg3 func(*shield.ListProtectionsOutput, bool) bool
		arg4 []request.Option
	}
	listProtectionsPagesWithContextReturns struct {
		result1 error
	}
	listProtectionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListProtectionsRequestStub        func(*shield.ListProtectionsInput) (*request.Request, *shield.ListProtectionsOutput)
	listProtectionsRequestMutex       sync.RWMutex
	listProtectionsRequestArgsForCall []struct {
		arg1 *shield.ListProtectionsInput
	}
	listProtectionsRequestReturns struct {
		result1 *request.Request
		result2 *shield.ListProtectionsOutput
	}
	listProtectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.ListProtectionsOutput
	}
	ListProtectionsWithContextStub        func(context.Context, *shield.ListProtectionsInput, ...request.Option) (*shield.ListProtectionsOutput, error)
	listProtectionsWithContextMutex       sync.RWMutex
	listProtectionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.ListProtectionsInput
		arg3 []request.Option
	}
	listProtectionsWithContextReturns struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}
	listProtectionsWithContextReturnsOnCall map[int]struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}
	UpdateEmergencyContactSettingsStub        func(*shield.UpdateEmergencyContactSettingsInput) (*shield.UpdateEmergencyContactSettingsOutput, error)
	updateEmergencyContactSettingsMutex       sync.RWMutex
	updateEmergencyContactSettingsArgsForCall []struct {
		arg1 *shield.UpdateEmergencyContactSettingsInput
	}
	updateEmergencyContactSettingsReturns struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}
	updateEmergencyContactSettingsReturnsOnCall map[int]struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}
	UpdateEmergencyContactSettingsRequestStub        func(*shield.UpdateEmergencyContactSettingsInput) (*request.Request, *shield.UpdateEmergencyContactSettingsOutput)
	updateEmergencyContactSettingsRequestMutex       sync.RWMutex
	updateEmergencyContactSettingsRequestArgsForCall []struct {
		arg1 *shield.UpdateEmergencyContactSettingsInput
	}
	updateEmergencyContactSettingsRequestReturns struct {
		result1 *request.Request
		result2 *shield.UpdateEmergencyContactSettingsOutput
	}
	updateEmergencyContactSettingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.UpdateEmergencyContactSettingsOutput
	}
	UpdateEmergencyContactSettingsWithContextStub        func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...request.Option) (*shield.UpdateEmergencyContactSettingsOutput, error)
	updateEmergencyContactSettingsWithContextMutex       sync.RWMutex
	updateEmergencyContactSettingsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.UpdateEmergencyContactSettingsInput
		arg3 []request.Option
	}
	updateEmergencyContactSettingsWithContextReturns struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}
	updateEmergencyContactSettingsWithContextReturnsOnCall map[int]struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}
	UpdateSubscriptionStub        func(*shield.UpdateSubscriptionInput) (*shield.UpdateSubscriptionOutput, error)
	updateSubscriptionMutex       sync.RWMutex
	updateSubscriptionArgsForCall []struct {
		arg1 *shield.UpdateSubscriptionInput
	}
	updateSubscriptionReturns struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}
	updateSubscriptionReturnsOnCall map[int]struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}
	UpdateSubscriptionRequestStub        func(*shield.UpdateSubscriptionInput) (*request.Request, *shield.UpdateSubscriptionOutput)
	updateSubscriptionRequestMutex       sync.RWMutex
	updateSubscriptionRequestArgsForCall []struct {
		arg1 *shield.UpdateSubscriptionInput
	}
	updateSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *shield.UpdateSubscriptionOutput
	}
	updateSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *shield.UpdateSubscriptionOutput
	}
	UpdateSubscriptionWithContextStub        func(context.Context, *shield.UpdateSubscriptionInput, ...request.Option) (*shield.UpdateSubscriptionOutput, error)
	updateSubscriptionWithContextMutex       sync.RWMutex
	updateSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *shield.UpdateSubscriptionInput
		arg3 []request.Option
	}
	updateSubscriptionWithContextReturns struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}
	updateSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeShieldAPI) AssociateDRTLogBucket(arg1 *shield.AssociateDRTLogBucketInput) (*shield.AssociateDRTLogBucketOutput, error) {
	fake.associateDRTLogBucketMutex.Lock()
	ret, specificReturn := fake.associateDRTLogBucketReturnsOnCall[len(fake.associateDRTLogBucketArgsForCall)]
	fake.associateDRTLogBucketArgsForCall = append(fake.associateDRTLogBucketArgsForCall, struct {
		arg1 *shield.AssociateDRTLogBucketInput
	}{arg1})
	stub := fake.AssociateDRTLogBucketStub
	fakeReturns := fake.associateDRTLogBucketReturns
	fake.recordInvocation("AssociateDRTLogBucket", []interface{}{arg1})
	fake.associateDRTLogBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketCallCount() int {
	fake.associateDRTLogBucketMutex.RLock()
	defer fake.associateDRTLogBucketMutex.RUnlock()
	return len(fake.associateDRTLogBucketArgsForCall)
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketCalls(stub func(*shield.AssociateDRTLogBucketInput) (*shield.AssociateDRTLogBucketOutput, error)) {
	fake.associateDRTLogBucketMutex.Lock()
	defer fake.associateDRTLogBucketMutex.Unlock()
	fake.AssociateDRTLogBucketStub = stub
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketArgsForCall(i int) *shield.AssociateDRTLogBucketInput {
	fake.associateDRTLogBucketMutex.RLock()
	defer fake.associateDRTLogBucketMutex.RUnlock()
	argsForCall := fake.associateDRTLogBucketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketReturns(result1 *shield.AssociateDRTLogBucketOutput, result2 error) {
	fake.associateDRTLogBucketMutex.Lock()
	defer fake.associateDRTLogBucketMutex.Unlock()
	fake.AssociateDRTLogBucketStub = nil
	fake.associateDRTLogBucketReturns = struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketReturnsOnCall(i int, result1 *shield.AssociateDRTLogBucketOutput, result2 error) {
	fake.associateDRTLogBucketMutex.Lock()
	defer fake.associateDRTLogBucketMutex.Unlock()
	fake.AssociateDRTLogBucketStub = nil
	if fake.associateDRTLogBucketReturnsOnCall == nil {
		fake.associateDRTLogBucketReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateDRTLogBucketOutput
			result2 error
		})
	}
	fake.associateDRTLogBucketReturnsOnCall[i] = struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketRequest(arg1 *shield.AssociateDRTLogBucketInput) (*request.Request, *shield.AssociateDRTLogBucketOutput) {
	fake.associateDRTLogBucketRequestMutex.Lock()
	ret, specificReturn := fake.associateDRTLogBucketRequestReturnsOnCall[len(fake.associateDRTLogBucketRequestArgsForCall)]
	fake.associateDRTLogBucketRequestArgsForCall = append(fake.associateDRTLogBucketRequestArgsForCall, struct {
		arg1 *shield.AssociateDRTLogBucketInput
	}{arg1})
	stub := fake.AssociateDRTLogBucketRequestStub
	fakeReturns := fake.associateDRTLogBucketRequestReturns
	fake.recordInvocation("AssociateDRTLogBucketRequest", []interface{}{arg1})
	fake.associateDRTLogBucketRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketRequestCallCount() int {
	fake.associateDRTLogBucketRequestMutex.RLock()
	defer fake.associateDRTLogBucketRequestMutex.RUnlock()
	return len(fake.associateDRTLogBucketRequestArgsForCall)
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketRequestCalls(stub func(*shield.AssociateDRTLogBucketInput) (*request.Request, *shield.AssociateDRTLogBucketOutput)) {
	fake.associateDRTLogBucketRequestMutex.Lock()
	defer fake.associateDRTLogBucketRequestMutex.Unlock()
	fake.AssociateDRTLogBucketRequestStub = stub
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketRequestArgsForCall(i int) *shield.AssociateDRTLogBucketInput {
	fake.associateDRTLogBucketRequestMutex.RLock()
	defer fake.associateDRTLogBucketRequestMutex.RUnlock()
	argsForCall := fake.associateDRTLogBucketRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketRequestReturns(result1 *request.Request, result2 *shield.AssociateDRTLogBucketOutput) {
	fake.associateDRTLogBucketRequestMutex.Lock()
	defer fake.associateDRTLogBucketRequestMutex.Unlock()
	fake.AssociateDRTLogBucketRequestStub = nil
	fake.associateDRTLogBucketRequestReturns = struct {
		result1 *request.Request
		result2 *shield.AssociateDRTLogBucketOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.AssociateDRTLogBucketOutput) {
	fake.associateDRTLogBucketRequestMutex.Lock()
	defer fake.associateDRTLogBucketRequestMutex.Unlock()
	fake.AssociateDRTLogBucketRequestStub = nil
	if fake.associateDRTLogBucketRequestReturnsOnCall == nil {
		fake.associateDRTLogBucketRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.AssociateDRTLogBucketOutput
		})
	}
	fake.associateDRTLogBucketRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.AssociateDRTLogBucketOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketWithContext(arg1 context.Context, arg2 *shield.AssociateDRTLogBucketInput, arg3 ...request.Option) (*shield.AssociateDRTLogBucketOutput, error) {
	fake.associateDRTLogBucketWithContextMutex.Lock()
	ret, specificReturn := fake.associateDRTLogBucketWithContextReturnsOnCall[len(fake.associateDRTLogBucketWithContextArgsForCall)]
	fake.associateDRTLogBucketWithContextArgsForCall = append(fake.associateDRTLogBucketWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.AssociateDRTLogBucketInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AssociateDRTLogBucketWithContextStub
	fakeReturns := fake.associateDRTLogBucketWithContextReturns
	fake.recordInvocation("AssociateDRTLogBucketWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateDRTLogBucketWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketWithContextCallCount() int {
	fake.associateDRTLogBucketWithContextMutex.RLock()
	defer fake.associateDRTLogBucketWithContextMutex.RUnlock()
	return len(fake.associateDRTLogBucketWithContextArgsForCall)
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketWithContextCalls(stub func(context.Context, *shield.AssociateDRTLogBucketInput, ...request.Option) (*shield.AssociateDRTLogBucketOutput, error)) {
	fake.associateDRTLogBucketWithContextMutex.Lock()
	defer fake.associateDRTLogBucketWithContextMutex.Unlock()
	fake.AssociateDRTLogBucketWithContextStub = stub
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketWithContextArgsForCall(i int) (context.Context, *shield.AssociateDRTLogBucketInput, []request.Option) {
	fake.associateDRTLogBucketWithContextMutex.RLock()
	defer fake.associateDRTLogBucketWithContextMutex.RUnlock()
	argsForCall := fake.associateDRTLogBucketWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketWithContextReturns(result1 *shield.AssociateDRTLogBucketOutput, result2 error) {
	fake.associateDRTLogBucketWithContextMutex.Lock()
	defer fake.associateDRTLogBucketWithContextMutex.Unlock()
	fake.AssociateDRTLogBucketWithContextStub = nil
	fake.associateDRTLogBucketWithContextReturns = struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTLogBucketWithContextReturnsOnCall(i int, result1 *shield.AssociateDRTLogBucketOutput, result2 error) {
	fake.associateDRTLogBucketWithContextMutex.Lock()
	defer fake.associateDRTLogBucketWithContextMutex.Unlock()
	fake.AssociateDRTLogBucketWithContextStub = nil
	if fake.associateDRTLogBucketWithContextReturnsOnCall == nil {
		fake.associateDRTLogBucketWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateDRTLogBucketOutput
			result2 error
		})
	}
	fake.associateDRTLogBucketWithContextReturnsOnCall[i] = struct {
		result1 *shield.AssociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTRole(arg1 *shield.AssociateDRTRoleInput) (*shield.AssociateDRTRoleOutput, error) {
	fake.associateDRTRoleMutex.Lock()
	ret, specificReturn := fake.associateDRTRoleReturnsOnCall[len(fake.associateDRTRoleArgsForCall)]
	fake.associateDRTRoleArgsForCall = append(fake.associateDRTRoleArgsForCall, struct {
		arg1 *shield.AssociateDRTRoleInput
	}{arg1})
	stub := fake.AssociateDRTRoleStub
	fakeReturns := fake.associateDRTRoleReturns
	fake.recordInvocation("AssociateDRTRole", []interface{}{arg1})
	fake.associateDRTRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateDRTRoleCallCount() int {
	fake.associateDRTRoleMutex.RLock()
	defer fake.associateDRTRoleMutex.RUnlock()
	return len(fake.associateDRTRoleArgsForCall)
}

func (fake *FakeShieldAPI) AssociateDRTRoleCalls(stub func(*shield.AssociateDRTRoleInput) (*shield.AssociateDRTRoleOutput, error)) {
	fake.associateDRTRoleMutex.Lock()
	defer fake.associateDRTRoleMutex.Unlock()
	fake.AssociateDRTRoleStub = stub
}

func (fake *FakeShieldAPI) AssociateDRTRoleArgsForCall(i int) *shield.AssociateDRTRoleInput {
	fake.associateDRTRoleMutex.RLock()
	defer fake.associateDRTRoleMutex.RUnlock()
	argsForCall := fake.associateDRTRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateDRTRoleReturns(result1 *shield.AssociateDRTRoleOutput, result2 error) {
	fake.associateDRTRoleMutex.Lock()
	defer fake.associateDRTRoleMutex.Unlock()
	fake.AssociateDRTRoleStub = nil
	fake.associateDRTRoleReturns = struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTRoleReturnsOnCall(i int, result1 *shield.AssociateDRTRoleOutput, result2 error) {
	fake.associateDRTRoleMutex.Lock()
	defer fake.associateDRTRoleMutex.Unlock()
	fake.AssociateDRTRoleStub = nil
	if fake.associateDRTRoleReturnsOnCall == nil {
		fake.associateDRTRoleReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateDRTRoleOutput
			result2 error
		})
	}
	fake.associateDRTRoleReturnsOnCall[i] = struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTRoleRequest(arg1 *shield.AssociateDRTRoleInput) (*request.Request, *shield.AssociateDRTRoleOutput) {
	fake.associateDRTRoleRequestMutex.Lock()
	ret, specificReturn := fake.associateDRTRoleRequestReturnsOnCall[len(fake.associateDRTRoleRequestArgsForCall)]
	fake.associateDRTRoleRequestArgsForCall = append(fake.associateDRTRoleRequestArgsForCall, struct {
		arg1 *shield.AssociateDRTRoleInput
	}{arg1})
	stub := fake.AssociateDRTRoleRequestStub
	fakeReturns := fake.associateDRTRoleRequestReturns
	fake.recordInvocation("AssociateDRTRoleRequest", []interface{}{arg1})
	fake.associateDRTRoleRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateDRTRoleRequestCallCount() int {
	fake.associateDRTRoleRequestMutex.RLock()
	defer fake.associateDRTRoleRequestMutex.RUnlock()
	return len(fake.associateDRTRoleRequestArgsForCall)
}

func (fake *FakeShieldAPI) AssociateDRTRoleRequestCalls(stub func(*shield.AssociateDRTRoleInput) (*request.Request, *shield.AssociateDRTRoleOutput)) {
	fake.associateDRTRoleRequestMutex.Lock()
	defer fake.associateDRTRoleRequestMutex.Unlock()
	fake.AssociateDRTRoleRequestStub = stub
}

func (fake *FakeShieldAPI) AssociateDRTRoleRequestArgsForCall(i int) *shield.AssociateDRTRoleInput {
	fake.associateDRTRoleRequestMutex.RLock()
	defer fake.associateDRTRoleRequestMutex.RUnlock()
	argsForCall := fake.associateDRTRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateDRTRoleRequestReturns(result1 *request.Request, result2 *shield.AssociateDRTRoleOutput) {
	fake.associateDRTRoleRequestMutex.Lock()
	defer fake.associateDRTRoleRequestMutex.Unlock()
	fake.AssociateDRTRoleRequestStub = nil
	fake.associateDRTRoleRequestReturns = struct {
		result1 *request.Request
		result2 *shield.AssociateDRTRoleOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.AssociateDRTRoleOutput) {
	fake.associateDRTRoleRequestMutex.Lock()
	defer fake.associateDRTRoleRequestMutex.Unlock()
	fake.AssociateDRTRoleRequestStub = nil
	if fake.associateDRTRoleRequestReturnsOnCall == nil {
		fake.associateDRTRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.AssociateDRTRoleOutput
		})
	}
	fake.associateDRTRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.AssociateDRTRoleOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTRoleWithContext(arg1 context.Context, arg2 *shield.AssociateDRTRoleInput, arg3 ...request.Option) (*shield.AssociateDRTRoleOutput, error) {
	fake.associateDRTRoleWithContextMutex.Lock()
	ret, specificReturn := fake.associateDRTRoleWithContextReturnsOnCall[len(fake.associateDRTRoleWithContextArgsForCall)]
	fake.associateDRTRoleWithContextArgsForCall = append(fake.associateDRTRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.AssociateDRTRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AssociateDRTRoleWithContextStub
	fakeReturns := fake.associateDRTRoleWithContextReturns
	fake.recordInvocation("AssociateDRTRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateDRTRoleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateDRTRoleWithContextCallCount() int {
	fake.associateDRTRoleWithContextMutex.RLock()
	defer fake.associateDRTRoleWithContextMutex.RUnlock()
	return len(fake.associateDRTRoleWithContextArgsForCall)
}

func (fake *FakeShieldAPI) AssociateDRTRoleWithContextCalls(stub func(context.Context, *shield.AssociateDRTRoleInput, ...request.Option) (*shield.AssociateDRTRoleOutput, error)) {
	fake.associateDRTRoleWithContextMutex.Lock()
	defer fake.associateDRTRoleWithContextMutex.Unlock()
	fake.AssociateDRTRoleWithContextStub = stub
}

func (fake *FakeShieldAPI) AssociateDRTRoleWithContextArgsForCall(i int) (context.Context, *shield.AssociateDRTRoleInput, []request.Option) {
	fake.associateDRTRoleWithContextMutex.RLock()
	defer fake.associateDRTRoleWithContextMutex.RUnlock()
	argsForCall := fake.associateDRTRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) AssociateDRTRoleWithContextReturns(result1 *shield.AssociateDRTRoleOutput, result2 error) {
	fake.associateDRTRoleWithContextMutex.Lock()
	defer fake.associateDRTRoleWithContextMutex.Unlock()
	fake.AssociateDRTRoleWithContextStub = nil
	fake.associateDRTRoleWithContextReturns = struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateDRTRoleWithContextReturnsOnCall(i int, result1 *shield.AssociateDRTRoleOutput, result2 error) {
	fake.associateDRTRoleWithContextMutex.Lock()
	defer fake.associateDRTRoleWithContextMutex.Unlock()
	fake.AssociateDRTRoleWithContextStub = nil
	if fake.associateDRTRoleWithContextReturnsOnCall == nil {
		fake.associateDRTRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateDRTRoleOutput
			result2 error
		})
	}
	fake.associateDRTRoleWithContextReturnsOnCall[i] = struct {
		result1 *shield.AssociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateHealthCheck(arg1 *shield.AssociateHealthCheckInput) (*shield.AssociateHealthCheckOutput, error) {
	fake.associateHealthCheckMutex.Lock()
	ret, specificReturn := fake.associateHealthCheckReturnsOnCall[len(fake.associateHealthCheckArgsForCall)]
	fake.associateHealthCheckArgsForCall = append(fake.associateHealthCheckArgsForCall, struct {
		arg1 *shield.AssociateHealthCheckInput
	}{arg1})
	stub := fake.AssociateHealthCheckStub
	fakeReturns := fake.associateHealthCheckReturns
	fake.recordInvocation("AssociateHealthCheck", []interface{}{arg1})
	fake.associateHealthCheckMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateHealthCheckCallCount() int {
	fake.associateHealthCheckMutex.RLock()
	defer fake.associateHealthCheckMutex.RUnlock()
	return len(fake.associateHealthCheckArgsForCall)
}

func (fake *FakeShieldAPI) AssociateHealthCheckCalls(stub func(*shield.AssociateHealthCheckInput) (*shield.AssociateHealthCheckOutput, error)) {
	fake.associateHealthCheckMutex.Lock()
	defer fake.associateHealthCheckMutex.Unlock()
	fake.AssociateHealthCheckStub = stub
}

func (fake *FakeShieldAPI) AssociateHealthCheckArgsForCall(i int) *shield.AssociateHealthCheckInput {
	fake.associateHealthCheckMutex.RLock()
	defer fake.associateHealthCheckMutex.RUnlock()
	argsForCall := fake.associateHealthCheckArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateHealthCheckReturns(result1 *shield.AssociateHealthCheckOutput, result2 error) {
	fake.associateHealthCheckMutex.Lock()
	defer fake.associateHealthCheckMutex.Unlock()
	fake.AssociateHealthCheckStub = nil
	fake.associateHealthCheckReturns = struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateHealthCheckReturnsOnCall(i int, result1 *shield.AssociateHealthCheckOutput, result2 error) {
	fake.associateHealthCheckMutex.Lock()
	defer fake.associateHealthCheckMutex.Unlock()
	fake.AssociateHealthCheckStub = nil
	if fake.associateHealthCheckReturnsOnCall == nil {
		fake.associateHealthCheckReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateHealthCheckOutput
			result2 error
		})
	}
	fake.associateHealthCheckReturnsOnCall[i] = struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateHealthCheckRequest(arg1 *shield.AssociateHealthCheckInput) (*request.Request, *shield.AssociateHealthCheckOutput) {
	fake.associateHealthCheckRequestMutex.Lock()
	ret, specificReturn := fake.associateHealthCheckRequestReturnsOnCall[len(fake.associateHealthCheckRequestArgsForCall)]
	fake.associateHealthCheckRequestArgsForCall = append(fake.associateHealthCheckRequestArgsForCall, struct {
		arg1 *shield.AssociateHealthCheckInput
	}{arg1})
	stub := fake.AssociateHealthCheckRequestStub
	fakeReturns := fake.associateHealthCheckRequestReturns
	fake.recordInvocation("AssociateHealthCheckRequest", []interface{}{arg1})
	fake.associateHealthCheckRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateHealthCheckRequestCallCount() int {
	fake.associateHealthCheckRequestMutex.RLock()
	defer fake.associateHealthCheckRequestMutex.RUnlock()
	return len(fake.associateHealthCheckRequestArgsForCall)
}

func (fake *FakeShieldAPI) AssociateHealthCheckRequestCalls(stub func(*shield.AssociateHealthCheckInput) (*request.Request, *shield.AssociateHealthCheckOutput)) {
	fake.associateHealthCheckRequestMutex.Lock()
	defer fake.associateHealthCheckRequestMutex.Unlock()
	fake.AssociateHealthCheckRequestStub = stub
}

func (fake *FakeShieldAPI) AssociateHealthCheckRequestArgsForCall(i int) *shield.AssociateHealthCheckInput {
	fake.associateHealthCheckRequestMutex.RLock()
	defer fake.associateHealthCheckRequestMutex.RUnlock()
	argsForCall := fake.associateHealthCheckRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateHealthCheckRequestReturns(result1 *request.Request, result2 *shield.AssociateHealthCheckOutput) {
	fake.associateHealthCheckRequestMutex.Lock()
	defer fake.associateHealthCheckRequestMutex.Unlock()
	fake.AssociateHealthCheckRequestStub = nil
	fake.associateHealthCheckRequestReturns = struct {
		result1 *request.Request
		result2 *shield.AssociateHealthCheckOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateHealthCheckRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.AssociateHealthCheckOutput) {
	fake.associateHealthCheckRequestMutex.Lock()
	defer fake.associateHealthCheckRequestMutex.Unlock()
	fake.AssociateHealthCheckRequestStub = nil
	if fake.associateHealthCheckRequestReturnsOnCall == nil {
		fake.associateHealthCheckRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.AssociateHealthCheckOutput
		})
	}
	fake.associateHealthCheckRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.AssociateHealthCheckOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateHealthCheckWithContext(arg1 context.Context, arg2 *shield.AssociateHealthCheckInput, arg3 ...request.Option) (*shield.AssociateHealthCheckOutput, error) {
	fake.associateHealthCheckWithContextMutex.Lock()
	ret, specificReturn := fake.associateHealthCheckWithContextReturnsOnCall[len(fake.associateHealthCheckWithContextArgsForCall)]
	fake.associateHealthCheckWithContextArgsForCall = append(fake.associateHealthCheckWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.AssociateHealthCheckInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AssociateHealthCheckWithContextStub
	fakeReturns := fake.associateHealthCheckWithContextReturns
	fake.recordInvocation("AssociateHealthCheckWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateHealthCheckWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateHealthCheckWithContextCallCount() int {
	fake.associateHealthCheckWithContextMutex.RLock()
	defer fake.associateHealthCheckWithContextMutex.RUnlock()
	return len(fake.associateHealthCheckWithContextArgsForCall)
}

func (fake *FakeShieldAPI) AssociateHealthCheckWithContextCalls(stub func(context.Context, *shield.AssociateHealthCheckInput, ...request.Option) (*shield.AssociateHealthCheckOutput, error)) {
	fake.associateHealthCheckWithContextMutex.Lock()
	defer fake.associateHealthCheckWithContextMutex.Unlock()
	fake.AssociateHealthCheckWithContextStub = stub
}

func (fake *FakeShieldAPI) AssociateHealthCheckWithContextArgsForCall(i int) (context.Context, *shield.AssociateHealthCheckInput, []request.Option) {
	fake.associateHealthCheckWithContextMutex.RLock()
	defer fake.associateHealthCheckWithContextMutex.RUnlock()
	argsForCall := fake.associateHealthCheckWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) AssociateHealthCheckWithContextReturns(result1 *shield.AssociateHealthCheckOutput, result2 error) {
	fake.associateHealthCheckWithContextMutex.Lock()
	defer fake.associateHealthCheckWithContextMutex.Unlock()
	fake.AssociateHealthCheckWithContextStub = nil
	fake.associateHealthCheckWithContextReturns = struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateHealthCheckWithContextReturnsOnCall(i int, result1 *shield.AssociateHealthCheckOutput, result2 error) {
	fake.associateHealthCheckWithContextMutex.Lock()
	defer fake.associateHealthCheckWithContextMutex.Unlock()
	fake.AssociateHealthCheckWithContextStub = nil
	if fake.associateHealthCheckWithContextReturnsOnCall == nil {
		fake.associateHealthCheckWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateHealthCheckOutput
			result2 error
		})
	}
	fake.associateHealthCheckWithContextReturnsOnCall[i] = struct {
		result1 *shield.AssociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetails(arg1 *shield.AssociateProactiveEngagementDetailsInput) (*shield.AssociateProactiveEngagementDetailsOutput, error) {
	fake.associateProactiveEngagementDetailsMutex.Lock()
	ret, specificReturn := fake.associateProactiveEngagementDetailsReturnsOnCall[len(fake.associateProactiveEngagementDetailsArgsForCall)]
	fake.associateProactiveEngagementDetailsArgsForCall = append(fake.associateProactiveEngagementDetailsArgsForCall, struct {
		arg1 *shield.AssociateProactiveEngagementDetailsInput
	}{arg1})
	stub := fake.AssociateProactiveEngagementDetailsStub
	fakeReturns := fake.associateProactiveEngagementDetailsReturns
	fake.recordInvocation("AssociateProactiveEngagementDetails", []interface{}{arg1})
	fake.associateProactiveEngagementDetailsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsCallCount() int {
	fake.associateProactiveEngagementDetailsMutex.RLock()
	defer fake.associateProactiveEngagementDetailsMutex.RUnlock()
	return len(fake.associateProactiveEngagementDetailsArgsForCall)
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsCalls(stub func(*shield.AssociateProactiveEngagementDetailsInput) (*shield.AssociateProactiveEngagementDetailsOutput, error)) {
	fake.associateProactiveEngagementDetailsMutex.Lock()
	defer fake.associateProactiveEngagementDetailsMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsStub = stub
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsArgsForCall(i int) *shield.AssociateProactiveEngagementDetailsInput {
	fake.associateProactiveEngagementDetailsMutex.RLock()
	defer fake.associateProactiveEngagementDetailsMutex.RUnlock()
	argsForCall := fake.associateProactiveEngagementDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsReturns(result1 *shield.AssociateProactiveEngagementDetailsOutput, result2 error) {
	fake.associateProactiveEngagementDetailsMutex.Lock()
	defer fake.associateProactiveEngagementDetailsMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsStub = nil
	fake.associateProactiveEngagementDetailsReturns = struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsReturnsOnCall(i int, result1 *shield.AssociateProactiveEngagementDetailsOutput, result2 error) {
	fake.associateProactiveEngagementDetailsMutex.Lock()
	defer fake.associateProactiveEngagementDetailsMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsStub = nil
	if fake.associateProactiveEngagementDetailsReturnsOnCall == nil {
		fake.associateProactiveEngagementDetailsReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateProactiveEngagementDetailsOutput
			result2 error
		})
	}
	fake.associateProactiveEngagementDetailsReturnsOnCall[i] = struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsRequest(arg1 *shield.AssociateProactiveEngagementDetailsInput) (*request.Request, *shield.AssociateProactiveEngagementDetailsOutput) {
	fake.associateProactiveEngagementDetailsRequestMutex.Lock()
	ret, specificReturn := fake.associateProactiveEngagementDetailsRequestReturnsOnCall[len(fake.associateProactiveEngagementDetailsRequestArgsForCall)]
	fake.associateProactiveEngagementDetailsRequestArgsForCall = append(fake.associateProactiveEngagementDetailsRequestArgsForCall, struct {
		arg1 *shield.AssociateProactiveEngagementDetailsInput
	}{arg1})
	stub := fake.AssociateProactiveEngagementDetailsRequestStub
	fakeReturns := fake.associateProactiveEngagementDetailsRequestReturns
	fake.recordInvocation("AssociateProactiveEngagementDetailsRequest", []interface{}{arg1})
	fake.associateProactiveEngagementDetailsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsRequestCallCount() int {
	fake.associateProactiveEngagementDetailsRequestMutex.RLock()
	defer fake.associateProactiveEngagementDetailsRequestMutex.RUnlock()
	return len(fake.associateProactiveEngagementDetailsRequestArgsForCall)
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsRequestCalls(stub func(*shield.AssociateProactiveEngagementDetailsInput) (*request.Request, *shield.AssociateProactiveEngagementDetailsOutput)) {
	fake.associateProactiveEngagementDetailsRequestMutex.Lock()
	defer fake.associateProactiveEngagementDetailsRequestMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsRequestStub = stub
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsRequestArgsForCall(i int) *shield.AssociateProactiveEngagementDetailsInput {
	fake.associateProactiveEngagementDetailsRequestMutex.RLock()
	defer fake.associateProactiveEngagementDetailsRequestMutex.RUnlock()
	argsForCall := fake.associateProactiveEngagementDetailsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsRequestReturns(result1 *request.Request, result2 *shield.AssociateProactiveEngagementDetailsOutput) {
	fake.associateProactiveEngagementDetailsRequestMutex.Lock()
	defer fake.associateProactiveEngagementDetailsRequestMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsRequestStub = nil
	fake.associateProactiveEngagementDetailsRequestReturns = struct {
		result1 *request.Request
		result2 *shield.AssociateProactiveEngagementDetailsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.AssociateProactiveEngagementDetailsOutput) {
	fake.associateProactiveEngagementDetailsRequestMutex.Lock()
	defer fake.associateProactiveEngagementDetailsRequestMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsRequestStub = nil
	if fake.associateProactiveEngagementDetailsRequestReturnsOnCall == nil {
		fake.associateProactiveEngagementDetailsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.AssociateProactiveEngagementDetailsOutput
		})
	}
	fake.associateProactiveEngagementDetailsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.AssociateProactiveEngagementDetailsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsWithContext(arg1 context.Context, arg2 *shield.AssociateProactiveEngagementDetailsInput, arg3 ...request.Option) (*shield.AssociateProactiveEngagementDetailsOutput, error) {
	fake.associateProactiveEngagementDetailsWithContextMutex.Lock()
	ret, specificReturn := fake.associateProactiveEngagementDetailsWithContextReturnsOnCall[len(fake.associateProactiveEngagementDetailsWithContextArgsForCall)]
	fake.associateProactiveEngagementDetailsWithContextArgsForCall = append(fake.associateProactiveEngagementDetailsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.AssociateProactiveEngagementDetailsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AssociateProactiveEngagementDetailsWithContextStub
	fakeReturns := fake.associateProactiveEngagementDetailsWithContextReturns
	fake.recordInvocation("AssociateProactiveEngagementDetailsWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateProactiveEngagementDetailsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsWithContextCallCount() int {
	fake.associateProactiveEngagementDetailsWithContextMutex.RLock()
	defer fake.associateProactiveEngagementDetailsWithContextMutex.RUnlock()
	return len(fake.associateProactiveEngagementDetailsWithContextArgsForCall)
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsWithContextCalls(stub func(context.Context, *shield.AssociateProactiveEngagementDetailsInput, ...request.Option) (*shield.AssociateProactiveEngagementDetailsOutput, error)) {
	fake.associateProactiveEngagementDetailsWithContextMutex.Lock()
	defer fake.associateProactiveEngagementDetailsWithContextMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsWithContextStub = stub
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsWithContextArgsForCall(i int) (context.Context, *shield.AssociateProactiveEngagementDetailsInput, []request.Option) {
	fake.associateProactiveEngagementDetailsWithContextMutex.RLock()
	defer fake.associateProactiveEngagementDetailsWithContextMutex.RUnlock()
	argsForCall := fake.associateProactiveEngagementDetailsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsWithContextReturns(result1 *shield.AssociateProactiveEngagementDetailsOutput, result2 error) {
	fake.associateProactiveEngagementDetailsWithContextMutex.Lock()
	defer fake.associateProactiveEngagementDetailsWithContextMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsWithContextStub = nil
	fake.associateProactiveEngagementDetailsWithContextReturns = struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) AssociateProactiveEngagementDetailsWithContextReturnsOnCall(i int, result1 *shield.AssociateProactiveEngagementDetailsOutput, result2 error) {
	fake.associateProactiveEngagementDetailsWithContextMutex.Lock()
	defer fake.associateProactiveEngagementDetailsWithContextMutex.Unlock()
	fake.AssociateProactiveEngagementDetailsWithContextStub = nil
	if fake.associateProactiveEngagementDetailsWithContextReturnsOnCall == nil {
		fake.associateProactiveEngagementDetailsWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.AssociateProactiveEngagementDetailsOutput
			result2 error
		})
	}
	fake.associateProactiveEngagementDetailsWithContextReturnsOnCall[i] = struct {
		result1 *shield.AssociateProactiveEngagementDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateProtection(arg1 *shield.CreateProtectionInput) (*shield.CreateProtectionOutput, error) {
	fake.createProtectionMutex.Lock()
	ret, specificReturn := fake.createProtectionReturnsOnCall[len(fake.createProtectionArgsForCall)]
	fake.createProtectionArgsForCall = append(fake.createProtectionArgsForCall, struct {
		arg1 *shield.CreateProtectionInput
	}{arg1})
	stub := fake.CreateProtectionStub
	fakeReturns := fake.createProtectionReturns
	fake.recordInvocation("CreateProtection", []interface{}{arg1})
	fake.createProtectionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) CreateProtectionCallCount() int {
	fake.createProtectionMutex.RLock()
	defer fake.createProtectionMutex.RUnlock()
	return len(fake.createProtectionArgsForCall)
}

func (fake *FakeShieldAPI) CreateProtectionCalls(stub func(*shield.CreateProtectionInput) (*shield.CreateProtectionOutput, error)) {
	fake.createProtectionMutex.Lock()
	defer fake.createProtectionMutex.Unlock()
	fake.CreateProtectionStub = stub
}

func (fake *FakeShieldAPI) CreateProtectionArgsForCall(i int) *shield.CreateProtectionInput {
	fake.createProtectionMutex.RLock()
	defer fake.createProtectionMutex.RUnlock()
	argsForCall := fake.createProtectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) CreateProtectionReturns(result1 *shield.CreateProtectionOutput, result2 error) {
	fake.createProtectionMutex.Lock()
	defer fake.createProtectionMutex.Unlock()
	fake.CreateProtectionStub = nil
	fake.createProtectionReturns = struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateProtectionReturnsOnCall(i int, result1 *shield.CreateProtectionOutput, result2 error) {
	fake.createProtectionMutex.Lock()
	defer fake.createProtectionMutex.Unlock()
	fake.CreateProtectionStub = nil
	if fake.createProtectionReturnsOnCall == nil {
		fake.createProtectionReturnsOnCall = make(map[int]struct {
			result1 *shield.CreateProtectionOutput
			result2 error
		})
	}
	fake.createProtectionReturnsOnCall[i] = struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateProtectionRequest(arg1 *shield.CreateProtectionInput) (*request.Request, *shield.CreateProtectionOutput) {
	fake.createProtectionRequestMutex.Lock()
	ret, specificReturn := fake.createProtectionRequestReturnsOnCall[len(fake.createProtectionRequestArgsForCall)]
	fake.createProtectionRequestArgsForCall = append(fake.createProtectionRequestArgsForCall, struct {
		arg1 *shield.CreateProtectionInput
	}{arg1})
	stub := fake.CreateProtectionRequestStub
	fakeReturns := fake.createProtectionRequestReturns
	fake.recordInvocation("CreateProtectionRequest", []interface{}{arg1})
	fake.createProtectionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) CreateProtectionRequestCallCount() int {
	fake.createProtectionRequestMutex.RLock()
	defer fake.createProtectionRequestMutex.RUnlock()
	return len(fake.createProtectionRequestArgsForCall)
}

func (fake *FakeShieldAPI) CreateProtectionRequestCalls(stub func(*shield.CreateProtectionInput) (*request.Request, *shield.CreateProtectionOutput)) {
	fake.createProtectionRequestMutex.Lock()
	defer fake.createProtectionRequestMutex.Unlock()
	fake.CreateProtectionRequestStub = stub
}

func (fake *FakeShieldAPI) CreateProtectionRequestArgsForCall(i int) *shield.CreateProtectionInput {
	fake.createProtectionRequestMutex.RLock()
	defer fake.createProtectionRequestMutex.RUnlock()
	argsForCall := fake.createProtectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) CreateProtectionRequestReturns(result1 *request.Request, result2 *shield.CreateProtectionOutput) {
	fake.createProtectionRequestMutex.Lock()
	defer fake.createProtectionRequestMutex.Unlock()
	fake.CreateProtectionRequestStub = nil
	fake.createProtectionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.CreateProtectionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateProtectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.CreateProtectionOutput) {
	fake.createProtectionRequestMutex.Lock()
	defer fake.createProtectionRequestMutex.Unlock()
	fake.CreateProtectionRequestStub = nil
	if fake.createProtectionRequestReturnsOnCall == nil {
		fake.createProtectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.CreateProtectionOutput
		})
	}
	fake.createProtectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.CreateProtectionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateProtectionWithContext(arg1 context.Context, arg2 *shield.CreateProtectionInput, arg3 ...request.Option) (*shield.CreateProtectionOutput, error) {
	fake.createProtectionWithContextMutex.Lock()
	ret, specificReturn := fake.createProtectionWithContextReturnsOnCall[len(fake.createProtectionWithContextArgsForCall)]
	fake.createProtectionWithContextArgsForCall = append(fake.createProtectionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.CreateProtectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateProtectionWithContextStub
	fakeReturns := fake.createProtectionWithContextReturns
	fake.recordInvocation("CreateProtectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createProtectionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) CreateProtectionWithContextCallCount() int {
	fake.createProtectionWithContextMutex.RLock()
	defer fake.createProtectionWithContextMutex.RUnlock()
	return len(fake.createProtectionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) CreateProtectionWithContextCalls(stub func(context.Context, *shield.CreateProtectionInput, ...request.Option) (*shield.CreateProtectionOutput, error)) {
	fake.createProtectionWithContextMutex.Lock()
	defer fake.createProtectionWithContextMutex.Unlock()
	fake.CreateProtectionWithContextStub = stub
}

func (fake *FakeShieldAPI) CreateProtectionWithContextArgsForCall(i int) (context.Context, *shield.CreateProtectionInput, []request.Option) {
	fake.createProtectionWithContextMutex.RLock()
	defer fake.createProtectionWithContextMutex.RUnlock()
	argsForCall := fake.createProtectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) CreateProtectionWithContextReturns(result1 *shield.CreateProtectionOutput, result2 error) {
	fake.createProtectionWithContextMutex.Lock()
	defer fake.createProtectionWithContextMutex.Unlock()
	fake.CreateProtectionWithContextStub = nil
	fake.createProtectionWithContextReturns = struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateProtectionWithContextReturnsOnCall(i int, result1 *shield.CreateProtectionOutput, result2 error) {
	fake.createProtectionWithContextMutex.Lock()
	defer fake.createProtectionWithContextMutex.Unlock()
	fake.CreateProtectionWithContextStub = nil
	if fake.createProtectionWithContextReturnsOnCall == nil {
		fake.createProtectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.CreateProtectionOutput
			result2 error
		})
	}
	fake.createProtectionWithContextReturnsOnCall[i] = struct {
		result1 *shield.CreateProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateSubscription(arg1 *shield.CreateSubscriptionInput) (*shield.CreateSubscriptionOutput, error) {
	fake.createSubscriptionMutex.Lock()
	ret, specificReturn := fake.createSubscriptionReturnsOnCall[len(fake.createSubscriptionArgsForCall)]
	fake.createSubscriptionArgsForCall = append(fake.createSubscriptionArgsForCall, struct {
		arg1 *shield.CreateSubscriptionInput
	}{arg1})
	stub := fake.CreateSubscriptionStub
	fakeReturns := fake.createSubscriptionReturns
	fake.recordInvocation("CreateSubscription", []interface{}{arg1})
	fake.createSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) CreateSubscriptionCallCount() int {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	return len(fake.createSubscriptionArgsForCall)
}

func (fake *FakeShieldAPI) CreateSubscriptionCalls(stub func(*shield.CreateSubscriptionInput) (*shield.CreateSubscriptionOutput, error)) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = stub
}

func (fake *FakeShieldAPI) CreateSubscriptionArgsForCall(i int) *shield.CreateSubscriptionInput {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	argsForCall := fake.createSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) CreateSubscriptionReturns(result1 *shield.CreateSubscriptionOutput, result2 error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = nil
	fake.createSubscriptionReturns = struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateSubscriptionReturnsOnCall(i int, result1 *shield.CreateSubscriptionOutput, result2 error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = nil
	if fake.createSubscriptionReturnsOnCall == nil {
		fake.createSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *shield.CreateSubscriptionOutput
			result2 error
		})
	}
	fake.createSubscriptionReturnsOnCall[i] = struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateSubscriptionRequest(arg1 *shield.CreateSubscriptionInput) (*request.Request, *shield.CreateSubscriptionOutput) {
	fake.createSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.createSubscriptionRequestReturnsOnCall[len(fake.createSubscriptionRequestArgsForCall)]
	fake.createSubscriptionRequestArgsForCall = append(fake.createSubscriptionRequestArgsForCall, struct {
		arg1 *shield.CreateSubscriptionInput
	}{arg1})
	stub := fake.CreateSubscriptionRequestStub
	fakeReturns := fake.createSubscriptionRequestReturns
	fake.recordInvocation("CreateSubscriptionRequest", []interface{}{arg1})
	fake.createSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) CreateSubscriptionRequestCallCount() int {
	fake.createSubscriptionRequestMutex.RLock()
	defer fake.createSubscriptionRequestMutex.RUnlock()
	return len(fake.createSubscriptionRequestArgsForCall)
}

func (fake *FakeShieldAPI) CreateSubscriptionRequestCalls(stub func(*shield.CreateSubscriptionInput) (*request.Request, *shield.CreateSubscriptionOutput)) {
	fake.createSubscriptionRequestMutex.Lock()
	defer fake.createSubscriptionRequestMutex.Unlock()
	fake.CreateSubscriptionRequestStub = stub
}

func (fake *FakeShieldAPI) CreateSubscriptionRequestArgsForCall(i int) *shield.CreateSubscriptionInput {
	fake.createSubscriptionRequestMutex.RLock()
	defer fake.createSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.createSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) CreateSubscriptionRequestReturns(result1 *request.Request, result2 *shield.CreateSubscriptionOutput) {
	fake.createSubscriptionRequestMutex.Lock()
	defer fake.createSubscriptionRequestMutex.Unlock()
	fake.CreateSubscriptionRequestStub = nil
	fake.createSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.CreateSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.CreateSubscriptionOutput) {
	fake.createSubscriptionRequestMutex.Lock()
	defer fake.createSubscriptionRequestMutex.Unlock()
	fake.CreateSubscriptionRequestStub = nil
	if fake.createSubscriptionRequestReturnsOnCall == nil {
		fake.createSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.CreateSubscriptionOutput
		})
	}
	fake.createSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.CreateSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateSubscriptionWithContext(arg1 context.Context, arg2 *shield.CreateSubscriptionInput, arg3 ...request.Option) (*shield.CreateSubscriptionOutput, error) {
	fake.createSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.createSubscriptionWithContextReturnsOnCall[len(fake.createSubscriptionWithContextArgsForCall)]
	fake.createSubscriptionWithContextArgsForCall = append(fake.createSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.CreateSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateSubscriptionWithContextStub
	fakeReturns := fake.createSubscriptionWithContextReturns
	fake.recordInvocation("CreateSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) CreateSubscriptionWithContextCallCount() int {
	fake.createSubscriptionWithContextMutex.RLock()
	defer fake.createSubscriptionWithContextMutex.RUnlock()
	return len(fake.createSubscriptionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) CreateSubscriptionWithContextCalls(stub func(context.Context, *shield.CreateSubscriptionInput, ...request.Option) (*shield.CreateSubscriptionOutput, error)) {
	fake.createSubscriptionWithContextMutex.Lock()
	defer fake.createSubscriptionWithContextMutex.Unlock()
	fake.CreateSubscriptionWithContextStub = stub
}

func (fake *FakeShieldAPI) CreateSubscriptionWithContextArgsForCall(i int) (context.Context, *shield.CreateSubscriptionInput, []request.Option) {
	fake.createSubscriptionWithContextMutex.RLock()
	defer fake.createSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.createSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) CreateSubscriptionWithContextReturns(result1 *shield.CreateSubscriptionOutput, result2 error) {
	fake.createSubscriptionWithContextMutex.Lock()
	defer fake.createSubscriptionWithContextMutex.Unlock()
	fake.CreateSubscriptionWithContextStub = nil
	fake.createSubscriptionWithContextReturns = struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) CreateSubscriptionWithContextReturnsOnCall(i int, result1 *shield.CreateSubscriptionOutput, result2 error) {
	fake.createSubscriptionWithContextMutex.Lock()
	defer fake.createSubscriptionWithContextMutex.Unlock()
	fake.CreateSubscriptionWithContextStub = nil
	if fake.createSubscriptionWithContextReturnsOnCall == nil {
		fake.createSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.CreateSubscriptionOutput
			result2 error
		})
	}
	fake.createSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *shield.CreateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteProtection(arg1 *shield.DeleteProtectionInput) (*shield.DeleteProtectionOutput, error) {
	fake.deleteProtectionMutex.Lock()
	ret, specificReturn := fake.deleteProtectionReturnsOnCall[len(fake.deleteProtectionArgsForCall)]
	fake.deleteProtectionArgsForCall = append(fake.deleteProtectionArgsForCall, struct {
		arg1 *shield.DeleteProtectionInput
	}{arg1})
	stub := fake.DeleteProtectionStub
	fakeReturns := fake.deleteProtectionReturns
	fake.recordInvocation("DeleteProtection", []interface{}{arg1})
	fake.deleteProtectionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DeleteProtectionCallCount() int {
	fake.deleteProtectionMutex.RLock()
	defer fake.deleteProtectionMutex.RUnlock()
	return len(fake.deleteProtectionArgsForCall)
}

func (fake *FakeShieldAPI) DeleteProtectionCalls(stub func(*shield.DeleteProtectionInput) (*shield.DeleteProtectionOutput, error)) {
	fake.deleteProtectionMutex.Lock()
	defer fake.deleteProtectionMutex.Unlock()
	fake.DeleteProtectionStub = stub
}

func (fake *FakeShieldAPI) DeleteProtectionArgsForCall(i int) *shield.DeleteProtectionInput {
	fake.deleteProtectionMutex.RLock()
	defer fake.deleteProtectionMutex.RUnlock()
	argsForCall := fake.deleteProtectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DeleteProtectionReturns(result1 *shield.DeleteProtectionOutput, result2 error) {
	fake.deleteProtectionMutex.Lock()
	defer fake.deleteProtectionMutex.Unlock()
	fake.DeleteProtectionStub = nil
	fake.deleteProtectionReturns = struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteProtectionReturnsOnCall(i int, result1 *shield.DeleteProtectionOutput, result2 error) {
	fake.deleteProtectionMutex.Lock()
	defer fake.deleteProtectionMutex.Unlock()
	fake.DeleteProtectionStub = nil
	if fake.deleteProtectionReturnsOnCall == nil {
		fake.deleteProtectionReturnsOnCall = make(map[int]struct {
			result1 *shield.DeleteProtectionOutput
			result2 error
		})
	}
	fake.deleteProtectionReturnsOnCall[i] = struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteProtectionRequest(arg1 *shield.DeleteProtectionInput) (*request.Request, *shield.DeleteProtectionOutput) {
	fake.deleteProtectionRequestMutex.Lock()
	ret, specificReturn := fake.deleteProtectionRequestReturnsOnCall[len(fake.deleteProtectionRequestArgsForCall)]
	fake.deleteProtectionRequestArgsForCall = append(fake.deleteProtectionRequestArgsForCall, struct {
		arg1 *shield.DeleteProtectionInput
	}{arg1})
	stub := fake.DeleteProtectionRequestStub
	fakeReturns := fake.deleteProtectionRequestReturns
	fake.recordInvocation("DeleteProtectionRequest", []interface{}{arg1})
	fake.deleteProtectionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DeleteProtectionRequestCallCount() int {
	fake.deleteProtectionRequestMutex.RLock()
	defer fake.deleteProtectionRequestMutex.RUnlock()
	return len(fake.deleteProtectionRequestArgsForCall)
}

func (fake *FakeShieldAPI) DeleteProtectionRequestCalls(stub func(*shield.DeleteProtectionInput) (*request.Request, *shield.DeleteProtectionOutput)) {
	fake.deleteProtectionRequestMutex.Lock()
	defer fake.deleteProtectionRequestMutex.Unlock()
	fake.DeleteProtectionRequestStub = stub
}

func (fake *FakeShieldAPI) DeleteProtectionRequestArgsForCall(i int) *shield.DeleteProtectionInput {
	fake.deleteProtectionRequestMutex.RLock()
	defer fake.deleteProtectionRequestMutex.RUnlock()
	argsForCall := fake.deleteProtectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DeleteProtectionRequestReturns(result1 *request.Request, result2 *shield.DeleteProtectionOutput) {
	fake.deleteProtectionRequestMutex.Lock()
	defer fake.deleteProtectionRequestMutex.Unlock()
	fake.DeleteProtectionRequestStub = nil
	fake.deleteProtectionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DeleteProtectionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteProtectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DeleteProtectionOutput) {
	fake.deleteProtectionRequestMutex.Lock()
	defer fake.deleteProtectionRequestMutex.Unlock()
	fake.DeleteProtectionRequestStub = nil
	if fake.deleteProtectionRequestReturnsOnCall == nil {
		fake.deleteProtectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DeleteProtectionOutput
		})
	}
	fake.deleteProtectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DeleteProtectionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteProtectionWithContext(arg1 context.Context, arg2 *shield.DeleteProtectionInput, arg3 ...request.Option) (*shield.DeleteProtectionOutput, error) {
	fake.deleteProtectionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteProtectionWithContextReturnsOnCall[len(fake.deleteProtectionWithContextArgsForCall)]
	fake.deleteProtectionWithContextArgsForCall = append(fake.deleteProtectionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DeleteProtectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteProtectionWithContextStub
	fakeReturns := fake.deleteProtectionWithContextReturns
	fake.recordInvocation("DeleteProtectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteProtectionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DeleteProtectionWithContextCallCount() int {
	fake.deleteProtectionWithContextMutex.RLock()
	defer fake.deleteProtectionWithContextMutex.RUnlock()
	return len(fake.deleteProtectionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DeleteProtectionWithContextCalls(stub func(context.Context, *shield.DeleteProtectionInput, ...request.Option) (*shield.DeleteProtectionOutput, error)) {
	fake.deleteProtectionWithContextMutex.Lock()
	defer fake.deleteProtectionWithContextMutex.Unlock()
	fake.DeleteProtectionWithContextStub = stub
}

func (fake *FakeShieldAPI) DeleteProtectionWithContextArgsForCall(i int) (context.Context, *shield.DeleteProtectionInput, []request.Option) {
	fake.deleteProtectionWithContextMutex.RLock()
	defer fake.deleteProtectionWithContextMutex.RUnlock()
	argsForCall := fake.deleteProtectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DeleteProtectionWithContextReturns(result1 *shield.DeleteProtectionOutput, result2 error) {
	fake.deleteProtectionWithContextMutex.Lock()
	defer fake.deleteProtectionWithContextMutex.Unlock()
	fake.DeleteProtectionWithContextStub = nil
	fake.deleteProtectionWithContextReturns = struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteProtectionWithContextReturnsOnCall(i int, result1 *shield.DeleteProtectionOutput, result2 error) {
	fake.deleteProtectionWithContextMutex.Lock()
	defer fake.deleteProtectionWithContextMutex.Unlock()
	fake.DeleteProtectionWithContextStub = nil
	if fake.deleteProtectionWithContextReturnsOnCall == nil {
		fake.deleteProtectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DeleteProtectionOutput
			result2 error
		})
	}
	fake.deleteProtectionWithContextReturnsOnCall[i] = struct {
		result1 *shield.DeleteProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteSubscription(arg1 *shield.DeleteSubscriptionInput) (*shield.DeleteSubscriptionOutput, error) {
	fake.deleteSubscriptionMutex.Lock()
	ret, specificReturn := fake.deleteSubscriptionReturnsOnCall[len(fake.deleteSubscriptionArgsForCall)]
	fake.deleteSubscriptionArgsForCall = append(fake.deleteSubscriptionArgsForCall, struct {
		arg1 *shield.DeleteSubscriptionInput
	}{arg1})
	stub := fake.DeleteSubscriptionStub
	fakeReturns := fake.deleteSubscriptionReturns
	fake.recordInvocation("DeleteSubscription", []interface{}{arg1})
	fake.deleteSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DeleteSubscriptionCallCount() int {
	fake.deleteSubscriptionMutex.RLock()
	defer fake.deleteSubscriptionMutex.RUnlock()
	return len(fake.deleteSubscriptionArgsForCall)
}

func (fake *FakeShieldAPI) DeleteSubscriptionCalls(stub func(*shield.DeleteSubscriptionInput) (*shield.DeleteSubscriptionOutput, error)) {
	fake.deleteSubscriptionMutex.Lock()
	defer fake.deleteSubscriptionMutex.Unlock()
	fake.DeleteSubscriptionStub = stub
}

func (fake *FakeShieldAPI) DeleteSubscriptionArgsForCall(i int) *shield.DeleteSubscriptionInput {
	fake.deleteSubscriptionMutex.RLock()
	defer fake.deleteSubscriptionMutex.RUnlock()
	argsForCall := fake.deleteSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DeleteSubscriptionReturns(result1 *shield.DeleteSubscriptionOutput, result2 error) {
	fake.deleteSubscriptionMutex.Lock()
	defer fake.deleteSubscriptionMutex.Unlock()
	fake.DeleteSubscriptionStub = nil
	fake.deleteSubscriptionReturns = struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteSubscriptionReturnsOnCall(i int, result1 *shield.DeleteSubscriptionOutput, result2 error) {
	fake.deleteSubscriptionMutex.Lock()
	defer fake.deleteSubscriptionMutex.Unlock()
	fake.DeleteSubscriptionStub = nil
	if fake.deleteSubscriptionReturnsOnCall == nil {
		fake.deleteSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *shield.DeleteSubscriptionOutput
			result2 error
		})
	}
	fake.deleteSubscriptionReturnsOnCall[i] = struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteSubscriptionRequest(arg1 *shield.DeleteSubscriptionInput) (*request.Request, *shield.DeleteSubscriptionOutput) {
	fake.deleteSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.deleteSubscriptionRequestReturnsOnCall[len(fake.deleteSubscriptionRequestArgsForCall)]
	fake.deleteSubscriptionRequestArgsForCall = append(fake.deleteSubscriptionRequestArgsForCall, struct {
		arg1 *shield.DeleteSubscriptionInput
	}{arg1})
	stub := fake.DeleteSubscriptionRequestStub
	fakeReturns := fake.deleteSubscriptionRequestReturns
	fake.recordInvocation("DeleteSubscriptionRequest", []interface{}{arg1})
	fake.deleteSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DeleteSubscriptionRequestCallCount() int {
	fake.deleteSubscriptionRequestMutex.RLock()
	defer fake.deleteSubscriptionRequestMutex.RUnlock()
	return len(fake.deleteSubscriptionRequestArgsForCall)
}

func (fake *FakeShieldAPI) DeleteSubscriptionRequestCalls(stub func(*shield.DeleteSubscriptionInput) (*request.Request, *shield.DeleteSubscriptionOutput)) {
	fake.deleteSubscriptionRequestMutex.Lock()
	defer fake.deleteSubscriptionRequestMutex.Unlock()
	fake.DeleteSubscriptionRequestStub = stub
}

func (fake *FakeShieldAPI) DeleteSubscriptionRequestArgsForCall(i int) *shield.DeleteSubscriptionInput {
	fake.deleteSubscriptionRequestMutex.RLock()
	defer fake.deleteSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.deleteSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DeleteSubscriptionRequestReturns(result1 *request.Request, result2 *shield.DeleteSubscriptionOutput) {
	fake.deleteSubscriptionRequestMutex.Lock()
	defer fake.deleteSubscriptionRequestMutex.Unlock()
	fake.DeleteSubscriptionRequestStub = nil
	fake.deleteSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DeleteSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DeleteSubscriptionOutput) {
	fake.deleteSubscriptionRequestMutex.Lock()
	defer fake.deleteSubscriptionRequestMutex.Unlock()
	fake.DeleteSubscriptionRequestStub = nil
	if fake.deleteSubscriptionRequestReturnsOnCall == nil {
		fake.deleteSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DeleteSubscriptionOutput
		})
	}
	fake.deleteSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DeleteSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteSubscriptionWithContext(arg1 context.Context, arg2 *shield.DeleteSubscriptionInput, arg3 ...request.Option) (*shield.DeleteSubscriptionOutput, error) {
	fake.deleteSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSubscriptionWithContextReturnsOnCall[len(fake.deleteSubscriptionWithContextArgsForCall)]
	fake.deleteSubscriptionWithContextArgsForCall = append(fake.deleteSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DeleteSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteSubscriptionWithContextStub
	fakeReturns := fake.deleteSubscriptionWithContextReturns
	fake.recordInvocation("DeleteSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DeleteSubscriptionWithContextCallCount() int {
	fake.deleteSubscriptionWithContextMutex.RLock()
	defer fake.deleteSubscriptionWithContextMutex.RUnlock()
	return len(fake.deleteSubscriptionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DeleteSubscriptionWithContextCalls(stub func(context.Context, *shield.DeleteSubscriptionInput, ...request.Option) (*shield.DeleteSubscriptionOutput, error)) {
	fake.deleteSubscriptionWithContextMutex.Lock()
	defer fake.deleteSubscriptionWithContextMutex.Unlock()
	fake.DeleteSubscriptionWithContextStub = stub
}

func (fake *FakeShieldAPI) DeleteSubscriptionWithContextArgsForCall(i int) (context.Context, *shield.DeleteSubscriptionInput, []request.Option) {
	fake.deleteSubscriptionWithContextMutex.RLock()
	defer fake.deleteSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.deleteSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DeleteSubscriptionWithContextReturns(result1 *shield.DeleteSubscriptionOutput, result2 error) {
	fake.deleteSubscriptionWithContextMutex.Lock()
	defer fake.deleteSubscriptionWithContextMutex.Unlock()
	fake.DeleteSubscriptionWithContextStub = nil
	fake.deleteSubscriptionWithContextReturns = struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DeleteSubscriptionWithContextReturnsOnCall(i int, result1 *shield.DeleteSubscriptionOutput, result2 error) {
	fake.deleteSubscriptionWithContextMutex.Lock()
	defer fake.deleteSubscriptionWithContextMutex.Unlock()
	fake.DeleteSubscriptionWithContextStub = nil
	if fake.deleteSubscriptionWithContextReturnsOnCall == nil {
		fake.deleteSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DeleteSubscriptionOutput
			result2 error
		})
	}
	fake.deleteSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *shield.DeleteSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeAttack(arg1 *shield.DescribeAttackInput) (*shield.DescribeAttackOutput, error) {
	fake.describeAttackMutex.Lock()
	ret, specificReturn := fake.describeAttackReturnsOnCall[len(fake.describeAttackArgsForCall)]
	fake.describeAttackArgsForCall = append(fake.describeAttackArgsForCall, struct {
		arg1 *shield.DescribeAttackInput
	}{arg1})
	stub := fake.DescribeAttackStub
	fakeReturns := fake.describeAttackReturns
	fake.recordInvocation("DescribeAttack", []interface{}{arg1})
	fake.describeAttackMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeAttackCallCount() int {
	fake.describeAttackMutex.RLock()
	defer fake.describeAttackMutex.RUnlock()
	return len(fake.describeAttackArgsForCall)
}

func (fake *FakeShieldAPI) DescribeAttackCalls(stub func(*shield.DescribeAttackInput) (*shield.DescribeAttackOutput, error)) {
	fake.describeAttackMutex.Lock()
	defer fake.describeAttackMutex.Unlock()
	fake.DescribeAttackStub = stub
}

func (fake *FakeShieldAPI) DescribeAttackArgsForCall(i int) *shield.DescribeAttackInput {
	fake.describeAttackMutex.RLock()
	defer fake.describeAttackMutex.RUnlock()
	argsForCall := fake.describeAttackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeAttackReturns(result1 *shield.DescribeAttackOutput, result2 error) {
	fake.describeAttackMutex.Lock()
	defer fake.describeAttackMutex.Unlock()
	fake.DescribeAttackStub = nil
	fake.describeAttackReturns = struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeAttackReturnsOnCall(i int, result1 *shield.DescribeAttackOutput, result2 error) {
	fake.describeAttackMutex.Lock()
	defer fake.describeAttackMutex.Unlock()
	fake.DescribeAttackStub = nil
	if fake.describeAttackReturnsOnCall == nil {
		fake.describeAttackReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeAttackOutput
			result2 error
		})
	}
	fake.describeAttackReturnsOnCall[i] = struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeAttackRequest(arg1 *shield.DescribeAttackInput) (*request.Request, *shield.DescribeAttackOutput) {
	fake.describeAttackRequestMutex.Lock()
	ret, specificReturn := fake.describeAttackRequestReturnsOnCall[len(fake.describeAttackRequestArgsForCall)]
	fake.describeAttackRequestArgsForCall = append(fake.describeAttackRequestArgsForCall, struct {
		arg1 *shield.DescribeAttackInput
	}{arg1})
	stub := fake.DescribeAttackRequestStub
	fakeReturns := fake.describeAttackRequestReturns
	fake.recordInvocation("DescribeAttackRequest", []interface{}{arg1})
	fake.describeAttackRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeAttackRequestCallCount() int {
	fake.describeAttackRequestMutex.RLock()
	defer fake.describeAttackRequestMutex.RUnlock()
	return len(fake.describeAttackRequestArgsForCall)
}

func (fake *FakeShieldAPI) DescribeAttackRequestCalls(stub func(*shield.DescribeAttackInput) (*request.Request, *shield.DescribeAttackOutput)) {
	fake.describeAttackRequestMutex.Lock()
	defer fake.describeAttackRequestMutex.Unlock()
	fake.DescribeAttackRequestStub = stub
}

func (fake *FakeShieldAPI) DescribeAttackRequestArgsForCall(i int) *shield.DescribeAttackInput {
	fake.describeAttackRequestMutex.RLock()
	defer fake.describeAttackRequestMutex.RUnlock()
	argsForCall := fake.describeAttackRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeAttackRequestReturns(result1 *request.Request, result2 *shield.DescribeAttackOutput) {
	fake.describeAttackRequestMutex.Lock()
	defer fake.describeAttackRequestMutex.Unlock()
	fake.DescribeAttackRequestStub = nil
	fake.describeAttackRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DescribeAttackOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeAttackRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DescribeAttackOutput) {
	fake.describeAttackRequestMutex.Lock()
	defer fake.describeAttackRequestMutex.Unlock()
	fake.DescribeAttackRequestStub = nil
	if fake.describeAttackRequestReturnsOnCall == nil {
		fake.describeAttackRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DescribeAttackOutput
		})
	}
	fake.describeAttackRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DescribeAttackOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeAttackWithContext(arg1 context.Context, arg2 *shield.DescribeAttackInput, arg3 ...request.Option) (*shield.DescribeAttackOutput, error) {
	fake.describeAttackWithContextMutex.Lock()
	ret, specificReturn := fake.describeAttackWithContextReturnsOnCall[len(fake.describeAttackWithContextArgsForCall)]
	fake.describeAttackWithContextArgsForCall = append(fake.describeAttackWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DescribeAttackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAttackWithContextStub
	fakeReturns := fake.describeAttackWithContextReturns
	fake.recordInvocation("DescribeAttackWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAttackWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeAttackWithContextCallCount() int {
	fake.describeAttackWithContextMutex.RLock()
	defer fake.describeAttackWithContextMutex.RUnlock()
	return len(fake.describeAttackWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DescribeAttackWithContextCalls(stub func(context.Context, *shield.DescribeAttackInput, ...request.Option) (*shield.DescribeAttackOutput, error)) {
	fake.describeAttackWithContextMutex.Lock()
	defer fake.describeAttackWithContextMutex.Unlock()
	fake.DescribeAttackWithContextStub = stub
}

func (fake *FakeShieldAPI) DescribeAttackWithContextArgsForCall(i int) (context.Context, *shield.DescribeAttackInput, []request.Option) {
	fake.describeAttackWithContextMutex.RLock()
	defer fake.describeAttackWithContextMutex.RUnlock()
	argsForCall := fake.describeAttackWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DescribeAttackWithContextReturns(result1 *shield.DescribeAttackOutput, result2 error) {
	fake.describeAttackWithContextMutex.Lock()
	defer fake.describeAttackWithContextMutex.Unlock()
	fake.DescribeAttackWithContextStub = nil
	fake.describeAttackWithContextReturns = struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeAttackWithContextReturnsOnCall(i int, result1 *shield.DescribeAttackOutput, result2 error) {
	fake.describeAttackWithContextMutex.Lock()
	defer fake.describeAttackWithContextMutex.Unlock()
	fake.DescribeAttackWithContextStub = nil
	if fake.describeAttackWithContextReturnsOnCall == nil {
		fake.describeAttackWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeAttackOutput
			result2 error
		})
	}
	fake.describeAttackWithContextReturnsOnCall[i] = struct {
		result1 *shield.DescribeAttackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeDRTAccess(arg1 *shield.DescribeDRTAccessInput) (*shield.DescribeDRTAccessOutput, error) {
	fake.describeDRTAccessMutex.Lock()
	ret, specificReturn := fake.describeDRTAccessReturnsOnCall[len(fake.describeDRTAccessArgsForCall)]
	fake.describeDRTAccessArgsForCall = append(fake.describeDRTAccessArgsForCall, struct {
		arg1 *shield.DescribeDRTAccessInput
	}{arg1})
	stub := fake.DescribeDRTAccessStub
	fakeReturns := fake.describeDRTAccessReturns
	fake.recordInvocation("DescribeDRTAccess", []interface{}{arg1})
	fake.describeDRTAccessMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeDRTAccessCallCount() int {
	fake.describeDRTAccessMutex.RLock()
	defer fake.describeDRTAccessMutex.RUnlock()
	return len(fake.describeDRTAccessArgsForCall)
}

func (fake *FakeShieldAPI) DescribeDRTAccessCalls(stub func(*shield.DescribeDRTAccessInput) (*shield.DescribeDRTAccessOutput, error)) {
	fake.describeDRTAccessMutex.Lock()
	defer fake.describeDRTAccessMutex.Unlock()
	fake.DescribeDRTAccessStub = stub
}

func (fake *FakeShieldAPI) DescribeDRTAccessArgsForCall(i int) *shield.DescribeDRTAccessInput {
	fake.describeDRTAccessMutex.RLock()
	defer fake.describeDRTAccessMutex.RUnlock()
	argsForCall := fake.describeDRTAccessArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeDRTAccessReturns(result1 *shield.DescribeDRTAccessOutput, result2 error) {
	fake.describeDRTAccessMutex.Lock()
	defer fake.describeDRTAccessMutex.Unlock()
	fake.DescribeDRTAccessStub = nil
	fake.describeDRTAccessReturns = struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeDRTAccessReturnsOnCall(i int, result1 *shield.DescribeDRTAccessOutput, result2 error) {
	fake.describeDRTAccessMutex.Lock()
	defer fake.describeDRTAccessMutex.Unlock()
	fake.DescribeDRTAccessStub = nil
	if fake.describeDRTAccessReturnsOnCall == nil {
		fake.describeDRTAccessReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeDRTAccessOutput
			result2 error
		})
	}
	fake.describeDRTAccessReturnsOnCall[i] = struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeDRTAccessRequest(arg1 *shield.DescribeDRTAccessInput) (*request.Request, *shield.DescribeDRTAccessOutput) {
	fake.describeDRTAccessRequestMutex.Lock()
	ret, specificReturn := fake.describeDRTAccessRequestReturnsOnCall[len(fake.describeDRTAccessRequestArgsForCall)]
	fake.describeDRTAccessRequestArgsForCall = append(fake.describeDRTAccessRequestArgsForCall, struct {
		arg1 *shield.DescribeDRTAccessInput
	}{arg1})
	stub := fake.DescribeDRTAccessRequestStub
	fakeReturns := fake.describeDRTAccessRequestReturns
	fake.recordInvocation("DescribeDRTAccessRequest", []interface{}{arg1})
	fake.describeDRTAccessRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeDRTAccessRequestCallCount() int {
	fake.describeDRTAccessRequestMutex.RLock()
	defer fake.describeDRTAccessRequestMutex.RUnlock()
	return len(fake.describeDRTAccessRequestArgsForCall)
}

func (fake *FakeShieldAPI) DescribeDRTAccessRequestCalls(stub func(*shield.DescribeDRTAccessInput) (*request.Request, *shield.DescribeDRTAccessOutput)) {
	fake.describeDRTAccessRequestMutex.Lock()
	defer fake.describeDRTAccessRequestMutex.Unlock()
	fake.DescribeDRTAccessRequestStub = stub
}

func (fake *FakeShieldAPI) DescribeDRTAccessRequestArgsForCall(i int) *shield.DescribeDRTAccessInput {
	fake.describeDRTAccessRequestMutex.RLock()
	defer fake.describeDRTAccessRequestMutex.RUnlock()
	argsForCall := fake.describeDRTAccessRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeDRTAccessRequestReturns(result1 *request.Request, result2 *shield.DescribeDRTAccessOutput) {
	fake.describeDRTAccessRequestMutex.Lock()
	defer fake.describeDRTAccessRequestMutex.Unlock()
	fake.DescribeDRTAccessRequestStub = nil
	fake.describeDRTAccessRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DescribeDRTAccessOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeDRTAccessRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DescribeDRTAccessOutput) {
	fake.describeDRTAccessRequestMutex.Lock()
	defer fake.describeDRTAccessRequestMutex.Unlock()
	fake.DescribeDRTAccessRequestStub = nil
	if fake.describeDRTAccessRequestReturnsOnCall == nil {
		fake.describeDRTAccessRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DescribeDRTAccessOutput
		})
	}
	fake.describeDRTAccessRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DescribeDRTAccessOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeDRTAccessWithContext(arg1 context.Context, arg2 *shield.DescribeDRTAccessInput, arg3 ...request.Option) (*shield.DescribeDRTAccessOutput, error) {
	fake.describeDRTAccessWithContextMutex.Lock()
	ret, specificReturn := fake.describeDRTAccessWithContextReturnsOnCall[len(fake.describeDRTAccessWithContextArgsForCall)]
	fake.describeDRTAccessWithContextArgsForCall = append(fake.describeDRTAccessWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DescribeDRTAccessInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDRTAccessWithContextStub
	fakeReturns := fake.describeDRTAccessWithContextReturns
	fake.recordInvocation("DescribeDRTAccessWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDRTAccessWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeDRTAccessWithContextCallCount() int {
	fake.describeDRTAccessWithContextMutex.RLock()
	defer fake.describeDRTAccessWithContextMutex.RUnlock()
	return len(fake.describeDRTAccessWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DescribeDRTAccessWithContextCalls(stub func(context.Context, *shield.DescribeDRTAccessInput, ...request.Option) (*shield.DescribeDRTAccessOutput, error)) {
	fake.describeDRTAccessWithContextMutex.Lock()
	defer fake.describeDRTAccessWithContextMutex.Unlock()
	fake.DescribeDRTAccessWithContextStub = stub
}

func (fake *FakeShieldAPI) DescribeDRTAccessWithContextArgsForCall(i int) (context.Context, *shield.DescribeDRTAccessInput, []request.Option) {
	fake.describeDRTAccessWithContextMutex.RLock()
	defer fake.describeDRTAccessWithContextMutex.RUnlock()
	argsForCall := fake.describeDRTAccessWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DescribeDRTAccessWithContextReturns(result1 *shield.DescribeDRTAccessOutput, result2 error) {
	fake.describeDRTAccessWithContextMutex.Lock()
	defer fake.describeDRTAccessWithContextMutex.Unlock()
	fake.DescribeDRTAccessWithContextStub = nil
	fake.describeDRTAccessWithContextReturns = struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeDRTAccessWithContextReturnsOnCall(i int, result1 *shield.DescribeDRTAccessOutput, result2 error) {
	fake.describeDRTAccessWithContextMutex.Lock()
	defer fake.describeDRTAccessWithContextMutex.Unlock()
	fake.DescribeDRTAccessWithContextStub = nil
	if fake.describeDRTAccessWithContextReturnsOnCall == nil {
		fake.describeDRTAccessWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeDRTAccessOutput
			result2 error
		})
	}
	fake.describeDRTAccessWithContextReturnsOnCall[i] = struct {
		result1 *shield.DescribeDRTAccessOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettings(arg1 *shield.DescribeEmergencyContactSettingsInput) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	fake.describeEmergencyContactSettingsMutex.Lock()
	ret, specificReturn := fake.describeEmergencyContactSettingsReturnsOnCall[len(fake.describeEmergencyContactSettingsArgsForCall)]
	fake.describeEmergencyContactSettingsArgsForCall = append(fake.describeEmergencyContactSettingsArgsForCall, struct {
		arg1 *shield.DescribeEmergencyContactSettingsInput
	}{arg1})
	stub := fake.DescribeEmergencyContactSettingsStub
	fakeReturns := fake.describeEmergencyContactSettingsReturns
	fake.recordInvocation("DescribeEmergencyContactSettings", []interface{}{arg1})
	fake.describeEmergencyContactSettingsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsCallCount() int {
	fake.describeEmergencyContactSettingsMutex.RLock()
	defer fake.describeEmergencyContactSettingsMutex.RUnlock()
	return len(fake.describeEmergencyContactSettingsArgsForCall)
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsCalls(stub func(*shield.DescribeEmergencyContactSettingsInput) (*shield.DescribeEmergencyContactSettingsOutput, error)) {
	fake.describeEmergencyContactSettingsMutex.Lock()
	defer fake.describeEmergencyContactSettingsMutex.Unlock()
	fake.DescribeEmergencyContactSettingsStub = stub
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsArgsForCall(i int) *shield.DescribeEmergencyContactSettingsInput {
	fake.describeEmergencyContactSettingsMutex.RLock()
	defer fake.describeEmergencyContactSettingsMutex.RUnlock()
	argsForCall := fake.describeEmergencyContactSettingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsReturns(result1 *shield.DescribeEmergencyContactSettingsOutput, result2 error) {
	fake.describeEmergencyContactSettingsMutex.Lock()
	defer fake.describeEmergencyContactSettingsMutex.Unlock()
	fake.DescribeEmergencyContactSettingsStub = nil
	fake.describeEmergencyContactSettingsReturns = struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsReturnsOnCall(i int, result1 *shield.DescribeEmergencyContactSettingsOutput, result2 error) {
	fake.describeEmergencyContactSettingsMutex.Lock()
	defer fake.describeEmergencyContactSettingsMutex.Unlock()
	fake.DescribeEmergencyContactSettingsStub = nil
	if fake.describeEmergencyContactSettingsReturnsOnCall == nil {
		fake.describeEmergencyContactSettingsReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeEmergencyContactSettingsOutput
			result2 error
		})
	}
	fake.describeEmergencyContactSettingsReturnsOnCall[i] = struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsRequest(arg1 *shield.DescribeEmergencyContactSettingsInput) (*request.Request, *shield.DescribeEmergencyContactSettingsOutput) {
	fake.describeEmergencyContactSettingsRequestMutex.Lock()
	ret, specificReturn := fake.describeEmergencyContactSettingsRequestReturnsOnCall[len(fake.describeEmergencyContactSettingsRequestArgsForCall)]
	fake.describeEmergencyContactSettingsRequestArgsForCall = append(fake.describeEmergencyContactSettingsRequestArgsForCall, struct {
		arg1 *shield.DescribeEmergencyContactSettingsInput
	}{arg1})
	stub := fake.DescribeEmergencyContactSettingsRequestStub
	fakeReturns := fake.describeEmergencyContactSettingsRequestReturns
	fake.recordInvocation("DescribeEmergencyContactSettingsRequest", []interface{}{arg1})
	fake.describeEmergencyContactSettingsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsRequestCallCount() int {
	fake.describeEmergencyContactSettingsRequestMutex.RLock()
	defer fake.describeEmergencyContactSettingsRequestMutex.RUnlock()
	return len(fake.describeEmergencyContactSettingsRequestArgsForCall)
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsRequestCalls(stub func(*shield.DescribeEmergencyContactSettingsInput) (*request.Request, *shield.DescribeEmergencyContactSettingsOutput)) {
	fake.describeEmergencyContactSettingsRequestMutex.Lock()
	defer fake.describeEmergencyContactSettingsRequestMutex.Unlock()
	fake.DescribeEmergencyContactSettingsRequestStub = stub
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsRequestArgsForCall(i int) *shield.DescribeEmergencyContactSettingsInput {
	fake.describeEmergencyContactSettingsRequestMutex.RLock()
	defer fake.describeEmergencyContactSettingsRequestMutex.RUnlock()
	argsForCall := fake.describeEmergencyContactSettingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsRequestReturns(result1 *request.Request, result2 *shield.DescribeEmergencyContactSettingsOutput) {
	fake.describeEmergencyContactSettingsRequestMutex.Lock()
	defer fake.describeEmergencyContactSettingsRequestMutex.Unlock()
	fake.DescribeEmergencyContactSettingsRequestStub = nil
	fake.describeEmergencyContactSettingsRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DescribeEmergencyContactSettingsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DescribeEmergencyContactSettingsOutput) {
	fake.describeEmergencyContactSettingsRequestMutex.Lock()
	defer fake.describeEmergencyContactSettingsRequestMutex.Unlock()
	fake.DescribeEmergencyContactSettingsRequestStub = nil
	if fake.describeEmergencyContactSettingsRequestReturnsOnCall == nil {
		fake.describeEmergencyContactSettingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DescribeEmergencyContactSettingsOutput
		})
	}
	fake.describeEmergencyContactSettingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DescribeEmergencyContactSettingsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsWithContext(arg1 context.Context, arg2 *shield.DescribeEmergencyContactSettingsInput, arg3 ...request.Option) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	fake.describeEmergencyContactSettingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEmergencyContactSettingsWithContextReturnsOnCall[len(fake.describeEmergencyContactSettingsWithContextArgsForCall)]
	fake.describeEmergencyContactSettingsWithContextArgsForCall = append(fake.describeEmergencyContactSettingsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DescribeEmergencyContactSettingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEmergencyContactSettingsWithContextStub
	fakeReturns := fake.describeEmergencyContactSettingsWithContextReturns
	fake.recordInvocation("DescribeEmergencyContactSettingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEmergencyContactSettingsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsWithContextCallCount() int {
	fake.describeEmergencyContactSettingsWithContextMutex.RLock()
	defer fake.describeEmergencyContactSettingsWithContextMutex.RUnlock()
	return len(fake.describeEmergencyContactSettingsWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsWithContextCalls(stub func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...request.Option) (*shield.DescribeEmergencyContactSettingsOutput, error)) {
	fake.describeEmergencyContactSettingsWithContextMutex.Lock()
	defer fake.describeEmergencyContactSettingsWithContextMutex.Unlock()
	fake.DescribeEmergencyContactSettingsWithContextStub = stub
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsWithContextArgsForCall(i int) (context.Context, *shield.DescribeEmergencyContactSettingsInput, []request.Option) {
	fake.describeEmergencyContactSettingsWithContextMutex.RLock()
	defer fake.describeEmergencyContactSettingsWithContextMutex.RUnlock()
	argsForCall := fake.describeEmergencyContactSettingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsWithContextReturns(result1 *shield.DescribeEmergencyContactSettingsOutput, result2 error) {
	fake.describeEmergencyContactSettingsWithContextMutex.Lock()
	defer fake.describeEmergencyContactSettingsWithContextMutex.Unlock()
	fake.DescribeEmergencyContactSettingsWithContextStub = nil
	fake.describeEmergencyContactSettingsWithContextReturns = struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeEmergencyContactSettingsWithContextReturnsOnCall(i int, result1 *shield.DescribeEmergencyContactSettingsOutput, result2 error) {
	fake.describeEmergencyContactSettingsWithContextMutex.Lock()
	defer fake.describeEmergencyContactSettingsWithContextMutex.Unlock()
	fake.DescribeEmergencyContactSettingsWithContextStub = nil
	if fake.describeEmergencyContactSettingsWithContextReturnsOnCall == nil {
		fake.describeEmergencyContactSettingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeEmergencyContactSettingsOutput
			result2 error
		})
	}
	fake.describeEmergencyContactSettingsWithContextReturnsOnCall[i] = struct {
		result1 *shield.DescribeEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeProtection(arg1 *shield.DescribeProtectionInput) (*shield.DescribeProtectionOutput, error) {
	fake.describeProtectionMutex.Lock()
	ret, specificReturn := fake.describeProtectionReturnsOnCall[len(fake.describeProtectionArgsForCall)]
	fake.describeProtectionArgsForCall = append(fake.describeProtectionArgsForCall, struct {
		arg1 *shield.DescribeProtectionInput
	}{arg1})
	stub := fake.DescribeProtectionStub
	fakeReturns := fake.describeProtectionReturns
	fake.recordInvocation("DescribeProtection", []interface{}{arg1})
	fake.describeProtectionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeProtectionCallCount() int {
	fake.describeProtectionMutex.RLock()
	defer fake.describeProtectionMutex.RUnlock()
	return len(fake.describeProtectionArgsForCall)
}

func (fake *FakeShieldAPI) DescribeProtectionCalls(stub func(*shield.DescribeProtectionInput) (*shield.DescribeProtectionOutput, error)) {
	fake.describeProtectionMutex.Lock()
	defer fake.describeProtectionMutex.Unlock()
	fake.DescribeProtectionStub = stub
}

func (fake *FakeShieldAPI) DescribeProtectionArgsForCall(i int) *shield.DescribeProtectionInput {
	fake.describeProtectionMutex.RLock()
	defer fake.describeProtectionMutex.RUnlock()
	argsForCall := fake.describeProtectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeProtectionReturns(result1 *shield.DescribeProtectionOutput, result2 error) {
	fake.describeProtectionMutex.Lock()
	defer fake.describeProtectionMutex.Unlock()
	fake.DescribeProtectionStub = nil
	fake.describeProtectionReturns = struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeProtectionReturnsOnCall(i int, result1 *shield.DescribeProtectionOutput, result2 error) {
	fake.describeProtectionMutex.Lock()
	defer fake.describeProtectionMutex.Unlock()
	fake.DescribeProtectionStub = nil
	if fake.describeProtectionReturnsOnCall == nil {
		fake.describeProtectionReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeProtectionOutput
			result2 error
		})
	}
	fake.describeProtectionReturnsOnCall[i] = struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeProtectionRequest(arg1 *shield.DescribeProtectionInput) (*request.Request, *shield.DescribeProtectionOutput) {
	fake.describeProtectionRequestMutex.Lock()
	ret, specificReturn := fake.describeProtectionRequestReturnsOnCall[len(fake.describeProtectionRequestArgsForCall)]
	fake.describeProtectionRequestArgsForCall = append(fake.describeProtectionRequestArgsForCall, struct {
		arg1 *shield.DescribeProtectionInput
	}{arg1})
	stub := fake.DescribeProtectionRequestStub
	fakeReturns := fake.describeProtectionRequestReturns
	fake.recordInvocation("DescribeProtectionRequest", []interface{}{arg1})
	fake.describeProtectionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeProtectionRequestCallCount() int {
	fake.describeProtectionRequestMutex.RLock()
	defer fake.describeProtectionRequestMutex.RUnlock()
	return len(fake.describeProtectionRequestArgsForCall)
}

func (fake *FakeShieldAPI) DescribeProtectionRequestCalls(stub func(*shield.DescribeProtectionInput) (*request.Request, *shield.DescribeProtectionOutput)) {
	fake.describeProtectionRequestMutex.Lock()
	defer fake.describeProtectionRequestMutex.Unlock()
	fake.DescribeProtectionRequestStub = stub
}

func (fake *FakeShieldAPI) DescribeProtectionRequestArgsForCall(i int) *shield.DescribeProtectionInput {
	fake.describeProtectionRequestMutex.RLock()
	defer fake.describeProtectionRequestMutex.RUnlock()
	argsForCall := fake.describeProtectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeProtectionRequestReturns(result1 *request.Request, result2 *shield.DescribeProtectionOutput) {
	fake.describeProtectionRequestMutex.Lock()
	defer fake.describeProtectionRequestMutex.Unlock()
	fake.DescribeProtectionRequestStub = nil
	fake.describeProtectionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DescribeProtectionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeProtectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DescribeProtectionOutput) {
	fake.describeProtectionRequestMutex.Lock()
	defer fake.describeProtectionRequestMutex.Unlock()
	fake.DescribeProtectionRequestStub = nil
	if fake.describeProtectionRequestReturnsOnCall == nil {
		fake.describeProtectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DescribeProtectionOutput
		})
	}
	fake.describeProtectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DescribeProtectionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeProtectionWithContext(arg1 context.Context, arg2 *shield.DescribeProtectionInput, arg3 ...request.Option) (*shield.DescribeProtectionOutput, error) {
	fake.describeProtectionWithContextMutex.Lock()
	ret, specificReturn := fake.describeProtectionWithContextReturnsOnCall[len(fake.describeProtectionWithContextArgsForCall)]
	fake.describeProtectionWithContextArgsForCall = append(fake.describeProtectionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DescribeProtectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeProtectionWithContextStub
	fakeReturns := fake.describeProtectionWithContextReturns
	fake.recordInvocation("DescribeProtectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeProtectionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeProtectionWithContextCallCount() int {
	fake.describeProtectionWithContextMutex.RLock()
	defer fake.describeProtectionWithContextMutex.RUnlock()
	return len(fake.describeProtectionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DescribeProtectionWithContextCalls(stub func(context.Context, *shield.DescribeProtectionInput, ...request.Option) (*shield.DescribeProtectionOutput, error)) {
	fake.describeProtectionWithContextMutex.Lock()
	defer fake.describeProtectionWithContextMutex.Unlock()
	fake.DescribeProtectionWithContextStub = stub
}

func (fake *FakeShieldAPI) DescribeProtectionWithContextArgsForCall(i int) (context.Context, *shield.DescribeProtectionInput, []request.Option) {
	fake.describeProtectionWithContextMutex.RLock()
	defer fake.describeProtectionWithContextMutex.RUnlock()
	argsForCall := fake.describeProtectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DescribeProtectionWithContextReturns(result1 *shield.DescribeProtectionOutput, result2 error) {
	fake.describeProtectionWithContextMutex.Lock()
	defer fake.describeProtectionWithContextMutex.Unlock()
	fake.DescribeProtectionWithContextStub = nil
	fake.describeProtectionWithContextReturns = struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeProtectionWithContextReturnsOnCall(i int, result1 *shield.DescribeProtectionOutput, result2 error) {
	fake.describeProtectionWithContextMutex.Lock()
	defer fake.describeProtectionWithContextMutex.Unlock()
	fake.DescribeProtectionWithContextStub = nil
	if fake.describeProtectionWithContextReturnsOnCall == nil {
		fake.describeProtectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeProtectionOutput
			result2 error
		})
	}
	fake.describeProtectionWithContextReturnsOnCall[i] = struct {
		result1 *shield.DescribeProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeSubscription(arg1 *shield.DescribeSubscriptionInput) (*shield.DescribeSubscriptionOutput, error) {
	fake.describeSubscriptionMutex.Lock()
	ret, specificReturn := fake.describeSubscriptionReturnsOnCall[len(fake.describeSubscriptionArgsForCall)]
	fake.describeSubscriptionArgsForCall = append(fake.describeSubscriptionArgsForCall, struct {
		arg1 *shield.DescribeSubscriptionInput
	}{arg1})
	stub := fake.DescribeSubscriptionStub
	fakeReturns := fake.describeSubscriptionReturns
	fake.recordInvocation("DescribeSubscription", []interface{}{arg1})
	fake.describeSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeSubscriptionCallCount() int {
	fake.describeSubscriptionMutex.RLock()
	defer fake.describeSubscriptionMutex.RUnlock()
	return len(fake.describeSubscriptionArgsForCall)
}

func (fake *FakeShieldAPI) DescribeSubscriptionCalls(stub func(*shield.DescribeSubscriptionInput) (*shield.DescribeSubscriptionOutput, error)) {
	fake.describeSubscriptionMutex.Lock()
	defer fake.describeSubscriptionMutex.Unlock()
	fake.DescribeSubscriptionStub = stub
}

func (fake *FakeShieldAPI) DescribeSubscriptionArgsForCall(i int) *shield.DescribeSubscriptionInput {
	fake.describeSubscriptionMutex.RLock()
	defer fake.describeSubscriptionMutex.RUnlock()
	argsForCall := fake.describeSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeSubscriptionReturns(result1 *shield.DescribeSubscriptionOutput, result2 error) {
	fake.describeSubscriptionMutex.Lock()
	defer fake.describeSubscriptionMutex.Unlock()
	fake.DescribeSubscriptionStub = nil
	fake.describeSubscriptionReturns = struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeSubscriptionReturnsOnCall(i int, result1 *shield.DescribeSubscriptionOutput, result2 error) {
	fake.describeSubscriptionMutex.Lock()
	defer fake.describeSubscriptionMutex.Unlock()
	fake.DescribeSubscriptionStub = nil
	if fake.describeSubscriptionReturnsOnCall == nil {
		fake.describeSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeSubscriptionOutput
			result2 error
		})
	}
	fake.describeSubscriptionReturnsOnCall[i] = struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeSubscriptionRequest(arg1 *shield.DescribeSubscriptionInput) (*request.Request, *shield.DescribeSubscriptionOutput) {
	fake.describeSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.describeSubscriptionRequestReturnsOnCall[len(fake.describeSubscriptionRequestArgsForCall)]
	fake.describeSubscriptionRequestArgsForCall = append(fake.describeSubscriptionRequestArgsForCall, struct {
		arg1 *shield.DescribeSubscriptionInput
	}{arg1})
	stub := fake.DescribeSubscriptionRequestStub
	fakeReturns := fake.describeSubscriptionRequestReturns
	fake.recordInvocation("DescribeSubscriptionRequest", []interface{}{arg1})
	fake.describeSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeSubscriptionRequestCallCount() int {
	fake.describeSubscriptionRequestMutex.RLock()
	defer fake.describeSubscriptionRequestMutex.RUnlock()
	return len(fake.describeSubscriptionRequestArgsForCall)
}

func (fake *FakeShieldAPI) DescribeSubscriptionRequestCalls(stub func(*shield.DescribeSubscriptionInput) (*request.Request, *shield.DescribeSubscriptionOutput)) {
	fake.describeSubscriptionRequestMutex.Lock()
	defer fake.describeSubscriptionRequestMutex.Unlock()
	fake.DescribeSubscriptionRequestStub = stub
}

func (fake *FakeShieldAPI) DescribeSubscriptionRequestArgsForCall(i int) *shield.DescribeSubscriptionInput {
	fake.describeSubscriptionRequestMutex.RLock()
	defer fake.describeSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.describeSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DescribeSubscriptionRequestReturns(result1 *request.Request, result2 *shield.DescribeSubscriptionOutput) {
	fake.describeSubscriptionRequestMutex.Lock()
	defer fake.describeSubscriptionRequestMutex.Unlock()
	fake.DescribeSubscriptionRequestStub = nil
	fake.describeSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DescribeSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DescribeSubscriptionOutput) {
	fake.describeSubscriptionRequestMutex.Lock()
	defer fake.describeSubscriptionRequestMutex.Unlock()
	fake.DescribeSubscriptionRequestStub = nil
	if fake.describeSubscriptionRequestReturnsOnCall == nil {
		fake.describeSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DescribeSubscriptionOutput
		})
	}
	fake.describeSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DescribeSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeSubscriptionWithContext(arg1 context.Context, arg2 *shield.DescribeSubscriptionInput, arg3 ...request.Option) (*shield.DescribeSubscriptionOutput, error) {
	fake.describeSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.describeSubscriptionWithContextReturnsOnCall[len(fake.describeSubscriptionWithContextArgsForCall)]
	fake.describeSubscriptionWithContextArgsForCall = append(fake.describeSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DescribeSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeSubscriptionWithContextStub
	fakeReturns := fake.describeSubscriptionWithContextReturns
	fake.recordInvocation("DescribeSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DescribeSubscriptionWithContextCallCount() int {
	fake.describeSubscriptionWithContextMutex.RLock()
	defer fake.describeSubscriptionWithContextMutex.RUnlock()
	return len(fake.describeSubscriptionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DescribeSubscriptionWithContextCalls(stub func(context.Context, *shield.DescribeSubscriptionInput, ...request.Option) (*shield.DescribeSubscriptionOutput, error)) {
	fake.describeSubscriptionWithContextMutex.Lock()
	defer fake.describeSubscriptionWithContextMutex.Unlock()
	fake.DescribeSubscriptionWithContextStub = stub
}

func (fake *FakeShieldAPI) DescribeSubscriptionWithContextArgsForCall(i int) (context.Context, *shield.DescribeSubscriptionInput, []request.Option) {
	fake.describeSubscriptionWithContextMutex.RLock()
	defer fake.describeSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.describeSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DescribeSubscriptionWithContextReturns(result1 *shield.DescribeSubscriptionOutput, result2 error) {
	fake.describeSubscriptionWithContextMutex.Lock()
	defer fake.describeSubscriptionWithContextMutex.Unlock()
	fake.DescribeSubscriptionWithContextStub = nil
	fake.describeSubscriptionWithContextReturns = struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DescribeSubscriptionWithContextReturnsOnCall(i int, result1 *shield.DescribeSubscriptionOutput, result2 error) {
	fake.describeSubscriptionWithContextMutex.Lock()
	defer fake.describeSubscriptionWithContextMutex.Unlock()
	fake.DescribeSubscriptionWithContextStub = nil
	if fake.describeSubscriptionWithContextReturnsOnCall == nil {
		fake.describeSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DescribeSubscriptionOutput
			result2 error
		})
	}
	fake.describeSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *shield.DescribeSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisableProactiveEngagement(arg1 *shield.DisableProactiveEngagementInput) (*shield.DisableProactiveEngagementOutput, error) {
	fake.disableProactiveEngagementMutex.Lock()
	ret, specificReturn := fake.disableProactiveEngagementReturnsOnCall[len(fake.disableProactiveEngagementArgsForCall)]
	fake.disableProactiveEngagementArgsForCall = append(fake.disableProactiveEngagementArgsForCall, struct {
		arg1 *shield.DisableProactiveEngagementInput
	}{arg1})
	stub := fake.DisableProactiveEngagementStub
	fakeReturns := fake.disableProactiveEngagementReturns
	fake.recordInvocation("DisableProactiveEngagement", []interface{}{arg1})
	fake.disableProactiveEngagementMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisableProactiveEngagementCallCount() int {
	fake.disableProactiveEngagementMutex.RLock()
	defer fake.disableProactiveEngagementMutex.RUnlock()
	return len(fake.disableProactiveEngagementArgsForCall)
}

func (fake *FakeShieldAPI) DisableProactiveEngagementCalls(stub func(*shield.DisableProactiveEngagementInput) (*shield.DisableProactiveEngagementOutput, error)) {
	fake.disableProactiveEngagementMutex.Lock()
	defer fake.disableProactiveEngagementMutex.Unlock()
	fake.DisableProactiveEngagementStub = stub
}

func (fake *FakeShieldAPI) DisableProactiveEngagementArgsForCall(i int) *shield.DisableProactiveEngagementInput {
	fake.disableProactiveEngagementMutex.RLock()
	defer fake.disableProactiveEngagementMutex.RUnlock()
	argsForCall := fake.disableProactiveEngagementArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisableProactiveEngagementReturns(result1 *shield.DisableProactiveEngagementOutput, result2 error) {
	fake.disableProactiveEngagementMutex.Lock()
	defer fake.disableProactiveEngagementMutex.Unlock()
	fake.DisableProactiveEngagementStub = nil
	fake.disableProactiveEngagementReturns = struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisableProactiveEngagementReturnsOnCall(i int, result1 *shield.DisableProactiveEngagementOutput, result2 error) {
	fake.disableProactiveEngagementMutex.Lock()
	defer fake.disableProactiveEngagementMutex.Unlock()
	fake.DisableProactiveEngagementStub = nil
	if fake.disableProactiveEngagementReturnsOnCall == nil {
		fake.disableProactiveEngagementReturnsOnCall = make(map[int]struct {
			result1 *shield.DisableProactiveEngagementOutput
			result2 error
		})
	}
	fake.disableProactiveEngagementReturnsOnCall[i] = struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisableProactiveEngagementRequest(arg1 *shield.DisableProactiveEngagementInput) (*request.Request, *shield.DisableProactiveEngagementOutput) {
	fake.disableProactiveEngagementRequestMutex.Lock()
	ret, specificReturn := fake.disableProactiveEngagementRequestReturnsOnCall[len(fake.disableProactiveEngagementRequestArgsForCall)]
	fake.disableProactiveEngagementRequestArgsForCall = append(fake.disableProactiveEngagementRequestArgsForCall, struct {
		arg1 *shield.DisableProactiveEngagementInput
	}{arg1})
	stub := fake.DisableProactiveEngagementRequestStub
	fakeReturns := fake.disableProactiveEngagementRequestReturns
	fake.recordInvocation("DisableProactiveEngagementRequest", []interface{}{arg1})
	fake.disableProactiveEngagementRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisableProactiveEngagementRequestCallCount() int {
	fake.disableProactiveEngagementRequestMutex.RLock()
	defer fake.disableProactiveEngagementRequestMutex.RUnlock()
	return len(fake.disableProactiveEngagementRequestArgsForCall)
}

func (fake *FakeShieldAPI) DisableProactiveEngagementRequestCalls(stub func(*shield.DisableProactiveEngagementInput) (*request.Request, *shield.DisableProactiveEngagementOutput)) {
	fake.disableProactiveEngagementRequestMutex.Lock()
	defer fake.disableProactiveEngagementRequestMutex.Unlock()
	fake.DisableProactiveEngagementRequestStub = stub
}

func (fake *FakeShieldAPI) DisableProactiveEngagementRequestArgsForCall(i int) *shield.DisableProactiveEngagementInput {
	fake.disableProactiveEngagementRequestMutex.RLock()
	defer fake.disableProactiveEngagementRequestMutex.RUnlock()
	argsForCall := fake.disableProactiveEngagementRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisableProactiveEngagementRequestReturns(result1 *request.Request, result2 *shield.DisableProactiveEngagementOutput) {
	fake.disableProactiveEngagementRequestMutex.Lock()
	defer fake.disableProactiveEngagementRequestMutex.Unlock()
	fake.DisableProactiveEngagementRequestStub = nil
	fake.disableProactiveEngagementRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DisableProactiveEngagementOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisableProactiveEngagementRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DisableProactiveEngagementOutput) {
	fake.disableProactiveEngagementRequestMutex.Lock()
	defer fake.disableProactiveEngagementRequestMutex.Unlock()
	fake.DisableProactiveEngagementRequestStub = nil
	if fake.disableProactiveEngagementRequestReturnsOnCall == nil {
		fake.disableProactiveEngagementRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DisableProactiveEngagementOutput
		})
	}
	fake.disableProactiveEngagementRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DisableProactiveEngagementOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisableProactiveEngagementWithContext(arg1 context.Context, arg2 *shield.DisableProactiveEngagementInput, arg3 ...request.Option) (*shield.DisableProactiveEngagementOutput, error) {
	fake.disableProactiveEngagementWithContextMutex.Lock()
	ret, specificReturn := fake.disableProactiveEngagementWithContextReturnsOnCall[len(fake.disableProactiveEngagementWithContextArgsForCall)]
	fake.disableProactiveEngagementWithContextArgsForCall = append(fake.disableProactiveEngagementWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DisableProactiveEngagementInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisableProactiveEngagementWithContextStub
	fakeReturns := fake.disableProactiveEngagementWithContextReturns
	fake.recordInvocation("DisableProactiveEngagementWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableProactiveEngagementWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisableProactiveEngagementWithContextCallCount() int {
	fake.disableProactiveEngagementWithContextMutex.RLock()
	defer fake.disableProactiveEngagementWithContextMutex.RUnlock()
	return len(fake.disableProactiveEngagementWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DisableProactiveEngagementWithContextCalls(stub func(context.Context, *shield.DisableProactiveEngagementInput, ...request.Option) (*shield.DisableProactiveEngagementOutput, error)) {
	fake.disableProactiveEngagementWithContextMutex.Lock()
	defer fake.disableProactiveEngagementWithContextMutex.Unlock()
	fake.DisableProactiveEngagementWithContextStub = stub
}

func (fake *FakeShieldAPI) DisableProactiveEngagementWithContextArgsForCall(i int) (context.Context, *shield.DisableProactiveEngagementInput, []request.Option) {
	fake.disableProactiveEngagementWithContextMutex.RLock()
	defer fake.disableProactiveEngagementWithContextMutex.RUnlock()
	argsForCall := fake.disableProactiveEngagementWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DisableProactiveEngagementWithContextReturns(result1 *shield.DisableProactiveEngagementOutput, result2 error) {
	fake.disableProactiveEngagementWithContextMutex.Lock()
	defer fake.disableProactiveEngagementWithContextMutex.Unlock()
	fake.DisableProactiveEngagementWithContextStub = nil
	fake.disableProactiveEngagementWithContextReturns = struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisableProactiveEngagementWithContextReturnsOnCall(i int, result1 *shield.DisableProactiveEngagementOutput, result2 error) {
	fake.disableProactiveEngagementWithContextMutex.Lock()
	defer fake.disableProactiveEngagementWithContextMutex.Unlock()
	fake.DisableProactiveEngagementWithContextStub = nil
	if fake.disableProactiveEngagementWithContextReturnsOnCall == nil {
		fake.disableProactiveEngagementWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DisableProactiveEngagementOutput
			result2 error
		})
	}
	fake.disableProactiveEngagementWithContextReturnsOnCall[i] = struct {
		result1 *shield.DisableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucket(arg1 *shield.DisassociateDRTLogBucketInput) (*shield.DisassociateDRTLogBucketOutput, error) {
	fake.disassociateDRTLogBucketMutex.Lock()
	ret, specificReturn := fake.disassociateDRTLogBucketReturnsOnCall[len(fake.disassociateDRTLogBucketArgsForCall)]
	fake.disassociateDRTLogBucketArgsForCall = append(fake.disassociateDRTLogBucketArgsForCall, struct {
		arg1 *shield.DisassociateDRTLogBucketInput
	}{arg1})
	stub := fake.DisassociateDRTLogBucketStub
	fakeReturns := fake.disassociateDRTLogBucketReturns
	fake.recordInvocation("DisassociateDRTLogBucket", []interface{}{arg1})
	fake.disassociateDRTLogBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketCallCount() int {
	fake.disassociateDRTLogBucketMutex.RLock()
	defer fake.disassociateDRTLogBucketMutex.RUnlock()
	return len(fake.disassociateDRTLogBucketArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketCalls(stub func(*shield.DisassociateDRTLogBucketInput) (*shield.DisassociateDRTLogBucketOutput, error)) {
	fake.disassociateDRTLogBucketMutex.Lock()
	defer fake.disassociateDRTLogBucketMutex.Unlock()
	fake.DisassociateDRTLogBucketStub = stub
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketArgsForCall(i int) *shield.DisassociateDRTLogBucketInput {
	fake.disassociateDRTLogBucketMutex.RLock()
	defer fake.disassociateDRTLogBucketMutex.RUnlock()
	argsForCall := fake.disassociateDRTLogBucketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketReturns(result1 *shield.DisassociateDRTLogBucketOutput, result2 error) {
	fake.disassociateDRTLogBucketMutex.Lock()
	defer fake.disassociateDRTLogBucketMutex.Unlock()
	fake.DisassociateDRTLogBucketStub = nil
	fake.disassociateDRTLogBucketReturns = struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketReturnsOnCall(i int, result1 *shield.DisassociateDRTLogBucketOutput, result2 error) {
	fake.disassociateDRTLogBucketMutex.Lock()
	defer fake.disassociateDRTLogBucketMutex.Unlock()
	fake.DisassociateDRTLogBucketStub = nil
	if fake.disassociateDRTLogBucketReturnsOnCall == nil {
		fake.disassociateDRTLogBucketReturnsOnCall = make(map[int]struct {
			result1 *shield.DisassociateDRTLogBucketOutput
			result2 error
		})
	}
	fake.disassociateDRTLogBucketReturnsOnCall[i] = struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketRequest(arg1 *shield.DisassociateDRTLogBucketInput) (*request.Request, *shield.DisassociateDRTLogBucketOutput) {
	fake.disassociateDRTLogBucketRequestMutex.Lock()
	ret, specificReturn := fake.disassociateDRTLogBucketRequestReturnsOnCall[len(fake.disassociateDRTLogBucketRequestArgsForCall)]
	fake.disassociateDRTLogBucketRequestArgsForCall = append(fake.disassociateDRTLogBucketRequestArgsForCall, struct {
		arg1 *shield.DisassociateDRTLogBucketInput
	}{arg1})
	stub := fake.DisassociateDRTLogBucketRequestStub
	fakeReturns := fake.disassociateDRTLogBucketRequestReturns
	fake.recordInvocation("DisassociateDRTLogBucketRequest", []interface{}{arg1})
	fake.disassociateDRTLogBucketRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketRequestCallCount() int {
	fake.disassociateDRTLogBucketRequestMutex.RLock()
	defer fake.disassociateDRTLogBucketRequestMutex.RUnlock()
	return len(fake.disassociateDRTLogBucketRequestArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketRequestCalls(stub func(*shield.DisassociateDRTLogBucketInput) (*request.Request, *shield.DisassociateDRTLogBucketOutput)) {
	fake.disassociateDRTLogBucketRequestMutex.Lock()
	defer fake.disassociateDRTLogBucketRequestMutex.Unlock()
	fake.DisassociateDRTLogBucketRequestStub = stub
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketRequestArgsForCall(i int) *shield.DisassociateDRTLogBucketInput {
	fake.disassociateDRTLogBucketRequestMutex.RLock()
	defer fake.disassociateDRTLogBucketRequestMutex.RUnlock()
	argsForCall := fake.disassociateDRTLogBucketRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketRequestReturns(result1 *request.Request, result2 *shield.DisassociateDRTLogBucketOutput) {
	fake.disassociateDRTLogBucketRequestMutex.Lock()
	defer fake.disassociateDRTLogBucketRequestMutex.Unlock()
	fake.DisassociateDRTLogBucketRequestStub = nil
	fake.disassociateDRTLogBucketRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTLogBucketOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DisassociateDRTLogBucketOutput) {
	fake.disassociateDRTLogBucketRequestMutex.Lock()
	defer fake.disassociateDRTLogBucketRequestMutex.Unlock()
	fake.DisassociateDRTLogBucketRequestStub = nil
	if fake.disassociateDRTLogBucketRequestReturnsOnCall == nil {
		fake.disassociateDRTLogBucketRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DisassociateDRTLogBucketOutput
		})
	}
	fake.disassociateDRTLogBucketRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTLogBucketOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketWithContext(arg1 context.Context, arg2 *shield.DisassociateDRTLogBucketInput, arg3 ...request.Option) (*shield.DisassociateDRTLogBucketOutput, error) {
	fake.disassociateDRTLogBucketWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateDRTLogBucketWithContextReturnsOnCall[len(fake.disassociateDRTLogBucketWithContextArgsForCall)]
	fake.disassociateDRTLogBucketWithContextArgsForCall = append(fake.disassociateDRTLogBucketWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DisassociateDRTLogBucketInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisassociateDRTLogBucketWithContextStub
	fakeReturns := fake.disassociateDRTLogBucketWithContextReturns
	fake.recordInvocation("DisassociateDRTLogBucketWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateDRTLogBucketWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketWithContextCallCount() int {
	fake.disassociateDRTLogBucketWithContextMutex.RLock()
	defer fake.disassociateDRTLogBucketWithContextMutex.RUnlock()
	return len(fake.disassociateDRTLogBucketWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketWithContextCalls(stub func(context.Context, *shield.DisassociateDRTLogBucketInput, ...request.Option) (*shield.DisassociateDRTLogBucketOutput, error)) {
	fake.disassociateDRTLogBucketWithContextMutex.Lock()
	defer fake.disassociateDRTLogBucketWithContextMutex.Unlock()
	fake.DisassociateDRTLogBucketWithContextStub = stub
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketWithContextArgsForCall(i int) (context.Context, *shield.DisassociateDRTLogBucketInput, []request.Option) {
	fake.disassociateDRTLogBucketWithContextMutex.RLock()
	defer fake.disassociateDRTLogBucketWithContextMutex.RUnlock()
	argsForCall := fake.disassociateDRTLogBucketWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketWithContextReturns(result1 *shield.DisassociateDRTLogBucketOutput, result2 error) {
	fake.disassociateDRTLogBucketWithContextMutex.Lock()
	defer fake.disassociateDRTLogBucketWithContextMutex.Unlock()
	fake.DisassociateDRTLogBucketWithContextStub = nil
	fake.disassociateDRTLogBucketWithContextReturns = struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTLogBucketWithContextReturnsOnCall(i int, result1 *shield.DisassociateDRTLogBucketOutput, result2 error) {
	fake.disassociateDRTLogBucketWithContextMutex.Lock()
	defer fake.disassociateDRTLogBucketWithContextMutex.Unlock()
	fake.DisassociateDRTLogBucketWithContextStub = nil
	if fake.disassociateDRTLogBucketWithContextReturnsOnCall == nil {
		fake.disassociateDRTLogBucketWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DisassociateDRTLogBucketOutput
			result2 error
		})
	}
	fake.disassociateDRTLogBucketWithContextReturnsOnCall[i] = struct {
		result1 *shield.DisassociateDRTLogBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTRole(arg1 *shield.DisassociateDRTRoleInput) (*shield.DisassociateDRTRoleOutput, error) {
	fake.disassociateDRTRoleMutex.Lock()
	ret, specificReturn := fake.disassociateDRTRoleReturnsOnCall[len(fake.disassociateDRTRoleArgsForCall)]
	fake.disassociateDRTRoleArgsForCall = append(fake.disassociateDRTRoleArgsForCall, struct {
		arg1 *shield.DisassociateDRTRoleInput
	}{arg1})
	stub := fake.DisassociateDRTRoleStub
	fakeReturns := fake.disassociateDRTRoleReturns
	fake.recordInvocation("DisassociateDRTRole", []interface{}{arg1})
	fake.disassociateDRTRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateDRTRoleCallCount() int {
	fake.disassociateDRTRoleMutex.RLock()
	defer fake.disassociateDRTRoleMutex.RUnlock()
	return len(fake.disassociateDRTRoleArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateDRTRoleCalls(stub func(*shield.DisassociateDRTRoleInput) (*shield.DisassociateDRTRoleOutput, error)) {
	fake.disassociateDRTRoleMutex.Lock()
	defer fake.disassociateDRTRoleMutex.Unlock()
	fake.DisassociateDRTRoleStub = stub
}

func (fake *FakeShieldAPI) DisassociateDRTRoleArgsForCall(i int) *shield.DisassociateDRTRoleInput {
	fake.disassociateDRTRoleMutex.RLock()
	defer fake.disassociateDRTRoleMutex.RUnlock()
	argsForCall := fake.disassociateDRTRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisassociateDRTRoleReturns(result1 *shield.DisassociateDRTRoleOutput, result2 error) {
	fake.disassociateDRTRoleMutex.Lock()
	defer fake.disassociateDRTRoleMutex.Unlock()
	fake.DisassociateDRTRoleStub = nil
	fake.disassociateDRTRoleReturns = struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTRoleReturnsOnCall(i int, result1 *shield.DisassociateDRTRoleOutput, result2 error) {
	fake.disassociateDRTRoleMutex.Lock()
	defer fake.disassociateDRTRoleMutex.Unlock()
	fake.DisassociateDRTRoleStub = nil
	if fake.disassociateDRTRoleReturnsOnCall == nil {
		fake.disassociateDRTRoleReturnsOnCall = make(map[int]struct {
			result1 *shield.DisassociateDRTRoleOutput
			result2 error
		})
	}
	fake.disassociateDRTRoleReturnsOnCall[i] = struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTRoleRequest(arg1 *shield.DisassociateDRTRoleInput) (*request.Request, *shield.DisassociateDRTRoleOutput) {
	fake.disassociateDRTRoleRequestMutex.Lock()
	ret, specificReturn := fake.disassociateDRTRoleRequestReturnsOnCall[len(fake.disassociateDRTRoleRequestArgsForCall)]
	fake.disassociateDRTRoleRequestArgsForCall = append(fake.disassociateDRTRoleRequestArgsForCall, struct {
		arg1 *shield.DisassociateDRTRoleInput
	}{arg1})
	stub := fake.DisassociateDRTRoleRequestStub
	fakeReturns := fake.disassociateDRTRoleRequestReturns
	fake.recordInvocation("DisassociateDRTRoleRequest", []interface{}{arg1})
	fake.disassociateDRTRoleRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateDRTRoleRequestCallCount() int {
	fake.disassociateDRTRoleRequestMutex.RLock()
	defer fake.disassociateDRTRoleRequestMutex.RUnlock()
	return len(fake.disassociateDRTRoleRequestArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateDRTRoleRequestCalls(stub func(*shield.DisassociateDRTRoleInput) (*request.Request, *shield.DisassociateDRTRoleOutput)) {
	fake.disassociateDRTRoleRequestMutex.Lock()
	defer fake.disassociateDRTRoleRequestMutex.Unlock()
	fake.DisassociateDRTRoleRequestStub = stub
}

func (fake *FakeShieldAPI) DisassociateDRTRoleRequestArgsForCall(i int) *shield.DisassociateDRTRoleInput {
	fake.disassociateDRTRoleRequestMutex.RLock()
	defer fake.disassociateDRTRoleRequestMutex.RUnlock()
	argsForCall := fake.disassociateDRTRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisassociateDRTRoleRequestReturns(result1 *request.Request, result2 *shield.DisassociateDRTRoleOutput) {
	fake.disassociateDRTRoleRequestMutex.Lock()
	defer fake.disassociateDRTRoleRequestMutex.Unlock()
	fake.DisassociateDRTRoleRequestStub = nil
	fake.disassociateDRTRoleRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTRoleOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DisassociateDRTRoleOutput) {
	fake.disassociateDRTRoleRequestMutex.Lock()
	defer fake.disassociateDRTRoleRequestMutex.Unlock()
	fake.DisassociateDRTRoleRequestStub = nil
	if fake.disassociateDRTRoleRequestReturnsOnCall == nil {
		fake.disassociateDRTRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DisassociateDRTRoleOutput
		})
	}
	fake.disassociateDRTRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DisassociateDRTRoleOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTRoleWithContext(arg1 context.Context, arg2 *shield.DisassociateDRTRoleInput, arg3 ...request.Option) (*shield.DisassociateDRTRoleOutput, error) {
	fake.disassociateDRTRoleWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateDRTRoleWithContextReturnsOnCall[len(fake.disassociateDRTRoleWithContextArgsForCall)]
	fake.disassociateDRTRoleWithContextArgsForCall = append(fake.disassociateDRTRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DisassociateDRTRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisassociateDRTRoleWithContextStub
	fakeReturns := fake.disassociateDRTRoleWithContextReturns
	fake.recordInvocation("DisassociateDRTRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateDRTRoleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateDRTRoleWithContextCallCount() int {
	fake.disassociateDRTRoleWithContextMutex.RLock()
	defer fake.disassociateDRTRoleWithContextMutex.RUnlock()
	return len(fake.disassociateDRTRoleWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateDRTRoleWithContextCalls(stub func(context.Context, *shield.DisassociateDRTRoleInput, ...request.Option) (*shield.DisassociateDRTRoleOutput, error)) {
	fake.disassociateDRTRoleWithContextMutex.Lock()
	defer fake.disassociateDRTRoleWithContextMutex.Unlock()
	fake.DisassociateDRTRoleWithContextStub = stub
}

func (fake *FakeShieldAPI) DisassociateDRTRoleWithContextArgsForCall(i int) (context.Context, *shield.DisassociateDRTRoleInput, []request.Option) {
	fake.disassociateDRTRoleWithContextMutex.RLock()
	defer fake.disassociateDRTRoleWithContextMutex.RUnlock()
	argsForCall := fake.disassociateDRTRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DisassociateDRTRoleWithContextReturns(result1 *shield.DisassociateDRTRoleOutput, result2 error) {
	fake.disassociateDRTRoleWithContextMutex.Lock()
	defer fake.disassociateDRTRoleWithContextMutex.Unlock()
	fake.DisassociateDRTRoleWithContextStub = nil
	fake.disassociateDRTRoleWithContextReturns = struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateDRTRoleWithContextReturnsOnCall(i int, result1 *shield.DisassociateDRTRoleOutput, result2 error) {
	fake.disassociateDRTRoleWithContextMutex.Lock()
	defer fake.disassociateDRTRoleWithContextMutex.Unlock()
	fake.DisassociateDRTRoleWithContextStub = nil
	if fake.disassociateDRTRoleWithContextReturnsOnCall == nil {
		fake.disassociateDRTRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DisassociateDRTRoleOutput
			result2 error
		})
	}
	fake.disassociateDRTRoleWithContextReturnsOnCall[i] = struct {
		result1 *shield.DisassociateDRTRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateHealthCheck(arg1 *shield.DisassociateHealthCheckInput) (*shield.DisassociateHealthCheckOutput, error) {
	fake.disassociateHealthCheckMutex.Lock()
	ret, specificReturn := fake.disassociateHealthCheckReturnsOnCall[len(fake.disassociateHealthCheckArgsForCall)]
	fake.disassociateHealthCheckArgsForCall = append(fake.disassociateHealthCheckArgsForCall, struct {
		arg1 *shield.DisassociateHealthCheckInput
	}{arg1})
	stub := fake.DisassociateHealthCheckStub
	fakeReturns := fake.disassociateHealthCheckReturns
	fake.recordInvocation("DisassociateHealthCheck", []interface{}{arg1})
	fake.disassociateHealthCheckMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateHealthCheckCallCount() int {
	fake.disassociateHealthCheckMutex.RLock()
	defer fake.disassociateHealthCheckMutex.RUnlock()
	return len(fake.disassociateHealthCheckArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateHealthCheckCalls(stub func(*shield.DisassociateHealthCheckInput) (*shield.DisassociateHealthCheckOutput, error)) {
	fake.disassociateHealthCheckMutex.Lock()
	defer fake.disassociateHealthCheckMutex.Unlock()
	fake.DisassociateHealthCheckStub = stub
}

func (fake *FakeShieldAPI) DisassociateHealthCheckArgsForCall(i int) *shield.DisassociateHealthCheckInput {
	fake.disassociateHealthCheckMutex.RLock()
	defer fake.disassociateHealthCheckMutex.RUnlock()
	argsForCall := fake.disassociateHealthCheckArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisassociateHealthCheckReturns(result1 *shield.DisassociateHealthCheckOutput, result2 error) {
	fake.disassociateHealthCheckMutex.Lock()
	defer fake.disassociateHealthCheckMutex.Unlock()
	fake.DisassociateHealthCheckStub = nil
	fake.disassociateHealthCheckReturns = struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateHealthCheckReturnsOnCall(i int, result1 *shield.DisassociateHealthCheckOutput, result2 error) {
	fake.disassociateHealthCheckMutex.Lock()
	defer fake.disassociateHealthCheckMutex.Unlock()
	fake.DisassociateHealthCheckStub = nil
	if fake.disassociateHealthCheckReturnsOnCall == nil {
		fake.disassociateHealthCheckReturnsOnCall = make(map[int]struct {
			result1 *shield.DisassociateHealthCheckOutput
			result2 error
		})
	}
	fake.disassociateHealthCheckReturnsOnCall[i] = struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateHealthCheckRequest(arg1 *shield.DisassociateHealthCheckInput) (*request.Request, *shield.DisassociateHealthCheckOutput) {
	fake.disassociateHealthCheckRequestMutex.Lock()
	ret, specificReturn := fake.disassociateHealthCheckRequestReturnsOnCall[len(fake.disassociateHealthCheckRequestArgsForCall)]
	fake.disassociateHealthCheckRequestArgsForCall = append(fake.disassociateHealthCheckRequestArgsForCall, struct {
		arg1 *shield.DisassociateHealthCheckInput
	}{arg1})
	stub := fake.DisassociateHealthCheckRequestStub
	fakeReturns := fake.disassociateHealthCheckRequestReturns
	fake.recordInvocation("DisassociateHealthCheckRequest", []interface{}{arg1})
	fake.disassociateHealthCheckRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateHealthCheckRequestCallCount() int {
	fake.disassociateHealthCheckRequestMutex.RLock()
	defer fake.disassociateHealthCheckRequestMutex.RUnlock()
	return len(fake.disassociateHealthCheckRequestArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateHealthCheckRequestCalls(stub func(*shield.DisassociateHealthCheckInput) (*request.Request, *shield.DisassociateHealthCheckOutput)) {
	fake.disassociateHealthCheckRequestMutex.Lock()
	defer fake.disassociateHealthCheckRequestMutex.Unlock()
	fake.DisassociateHealthCheckRequestStub = stub
}

func (fake *FakeShieldAPI) DisassociateHealthCheckRequestArgsForCall(i int) *shield.DisassociateHealthCheckInput {
	fake.disassociateHealthCheckRequestMutex.RLock()
	defer fake.disassociateHealthCheckRequestMutex.RUnlock()
	argsForCall := fake.disassociateHealthCheckRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) DisassociateHealthCheckRequestReturns(result1 *request.Request, result2 *shield.DisassociateHealthCheckOutput) {
	fake.disassociateHealthCheckRequestMutex.Lock()
	defer fake.disassociateHealthCheckRequestMutex.Unlock()
	fake.DisassociateHealthCheckRequestStub = nil
	fake.disassociateHealthCheckRequestReturns = struct {
		result1 *request.Request
		result2 *shield.DisassociateHealthCheckOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateHealthCheckRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.DisassociateHealthCheckOutput) {
	fake.disassociateHealthCheckRequestMutex.Lock()
	defer fake.disassociateHealthCheckRequestMutex.Unlock()
	fake.DisassociateHealthCheckRequestStub = nil
	if fake.disassociateHealthCheckRequestReturnsOnCall == nil {
		fake.disassociateHealthCheckRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.DisassociateHealthCheckOutput
		})
	}
	fake.disassociateHealthCheckRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.DisassociateHealthCheckOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateHealthCheckWithContext(arg1 context.Context, arg2 *shield.DisassociateHealthCheckInput, arg3 ...request.Option) (*shield.DisassociateHealthCheckOutput, error) {
	fake.disassociateHealthCheckWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateHealthCheckWithContextReturnsOnCall[len(fake.disassociateHealthCheckWithContextArgsForCall)]
	fake.disassociateHealthCheckWithContextArgsForCall = append(fake.disassociateHealthCheckWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.DisassociateHealthCheckInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisassociateHealthCheckWithContextStub
	fakeReturns := fake.disassociateHealthCheckWithContextReturns
	fake.recordInvocation("DisassociateHealthCheckWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateHealthCheckWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) DisassociateHealthCheckWithContextCallCount() int {
	fake.disassociateHealthCheckWithContextMutex.RLock()
	defer fake.disassociateHealthCheckWithContextMutex.RUnlock()
	return len(fake.disassociateHealthCheckWithContextArgsForCall)
}

func (fake *FakeShieldAPI) DisassociateHealthCheckWithContextCalls(stub func(context.Context, *shield.DisassociateHealthCheckInput, ...request.Option) (*shield.DisassociateHealthCheckOutput, error)) {
	fake.disassociateHealthCheckWithContextMutex.Lock()
	defer fake.disassociateHealthCheckWithContextMutex.Unlock()
	fake.DisassociateHealthCheckWithContextStub = stub
}

func (fake *FakeShieldAPI) DisassociateHealthCheckWithContextArgsForCall(i int) (context.Context, *shield.DisassociateHealthCheckInput, []request.Option) {
	fake.disassociateHealthCheckWithContextMutex.RLock()
	defer fake.disassociateHealthCheckWithContextMutex.RUnlock()
	argsForCall := fake.disassociateHealthCheckWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) DisassociateHealthCheckWithContextReturns(result1 *shield.DisassociateHealthCheckOutput, result2 error) {
	fake.disassociateHealthCheckWithContextMutex.Lock()
	defer fake.disassociateHealthCheckWithContextMutex.Unlock()
	fake.DisassociateHealthCheckWithContextStub = nil
	fake.disassociateHealthCheckWithContextReturns = struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) DisassociateHealthCheckWithContextReturnsOnCall(i int, result1 *shield.DisassociateHealthCheckOutput, result2 error) {
	fake.disassociateHealthCheckWithContextMutex.Lock()
	defer fake.disassociateHealthCheckWithContextMutex.Unlock()
	fake.DisassociateHealthCheckWithContextStub = nil
	if fake.disassociateHealthCheckWithContextReturnsOnCall == nil {
		fake.disassociateHealthCheckWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.DisassociateHealthCheckOutput
			result2 error
		})
	}
	fake.disassociateHealthCheckWithContextReturnsOnCall[i] = struct {
		result1 *shield.DisassociateHealthCheckOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) EnableProactiveEngagement(arg1 *shield.EnableProactiveEngagementInput) (*shield.EnableProactiveEngagementOutput, error) {
	fake.enableProactiveEngagementMutex.Lock()
	ret, specificReturn := fake.enableProactiveEngagementReturnsOnCall[len(fake.enableProactiveEngagementArgsForCall)]
	fake.enableProactiveEngagementArgsForCall = append(fake.enableProactiveEngagementArgsForCall, struct {
		arg1 *shield.EnableProactiveEngagementInput
	}{arg1})
	stub := fake.EnableProactiveEngagementStub
	fakeReturns := fake.enableProactiveEngagementReturns
	fake.recordInvocation("EnableProactiveEngagement", []interface{}{arg1})
	fake.enableProactiveEngagementMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) EnableProactiveEngagementCallCount() int {
	fake.enableProactiveEngagementMutex.RLock()
	defer fake.enableProactiveEngagementMutex.RUnlock()
	return len(fake.enableProactiveEngagementArgsForCall)
}

func (fake *FakeShieldAPI) EnableProactiveEngagementCalls(stub func(*shield.EnableProactiveEngagementInput) (*shield.EnableProactiveEngagementOutput, error)) {
	fake.enableProactiveEngagementMutex.Lock()
	defer fake.enableProactiveEngagementMutex.Unlock()
	fake.EnableProactiveEngagementStub = stub
}

func (fake *FakeShieldAPI) EnableProactiveEngagementArgsForCall(i int) *shield.EnableProactiveEngagementInput {
	fake.enableProactiveEngagementMutex.RLock()
	defer fake.enableProactiveEngagementMutex.RUnlock()
	argsForCall := fake.enableProactiveEngagementArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) EnableProactiveEngagementReturns(result1 *shield.EnableProactiveEngagementOutput, result2 error) {
	fake.enableProactiveEngagementMutex.Lock()
	defer fake.enableProactiveEngagementMutex.Unlock()
	fake.EnableProactiveEngagementStub = nil
	fake.enableProactiveEngagementReturns = struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) EnableProactiveEngagementReturnsOnCall(i int, result1 *shield.EnableProactiveEngagementOutput, result2 error) {
	fake.enableProactiveEngagementMutex.Lock()
	defer fake.enableProactiveEngagementMutex.Unlock()
	fake.EnableProactiveEngagementStub = nil
	if fake.enableProactiveEngagementReturnsOnCall == nil {
		fake.enableProactiveEngagementReturnsOnCall = make(map[int]struct {
			result1 *shield.EnableProactiveEngagementOutput
			result2 error
		})
	}
	fake.enableProactiveEngagementReturnsOnCall[i] = struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) EnableProactiveEngagementRequest(arg1 *shield.EnableProactiveEngagementInput) (*request.Request, *shield.EnableProactiveEngagementOutput) {
	fake.enableProactiveEngagementRequestMutex.Lock()
	ret, specificReturn := fake.enableProactiveEngagementRequestReturnsOnCall[len(fake.enableProactiveEngagementRequestArgsForCall)]
	fake.enableProactiveEngagementRequestArgsForCall = append(fake.enableProactiveEngagementRequestArgsForCall, struct {
		arg1 *shield.EnableProactiveEngagementInput
	}{arg1})
	stub := fake.EnableProactiveEngagementRequestStub
	fakeReturns := fake.enableProactiveEngagementRequestReturns
	fake.recordInvocation("EnableProactiveEngagementRequest", []interface{}{arg1})
	fake.enableProactiveEngagementRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) EnableProactiveEngagementRequestCallCount() int {
	fake.enableProactiveEngagementRequestMutex.RLock()
	defer fake.enableProactiveEngagementRequestMutex.RUnlock()
	return len(fake.enableProactiveEngagementRequestArgsForCall)
}

func (fake *FakeShieldAPI) EnableProactiveEngagementRequestCalls(stub func(*shield.EnableProactiveEngagementInput) (*request.Request, *shield.EnableProactiveEngagementOutput)) {
	fake.enableProactiveEngagementRequestMutex.Lock()
	defer fake.enableProactiveEngagementRequestMutex.Unlock()
	fake.EnableProactiveEngagementRequestStub = stub
}

func (fake *FakeShieldAPI) EnableProactiveEngagementRequestArgsForCall(i int) *shield.EnableProactiveEngagementInput {
	fake.enableProactiveEngagementRequestMutex.RLock()
	defer fake.enableProactiveEngagementRequestMutex.RUnlock()
	argsForCall := fake.enableProactiveEngagementRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) EnableProactiveEngagementRequestReturns(result1 *request.Request, result2 *shield.EnableProactiveEngagementOutput) {
	fake.enableProactiveEngagementRequestMutex.Lock()
	defer fake.enableProactiveEngagementRequestMutex.Unlock()
	fake.EnableProactiveEngagementRequestStub = nil
	fake.enableProactiveEngagementRequestReturns = struct {
		result1 *request.Request
		result2 *shield.EnableProactiveEngagementOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) EnableProactiveEngagementRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.EnableProactiveEngagementOutput) {
	fake.enableProactiveEngagementRequestMutex.Lock()
	defer fake.enableProactiveEngagementRequestMutex.Unlock()
	fake.EnableProactiveEngagementRequestStub = nil
	if fake.enableProactiveEngagementRequestReturnsOnCall == nil {
		fake.enableProactiveEngagementRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.EnableProactiveEngagementOutput
		})
	}
	fake.enableProactiveEngagementRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.EnableProactiveEngagementOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) EnableProactiveEngagementWithContext(arg1 context.Context, arg2 *shield.EnableProactiveEngagementInput, arg3 ...request.Option) (*shield.EnableProactiveEngagementOutput, error) {
	fake.enableProactiveEngagementWithContextMutex.Lock()
	ret, specificReturn := fake.enableProactiveEngagementWithContextReturnsOnCall[len(fake.enableProactiveEngagementWithContextArgsForCall)]
	fake.enableProactiveEngagementWithContextArgsForCall = append(fake.enableProactiveEngagementWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.EnableProactiveEngagementInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.EnableProactiveEngagementWithContextStub
	fakeReturns := fake.enableProactiveEngagementWithContextReturns
	fake.recordInvocation("EnableProactiveEngagementWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableProactiveEngagementWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) EnableProactiveEngagementWithContextCallCount() int {
	fake.enableProactiveEngagementWithContextMutex.RLock()
	defer fake.enableProactiveEngagementWithContextMutex.RUnlock()
	return len(fake.enableProactiveEngagementWithContextArgsForCall)
}

func (fake *FakeShieldAPI) EnableProactiveEngagementWithContextCalls(stub func(context.Context, *shield.EnableProactiveEngagementInput, ...request.Option) (*shield.EnableProactiveEngagementOutput, error)) {
	fake.enableProactiveEngagementWithContextMutex.Lock()
	defer fake.enableProactiveEngagementWithContextMutex.Unlock()
	fake.EnableProactiveEngagementWithContextStub = stub
}

func (fake *FakeShieldAPI) EnableProactiveEngagementWithContextArgsForCall(i int) (context.Context, *shield.EnableProactiveEngagementInput, []request.Option) {
	fake.enableProactiveEngagementWithContextMutex.RLock()
	defer fake.enableProactiveEngagementWithContextMutex.RUnlock()
	argsForCall := fake.enableProactiveEngagementWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) EnableProactiveEngagementWithContextReturns(result1 *shield.EnableProactiveEngagementOutput, result2 error) {
	fake.enableProactiveEngagementWithContextMutex.Lock()
	defer fake.enableProactiveEngagementWithContextMutex.Unlock()
	fake.EnableProactiveEngagementWithContextStub = nil
	fake.enableProactiveEngagementWithContextReturns = struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) EnableProactiveEngagementWithContextReturnsOnCall(i int, result1 *shield.EnableProactiveEngagementOutput, result2 error) {
	fake.enableProactiveEngagementWithContextMutex.Lock()
	defer fake.enableProactiveEngagementWithContextMutex.Unlock()
	fake.EnableProactiveEngagementWithContextStub = nil
	if fake.enableProactiveEngagementWithContextReturnsOnCall == nil {
		fake.enableProactiveEngagementWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.EnableProactiveEngagementOutput
			result2 error
		})
	}
	fake.enableProactiveEngagementWithContextReturnsOnCall[i] = struct {
		result1 *shield.EnableProactiveEngagementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) GetSubscriptionState(arg1 *shield.GetSubscriptionStateInput) (*shield.GetSubscriptionStateOutput, error) {
	fake.getSubscriptionStateMutex.Lock()
	ret, specificReturn := fake.getSubscriptionStateReturnsOnCall[len(fake.getSubscriptionStateArgsForCall)]
	fake.getSubscriptionStateArgsForCall = append(fake.getSubscriptionStateArgsForCall, struct {
		arg1 *shield.GetSubscriptionStateInput
	}{arg1})
	stub := fake.GetSubscriptionStateStub
	fakeReturns := fake.getSubscriptionStateReturns
	fake.recordInvocation("GetSubscriptionState", []interface{}{arg1})
	fake.getSubscriptionStateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) GetSubscriptionStateCallCount() int {
	fake.getSubscriptionStateMutex.RLock()
	defer fake.getSubscriptionStateMutex.RUnlock()
	return len(fake.getSubscriptionStateArgsForCall)
}

func (fake *FakeShieldAPI) GetSubscriptionStateCalls(stub func(*shield.GetSubscriptionStateInput) (*shield.GetSubscriptionStateOutput, error)) {
	fake.getSubscriptionStateMutex.Lock()
	defer fake.getSubscriptionStateMutex.Unlock()
	fake.GetSubscriptionStateStub = stub
}

func (fake *FakeShieldAPI) GetSubscriptionStateArgsForCall(i int) *shield.GetSubscriptionStateInput {
	fake.getSubscriptionStateMutex.RLock()
	defer fake.getSubscriptionStateMutex.RUnlock()
	argsForCall := fake.getSubscriptionStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) GetSubscriptionStateReturns(result1 *shield.GetSubscriptionStateOutput, result2 error) {
	fake.getSubscriptionStateMutex.Lock()
	defer fake.getSubscriptionStateMutex.Unlock()
	fake.GetSubscriptionStateStub = nil
	fake.getSubscriptionStateReturns = struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) GetSubscriptionStateReturnsOnCall(i int, result1 *shield.GetSubscriptionStateOutput, result2 error) {
	fake.getSubscriptionStateMutex.Lock()
	defer fake.getSubscriptionStateMutex.Unlock()
	fake.GetSubscriptionStateStub = nil
	if fake.getSubscriptionStateReturnsOnCall == nil {
		fake.getSubscriptionStateReturnsOnCall = make(map[int]struct {
			result1 *shield.GetSubscriptionStateOutput
			result2 error
		})
	}
	fake.getSubscriptionStateReturnsOnCall[i] = struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) GetSubscriptionStateRequest(arg1 *shield.GetSubscriptionStateInput) (*request.Request, *shield.GetSubscriptionStateOutput) {
	fake.getSubscriptionStateRequestMutex.Lock()
	ret, specificReturn := fake.getSubscriptionStateRequestReturnsOnCall[len(fake.getSubscriptionStateRequestArgsForCall)]
	fake.getSubscriptionStateRequestArgsForCall = append(fake.getSubscriptionStateRequestArgsForCall, struct {
		arg1 *shield.GetSubscriptionStateInput
	}{arg1})
	stub := fake.GetSubscriptionStateRequestStub
	fakeReturns := fake.getSubscriptionStateRequestReturns
	fake.recordInvocation("GetSubscriptionStateRequest", []interface{}{arg1})
	fake.getSubscriptionStateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) GetSubscriptionStateRequestCallCount() int {
	fake.getSubscriptionStateRequestMutex.RLock()
	defer fake.getSubscriptionStateRequestMutex.RUnlock()
	return len(fake.getSubscriptionStateRequestArgsForCall)
}

func (fake *FakeShieldAPI) GetSubscriptionStateRequestCalls(stub func(*shield.GetSubscriptionStateInput) (*request.Request, *shield.GetSubscriptionStateOutput)) {
	fake.getSubscriptionStateRequestMutex.Lock()
	defer fake.getSubscriptionStateRequestMutex.Unlock()
	fake.GetSubscriptionStateRequestStub = stub
}

func (fake *FakeShieldAPI) GetSubscriptionStateRequestArgsForCall(i int) *shield.GetSubscriptionStateInput {
	fake.getSubscriptionStateRequestMutex.RLock()
	defer fake.getSubscriptionStateRequestMutex.RUnlock()
	argsForCall := fake.getSubscriptionStateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) GetSubscriptionStateRequestReturns(result1 *request.Request, result2 *shield.GetSubscriptionStateOutput) {
	fake.getSubscriptionStateRequestMutex.Lock()
	defer fake.getSubscriptionStateRequestMutex.Unlock()
	fake.GetSubscriptionStateRequestStub = nil
	fake.getSubscriptionStateRequestReturns = struct {
		result1 *request.Request
		result2 *shield.GetSubscriptionStateOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) GetSubscriptionStateRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.GetSubscriptionStateOutput) {
	fake.getSubscriptionStateRequestMutex.Lock()
	defer fake.getSubscriptionStateRequestMutex.Unlock()
	fake.GetSubscriptionStateRequestStub = nil
	if fake.getSubscriptionStateRequestReturnsOnCall == nil {
		fake.getSubscriptionStateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.GetSubscriptionStateOutput
		})
	}
	fake.getSubscriptionStateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.GetSubscriptionStateOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) GetSubscriptionStateWithContext(arg1 context.Context, arg2 *shield.GetSubscriptionStateInput, arg3 ...request.Option) (*shield.GetSubscriptionStateOutput, error) {
	fake.getSubscriptionStateWithContextMutex.Lock()
	ret, specificReturn := fake.getSubscriptionStateWithContextReturnsOnCall[len(fake.getSubscriptionStateWithContextArgsForCall)]
	fake.getSubscriptionStateWithContextArgsForCall = append(fake.getSubscriptionStateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.GetSubscriptionStateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetSubscriptionStateWithContextStub
	fakeReturns := fake.getSubscriptionStateWithContextReturns
	fake.recordInvocation("GetSubscriptionStateWithContext", []interface{}{arg1, arg2, arg3})
	fake.getSubscriptionStateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) GetSubscriptionStateWithContextCallCount() int {
	fake.getSubscriptionStateWithContextMutex.RLock()
	defer fake.getSubscriptionStateWithContextMutex.RUnlock()
	return len(fake.getSubscriptionStateWithContextArgsForCall)
}

func (fake *FakeShieldAPI) GetSubscriptionStateWithContextCalls(stub func(context.Context, *shield.GetSubscriptionStateInput, ...request.Option) (*shield.GetSubscriptionStateOutput, error)) {
	fake.getSubscriptionStateWithContextMutex.Lock()
	defer fake.getSubscriptionStateWithContextMutex.Unlock()
	fake.GetSubscriptionStateWithContextStub = stub
}

func (fake *FakeShieldAPI) GetSubscriptionStateWithContextArgsForCall(i int) (context.Context, *shield.GetSubscriptionStateInput, []request.Option) {
	fake.getSubscriptionStateWithContextMutex.RLock()
	defer fake.getSubscriptionStateWithContextMutex.RUnlock()
	argsForCall := fake.getSubscriptionStateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) GetSubscriptionStateWithContextReturns(result1 *shield.GetSubscriptionStateOutput, result2 error) {
	fake.getSubscriptionStateWithContextMutex.Lock()
	defer fake.getSubscriptionStateWithContextMutex.Unlock()
	fake.GetSubscriptionStateWithContextStub = nil
	fake.getSubscriptionStateWithContextReturns = struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) GetSubscriptionStateWithContextReturnsOnCall(i int, result1 *shield.GetSubscriptionStateOutput, result2 error) {
	fake.getSubscriptionStateWithContextMutex.Lock()
	defer fake.getSubscriptionStateWithContextMutex.Unlock()
	fake.GetSubscriptionStateWithContextStub = nil
	if fake.getSubscriptionStateWithContextReturnsOnCall == nil {
		fake.getSubscriptionStateWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.GetSubscriptionStateOutput
			result2 error
		})
	}
	fake.getSubscriptionStateWithContextReturnsOnCall[i] = struct {
		result1 *shield.GetSubscriptionStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListAttacks(arg1 *shield.ListAttacksInput) (*shield.ListAttacksOutput, error) {
	fake.listAttacksMutex.Lock()
	ret, specificReturn := fake.listAttacksReturnsOnCall[len(fake.listAttacksArgsForCall)]
	fake.listAttacksArgsForCall = append(fake.listAttacksArgsForCall, struct {
		arg1 *shield.ListAttacksInput
	}{arg1})
	stub := fake.ListAttacksStub
	fakeReturns := fake.listAttacksReturns
	fake.recordInvocation("ListAttacks", []interface{}{arg1})
	fake.listAttacksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) ListAttacksCallCount() int {
	fake.listAttacksMutex.RLock()
	defer fake.listAttacksMutex.RUnlock()
	return len(fake.listAttacksArgsForCall)
}

func (fake *FakeShieldAPI) ListAttacksCalls(stub func(*shield.ListAttacksInput) (*shield.ListAttacksOutput, error)) {
	fake.listAttacksMutex.Lock()
	defer fake.listAttacksMutex.Unlock()
	fake.ListAttacksStub = stub
}

func (fake *FakeShieldAPI) ListAttacksArgsForCall(i int) *shield.ListAttacksInput {
	fake.listAttacksMutex.RLock()
	defer fake.listAttacksMutex.RUnlock()
	argsForCall := fake.listAttacksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) ListAttacksReturns(result1 *shield.ListAttacksOutput, result2 error) {
	fake.listAttacksMutex.Lock()
	defer fake.listAttacksMutex.Unlock()
	fake.ListAttacksStub = nil
	fake.listAttacksReturns = struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListAttacksReturnsOnCall(i int, result1 *shield.ListAttacksOutput, result2 error) {
	fake.listAttacksMutex.Lock()
	defer fake.listAttacksMutex.Unlock()
	fake.ListAttacksStub = nil
	if fake.listAttacksReturnsOnCall == nil {
		fake.listAttacksReturnsOnCall = make(map[int]struct {
			result1 *shield.ListAttacksOutput
			result2 error
		})
	}
	fake.listAttacksReturnsOnCall[i] = struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListAttacksPages(arg1 *shield.ListAttacksInput, arg2 func(*shield.ListAttacksOutput, bool) bool) error {
	fake.listAttacksPagesMutex.Lock()
	ret, specificReturn := fake.listAttacksPagesReturnsOnCall[len(fake.listAttacksPagesArgsForCall)]
	fake.listAttacksPagesArgsForCall = append(fake.listAttacksPagesArgsForCall, struct {
		arg1 *shield.ListAttacksInput
		arg2 func(*shield.ListAttacksOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListAttacksPagesStub
	fakeReturns := fake.listAttacksPagesReturns
	fake.recordInvocation("ListAttacksPages", []interface{}{arg1, arg2})
	fake.listAttacksPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeShieldAPI) ListAttacksPagesCallCount() int {
	fake.listAttacksPagesMutex.RLock()
	defer fake.listAttacksPagesMutex.RUnlock()
	return len(fake.listAttacksPagesArgsForCall)
}

func (fake *FakeShieldAPI) ListAttacksPagesCalls(stub func(*shield.ListAttacksInput, func(*shield.ListAttacksOutput, bool) bool) error) {
	fake.listAttacksPagesMutex.Lock()
	defer fake.listAttacksPagesMutex.Unlock()
	fake.ListAttacksPagesStub = stub
}

func (fake *FakeShieldAPI) ListAttacksPagesArgsForCall(i int) (*shield.ListAttacksInput, func(*shield.ListAttacksOutput, bool) bool) {
	fake.listAttacksPagesMutex.RLock()
	defer fake.listAttacksPagesMutex.RUnlock()
	argsForCall := fake.listAttacksPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeShieldAPI) ListAttacksPagesReturns(result1 error) {
	fake.listAttacksPagesMutex.Lock()
	defer fake.listAttacksPagesMutex.Unlock()
	fake.ListAttacksPagesStub = nil
	fake.listAttacksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListAttacksPagesReturnsOnCall(i int, result1 error) {
	fake.listAttacksPagesMutex.Lock()
	defer fake.listAttacksPagesMutex.Unlock()
	fake.ListAttacksPagesStub = nil
	if fake.listAttacksPagesReturnsOnCall == nil {
		fake.listAttacksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttacksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListAttacksPagesWithContext(arg1 context.Context, arg2 *shield.ListAttacksInput, arg3 func(*shield.ListAttacksOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAttacksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttacksPagesWithContextReturnsOnCall[len(fake.listAttacksPagesWithContextArgsForCall)]
	fake.listAttacksPagesWithContextArgsForCall = append(fake.listAttacksPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.ListAttacksInput
		arg3 func(*shield.ListAttacksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListAttacksPagesWithContextStub
	fakeReturns := fake.listAttacksPagesWithContextReturns
	fake.recordInvocation("ListAttacksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAttacksPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeShieldAPI) ListAttacksPagesWithContextCallCount() int {
	fake.listAttacksPagesWithContextMutex.RLock()
	defer fake.listAttacksPagesWithContextMutex.RUnlock()
	return len(fake.listAttacksPagesWithContextArgsForCall)
}

func (fake *FakeShieldAPI) ListAttacksPagesWithContextCalls(stub func(context.Context, *shield.ListAttacksInput, func(*shield.ListAttacksOutput, bool) bool, ...request.Option) error) {
	fake.listAttacksPagesWithContextMutex.Lock()
	defer fake.listAttacksPagesWithContextMutex.Unlock()
	fake.ListAttacksPagesWithContextStub = stub
}

func (fake *FakeShieldAPI) ListAttacksPagesWithContextArgsForCall(i int) (context.Context, *shield.ListAttacksInput, func(*shield.ListAttacksOutput, bool) bool, []request.Option) {
	fake.listAttacksPagesWithContextMutex.RLock()
	defer fake.listAttacksPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAttacksPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeShieldAPI) ListAttacksPagesWithContextReturns(result1 error) {
	fake.listAttacksPagesWithContextMutex.Lock()
	defer fake.listAttacksPagesWithContextMutex.Unlock()
	fake.ListAttacksPagesWithContextStub = nil
	fake.listAttacksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListAttacksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAttacksPagesWithContextMutex.Lock()
	defer fake.listAttacksPagesWithContextMutex.Unlock()
	fake.ListAttacksPagesWithContextStub = nil
	if fake.listAttacksPagesWithContextReturnsOnCall == nil {
		fake.listAttacksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttacksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListAttacksRequest(arg1 *shield.ListAttacksInput) (*request.Request, *shield.ListAttacksOutput) {
	fake.listAttacksRequestMutex.Lock()
	ret, specificReturn := fake.listAttacksRequestReturnsOnCall[len(fake.listAttacksRequestArgsForCall)]
	fake.listAttacksRequestArgsForCall = append(fake.listAttacksRequestArgsForCall, struct {
		arg1 *shield.ListAttacksInput
	}{arg1})
	stub := fake.ListAttacksRequestStub
	fakeReturns := fake.listAttacksRequestReturns
	fake.recordInvocation("ListAttacksRequest", []interface{}{arg1})
	fake.listAttacksRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) ListAttacksRequestCallCount() int {
	fake.listAttacksRequestMutex.RLock()
	defer fake.listAttacksRequestMutex.RUnlock()
	return len(fake.listAttacksRequestArgsForCall)
}

func (fake *FakeShieldAPI) ListAttacksRequestCalls(stub func(*shield.ListAttacksInput) (*request.Request, *shield.ListAttacksOutput)) {
	fake.listAttacksRequestMutex.Lock()
	defer fake.listAttacksRequestMutex.Unlock()
	fake.ListAttacksRequestStub = stub
}

func (fake *FakeShieldAPI) ListAttacksRequestArgsForCall(i int) *shield.ListAttacksInput {
	fake.listAttacksRequestMutex.RLock()
	defer fake.listAttacksRequestMutex.RUnlock()
	argsForCall := fake.listAttacksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) ListAttacksRequestReturns(result1 *request.Request, result2 *shield.ListAttacksOutput) {
	fake.listAttacksRequestMutex.Lock()
	defer fake.listAttacksRequestMutex.Unlock()
	fake.ListAttacksRequestStub = nil
	fake.listAttacksRequestReturns = struct {
		result1 *request.Request
		result2 *shield.ListAttacksOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListAttacksRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.ListAttacksOutput) {
	fake.listAttacksRequestMutex.Lock()
	defer fake.listAttacksRequestMutex.Unlock()
	fake.ListAttacksRequestStub = nil
	if fake.listAttacksRequestReturnsOnCall == nil {
		fake.listAttacksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.ListAttacksOutput
		})
	}
	fake.listAttacksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.ListAttacksOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListAttacksWithContext(arg1 context.Context, arg2 *shield.ListAttacksInput, arg3 ...request.Option) (*shield.ListAttacksOutput, error) {
	fake.listAttacksWithContextMutex.Lock()
	ret, specificReturn := fake.listAttacksWithContextReturnsOnCall[len(fake.listAttacksWithContextArgsForCall)]
	fake.listAttacksWithContextArgsForCall = append(fake.listAttacksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.ListAttacksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListAttacksWithContextStub
	fakeReturns := fake.listAttacksWithContextReturns
	fake.recordInvocation("ListAttacksWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAttacksWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) ListAttacksWithContextCallCount() int {
	fake.listAttacksWithContextMutex.RLock()
	defer fake.listAttacksWithContextMutex.RUnlock()
	return len(fake.listAttacksWithContextArgsForCall)
}

func (fake *FakeShieldAPI) ListAttacksWithContextCalls(stub func(context.Context, *shield.ListAttacksInput, ...request.Option) (*shield.ListAttacksOutput, error)) {
	fake.listAttacksWithContextMutex.Lock()
	defer fake.listAttacksWithContextMutex.Unlock()
	fake.ListAttacksWithContextStub = stub
}

func (fake *FakeShieldAPI) ListAttacksWithContextArgsForCall(i int) (context.Context, *shield.ListAttacksInput, []request.Option) {
	fake.listAttacksWithContextMutex.RLock()
	defer fake.listAttacksWithContextMutex.RUnlock()
	argsForCall := fake.listAttacksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) ListAttacksWithContextReturns(result1 *shield.ListAttacksOutput, result2 error) {
	fake.listAttacksWithContextMutex.Lock()
	defer fake.listAttacksWithContextMutex.Unlock()
	fake.ListAttacksWithContextStub = nil
	fake.listAttacksWithContextReturns = struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListAttacksWithContextReturnsOnCall(i int, result1 *shield.ListAttacksOutput, result2 error) {
	fake.listAttacksWithContextMutex.Lock()
	defer fake.listAttacksWithContextMutex.Unlock()
	fake.ListAttacksWithContextStub = nil
	if fake.listAttacksWithContextReturnsOnCall == nil {
		fake.listAttacksWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.ListAttacksOutput
			result2 error
		})
	}
	fake.listAttacksWithContextReturnsOnCall[i] = struct {
		result1 *shield.ListAttacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListProtections(arg1 *shield.ListProtectionsInput) (*shield.ListProtectionsOutput, error) {
	fake.listProtectionsMutex.Lock()
	ret, specificReturn := fake.listProtectionsReturnsOnCall[len(fake.listProtectionsArgsForCall)]
	fake.listProtectionsArgsForCall = append(fake.listProtectionsArgsForCall, struct {
		arg1 *shield.ListProtectionsInput
	}{arg1})
	stub := fake.ListProtectionsStub
	fakeReturns := fake.listProtectionsReturns
	fake.recordInvocation("ListProtections", []interface{}{arg1})
	fake.listProtectionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) ListProtectionsCallCount() int {
	fake.listProtectionsMutex.RLock()
	defer fake.listProtectionsMutex.RUnlock()
	return len(fake.listProtectionsArgsForCall)
}

func (fake *FakeShieldAPI) ListProtectionsCalls(stub func(*shield.ListProtectionsInput) (*shield.ListProtectionsOutput, error)) {
	fake.listProtectionsMutex.Lock()
	defer fake.listProtectionsMutex.Unlock()
	fake.ListProtectionsStub = stub
}

func (fake *FakeShieldAPI) ListProtectionsArgsForCall(i int) *shield.ListProtectionsInput {
	fake.listProtectionsMutex.RLock()
	defer fake.listProtectionsMutex.RUnlock()
	argsForCall := fake.listProtectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) ListProtectionsReturns(result1 *shield.ListProtectionsOutput, result2 error) {
	fake.listProtectionsMutex.Lock()
	defer fake.listProtectionsMutex.Unlock()
	fake.ListProtectionsStub = nil
	fake.listProtectionsReturns = struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListProtectionsReturnsOnCall(i int, result1 *shield.ListProtectionsOutput, result2 error) {
	fake.listProtectionsMutex.Lock()
	defer fake.listProtectionsMutex.Unlock()
	fake.ListProtectionsStub = nil
	if fake.listProtectionsReturnsOnCall == nil {
		fake.listProtectionsReturnsOnCall = make(map[int]struct {
			result1 *shield.ListProtectionsOutput
			result2 error
		})
	}
	fake.listProtectionsReturnsOnCall[i] = struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListProtectionsPages(arg1 *shield.ListProtectionsInput, arg2 func(*shield.ListProtectionsOutput, bool) bool) error {
	fake.listProtectionsPagesMutex.Lock()
	ret, specificReturn := fake.listProtectionsPagesReturnsOnCall[len(fake.listProtectionsPagesArgsForCall)]
	fake.listProtectionsPagesArgsForCall = append(fake.listProtectionsPagesArgsForCall, struct {
		arg1 *shield.ListProtectionsInput
		arg2 func(*shield.ListProtectionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListProtectionsPagesStub
	fakeReturns := fake.listProtectionsPagesReturns
	fake.recordInvocation("ListProtectionsPages", []interface{}{arg1, arg2})
	fake.listProtectionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeShieldAPI) ListProtectionsPagesCallCount() int {
	fake.listProtectionsPagesMutex.RLock()
	defer fake.listProtectionsPagesMutex.RUnlock()
	return len(fake.listProtectionsPagesArgsForCall)
}

func (fake *FakeShieldAPI) ListProtectionsPagesCalls(stub func(*shield.ListProtectionsInput, func(*shield.ListProtectionsOutput, bool) bool) error) {
	fake.listProtectionsPagesMutex.Lock()
	defer fake.listProtectionsPagesMutex.Unlock()
	fake.ListProtectionsPagesStub = stub
}

func (fake *FakeShieldAPI) ListProtectionsPagesArgsForCall(i int) (*shield.ListProtectionsInput, func(*shield.ListProtectionsOutput, bool) bool) {
	fake.listProtectionsPagesMutex.RLock()
	defer fake.listProtectionsPagesMutex.RUnlock()
	argsForCall := fake.listProtectionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeShieldAPI) ListProtectionsPagesReturns(result1 error) {
	fake.listProtectionsPagesMutex.Lock()
	defer fake.listProtectionsPagesMutex.Unlock()
	fake.ListProtectionsPagesStub = nil
	fake.listProtectionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListProtectionsPagesReturnsOnCall(i int, result1 error) {
	fake.listProtectionsPagesMutex.Lock()
	defer fake.listProtectionsPagesMutex.Unlock()
	fake.ListProtectionsPagesStub = nil
	if fake.listProtectionsPagesReturnsOnCall == nil {
		fake.listProtectionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listProtectionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListProtectionsPagesWithContext(arg1 context.Context, arg2 *shield.ListProtectionsInput, arg3 func(*shield.ListProtectionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listProtectionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listProtectionsPagesWithContextReturnsOnCall[len(fake.listProtectionsPagesWithContextArgsForCall)]
	fake.listProtectionsPagesWithContextArgsForCall = append(fake.listProtectionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.ListProtectionsInput
		arg3 func(*shield.ListProtectionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListProtectionsPagesWithContextStub
	fakeReturns := fake.listProtectionsPagesWithContextReturns
	fake.recordInvocation("ListProtectionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listProtectionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeShieldAPI) ListProtectionsPagesWithContextCallCount() int {
	fake.listProtectionsPagesWithContextMutex.RLock()
	defer fake.listProtectionsPagesWithContextMutex.RUnlock()
	return len(fake.listProtectionsPagesWithContextArgsForCall)
}

func (fake *FakeShieldAPI) ListProtectionsPagesWithContextCalls(stub func(context.Context, *shield.ListProtectionsInput, func(*shield.ListProtectionsOutput, bool) bool, ...request.Option) error) {
	fake.listProtectionsPagesWithContextMutex.Lock()
	defer fake.listProtectionsPagesWithContextMutex.Unlock()
	fake.ListProtectionsPagesWithContextStub = stub
}

func (fake *FakeShieldAPI) ListProtectionsPagesWithContextArgsForCall(i int) (context.Context, *shield.ListProtectionsInput, func(*shield.ListProtectionsOutput, bool) bool, []request.Option) {
	fake.listProtectionsPagesWithContextMutex.RLock()
	defer fake.listProtectionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listProtectionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeShieldAPI) ListProtectionsPagesWithContextReturns(result1 error) {
	fake.listProtectionsPagesWithContextMutex.Lock()
	defer fake.listProtectionsPagesWithContextMutex.Unlock()
	fake.ListProtectionsPagesWithContextStub = nil
	fake.listProtectionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListProtectionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listProtectionsPagesWithContextMutex.Lock()
	defer fake.listProtectionsPagesWithContextMutex.Unlock()
	fake.ListProtectionsPagesWithContextStub = nil
	if fake.listProtectionsPagesWithContextReturnsOnCall == nil {
		fake.listProtectionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listProtectionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeShieldAPI) ListProtectionsRequest(arg1 *shield.ListProtectionsInput) (*request.Request, *shield.ListProtectionsOutput) {
	fake.listProtectionsRequestMutex.Lock()
	ret, specificReturn := fake.listProtectionsRequestReturnsOnCall[len(fake.listProtectionsRequestArgsForCall)]
	fake.listProtectionsRequestArgsForCall = append(fake.listProtectionsRequestArgsForCall, struct {
		arg1 *shield.ListProtectionsInput
	}{arg1})
	stub := fake.ListProtectionsRequestStub
	fakeReturns := fake.listProtectionsRequestReturns
	fake.recordInvocation("ListProtectionsRequest", []interface{}{arg1})
	fake.listProtectionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) ListProtectionsRequestCallCount() int {
	fake.listProtectionsRequestMutex.RLock()
	defer fake.listProtectionsRequestMutex.RUnlock()
	return len(fake.listProtectionsRequestArgsForCall)
}

func (fake *FakeShieldAPI) ListProtectionsRequestCalls(stub func(*shield.ListProtectionsInput) (*request.Request, *shield.ListProtectionsOutput)) {
	fake.listProtectionsRequestMutex.Lock()
	defer fake.listProtectionsRequestMutex.Unlock()
	fake.ListProtectionsRequestStub = stub
}

func (fake *FakeShieldAPI) ListProtectionsRequestArgsForCall(i int) *shield.ListProtectionsInput {
	fake.listProtectionsRequestMutex.RLock()
	defer fake.listProtectionsRequestMutex.RUnlock()
	argsForCall := fake.listProtectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) ListProtectionsRequestReturns(result1 *request.Request, result2 *shield.ListProtectionsOutput) {
	fake.listProtectionsRequestMutex.Lock()
	defer fake.listProtectionsRequestMutex.Unlock()
	fake.ListProtectionsRequestStub = nil
	fake.listProtectionsRequestReturns = struct {
		result1 *request.Request
		result2 *shield.ListProtectionsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListProtectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.ListProtectionsOutput) {
	fake.listProtectionsRequestMutex.Lock()
	defer fake.listProtectionsRequestMutex.Unlock()
	fake.ListProtectionsRequestStub = nil
	if fake.listProtectionsRequestReturnsOnCall == nil {
		fake.listProtectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.ListProtectionsOutput
		})
	}
	fake.listProtectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.ListProtectionsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListProtectionsWithContext(arg1 context.Context, arg2 *shield.ListProtectionsInput, arg3 ...request.Option) (*shield.ListProtectionsOutput, error) {
	fake.listProtectionsWithContextMutex.Lock()
	ret, specificReturn := fake.listProtectionsWithContextReturnsOnCall[len(fake.listProtectionsWithContextArgsForCall)]
	fake.listProtectionsWithContextArgsForCall = append(fake.listProtectionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.ListProtectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListProtectionsWithContextStub
	fakeReturns := fake.listProtectionsWithContextReturns
	fake.recordInvocation("ListProtectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listProtectionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) ListProtectionsWithContextCallCount() int {
	fake.listProtectionsWithContextMutex.RLock()
	defer fake.listProtectionsWithContextMutex.RUnlock()
	return len(fake.listProtectionsWithContextArgsForCall)
}

func (fake *FakeShieldAPI) ListProtectionsWithContextCalls(stub func(context.Context, *shield.ListProtectionsInput, ...request.Option) (*shield.ListProtectionsOutput, error)) {
	fake.listProtectionsWithContextMutex.Lock()
	defer fake.listProtectionsWithContextMutex.Unlock()
	fake.ListProtectionsWithContextStub = stub
}

func (fake *FakeShieldAPI) ListProtectionsWithContextArgsForCall(i int) (context.Context, *shield.ListProtectionsInput, []request.Option) {
	fake.listProtectionsWithContextMutex.RLock()
	defer fake.listProtectionsWithContextMutex.RUnlock()
	argsForCall := fake.listProtectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) ListProtectionsWithContextReturns(result1 *shield.ListProtectionsOutput, result2 error) {
	fake.listProtectionsWithContextMutex.Lock()
	defer fake.listProtectionsWithContextMutex.Unlock()
	fake.ListProtectionsWithContextStub = nil
	fake.listProtectionsWithContextReturns = struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) ListProtectionsWithContextReturnsOnCall(i int, result1 *shield.ListProtectionsOutput, result2 error) {
	fake.listProtectionsWithContextMutex.Lock()
	defer fake.listProtectionsWithContextMutex.Unlock()
	fake.ListProtectionsWithContextStub = nil
	if fake.listProtectionsWithContextReturnsOnCall == nil {
		fake.listProtectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.ListProtectionsOutput
			result2 error
		})
	}
	fake.listProtectionsWithContextReturnsOnCall[i] = struct {
		result1 *shield.ListProtectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettings(arg1 *shield.UpdateEmergencyContactSettingsInput) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	fake.updateEmergencyContactSettingsMutex.Lock()
	ret, specificReturn := fake.updateEmergencyContactSettingsReturnsOnCall[len(fake.updateEmergencyContactSettingsArgsForCall)]
	fake.updateEmergencyContactSettingsArgsForCall = append(fake.updateEmergencyContactSettingsArgsForCall, struct {
		arg1 *shield.UpdateEmergencyContactSettingsInput
	}{arg1})
	stub := fake.UpdateEmergencyContactSettingsStub
	fakeReturns := fake.updateEmergencyContactSettingsReturns
	fake.recordInvocation("UpdateEmergencyContactSettings", []interface{}{arg1})
	fake.updateEmergencyContactSettingsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsCallCount() int {
	fake.updateEmergencyContactSettingsMutex.RLock()
	defer fake.updateEmergencyContactSettingsMutex.RUnlock()
	return len(fake.updateEmergencyContactSettingsArgsForCall)
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsCalls(stub func(*shield.UpdateEmergencyContactSettingsInput) (*shield.UpdateEmergencyContactSettingsOutput, error)) {
	fake.updateEmergencyContactSettingsMutex.Lock()
	defer fake.updateEmergencyContactSettingsMutex.Unlock()
	fake.UpdateEmergencyContactSettingsStub = stub
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsArgsForCall(i int) *shield.UpdateEmergencyContactSettingsInput {
	fake.updateEmergencyContactSettingsMutex.RLock()
	defer fake.updateEmergencyContactSettingsMutex.RUnlock()
	argsForCall := fake.updateEmergencyContactSettingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsReturns(result1 *shield.UpdateEmergencyContactSettingsOutput, result2 error) {
	fake.updateEmergencyContactSettingsMutex.Lock()
	defer fake.updateEmergencyContactSettingsMutex.Unlock()
	fake.UpdateEmergencyContactSettingsStub = nil
	fake.updateEmergencyContactSettingsReturns = struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsReturnsOnCall(i int, result1 *shield.UpdateEmergencyContactSettingsOutput, result2 error) {
	fake.updateEmergencyContactSettingsMutex.Lock()
	defer fake.updateEmergencyContactSettingsMutex.Unlock()
	fake.UpdateEmergencyContactSettingsStub = nil
	if fake.updateEmergencyContactSettingsReturnsOnCall == nil {
		fake.updateEmergencyContactSettingsReturnsOnCall = make(map[int]struct {
			result1 *shield.UpdateEmergencyContactSettingsOutput
			result2 error
		})
	}
	fake.updateEmergencyContactSettingsReturnsOnCall[i] = struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsRequest(arg1 *shield.UpdateEmergencyContactSettingsInput) (*request.Request, *shield.UpdateEmergencyContactSettingsOutput) {
	fake.updateEmergencyContactSettingsRequestMutex.Lock()
	ret, specificReturn := fake.updateEmergencyContactSettingsRequestReturnsOnCall[len(fake.updateEmergencyContactSettingsRequestArgsForCall)]
	fake.updateEmergencyContactSettingsRequestArgsForCall = append(fake.updateEmergencyContactSettingsRequestArgsForCall, struct {
		arg1 *shield.UpdateEmergencyContactSettingsInput
	}{arg1})
	stub := fake.UpdateEmergencyContactSettingsRequestStub
	fakeReturns := fake.updateEmergencyContactSettingsRequestReturns
	fake.recordInvocation("UpdateEmergencyContactSettingsRequest", []interface{}{arg1})
	fake.updateEmergencyContactSettingsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsRequestCallCount() int {
	fake.updateEmergencyContactSettingsRequestMutex.RLock()
	defer fake.updateEmergencyContactSettingsRequestMutex.RUnlock()
	return len(fake.updateEmergencyContactSettingsRequestArgsForCall)
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsRequestCalls(stub func(*shield.UpdateEmergencyContactSettingsInput) (*request.Request, *shield.UpdateEmergencyContactSettingsOutput)) {
	fake.updateEmergencyContactSettingsRequestMutex.Lock()
	defer fake.updateEmergencyContactSettingsRequestMutex.Unlock()
	fake.UpdateEmergencyContactSettingsRequestStub = stub
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsRequestArgsForCall(i int) *shield.UpdateEmergencyContactSettingsInput {
	fake.updateEmergencyContactSettingsRequestMutex.RLock()
	defer fake.updateEmergencyContactSettingsRequestMutex.RUnlock()
	argsForCall := fake.updateEmergencyContactSettingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsRequestReturns(result1 *request.Request, result2 *shield.UpdateEmergencyContactSettingsOutput) {
	fake.updateEmergencyContactSettingsRequestMutex.Lock()
	defer fake.updateEmergencyContactSettingsRequestMutex.Unlock()
	fake.UpdateEmergencyContactSettingsRequestStub = nil
	fake.updateEmergencyContactSettingsRequestReturns = struct {
		result1 *request.Request
		result2 *shield.UpdateEmergencyContactSettingsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.UpdateEmergencyContactSettingsOutput) {
	fake.updateEmergencyContactSettingsRequestMutex.Lock()
	defer fake.updateEmergencyContactSettingsRequestMutex.Unlock()
	fake.UpdateEmergencyContactSettingsRequestStub = nil
	if fake.updateEmergencyContactSettingsRequestReturnsOnCall == nil {
		fake.updateEmergencyContactSettingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.UpdateEmergencyContactSettingsOutput
		})
	}
	fake.updateEmergencyContactSettingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.UpdateEmergencyContactSettingsOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsWithContext(arg1 context.Context, arg2 *shield.UpdateEmergencyContactSettingsInput, arg3 ...request.Option) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	fake.updateEmergencyContactSettingsWithContextMutex.Lock()
	ret, specificReturn := fake.updateEmergencyContactSettingsWithContextReturnsOnCall[len(fake.updateEmergencyContactSettingsWithContextArgsForCall)]
	fake.updateEmergencyContactSettingsWithContextArgsForCall = append(fake.updateEmergencyContactSettingsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.UpdateEmergencyContactSettingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateEmergencyContactSettingsWithContextStub
	fakeReturns := fake.updateEmergencyContactSettingsWithContextReturns
	fake.recordInvocation("UpdateEmergencyContactSettingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateEmergencyContactSettingsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsWithContextCallCount() int {
	fake.updateEmergencyContactSettingsWithContextMutex.RLock()
	defer fake.updateEmergencyContactSettingsWithContextMutex.RUnlock()
	return len(fake.updateEmergencyContactSettingsWithContextArgsForCall)
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsWithContextCalls(stub func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...request.Option) (*shield.UpdateEmergencyContactSettingsOutput, error)) {
	fake.updateEmergencyContactSettingsWithContextMutex.Lock()
	defer fake.updateEmergencyContactSettingsWithContextMutex.Unlock()
	fake.UpdateEmergencyContactSettingsWithContextStub = stub
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsWithContextArgsForCall(i int) (context.Context, *shield.UpdateEmergencyContactSettingsInput, []request.Option) {
	fake.updateEmergencyContactSettingsWithContextMutex.RLock()
	defer fake.updateEmergencyContactSettingsWithContextMutex.RUnlock()
	argsForCall := fake.updateEmergencyContactSettingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsWithContextReturns(result1 *shield.UpdateEmergencyContactSettingsOutput, result2 error) {
	fake.updateEmergencyContactSettingsWithContextMutex.Lock()
	defer fake.updateEmergencyContactSettingsWithContextMutex.Unlock()
	fake.UpdateEmergencyContactSettingsWithContextStub = nil
	fake.updateEmergencyContactSettingsWithContextReturns = struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateEmergencyContactSettingsWithContextReturnsOnCall(i int, result1 *shield.UpdateEmergencyContactSettingsOutput, result2 error) {
	fake.updateEmergencyContactSettingsWithContextMutex.Lock()
	defer fake.updateEmergencyContactSettingsWithContextMutex.Unlock()
	fake.UpdateEmergencyContactSettingsWithContextStub = nil
	if fake.updateEmergencyContactSettingsWithContextReturnsOnCall == nil {
		fake.updateEmergencyContactSettingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.UpdateEmergencyContactSettingsOutput
			result2 error
		})
	}
	fake.updateEmergencyContactSettingsWithContextReturnsOnCall[i] = struct {
		result1 *shield.UpdateEmergencyContactSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateSubscription(arg1 *shield.UpdateSubscriptionInput) (*shield.UpdateSubscriptionOutput, error) {
	fake.updateSubscriptionMutex.Lock()
	ret, specificReturn := fake.updateSubscriptionReturnsOnCall[len(fake.updateSubscriptionArgsForCall)]
	fake.updateSubscriptionArgsForCall = append(fake.updateSubscriptionArgsForCall, struct {
		arg1 *shield.UpdateSubscriptionInput
	}{arg1})
	stub := fake.UpdateSubscriptionStub
	fakeReturns := fake.updateSubscriptionReturns
	fake.recordInvocation("UpdateSubscription", []interface{}{arg1})
	fake.updateSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) UpdateSubscriptionCallCount() int {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	return len(fake.updateSubscriptionArgsForCall)
}

func (fake *FakeShieldAPI) UpdateSubscriptionCalls(stub func(*shield.UpdateSubscriptionInput) (*shield.UpdateSubscriptionOutput, error)) {
	fake.updateSubscriptionMutex.Lock()
	defer fake.updateSubscriptionMutex.Unlock()
	fake.UpdateSubscriptionStub = stub
}

func (fake *FakeShieldAPI) UpdateSubscriptionArgsForCall(i int) *shield.UpdateSubscriptionInput {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	argsForCall := fake.updateSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) UpdateSubscriptionReturns(result1 *shield.UpdateSubscriptionOutput, result2 error) {
	fake.updateSubscriptionMutex.Lock()
	defer fake.updateSubscriptionMutex.Unlock()
	fake.UpdateSubscriptionStub = nil
	fake.updateSubscriptionReturns = struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateSubscriptionReturnsOnCall(i int, result1 *shield.UpdateSubscriptionOutput, result2 error) {
	fake.updateSubscriptionMutex.Lock()
	defer fake.updateSubscriptionMutex.Unlock()
	fake.UpdateSubscriptionStub = nil
	if fake.updateSubscriptionReturnsOnCall == nil {
		fake.updateSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *shield.UpdateSubscriptionOutput
			result2 error
		})
	}
	fake.updateSubscriptionReturnsOnCall[i] = struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateSubscriptionRequest(arg1 *shield.UpdateSubscriptionInput) (*request.Request, *shield.UpdateSubscriptionOutput) {
	fake.updateSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.updateSubscriptionRequestReturnsOnCall[len(fake.updateSubscriptionRequestArgsForCall)]
	fake.updateSubscriptionRequestArgsForCall = append(fake.updateSubscriptionRequestArgsForCall, struct {
		arg1 *shield.UpdateSubscriptionInput
	}{arg1})
	stub := fake.UpdateSubscriptionRequestStub
	fakeReturns := fake.updateSubscriptionRequestReturns
	fake.recordInvocation("UpdateSubscriptionRequest", []interface{}{arg1})
	fake.updateSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) UpdateSubscriptionRequestCallCount() int {
	fake.updateSubscriptionRequestMutex.RLock()
	defer fake.updateSubscriptionRequestMutex.RUnlock()
	return len(fake.updateSubscriptionRequestArgsForCall)
}

func (fake *FakeShieldAPI) UpdateSubscriptionRequestCalls(stub func(*shield.UpdateSubscriptionInput) (*request.Request, *shield.UpdateSubscriptionOutput)) {
	fake.updateSubscriptionRequestMutex.Lock()
	defer fake.updateSubscriptionRequestMutex.Unlock()
	fake.UpdateSubscriptionRequestStub = stub
}

func (fake *FakeShieldAPI) UpdateSubscriptionRequestArgsForCall(i int) *shield.UpdateSubscriptionInput {
	fake.updateSubscriptionRequestMutex.RLock()
	defer fake.updateSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.updateSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShieldAPI) UpdateSubscriptionRequestReturns(result1 *request.Request, result2 *shield.UpdateSubscriptionOutput) {
	fake.updateSubscriptionRequestMutex.Lock()
	defer fake.updateSubscriptionRequestMutex.Unlock()
	fake.UpdateSubscriptionRequestStub = nil
	fake.updateSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *shield.UpdateSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *shield.UpdateSubscriptionOutput) {
	fake.updateSubscriptionRequestMutex.Lock()
	defer fake.updateSubscriptionRequestMutex.Unlock()
	fake.UpdateSubscriptionRequestStub = nil
	if fake.updateSubscriptionRequestReturnsOnCall == nil {
		fake.updateSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *shield.UpdateSubscriptionOutput
		})
	}
	fake.updateSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *shield.UpdateSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateSubscriptionWithContext(arg1 context.Context, arg2 *shield.UpdateSubscriptionInput, arg3 ...request.Option) (*shield.UpdateSubscriptionOutput, error) {
	fake.updateSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.updateSubscriptionWithContextReturnsOnCall[len(fake.updateSubscriptionWithContextArgsForCall)]
	fake.updateSubscriptionWithContextArgsForCall = append(fake.updateSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *shield.UpdateSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateSubscriptionWithContextStub
	fakeReturns := fake.updateSubscriptionWithContextReturns
	fake.recordInvocation("UpdateSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldAPI) UpdateSubscriptionWithContextCallCount() int {
	fake.updateSubscriptionWithContextMutex.RLock()
	defer fake.updateSubscriptionWithContextMutex.RUnlock()
	return len(fake.updateSubscriptionWithContextArgsForCall)
}

func (fake *FakeShieldAPI) UpdateSubscriptionWithContextCalls(stub func(context.Context, *shield.UpdateSubscriptionInput, ...request.Option) (*shield.UpdateSubscriptionOutput, error)) {
	fake.updateSubscriptionWithContextMutex.Lock()
	defer fake.updateSubscriptionWithContextMutex.Unlock()
	fake.UpdateSubscriptionWithContextStub = stub
}

func (fake *FakeShieldAPI) UpdateSubscriptionWithContextArgsForCall(i int) (context.Context, *shield.UpdateSubscriptionInput, []request.Option) {
	fake.updateSubscriptionWithContextMutex.RLock()
	defer fake.updateSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.updateSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeShieldAPI) UpdateSubscriptionWithContextReturns(result1 *shield.UpdateSubscriptionOutput, result2 error) {
	fake.updateSubscriptionWithContextMutex.Lock()
	defer fake.updateSubscriptionWithContextMutex.Unlock()
	fake.UpdateSubscriptionWithContextStub = nil
	fake.updateSubscriptionWithContextReturns = struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) UpdateSubscriptionWithContextReturnsOnCall(i int, result1 *shield.UpdateSubscriptionOutput, result2 error) {
	fake.updateSubscriptionWithContextMutex.Lock()
	defer fake.updateSubscriptionWithContextMutex.Unlock()
	fake.UpdateSubscriptionWithContextStub = nil
	if fake.updateSubscriptionWithContextReturnsOnCall == nil {
		fake.updateSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *shield.UpdateSubscriptionOutput
			result2 error
		})
	}
	fake.updateSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *shield.UpdateSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.associateDRTLogBucketMutex.RLock()
	defer fake.associateDRTLogBucketMutex.RUnlock()
	fake.associateDRTLogBucketRequestMutex.RLock()
	defer fake.associateDRTLogBucketRequestMutex.RUnlock()
	fake.associateDRTLogBucketWithContextMutex.RLock()
	defer fake.associateDRTLogBucketWithContextMutex.RUnlock()
	fake.associateDRTRoleMutex.RLock()
	defer fake.associateDRTRoleMutex.RUnlock()
	fake.associateDRTRoleRequestMutex.RLock()
	defer fake.associateDRTRoleRequestMutex.RUnlock()
	fake.associateDRTRoleWithContextMutex.RLock()
	defer fake.associateDRTRoleWithContextMutex.RUnlock()
	fake.associateHealthCheckMutex.RLock()
	defer fake.associateHealthCheckMutex.RUnlock()
	fake.associateHealthCheckRequestMutex.RLock()
	defer fake.associateHealthCheckRequestMutex.RUnlock()
	fake.associateHealthCheckWithContextMutex.RLock()
	defer fake.associateHealthCheckWithContextMutex.RUnlock()
	fake.associateProactiveEngagementDetailsMutex.RLock()
	defer fake.associateProactiveEngagementDetailsMutex.RUnlock()
	fake.associateProactiveEngagementDetailsRequestMutex.RLock()
	defer fake.associateProactiveEngagementDetailsRequestMutex.RUnlock()
	fake.associateProactiveEngagementDetailsWithContextMutex.RLock()
	defer fake.associateProactiveEngagementDetailsWithContextMutex.RUnlock()
	fake.createProtectionMutex.RLock()
	defer fake.createProtectionMutex.RUnlock()
	fake.createProtectionRequestMutex.RLock()
	defer fake.createProtectionRequestMutex.RUnlock()
	fake.createProtectionWithContextMutex.RLock()
	defer fake.createProtectionWithContextMutex.RUnlock()
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	fake.createSubscriptionRequestMutex.RLock()
	defer fake.createSubscriptionRequestMutex.RUnlock()
	fake.createSubscriptionWithContextMutex.RLock()
	defer fake.createSubscriptionWithContextMutex.RUnlock()
	fake.deleteProtectionMutex.RLock()
	defer fake.deleteProtectionMutex.RUnlock()
	fake.deleteProtectionRequestMutex.RLock()
	defer fake.deleteProtectionRequestMutex.RUnlock()
	fake.deleteProtectionWithContextMutex.RLock()
	defer fake.deleteProtectionWithContextMutex.RUnlock()
	fake.deleteSubscriptionMutex.RLock()
	defer fake.deleteSubscriptionMutex.RUnlock()
	fake.deleteSubscriptionRequestMutex.RLock()
	defer fake.deleteSubscriptionRequestMutex.RUnlock()
	fake.deleteSubscriptionWithContextMutex.RLock()
	defer fake.deleteSubscriptionWithContextMutex.RUnlock()
	fake.describeAttackMutex.RLock()
	defer fake.describeAttackMutex.RUnlock()
	fake.describeAttackRequestMutex.RLock()
	defer fake.describeAttackRequestMutex.RUnlock()
	fake.describeAttackWithContextMutex.RLock()
	defer fake.describeAttackWithContextMutex.RUnlock()
	fake.describeDRTAccessMutex.RLock()
	defer fake.describeDRTAccessMutex.RUnlock()
	fake.describeDRTAccessRequestMutex.RLock()
	defer fake.describeDRTAccessRequestMutex.RUnlock()
	fake.describeDRTAccessWithContextMutex.RLock()
	defer fake.describeDRTAccessWithContextMutex.RUnlock()
	fake.describeEmergencyContactSettingsMutex.RLock()
	defer fake.describeEmergencyContactSettingsMutex.RUnlock()
	fake.describeEmergencyContactSettingsRequestMutex.RLock()
	defer fake.describeEmergencyContactSettingsRequestMutex.RUnlock()
	fake.describeEmergencyContactSettingsWithContextMutex.RLock()
	defer fake.describeEmergencyContactSettingsWithContextMutex.RUnlock()
	fake.describeProtectionMutex.RLock()
	defer fake.describeProtectionMutex.RUnlock()
	fake.describeProtectionRequestMutex.RLock()
	defer fake.describeProtectionRequestMutex.RUnlock()
	fake.describeProtectionWithContextMutex.RLock()
	defer fake.describeProtectionWithContextMutex.RUnlock()
	fake.describeSubscriptionMutex.RLock()
	defer fake.describeSubscriptionMutex.RUnlock()
	fake.describeSubscriptionRequestMutex.RLock()
	defer fake.describeSubscriptionRequestMutex.RUnlock()
	fake.describeSubscriptionWithContextMutex.RLock()
	defer fake.describeSubscriptionWithContextMutex.RUnlock()
	fake.disableProactiveEngagementMutex.RLock()
	defer fake.disableProactiveEngagementMutex.RUnlock()
	fake.disableProactiveEngagementRequestMutex.RLock()
	defer fake.disableProactiveEngagementRequestMutex.RUnlock()
	fake.disableProactiveEngagementWithContextMutex.RLock()
	defer fake.disableProactiveEngagementWithContextMutex.RUnlock()
	fake.disassociateDRTLogBucketMutex.RLock()
	defer fake.disassociateDRTLogBucketMutex.RUnlock()
	fake.disassociateDRTLogBucketRequestMutex.RLock()
	defer fake.disassociateDRTLogBucketRequestMutex.RUnlock()
	fake.disassociateDRTLogBucketWithContextMutex.RLock()
	defer fake.disassociateDRTLogBucketWithContextMutex.RUnlock()
	fake.disassociateDRTRoleMutex.RLock()
	defer fake.disassociateDRTRoleMutex.RUnlock()
	fake.disassociateDRTRoleRequestMutex.RLock()
	defer fake.disassociateDRTRoleRequestMutex.RUnlock()
	fake.disassociateDRTRoleWithContextMutex.RLock()
	defer fake.disassociateDRTRoleWithContextMutex.RUnlock()
	fake.disassociateHealthCheckMutex.RLock()
	defer fake.disassociateHealthCheckMutex.RUnlock()
	fake.disassociateHealthCheckRequestMutex.RLock()
	defer fake.disassociateHealthCheckRequestMutex.RUnlock()
	fake.disassociateHealthCheckWithContextMutex.RLock()
	defer fake.disassociateHealthCheckWithContextMutex.RUnlock()
	fake.enableProactiveEngagementMutex.RLock()
	defer fake.enableProactiveEngagementMutex.RUnlock()
	fake.enableProactiveEngagementRequestMutex.RLock()
	defer fake.enableProactiveEngagementRequestMutex.RUnlock()
	fake.enableProactiveEngagementWithContextMutex.RLock()
	defer fake.enableProactiveEngagementWithContextMutex.RUnlock()
	fake.getSubscriptionStateMutex.RLock()
	defer fake.getSubscriptionStateMutex.RUnlock()
	fake.getSubscriptionStateRequestMutex.RLock()
	defer fake.getSubscriptionStateRequestMutex.RUnlock()
	fake.getSubscriptionStateWithContextMutex.RLock()
	defer fake.getSubscriptionStateWithContextMutex.RUnlock()
	fake.listAttacksMutex.RLock()
	defer fake.listAttacksMutex.RUnlock()
	fake.listAttacksPagesMutex.RLock()
	defer fake.listAttacksPagesMutex.RUnlock()
	fake.listAttacksPagesWithContextMutex.RLock()
	defer fake.listAttacksPagesWithContextMutex.RUnlock()
	fake.listAttacksRequestMutex.RLock()
	defer fake.listAttacksRequestMutex.RUnlock()
	fake.listAttacksWithContextMutex.RLock()
	defer fake.listAttacksWithContextMutex.RUnlock()
	fake.listProtectionsMutex.RLock()
	defer fake.listProtectionsMutex.RUnlock()
	fake.listProtectionsPagesMutex.RLock()
	defer fake.listProtectionsPagesMutex.RUnlock()
	fake.listProtectionsPagesWithContextMutex.RLock()
	defer fake.listProtectionsPagesWithContextMutex.RUnlock()
	fake.listProtectionsRequestMutex.RLock()
	defer fake.listProtectionsRequestMutex.RUnlock()
	fake.listProtectionsWithContextMutex.RLock()
	defer fake.listProtectionsWithContextMutex.RUnlock()
	fake.updateEmergencyContactSettingsMutex.RLock()
	defer fake.updateEmergencyContactSettingsMutex.RUnlock()
	fake.updateEmergencyContactSettingsRequestMutex.RLock()
	defer fake.updateEmergencyContactSettingsRequestMutex.RUnlock()
	fake.updateEmergencyContactSettingsWithContextMutex.RLock()
	defer fake.updateEmergencyContactSettingsWithContextMutex.RUnlock()
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	fake.updateSubscriptionRequestMutex.RLock()
	defer fake.updateSubscriptionRequestMutex.RUnlock()
	fake.updateSubscriptionWithContextMutex.RLock()
	defer fake.updateSubscriptionWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeShieldAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shieldiface.ShieldAPI = new(FakeShieldAPI)
