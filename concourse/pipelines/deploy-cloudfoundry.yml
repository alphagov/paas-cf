resources:
  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: {{branch_name}}

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: vpc.tfstate

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh.tfstate

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.tfstate
      region_name: eu-west-1

  - name: cf-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: cf.tfstate
      region_name: eu-west-1

  - name: cf-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: cf-manifest.yml

  - name: cf-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: cf-secrets.yml

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-secrets.yml

  - name: bosh-CA
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-CA.tar.gz

  - name: bbs_server-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bbs_server-cert.tar.gz

  - name: bbs_client-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bbs_client-cert.tar.gz

  - name: consul_server-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: consul_server-cert.tar.gz

  - name: consul_agent-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: consul_agent-cert.tar.gz

  - name: router_ssl-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: router_ssl-cert.tar.gz

  - name: uaa_jwt_signing-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: uaa_jwt_signing-cert.tar.gz

jobs:
  - name: init
    serial_groups: [ deploy ]
    serial: true
    plan:
      - get: paas-cf
      - task: init
        config:
          image: docker:///governmentpaas/curl-ssl
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              paas-cf/concourse/scripts/s3init.sh {{state_bucket}} cf.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
          inputs:
          - name: paas-cf
  - name: terraform
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          passed: ['init']
          trigger: true
        - get: vpc-tfstate
        - get: concourse-tfstate
        - get: bosh-tfstate
        - get: cf-tfstate
      - task: terraform-variables
        config:
          image: docker:///ruby
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: concourse-tfstate
            - name: bosh-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate > vpc.tfvars.sh
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < concourse-tfstate/concourse.tfstate > concourse.tfvars.sh
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate > bosh.tfvars.sh
      - task: terraform
        config:
          image: docker:///governmentpaas/docker-terraform
          params:
            TF_VAR_env: {{deploy_env}}
            AWS_DEFAULT_REGION: {{aws_region}}
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . terraform-variables/vpc.tfvars.sh
              . terraform-variables/concourse.tfvars.sh
              . terraform-variables/bosh.tfvars.sh

              terraform apply -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
                -state=cf-tfstate/cf.tfstate -state-out=cf.tfstate paas-cf/terraform/cloudfoundry
        ensure:
          put: cf-tfstate
          params:
            file: terraform/cf.tfstate

  - name: generate-cf-secrets
    plan:
      - get: paas-cf
        passed: ['init']
        trigger: true

      - task: generate
        config:
          image: docker:///governmentpaas/mksecrets
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                ./paas-cf/concourse/scripts/generate-cf-secrets.sh > cf-secrets.yml
                ls -l cf-secrets.yml

      - task: upload
        config:
          image: docker:///governmentpaas/curl-ssl
          inputs:
            - name: paas-cf
            - name: generate
          run:
            path: paas-cf/concourse/scripts/s3init.sh
            args:
              - {{state_bucket}}
              - cf-secrets.yml
              - generate/cf-secrets.yml

  - name: generate-cf-certs
    plan:
      - aggregate:
        - get: paas-cf
          passed: ['init']
          trigger: true
        - get: bosh-CA
      - task: generate-cf-certs
        config:
          image: docker:///governmentpaas/certstrap
          inputs:
          - name: bosh-CA
          - name: paas-cf
          params:
            CERTS_TO_GENERATE: |
              bosh-CA:bbs_server,bbs.service.cf.internal
              bosh-CA:bbs_client,
              bosh-CA:router_ssl,*.${DEPLOY_ENV}.cf.paas.alphagov.co.uk
              bosh-CA:uaa_jwt_signing,
              bosh-CA:consul_server,server.dc1.cf.internal,server.dc2.cf.internal
              bosh-CA:consul_agent,
            DEPLOY_ENV: {{deploy_env}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              mkdir out
              for ca_tgz in */*-CA.tar.gz; do
                tar -xzf $ca_tgz -C out
              done
              for cert_entry in ${CERTS_TO_GENERATE}; do
                cert_info=$(eval echo ${cert_entry%%,*}) # eval to workaround poor concourse interpolation
                ca=${cert_info%%:*}
                cn=${cert_info#*:}
                domains=$(eval echo ${cert_entry#*,})

                if ! paas-cf/concourse/scripts/s3init.sh {{state_bucket}} ${cn}-cert.tar.gz ; then
                  certstrap request-cert --passphrase "" --common-name "${cn}" ${domains:+--domain "${domains}"}
                  certstrap sign --CA $ca --passphrase "" "${cn}"
                  cd out
                  tar -cvzf ../${cn}-cert.tar.gz ${cn}.*
                  ../paas-cf/concourse/scripts/s3init.sh {{state_bucket}} ${cn}-cert.tar.gz ../${cn}-cert.tar.gz
                  cd ..
                else
                  echo "Certificate ${cn} is already generated, skipping."
                fi
              done

  - name: generate-manifest
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          passed: [init]
        - get: bosh-CA
        - get: bbs_server-cert
        - get: bbs_client-cert
        - get: consul_server-cert
        - get: consul_agent-cert
        - get: router_ssl-cert
        - get: uaa_jwt_signing-cert
        - get: vpc-tfstate
        - get: bosh-tfstate
        - get: concourse-tfstate
        - get: cf-tfstate
          passed: ['terraform']
          trigger: true
        - get: cf-secrets
      - task: cf-certs
        config:
          image: docker:///alpine#3.3
          inputs:
          - name: bosh-CA
          - name: paas-cf
          - name: bbs_server-cert
          - name: bbs_client-cert
          - name: consul_server-cert
          - name: consul_agent-cert
          - name: router_ssl-cert
          - name: uaa_jwt_signing-cert
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              for cert in *-cert *-CA; do
                cn=${cert%%-cert}
                yaml_key_name=$(echo ${cn} | tr A-Z- a-z_)

                tar -xzf ${cert}/${cert}.tar.gz
                paas-cf/concourse/scripts/file-to-yaml.sh secrets ${yaml_key_name}_key ${cn}.key  > ${cn}_key.yml
                paas-cf/concourse/scripts/file-to-yaml.sh secrets ${yaml_key_name}_cert ${cn}.crt  > ${cn}_cert.yml
              done
      - task: uaa_jwt_verification_key
        config:
          image: docker:///governmentpaas/certstrap
          inputs:
          - name: paas-cf
          - name: uaa_jwt_signing-cert
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              tar -xzf uaa_jwt_signing-cert/uaa_jwt_signing-cert.tar.gz
              openssl rsa -pubout -in uaa_jwt_signing.key -out uaa_jwt_verification.pem
              paas-cf/concourse/scripts/file-to-yaml.sh secrets uaa_jwt_verification_key uaa_jwt_verification.pem  > uaa_jwt_verification_key.yml

      - task: extract-terraform-outputs
        config:
          platform: linux
          image: docker:///ruby
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: bosh-tfstate
            - name: concourse-tfstate
            - name: cf-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              SCPATH="./paas-cf/concourse/scripts"
              SCFILE="extract_terraform_state_to_yaml.rb"
              for state in vpc bosh concourse cf; do
                $SCPATH/$SCFILE < $state-tfstate/$state.tfstate > $state.yml
              done

      - task: generate-manifest
        config:
          platform: linux
          image: docker:///governmentpaas/spruce
          params:
            MANIFEST_STUBS: |
              ./extract-terraform-outputs/*.yml
              ./cf-secrets/cf-secrets.yml
              ./cf-certs/*.yml
              ./uaa_jwt_verification_key/uaa_jwt_verification_key.yml
          inputs:
            - name: paas-cf
            - name: extract-terraform-outputs
            - name: cf-secrets
            - name: cf-certs
            - name: uaa_jwt_verification_key
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/build_manifest.sh $MANIFEST_STUBS > cf-manifest.yml
      - put: cf-manifest
        params:
          file: generate-manifest/cf-manifest.yml

  - name: deploy
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          passed: [init]
        - get: cf-manifest
          passed: ['generate-manifest']
          trigger: true
        - get: bosh-secrets
      - aggregate:
        - task: stemcell-tarball
          config:
            params:
              VERSION: {{stemcell-version}}
              NAME: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
              URL: https://bosh.io/d/stemcells/"${NAME}"?v="${VERSION}"
              TYPE: stemcell
            image: docker:///concourse/bosh-deployment-resource
            platform: linux
            inputs:
            - name: paas-cf
            - name: bosh-secrets
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                BOSH_PASSWORD=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml) \
                ./paas-cf/concourse/scripts/bosh_ensure_uploaded.sh
        - task: cf-release-tarball
          config:
            params:
              VERSION: {{cf-release-version}}
              NAME: cf
              URL: https://bosh.io/d/github.com/cloudfoundry/cf-release?v="${VERSION}"
              TYPE: release
            image: docker:///concourse/bosh-deployment-resource
            platform: linux
            inputs:
            - name: paas-cf
            - name: bosh-secrets
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                BOSH_PASSWORD=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml) \
                ./paas-cf/concourse/scripts/bosh_ensure_uploaded.sh

        - task: nginx-release-tarball
          config:
            params:
              VERSION: {{nginx-release-version}}
              NAME: nginx
              URL: https://s3.amazonaws.com/nginx-release/nginx-"${VERSION}".tgz
              TYPE: release
            image: docker:///concourse/bosh-deployment-resource
            platform: linux
            inputs:
            - name: paas-cf
            - name: bosh-secrets
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                BOSH_PASSWORD=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml) \
                ./paas-cf/concourse/scripts/bosh_ensure_uploaded.sh

        - task: diego-release-tarball
          config:
            params:
              VERSION: {{diego-release-version}}
              NAME: diego
              URL: https://bosh.io/d/github.com/cloudfoundry-incubator/diego-release?v="${VERSION}"
              TYPE: release
            image: docker:///concourse/bosh-deployment-resource
            platform: linux
            inputs:
            - name: paas-cf
            - name: bosh-secrets
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                BOSH_PASSWORD=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml) \
                ./paas-cf/concourse/scripts/bosh_ensure_uploaded.sh

        - task: garden-release-tarball
          config:
            params:
              VERSION: {{garden-release-version}}
              NAME: garden-linux
              URL: https://bosh.io/d/github.com/cloudfoundry-incubator/garden-linux-release?v="${VERSION}"
              TYPE: release
            image: docker:///concourse/bosh-deployment-resource
            platform: linux
            inputs:
            - name: paas-cf
            - name: bosh-secrets
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                BOSH_PASSWORD=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml) \
                ./paas-cf/concourse/scripts/bosh_ensure_uploaded.sh

        - task: etcd-release-tarball
          config:
            params:
              VERSION: {{etcd-release-version}}
              NAME: etcd
              URL: https://bosh.io/d/github.com/cloudfoundry-incubator/etcd-release?v="${VERSION}"
              TYPE: release
            image: docker:///concourse/bosh-deployment-resource
            platform: linux
            inputs:
            - name: paas-cf
            - name: bosh-secrets
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                BOSH_PASSWORD=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml) \
                ./paas-cf/concourse/scripts/bosh_ensure_uploaded.sh

      - task: cf-deploy
        config:
          image: docker:///concourse/bosh-deployment-resource
          inputs:
          - name: cf-manifest
          - name: bosh-secrets
          platform: linux
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              bosh_password=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml)
              bosh -u admin -p "${bosh_password}" target https://10.0.0.6:25555
              bosh login admin "${bosh_password}"
              sed -e "s/^director_uuid:.*/director_uuid: $(bosh status --uuid)/" < cf-manifest/cf-manifest.yml > cf-manifest.yml
              bosh deployment cf-manifest.yml
              bosh -n deploy

      - put: cf-manifest
        params:
          file: cf-deploy/cf-manifest.yml

  - name: smoke-tests
    plan:
    - aggregate:
      - get: cf-manifest
        passed: ['deploy']
        trigger: true
      - get: bosh-secrets
    - task: smoke-tests
      config:
        inputs:
        - name: cf-manifest
        - name: bosh-secrets
        image: docker:///concourse/bosh-deployment-resource
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            bosh_password=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml)
            bosh -u admin -p "${bosh_password}" target https://10.0.0.6:25555
            bosh login admin "${bosh_password}"
            bosh deployment cf-manifest/cf-manifest.yml
            bosh -n \
              run errand smoke_tests \
              --download-logs --logs-dir .

  - name: acceptance-tests
    plan:
    - aggregate:
      - get: cf-manifest
        passed: ['deploy']
      - get: bosh-secrets
    - task: acceptance-tests
      config:
        inputs:
        - name: cf-manifest
        - name: bosh-secrets
        image: docker:///concourse/bosh-deployment-resource
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            bosh_password=$(awk '$1~/bosh_admin_password/ {print $2}' bosh-secrets/bosh-secrets.yml)
            bosh -u admin -p "${bosh_password}" target https://10.0.0.6:25555
            bosh login admin "${bosh_password}"
            bosh deployment cf-manifest/cf-manifest.yml
            bosh -n \
              run errand acceptance_tests \
              --download-logs --logs-dir .
