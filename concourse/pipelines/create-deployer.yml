---
groups:
- name: create-deployer
  jobs:
  - init-bucket
  - vpc
  - concourse-terraform
  - concourse-prepare-deploy
  - concourse-deploy
  - expunge-vagrant

resources:
  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: {{branch_name}}

  - name: build-all-trigger
    type: semver-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      key: build-all-trigger

  - name: bucket-terraform-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bucket.tfstate

  - name: vpc-terraform-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: vpc.tfstate
      region_name: {{aws_region}}

  - name: concourse-terraform-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.tfstate
      region_name: {{aws_region}}

  - name: concourse-bosh-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse-state.json
      region_name: {{aws_region}}

  - name: concourse-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.yml
      region_name: {{aws_region}}

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: id_rsa
      region_name: {{aws_region}}

  - name: concourse-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse-cert.tar.gz
      region_name: {{aws_region}}

jobs:
  - name: init-bucket
    serial: true
    plan:
    - get: paas-cf
    - task: try-fetch-bucket-state
      config:
        image: docker:///governmentpaas/awscli
        params:
          AWS_DEFAULT_REGION: {{aws_region}}
        inputs:
          - name: paas-cf
        outputs:
          - name: bucket-state
        run:
          path: sh
          args:
          - -c
          - -e
          - |
            cd bucket-state
            aws s3 cp s3://{{state_bucket}}/bucket.tfstate . || true
            ls -l

    - task: create-init-bucket
      config:
        image: docker:///governmentpaas/docker-terraform
        params:
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        inputs:
          - name: paas-cf
          - name: bucket-state
        run:
          path: sh
          args:
          - -c
          - |
            if [ -f bucket-state/bucket.tfstate ]; then
              cp bucket-state/bucket.tfstate .
            fi
            terraform apply -state=bucket.tfstate -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
              paas-cf/terraform/bucket
      on_success:
        put: bucket-terraform-state
        params:
          file: create-init-bucket/bucket.tfstate
    - task: s3init-concourse
      config:
        image: docker:///governmentpaas/curl-ssl
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} vpc.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} concourse.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} concourse-state.json paas-cf/concourse/init_files/bosh-init-state.json.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} concourse-cert.tar.gz paas-cf/concourse/init_files/empty.tar.gz
        inputs:
        - name: paas-cf
    - put: build-all-trigger
      params: {bump: patch}

  - name: vpc
    serial: true
    plan:
    - get: paas-cf
      trigger: true
      passed: [init-bucket]
    - get: build-all-trigger
      trigger: true
      passed: [init-bucket]
    - get: vpc-terraform-state

    - task: ssh-keygen
      config:
        image: docker:///governmentpaas/curl-ssl
        inputs:
        - name: paas-cf
        params:
          AWS_DEFAULT_REGION: {{aws_region}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            apk add --update openssh
            ssh-keygen -t rsa -b 4096 -f generated_id_rsa -N ''
            ./paas-cf/concourse/scripts/s3init.sh {{state_bucket}} id_rsa generated_id_rsa
            ./paas-cf/concourse/scripts/s3init.sh {{state_bucket}} id_rsa.pub generated_id_rsa.pub

    - task: deploy-vpc
      config:
        platform: linux
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        - name: vpc-terraform-state
        - name: ssh-keygen
        params:
          VAGRANT_IP: {{vagrant_ip}}
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            cp ssh-keygen/id_rsa.pub paas-cf/terraform/vpc
            terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
            terraform apply ${terraform_params} -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
              -state=vpc-terraform-state/vpc.tfstate -state-out=vpc.tfstate paas-cf/terraform/vpc
      ensure:
        put: vpc-terraform-state
        params:
          file: deploy-vpc/vpc.tfstate

  - name: concourse-terraform
    serial: true
    plan:
    - get: paas-cf
      passed: [vpc]
    - get: build-all-trigger
      trigger: true
      passed: [vpc]
    - get: vpc-terraform-state
      passed: [vpc]
    - get: concourse-terraform-state
    - get: concourse-cert

    - task: vpc-terraform-outputs-to-sh
      config:
        image: docker:///ruby#2.2.3-slim
        inputs:
        - name: paas-cf
        - name: vpc-terraform-state
        outputs:
        - name: vpc-terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < vpc-terraform-state/vpc.tfstate \
            > vpc-terraform-outputs/tfvars.sh
            ls -l vpc-terraform-outputs/tfvars.sh
            cat vpc-terraform-outputs/tfvars.sh

    - task: generate-concourse-cert
      config:
        image: docker:///governmentpaas/curl-ssl
        inputs:
        - name: concourse-cert
        - name: vpc-terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            tar xzvf concourse-cert/concourse-cert.tar.gz
            if [ -f concourse.crt ] && [ -f concourse.key ]; then
              echo Certificate and private key already created, nothing to do
              cp concourse-cert/concourse-cert.tar.gz .
              exit 0
            fi
            . vpc-terraform-outputs/tfvars.sh
            openssl req -x509 -newkey rsa:2048 -keyout concourse.key \
              -out concourse.crt -days 365 -nodes -subj \
              "/C=UK/ST=London/L=London/O=GDS/CN=deployer.{{deploy_env}}.${TF_VAR_system_dns_zone_name}"
            tar czvf concourse-cert.tar.gz concourse.crt concourse.key

    - task: terraform-apply
      config:
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        - name: vpc-terraform-outputs
        - name: concourse-terraform-state
        - name: generate-concourse-cert
        params:
          VAGRANT_IP: {{vagrant_ip}}
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            cp generate-concourse-cert/concourse.crt generate-concourse-cert/concourse.key .
            . vpc-terraform-outputs/tfvars.sh
            terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
            terraform apply ${terraform_params} \
              -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
              -state=concourse-terraform-state/concourse.tfstate \
              -state-out=concourse.tfstate \
              paas-cf/terraform/concourse
      ensure:
        put: concourse-terraform-state
        params:
          file: terraform-apply/concourse.tfstate

    - put: concourse-cert
      params:
        file: generate-concourse-cert/concourse-cert.tar.gz

  - name: concourse-prepare-deploy
    serial: true
    plan:
    - get: paas-cf
      passed: [concourse-terraform]
    - get: build-all-trigger
      trigger: true
      passed: [concourse-terraform]
    - get: vpc-terraform-state
      passed: [vpc]
    - get: concourse-terraform-state
      passed: [concourse-terraform]

    - task: terraform-outputs-to-yaml
      config:
        image: docker:///ruby#2.2.3-slim
        inputs:
        - name: paas-cf
        - name: concourse-terraform-state
        - name: vpc-terraform-state
        outputs:
        - name: terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
            < vpc-terraform-state/vpc.tfstate \
            > terraform-outputs/vpc-terraform-outputs.yml
            ls -l terraform-outputs/vpc-terraform-outputs.yml
            cat terraform-outputs/vpc-terraform-outputs.yml

            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
            < concourse-terraform-state/concourse.tfstate \
            > terraform-outputs/concourse-terraform-outputs.yml
            ls -l terraform-outputs/concourse-terraform-outputs.yml
            cat terraform-outputs/concourse-terraform-outputs.yml

    - task: create-concourse-secrets
      config:
        params:
          concourse_atc_password: {{concourse_atc_password}}
        outputs:
          - name: concourse-secrets
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            cat > concourse-secrets/concourse-secrets.yml << EOF
            ---
            secrets:
              concourse_atc_password: ${concourse_atc_password}
            EOF
            ls -l concourse-secrets/concourse-secrets.yml

    - task: generate-concourse-manifest
      config:
        image: docker:///governmentpaas/spruce
        inputs:
        - name: paas-cf
        - name: concourse-secrets
        - name: terraform-outputs
        outputs:
        - name: concourse-manifest
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            spruce merge --prune terraform_outputs --prune secrets \
              paas-cf/manifests/concourse-base.yml concourse-secrets/concourse-secrets.yml \
              terraform-outputs/concourse-terraform-outputs.yml \
              terraform-outputs/vpc-terraform-outputs.yml \
              > concourse-manifest/concourse.yml
            ls -l concourse-manifest/concourse.yml

    - put: concourse-manifest
      params:
        file: concourse-manifest/concourse.yml

  - name: concourse-deploy
    serial: true
    plan:
    - get: build-all-trigger
      trigger: true
      passed: [concourse-prepare-deploy]
    - get: concourse-bosh-state
    - get: ssh-private-key
    - get: concourse-manifest
      passed: [concourse-prepare-deploy]

    - task: concourse-deploy
      timeout: 30m
      config:
        image: docker:///governmentpaas/bosh-init
        inputs:
        - name: concourse-manifest
        - name: concourse-bosh-state
        - name: ssh-private-key
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            cp ssh-private-key/id_rsa id_rsa
            chmod 400 id_rsa
            ls -l id_rsa
            cp -v concourse-bosh-state/concourse-state.json .
            cp -v concourse-manifest/concourse.yml .
            export BOSH_INIT_LOG_LEVEL={{log_level}}
            bosh-init deploy concourse.yml
            rm concourse-manifest/concourse.yml
            rm id_rsa
      ensure:
        put: concourse-bosh-state
        params:
          file: concourse-deploy/concourse-state.json

  - name: expunge-vagrant
    serial: true
    plan:
    - get: paas-cf
    - get: build-all-trigger
      trigger: true
      passed: [concourse-deploy]
    - get: vpc-terraform-state
      passed: [vpc]
    - get: concourse-terraform-state
      passed: [concourse-terraform]

    - task: vpc-terraform-outputs-to-sh
      config:
        image: docker:///ruby#2.2.3-slim
        inputs:
        - name: paas-cf
        - name: vpc-terraform-state
        outputs:
        - name: vpc-terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < vpc-terraform-state/vpc.tfstate \
            > vpc-terraform-outputs/tfvars.sh
            ls -l vpc-terraform-outputs/tfvars.sh
            cat vpc-terraform-outputs/tfvars.sh

    - task: remove-vagrant-IP-from-ssh-SG
      config:
        platform: linux
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        - name: vpc-terraform-state
        params:
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            terraform apply -target=aws_security_group.office-access-ssh \
              -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
              -target=aws_subnet.infra \
              -state=vpc-terraform-state/vpc.tfstate -state-out=vpc.tfstate \
              paas-cf/terraform/vpc
      ensure:
        put: vpc-terraform-state
        params:
          file: remove-vagrant-IP-from-ssh-SG/vpc.tfstate

    - task: remove-vagrant-IP-from-concourse-SG
      config:
        platform: linux
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        - name: vpc-terraform-outputs
        - name: concourse-terraform-state
        params:
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            . vpc-terraform-outputs/tfvars.sh
            terraform apply -target=aws_security_group.concourse \
              -state=concourse-terraform-state/concourse.tfstate -state-out=concourse.tfstate \
              -var-file=paas-cf/terraform/{{aws_account}}.tfvars paas-cf/terraform/concourse
      ensure:
        put: concourse-terraform-state
        params:
          file: remove-vagrant-IP-from-concourse-SG/concourse.tfstate
