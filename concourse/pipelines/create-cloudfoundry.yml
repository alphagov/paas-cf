---
meta:
  resources:
    get-paas-cf: &get-paas-cf
      get: paas-cf
      params: &get-paas-cf-params
        submodule_recursive: 'false'  # git-resource issue 307

  containers:
    awscli: &awscli-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/awscli
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    bosh-cli-v2: &gov-paas-bosh-cli-v2-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/bosh-cli-v2
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    cf-acceptance-tests: &cf-acceptance-tests-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/cf-acceptance-tests
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    cf-cli: &cf-cli-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/cf-cli
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    cf-uaac: &cf-uaac-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/cf-uaac
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    git-ssh: &git-ssh-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/git-ssh
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    ruby-slim: &ruby-slim-image-resource
      type: docker-image
      source:
        repository: ruby
        tag: 2.7-slim
    golang: &golang-image-resource
      type: docker-image
      source:
        repository: golang
        tag: '1.14'
    terraform: &terraform-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/terraform
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

    curl-ssl: &curl-ssl-image-resource
      type: docker-image
      source:
        repository: ghcr.io/alphagov/paas/curl-ssl
        tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4


  tasks:
    - &add-grafana-job-annotation
      try:
        put: grafana-job-annotation
        tags: [colocated-with-web]
        params:
          tags: [incomplete]

    - &end-grafana-job-annotation
      try:
        put: grafana-job-annotation
        tags: [colocated-with-web]
        params:
          path: grafana-job-annotation
          tags: [completed]

    - &add-grafana-overview-annotation
      try:
        do:
          - put: grafana-overview-annotation
            tags: [colocated-with-web]
            params:
              tags: [incomplete]

          - put: grafana-overview-annotation-id
            params:
              file: grafana-overview-annotation/id

    - &end-grafana-overview-annotation
      try:
        do:
          - get: grafana-overview-annotation-id

          - task: consume-grafana-overview-annotation-id
            tags: [colocated-with-web]
            config:
              platform: linux
              inputs:
                - name: grafana-overview-annotation-id
              image_resource: *cf-cli-image-resource
              run:
                path: echo

          - put: grafana-overview-annotation
            tags: [colocated-with-web]
            params:
              path: grafana-overview-annotation-id
              tags: [complete]

groups:
  - name: deploy
    jobs:
      - pipeline-lock
      - pre-deploy
      - generate-secrets
      - app-availability-tests
      - internal-app-availability-tests
      - api-availability-tests
      - cf-terraform
      - generate-cf-config
      - cf-deploy
      - app-autoscaler-deploy
      - prometheus-deploy
      - post-deploy
      - deploy-paas-accounts
      - deploy-paas-admin
      - deploy-paas-auditor
      - deploy-paas-billing
      - deploy-paas-metrics
      - deploy-paas-aiven-broker
      - deploy-paas-prometheus-endpoints
      - smoke-tests
      - acceptance-tests
      - custom-acceptance-tests
      - custom-broker-acceptance-tests
      - app-autoscaler-acceptance-tests
      - bosh-tests
      - rotate-certs
      - check-certificates-after-rotation
      - tag-release
      - pipeline-unlock
  - name: platform-core
    jobs:
      - pipeline-lock
      - pre-deploy
      - generate-secrets
      - app-availability-tests
      - internal-app-availability-tests
      - api-availability-tests
      - cf-terraform
      - generate-cf-config
      - cf-deploy
      - app-autoscaler-deploy
      - prometheus-deploy
      - post-deploy
      - smoke-tests
      - acceptance-tests
      - custom-acceptance-tests
      - custom-broker-acceptance-tests
      - app-autoscaler-acceptance-tests
      - bosh-tests
      - tag-release
      - pipeline-unlock
  - name: platform-services
    jobs:
      - deploy-paas-accounts
      - deploy-paas-admin
      - deploy-paas-auditor
      - deploy-paas-billing
      - deploy-paas-metrics
      - deploy-paas-aiven-broker
  - name: operator
    jobs:
      - generate-git-keys
      - generate-paas-admin-git-keys
      - generate-paas-aiven-broker-git-keys
      - generate-paas-billing-git-keys
      - show-release-version
      - bump-minor-version
      - bump-major-version
      - bump-patch-version
      - pipeline-check-lock
      - pipeline-release-lock
      - healthcheck-check-state
      - healthcheck-disable
      - cleanup-deleted-cf-users
  - name: tests
    jobs:
      - app-availability-tests
      - internal-app-availability-tests
      - api-availability-tests
      - smoke-tests
      - acceptance-tests
      - custom-acceptance-tests
      - custom-broker-acceptance-tests
      - app-autoscaler-acceptance-tests
      - bosh-tests
  - name: health
    jobs:
      - continuous-smoke-tests
      - continuous-billing-smoke-tests
      - check-certificates
  - name: credentials
    jobs:
      - set-smoke-test-creds
      - rotate-cloudfoundry-credentials
      - rotate-broker-credentials
      - rotate-database-encryption-keys
      - rotate-prometheus-credentials
      - expire-aws-keys
      - rotate-cf-admin-password
resource_types:
- name: pinned-pool
  type: docker-image
  source:
    repository: concourse/pool-resource
    tag: 1.1.1

- name: s3-iam
  type: docker-image
  source:
    repository: ghcr.io/alphagov/paas/s3-resource
    tag: 97e441efbfb06ac7fb09786fd74c64b05f9cc907

- name: semver-iam
  type: docker-image
  source:
    repository: ghcr.io/alphagov/paas/semver-resource
    tag: f2a80c95481056aa57d837e3b14f0012b542fdb3

- name: grafana-annotation
  type: docker-image
  source:
    repository: ghcr.io/alphagov/paas/grafana-annotation-resource
    tag: 140506423e1194319fc1e2ed7f8d04a36ca61ae3

resources:
  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: ((pipeline_trigger_file))

  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: ((branch_name))
      tag_filter: ((paas_cf_tag_filter))
      commit_verification_keys: ((gpg_public_keys))

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: vpc.tfstate

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: concourse.tfstate
      region_name: ((aws_region))

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh.tfstate

  - name: git-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa
      region_name: ((aws_region))

  - name: cf-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: cf.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 4,
            "terraform_version": "0.12.29",
            "serial": 0,
            "outputs": {},
            "resources": []
        }

  - name: cyber-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: cyber.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 4,
            "terraform_version": "0.12.29",
            "serial": 0,
            "outputs": {},
            "resources": []
        }

  - name: cf-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-manifest.yml

  - name: cf-manifest-pre-vars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-manifest-pre-vars.yml

  - name: paas-cf-cloud-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: paas-cf-cloud-config.yml

  - name: paas-cf-runtime-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: paas-cf-runtime-config.yml

  - name: paas-trusted-people
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: paas-trusted-people/users.yml
      initial_version: "-"
      initial_content_text: ""

  - name: deployed-healthcheck
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: healthcheck-deployed
      initial_version: "-"
      initial_content_text: "no"

  - name: cf-acceptance-tests
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-acceptance-tests
      branch: cf13.19

  - name: cf-smoke-tests-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-smoke-tests-release
      tag_filter: "41.0.1"
      submodules:
      - "src/smoke_tests"

  - name: smoke-test-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: smoke-test-config.json

  - name: git-keys
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: git-keys.tar.gz
      initial_version: "-"
      # This is an empty tar.gz file base64 encoded
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: release-version
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: release-version
      initial_version: 0.0.0

  - name: pipeline-pool
    type: pinned-pool
    source:
      uri: ((git_concourse_pool_clone_full_url_ssh))
      branch: master
      pool: ((pipeline_name))
      private_key: ((pipeline_lock_git_private_key))

  - name: smoke-tests-timer
    type: time
    source:
      interval: 5m

  - name: billing-smoke-tests-timer
    type: time
    source:
      interval: 5m
      location: Europe/London
      start: 9:00 AM
      stop: 5:00 PM
      days: [Monday, Tuesday, Wednesday, Thursday, Friday]

  - name: check-certificates-timer
    type: time
    source:
      interval: 24h

  - name: expire-aws-keys-timer
    type: time
    source:
      interval: 720h

  - name: paas-aiven-broker
    type: git
    source:
      uri: https://github.com/alphagov/paas-aiven-broker.git
      branch: master
      tag_filter: ((deploy_env_tag_prefix))
      commit_verification_keys: ((gpg_public_keys))

  - name: paas-billing
    type: git
    source:
      uri: https://github.com/alphagov/paas-billing.git
      branch: master
      tag_filter: ((deploy_env_tag_prefix))
      commit_verification_keys: ((gpg_public_keys))

  - name: paas-accounts
    type: git
    source:
      uri: https://github.com/alphagov/paas-accounts.git
      branch: master
      tag_filter: v0.14.0

  - name: paas-auditor
    type: git
    source:
      uri: https://github.com/alphagov/paas-auditor.git
      branch: master
      tag_filter: v0.67.0

  - name: paas-admin
    type: git
    source:
      uri: https://github.com/alphagov/paas-admin.git
      branch: master
      tag_filter: ((deploy_env_tag_prefix))
      commit_verification_keys: ((gpg_public_keys))

  - name: paas-prometheus-endpoints
    type: git
    source:
      uri: https://github.com/alphagov/paas-prometheus-endpoints.git
      branch: main
      tag_filter: v0.10.0

  - name: prometheus-manifest-pre-vars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: prometheus-manifest-pre-vars.yml

  - name: app-autoscaler-manifest-pre-vars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: app-autoscaler-manifest-pre-vars.yml

  - name: paas-yet-another-cloudwatch-exporter
    type: git
    source:
      uri: https://github.com/alphagov/paas-yet-another-cloudwatch-exporter.git
      branch: gds_master

  # we want to use an app-autoscaler-release version which has acceptance tests
  # compatible with the CF CLI v7.
  # This exists as a git branch but not an official release
  # we can use the develop branch and specify the version in the get: step
  # the underlying version of the bosh release is still specified via a git
  # submodule in this repo
  - name: app-autoscaler-release-git
    type: git
    version:
      ref: ce0fb696423739ed7796e4c75c4ae31d82df5f41
    source:
      uri: https://github.com/cloudfoundry/app-autoscaler-release.git
      branch: develop

  - name: grafana-overview-annotation-id
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: grafana-overview-annotation-id/id

  - name: grafana-overview-annotation
    type: grafana-annotation
    tags: [colocated-with-web]
    source:
      url: https://grafana-1.((system_dns_zone_name))
      username: admin
      password: ((grafana_password))

      tags:
        - deployment-overview
        - concourse
        - create-cloudfoundry

      template: |
        ${BUILD_PIPELINE_NAME}
        ${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}

  - name: grafana-job-annotation
    type: grafana-annotation
    tags: [colocated-with-web]
    source:
      url: https://grafana-1.((system_dns_zone_name))
      username: admin
      password: ((grafana_password))

      tags:
        - deployment
        - concourse
        - create-cloudfoundry

      template: |
        ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}
        ${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}

jobs:
  - name: pipeline-lock
    serial: true
    plan:
      - in_parallel:
        - <<: *get-paas-cf
          trigger: ((auto_deploy))
        - get: git-ssh-private-key
      - task: init-pipeline-pool
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *git-ssh-image-resource
          inputs:
            - name: paas-cf
            - name: git-ssh-private-key
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                 echo "Pipeline locking is disabled, skipping..."
                 exit 0
              fi
              chmod 600 git-ssh-private-key/git_id_rsa
              git config --global push.default simple
              git config --global user.email "concourse@${DEPLOY_ENV}.${AWS_ACCOUNT}"
              git config --global user.name "Concourse server ${DEPLOY_ENV} in ${AWS_ACCOUNT}"

              ./paas-cf/concourse/scripts/create_pool_lock.sh \
                "((git_concourse_pool_clone_full_url_ssh))" \
                "$(pwd)/git-ssh-private-key/git_id_rsa" \
                "((pipeline_name))" lock

      - try:
          task: lock-the-pipeline
          tags: [colocated-with-web]
          config:
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: 3.12
            platform: linux
            params:
              DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                   echo "Pipeline locking is disabled, skipping..."
                   exit 0
                fi
                echo "About to lock. This job will fail and this is OK."
                exit 1
          on_failure:
            put: pipeline-pool
            params:
              claim: lock

      - task: self-update-pipeline
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ghcr.io/alphagov/paas/self-update-pipelines
              tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

          inputs:
            - name: paas-cf
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            MAKEFILE_ENV_TARGET: ((makefile_env_target))
            AWS_DEFAULT_REGION: ((aws_region))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            PIPELINES_TO_UPDATE: ((pipeline_name))
            ENABLE_ALERT_NOTIFICATIONS: ((ENABLE_ALERT_NOTIFICATIONS))
            BOSH_AZ: ((bosh_az))
            SKIP_AWS_CREDENTIAL_VALIDATION: true
            NEW_ACCOUNT_EMAIL_ADDRESS: ((NEW_ACCOUNT_EMAIL_ADDRESS))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            CONCOURSE_WEB_PASSWORD: ((concourse_web_password))
          run:
            path: ./paas-cf/concourse/scripts/self-update-pipeline.sh

      - *add-grafana-overview-annotation

      - put: pipeline-trigger
        params: {bump: patch}

  - name: generate-secrets
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - in_parallel:
          - <<: *get-paas-cf
            passed: ['pipeline-lock']
          - get: pipeline-trigger
            passed: ['pipeline-lock']
            trigger: true
      - in_parallel:
        - task: generate-cf-secrets
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
            params:
              CREDHUB_CLIENT: credhub-admin
              CREDHUB_SECRET: ((bosh-credhub-admin))
              CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
              CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
              DEPLOY_ENV: ((deploy_env))
            run:
              path: bash
              args:
                - -c
                - -e
                - |
                  credhub login

                  # Most credentials need to be available to concourse and bosh,
                  # but there are a couple that are only needed by concourse (and not bosh).
                  #
                  # We'll set them all in the /concourse/main namespace, then copy the values
                  # that we need in bosh to the /$DEPLOY_ENV/$DEPLOY_ENV namespace

                  bosh_credentials=(
                    external_cc_database_password
                    external_bbs_database_password
                    external_locket_database_password
                    external_uaa_database_password
                    external_silk_controller_database_password
                    external_policy_server_database_password
                  )

                  app_autoscaler_credentials=(
                    external_app_autoscaler_database_password
                  )

                  concourse_credentials=(
                    secrets_cf_db_master_password
                    secrets_cdn_db_master_password
                    "${bosh_credentials[@]}"
                    "${app_autoscaler_credentials[@]}"
                  )

                  for secret_name in ${concourse_credentials[*]}; do
                    credhub generate --type password --no-overwrite --name "/concourse/main/$secret_name"
                  done

                  for secret_name in ${bosh_credentials[*]}; do
                    value=$(credhub get --name "/concourse/main/$secret_name" --quiet)
                    credhub set --type password --name "/$DEPLOY_ENV/$DEPLOY_ENV/$secret_name" --password "$value"
                  done

                  for secret_name in ${app_autoscaler_credentials[*]}; do
                    value=$(credhub get --name "/concourse/main/$secret_name" --quiet)
                    credhub set --type password --name "/$DEPLOY_ENV/app-autoscaler/$secret_name" --password "$value"
                  done

        - task: generate-cf-admin-password
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
            params:
              CREDHUB_CLIENT: credhub-admin
              CREDHUB_SECRET: ((bosh-credhub-admin))
              CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
              CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
              DEPLOY_ENV: ((deploy_env))
            run:
              path: bash
              args:
                - -c
                - -e
                - |
                  credhub login
                  if credhub get -q -n "/${DEPLOY_ENV}/${DEPLOY_ENV}/cf_admin_password" > /dev/null; then
                    echo "CF Admin Password already set. Skipping."
                  else
                    credhub generate -n "/${DEPLOY_ENV}/${DEPLOY_ENV}/cf_admin_password" -t password --no-overwrite
                    cf_admin_password=$(credhub get -n "/${DEPLOY_ENV}/${DEPLOY_ENV}/cf_admin_password" -q)
                    credhub set -t password -n "/concourse/main/cf_pass" -w "${cf_admin_password}"
                  fi

  - name: pre-deploy
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - <<: *get-paas-cf
            passed: ['generate-secrets']

      - task: wait-for-app-availability-tests
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/wait-for-app-availability-tests.yml
        params:
          SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
          CF_ADMIN: admin
          CF_PASS: ((cf_pass))
          APP_NAME: healthcheck

      - task: wait-for-internal-app-availability-tests
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/wait-for-app-availability-tests.yml
        params:
          SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
          CF_ADMIN: admin
          CF_PASS: ((cf_pass))
          APP_NAME: healthcheck-pinger

      - task: wait-for-api-availability-tests
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/wait-for-api-availability-tests.yml
        params:
          AWS_DEFAULT_REGION: ((aws_region))
          STATE_BUCKET: ((state_bucket))

  - name: app-availability-tests
    serial: true
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - <<: *get-paas-cf
            passed: ['generate-secrets']
      - task: run-tests
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-acceptance-tests-image-resource
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
          params:
            SKIP_SSL_VALIDATION: true
            AVAILABILITY_TEST_HOST: healthcheck.((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_WEB_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_WEB_PASSWORD: ((concourse_web_password))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping app-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                export CONCOURSE_WEB_URL
                CONCOURSE_WEB_URL=https://deployer.${SYSTEM_DNS_ZONE_NAME}

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                export PIPELINE_TRIGGER_VERSION

                CONCOURSE_TEAM_NAME="main"
                CONCOURSE_PIPELINE_NAME="create-cloudfoundry"
                export CONCOURSE_TEAM_NAME CONCOURSE_PIPELINE_NAME

                CONCOURSE_JOB_NAME="post-deploy"
                CONCOURSE_RESOURCE_NAME="pipeline-trigger"
                export CONCOURSE_JOB_NAME CONCOURSE_RESOURCE_NAME

                echo "Running app-availability-tests"
                cd paas-cf/platform-tests/availability/app
                go test -timeout 12h -ginkgo.v

  - name: internal-app-availability-tests
    serial: true
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - <<: *get-paas-cf
            passed: ['generate-secrets']
      - task: run-tests
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-acceptance-tests-image-resource
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
          params:
            SKIP_SSL_VALIDATION: true
            AVAILABILITY_TEST_HOST: healthcheck-pinger.((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_WEB_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_WEB_PASSWORD: ((concourse_web_password))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping internal-app-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                export CONCOURSE_WEB_URL
                CONCOURSE_WEB_URL=https://deployer.${SYSTEM_DNS_ZONE_NAME}

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                export PIPELINE_TRIGGER_VERSION

                CONCOURSE_TEAM_NAME="main"
                CONCOURSE_PIPELINE_NAME="create-cloudfoundry"
                export CONCOURSE_TEAM_NAME CONCOURSE_PIPELINE_NAME

                CONCOURSE_JOB_NAME="post-deploy"
                CONCOURSE_RESOURCE_NAME="pipeline-trigger"
                export CONCOURSE_JOB_NAME CONCOURSE_RESOURCE_NAME

                echo "Running internal-app-availability-tests"
                cd paas-cf/platform-tests/availability/app
                go test -timeout 12h -ginkgo.v

  - name: api-availability-tests
    serial: true
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - <<: *get-paas-cf
            passed: ['generate-secrets']

      - task: upload-job-file
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *awscli-image-resource
          inputs:
            - name: pipeline-trigger
            - name: deployed-healthcheck
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"
                echo "Writing $JOB_FILE to S3 to signal job start"
                echo 'started' | aws s3 cp - "s3://((state_bucket))/$JOB_FILE"

      - task: run-tests
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-acceptance-tests-image-resource
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
          params:
            SKIP_SSL_VALIDATION: true
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_WEB_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_WEB_PASSWORD: ((concourse_web_password))
            AWS_DEFAULT_REGION: ((aws_region))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            CF_PASS: ((cf_pass))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                export CONCOURSE_WEB_URL="https://deployer.${SYSTEM_DNS_ZONE_NAME}"
                export CF_USER="admin"

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                export PIPELINE_TRIGGER_VERSION

                CONCOURSE_TEAM_NAME="main"
                CONCOURSE_PIPELINE_NAME="create-cloudfoundry"
                export CONCOURSE_TEAM_NAME CONCOURSE_PIPELINE_NAME

                CONCOURSE_JOB_NAME="post-deploy"
                CONCOURSE_RESOURCE_NAME="pipeline-trigger"
                export CONCOURSE_JOB_NAME CONCOURSE_RESOURCE_NAME

                export API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"

                cf api "${API_ENDPOINT}"
                cf auth "${CF_USER}" "${CF_PASS}"

                cf target -o admin -s healthchecks

                echo "Running api-availability-tests"
                cd paas-cf/platform-tests/availability/api
                go test -timeout 12h

        ensure:
          task: delete-job-file
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *awscli-image-resource
            inputs:
              - name: pipeline-trigger
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                  JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"
                  aws s3 rm "s3://((state_bucket))/${JOB_FILE}"

  - name: cf-terraform
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - <<: *get-paas-cf
            passed: ['pre-deploy']
          - get: pipeline-trigger
            passed: ['pre-deploy']
            trigger: true
          - get: vpc-tfstate
          - get: concourse-tfstate
          - get: cf-tfstate

      - task: extract-terraform-variables
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: concourse-tfstate
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < concourse-tfstate/concourse.tfstate > terraform-variables/concourse.tfvars.sh

                cat <<EOF > terraform-variables/cf-secrets.tfvars.sh
                export TF_VAR_secrets_cf_db_master_password="((secrets_cf_db_master_password))"
                export TF_VAR_secrets_cdn_db_master_password="((secrets_cdn_db_master_password))"
                export TF_VAR_external_cc_database_password="((external_cc_database_password))"
                export TF_VAR_external_bbs_database_password="((external_bbs_database_password))"
                export TF_VAR_external_locket_database_password="((external_locket_database_password))"
                export TF_VAR_external_uaa_database_password="((external_uaa_database_password))"
                export TF_VAR_external_silk_controller_database_password="((external_silk_controller_database_password))"
                export TF_VAR_external_policy_server_database_password="((external_policy_server_database_password))"
                export TF_VAR_external_app_autoscaler_database_password="((external_app_autoscaler_database_password))"
                EOF

                cat <<EOF > terraform-variables/cyber-secrets.tfvars.sh
                export TF_VAR_csls_kinesis_destination_arn="((cyber_csls_kinesis_destination_arn))"
                EOF

      - task: generate-peer-tfvars
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
          outputs:
            - name: vpc-peering-tfvars
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-cf/terraform/scripts/generate_vpc_peering_tfvars.rb "paas-cf/terraform/((deploy_env)).vpc_peering.json" \
                > vpc-peering-tfvars/vpc-peers.tfvars

                cat vpc-peering-tfvars/vpc-peers.tfvars

      - task: terraform-apply
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-tfstate
            - name: vpc-peering-tfvars
          outputs:
            - name: updated-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_apps_dns_zone_name: ((apps_dns_zone_name))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/concourse.tfvars.sh
                . terraform-variables/cf-secrets.tfvars.sh

                cp cf-tfstate/cf.tfstate updated-tfstate/cf.tfstate

                terraform init paas-cf/terraform/cloudfoundry

                sh paas-cf/terraform/./update-terraform-providers.sh updated-tfstate/cf.tfstate

                terraform apply \
                  -auto-approve=true \
                  -var-file="paas-cf/terraform/((aws_account)).tfvars" \
                  -var-file="paas-cf/terraform/cloudfoundry/((aws_account)).tfvars" \
                  -var-file="paas-cf/terraform/((aws_region)).tfvars" \
                  -var-file=vpc-peering-tfvars/vpc-peers.tfvars \
                  -state=updated-tfstate/cf.tfstate \
                  paas-cf/terraform/cloudfoundry
        ensure:
          put: cf-tfstate
          params:
            file: updated-tfstate/cf.tfstate

      - try:
          do:
            - get: cyber-tfstate
            - task: terraform-apply
              tags: [colocated-with-web]
              config:
                platform: linux
                image_resource: *terraform-image-resource
                inputs:
                  - name: terraform-variables
                  - name: paas-cf
                  - name: cyber-tfstate
                outputs:
                  - name: updated-tfstate
                params:
                  TF_VAR_env: ((deploy_env))
                  TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
                  TF_VAR_apps_dns_zone_name: ((apps_dns_zone_name))
                  AWS_DEFAULT_REGION: ((aws_region))
                run:
                  path: sh
                  args:
                    - -e
                    - -c
                    - |
                      . terraform-variables/vpc.tfvars.sh
                      . terraform-variables/concourse.tfvars.sh
                      . terraform-variables/cyber-secrets.tfvars.sh

                      cp cyber-tfstate/cyber.tfstate updated-tfstate/cyber.tfstate

                      terraform init paas-cf/terraform/cyber

                      sh paas-cf/terraform/./update-terraform-providers.sh updated-tfstate/cyber.tfstate

                      terraform apply \
                        -auto-approve=true \
                        -var-file="paas-cf/terraform/((aws_account)).tfvars" \
                        -var-file="paas-cf/terraform/((aws_region)).tfvars" \
                        -state=updated-tfstate/cyber.tfstate \
                        paas-cf/terraform/cyber
              ensure:
                put: cyber-tfstate
                params:
                  file: updated-tfstate/cyber.tfstate

      - task: extract-cf-terraform-outputs
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          outputs:
            - name: cf-terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                SCPATH="./paas-cf/concourse/scripts"
                SCFILE="extract_tf_vars_from_terraform_state.rb"
                $SCPATH/$SCFILE < cf-tfstate/cf.tfstate > cf-terraform-outputs/cf.tfstate.sh
                ls -l cf-terraform-outputs/cf.tfstate.sh

      - task: init-db
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ghcr.io/alphagov/paas/psql
              tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/cf-secrets.tfvars.sh
                . cf-terraform-outputs/cf.tfstate.sh

                paas-cf/manifests/cf-manifest/scripts/create-cf-dbs.sh
      - *end-grafana-job-annotation

  - name: generate-cf-config
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: ['cf-terraform']
            trigger: true
          - <<: *get-paas-cf
            passed: ['cf-terraform']
          - get: vpc-tfstate
          - get: bosh-tfstate
          - get: cf-tfstate
            passed: ['cf-terraform']

      - in_parallel:
        - task: extract-terraform-outputs
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-cf
              - name: vpc-tfstate
              - name: bosh-tfstate
              - name: cf-tfstate
            outputs:
              - name: terraform-outputs
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  for state in vpc bosh cf; do
                    ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                      < ${state}-tfstate/${state}.tfstate \
                      > terraform-outputs/${state}.yml
                    ./paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                      < ${state}-tfstate/${state}.tfstate \
                      > terraform-outputs/${state}.tfvars.sh
                  done

        - task: generate-peer-opsfile
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-cf
            outputs:
              - name: vpc-peering-opsfile
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  ruby paas-cf/terraform/scripts/generate_vpc_peering_opsfile.rb "paas-cf/terraform/((deploy_env)).vpc_peering.json" \
                  > vpc-peering-opsfile/vpc-peers.yml

                  cat vpc-peering-opsfile/vpc-peers.yml

        - task: generate-tenant-uaa-clients-opsfile
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-cf
            outputs:
              - name: tenant-uaa-clients-opsfile
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  ruby paas-cf/manifests/cf-manifest/scripts/generate-tenant-uaa-client-ops-file.rb \
                    "paas-cf/manifests/cf-manifest/data/100-tenant-uaa-client-config.yml" \
                    "((makefile_env_target))" \
                  > tenant-uaa-clients-opsfile/tenant-uaa-opsfile.yml

        - task: generate-microsoft-oauth-endpoints
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *cf-cli-image-resource
            outputs:
              - name: ms-oauth-endpoints
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  DISCOVERY_DOC=$(curl https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration)

                  echo "$DISCOVERY_DOC" | jq '.authorization_endpoint' --raw-output \
                    > ms-oauth-endpoints/authorization_endpoint

                  echo "$DISCOVERY_DOC" | jq '.token_endpoint' --raw-output \
                    > ms-oauth-endpoints/token_endpoint

                  echo "$DISCOVERY_DOC" | jq '.jwks_uri' --raw-output \
                    > ms-oauth-endpoints/token_key_endpoint

                  echo "$DISCOVERY_DOC" | jq '.issuer' --raw-output \
                    > ms-oauth-endpoints/issuer

      - do:
        - task: generate-paas-cf-cloud-config
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
              - name: terraform-outputs
            outputs:
              - name: paas-cf-cloud-config
            params:
              AWS_ACCOUNT: ((aws_account))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  paas-cf/manifests/cloud-config/scripts/generate-cloud-config.sh > paas-cf-cloud-config/paas-cf-cloud-config.yml

          on_success:
            put: paas-cf-cloud-config
            params:
              file: paas-cf-cloud-config/paas-cf-cloud-config.yml

        - task: generate-paas-cf-runtime-config
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
              - name: terraform-outputs
            outputs:
              - name: paas-cf-runtime-config
            params:
              AWS_ACCOUNT: ((aws_account))
              DEPLOY_ENV: ((deploy_env))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  paas-cf/manifests/runtime-config/scripts/generate-runtime-config.sh > paas-cf-runtime-config/paas-cf-runtime-config.yml

          on_success:
            put: paas-cf-runtime-config
            params:
              file: paas-cf-runtime-config/paas-cf-runtime-config.yml

        - task: generate-cf-manifest
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
              - name: terraform-outputs
              - name: vpc-peering-opsfile
              - name: tenant-uaa-clients-opsfile
              - name: ms-oauth-endpoints
            outputs:
              - name: cf-manifest
              - name: cf-manifest-pre-vars
            params:
              ENV_SPECIFIC_BOSH_VARS_FILE: paas-cf/manifests/cf-manifest/env-specific/((env_specific_bosh_vars_file))
              ENV_SPECIFIC_ISOLATION_SEGMENTS_DIR: paas-cf/manifests/cf-manifest/isolation-segments/((env_specific_isolation_segments_dir))
              SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
              VCAP_PASSWORD: ((vcap-password))
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  cat <<EOF > environment-variables.yml
                  ---
                  system_domain: ((system_dns_zone_name))
                  app_domain: ((apps_dns_zone_name))
                  environment: ((deploy_env))
                  deployment_name: ((deploy_env))
                  aws_account: ((aws_account))
                  microsoft_oauth_auth_url: $(cat ms-oauth-endpoints/authorization_endpoint)
                  microsoft_oauth_token_url: $(cat ms-oauth-endpoints/token_endpoint)
                  microsoft_oauth_token_key_url: $(cat ms-oauth-endpoints/token_key_endpoint)
                  microsoft_oauth_issuer: $(cat ms-oauth-endpoints/issuer)
                  vcap_password: $VCAP_PASSWORD
                  EOF

                  ./paas-cf/manifests/cf-manifest/scripts/generate-manifest.sh \
                    > cf-manifest/cf-manifest.yml

                  ./paas-cf/manifests/cf-manifest/scripts/generate-manifest.sh \
                    > cf-manifest-pre-vars/cf-manifest-pre-vars.yml

          on_success:
            in_parallel:
            - put: cf-manifest
              params:
                file: cf-manifest/cf-manifest.yml
            - put: cf-manifest-pre-vars
              params:
                file: cf-manifest-pre-vars/cf-manifest-pre-vars.yml
      - *end-grafana-job-annotation

  - name: cf-deploy
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: ['generate-cf-config']
            trigger: true
          - get: paas-cf
            passed: ['generate-cf-config']
          - get: paas-cf-cloud-config
            passed: ['generate-cf-config']
          - get: paas-cf-runtime-config
            passed: ['generate-cf-config']
          - get: cf-manifest
            passed: ['generate-cf-config']
          - get: cf-tfstate
            passed: ['generate-cf-config']

      - in_parallel:
        - task: get-and-upload-stemcell
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
              - name: cf-manifest
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: ((bosh-ca-cert))
              BOSH_DEPLOYMENT: ((deploy_env))
              BOSH_CLIENT_SECRET: ((bosh-client-secret))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

                  BOSH_CLIENT='admin'
                  export BOSH_CLIENT

                  stemcell_index=0
                  while true; do
                    if ! $VAL_FROM_YAML "stemcells.${stemcell_index}" cf-manifest/cf-manifest.yml > /dev/null 2>&1; then
                      break
                    fi

                    STEMCELL_VERSION=$($VAL_FROM_YAML "stemcells.${stemcell_index}.version" cf-manifest/cf-manifest.yml)
                    STEMCELL_OS=$($VAL_FROM_YAML "stemcells.${stemcell_index}.os" cf-manifest/cf-manifest.yml)

                    wget "https://bosh.io/d/stemcells/bosh-aws-xen-hvm-${STEMCELL_OS}-go_agent?v=${STEMCELL_VERSION}" -O stemcell.tgz

                    bosh -n upload-stemcell stemcell.tgz

                    stemcell_index=$((stemcell_index + 1))
                  done

        - task: update-paas-cf-cloud-config
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf-cloud-config
              - name: paas-cf
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: ((bosh-ca-cert))
              BOSH_DEPLOYMENT: ((deploy_env))
              BOSH_CLIENT_SECRET: ((bosh-client-secret))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  BOSH_CLIENT='admin'
                  export BOSH_CLIENT

                  bosh -n update-config \
                    --type=cloud \
                    --name=paas-cf \
                    paas-cf-cloud-config/paas-cf-cloud-config.yml

        - task: update-paas-cf-runtime-config
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf-runtime-config
              - name: paas-cf
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: ((bosh-ca-cert))
              BOSH_DEPLOYMENT: ((deploy_env))
              BOSH_CLIENT_SECRET: ((bosh-client-secret))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  BOSH_CLIENT='admin'
                  export BOSH_CLIENT

                  bosh -n update-runtime-config \
                    --name=paas-cf \
                    paas-cf-runtime-config/paas-cf-runtime-config.yml

      - task: cf-deploy
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: cf-manifest
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: ((bosh-ca-cert))
            BOSH_DEPLOYMENT: ((deploy_env))
            BOSH_CLIENT_SECRET: ((bosh-client-secret))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                BOSH_CLIENT='admin'
                export BOSH_CLIENT

                bosh -n deploy --fix cf-manifest/cf-manifest.yml

      - task: copy-cf-secrets-to-concourse-credhub-ns
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: cf-manifest
            - name: cf-tfstate
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            CREDHUB_CLIENT_ID: credhub-admin
            CREDHUB_CLIENT_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

                ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                < cf-tfstate/cf.tfstate \
                > cf-terraform-outputs.yml

                echo 'Logging into Credhub'
                credhub api -s "$BOSH_ENVIRONMENT:8844/api"
                credhub login --client-name="${CREDHUB_CLIENT_ID}" --client-secret="${CREDHUB_CLIENT_SECRET}"

                echo 'Getting variables'
                BOSH_NS="/${DEPLOY_ENV}/${DEPLOY_ENV}"
                CF_ADMIN='admin'
                CF_PASS=$(credhub get -q -n "${BOSH_NS}/cf_admin_password")
                CF_CLIENT_SECRET=$(credhub get -q -n "${BOSH_NS}/secrets_uaa_clients_paas_billing_secret")
                API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"
                UAA_ENDPOINT=$($VAL_FROM_YAML instance_groups.api.jobs.cloud_controller_ng.properties.uaa.url cf-manifest/cf-manifest.yml)
                PAAS_ACCOUNTS_PASSWORD=$(credhub get -q -n "${BOSH_NS}/secrets_paas_accounts_admin_password")
                METRICS_SECRET=$(credhub get -q -n "${BOSH_NS}/secrets_uaa_clients_paas_metrics_secret")
                METRICS_AWS_ACCESS_KEY_ID=$($VAL_FROM_YAML terraform_outputs_metrics_exporter_aws_access_key_id cf-terraform-outputs.yml)
                METRICS_AWS_SECRET_ACCESS_KEY=$($VAL_FROM_YAML terraform_outputs_metrics_exporter_aws_secret_access_key cf-terraform-outputs.yml)
                PAAS_ADMIN_AWS_ACCESS_KEY_ID=$($VAL_FROM_YAML terraform_outputs_paas_admin_metrics_aws_access_key_id cf-terraform-outputs.yml)
                PAAS_ADMIN_AWS_SECRET_ACCESS_KEY=$($VAL_FROM_YAML terraform_outputs_paas_admin_metrics_aws_secret_access_key cf-terraform-outputs.yml)
                PAAS_ADMIN_PROMETHEUS_PASSWORD=$(credhub get -q -n "${BOSH_NS}/paas_admin_prometheus_password")
                PAAS_PROMETHEUS_ENDPOINTS_AWS_ACCESS_KEY_ID=$($VAL_FROM_YAML terraform_outputs_paas_prometheus_endpoints_aws_access_key_id cf-terraform-outputs.yml)
                PAAS_PROMETHEUS_ENDPOINTS_AWS_SECRET_ACCESS_KEY=$($VAL_FROM_YAML terraform_outputs_paas_prometheus_endpoints_aws_secret_access_key cf-terraform-outputs.yml)
                UAA_CLIENTS_CF_EXPORTER_SECRET=$(credhub get -q -n "${BOSH_NS}/uaa_clients_cf_exporter_secret")
                UAA_CLIENTS_FIREHOSE_EXPORTER_SECRET=$(credhub get -q -n "${BOSH_NS}/uaa_clients_firehose_exporter_secret")
                RDS_BROKER_PASS=$(credhub get -q -n "${BOSH_NS}/secrets_rds_broker_admin_password")
                CDN_BROKER_PASS=$(credhub get -q -n "${BOSH_NS}/secrets_cdn_broker_admin_password")
                AIVEN_BROKER_PASS=$(credhub get -q -n "${BOSH_NS}/secrets_aiven_broker_admin_password")
                ELASTICACHE_BROKER_PASS=$(credhub get -q -n "${BOSH_NS}/secrets_elasticache_broker_admin_password")
                S3_BROKER_PASS=$(credhub get -q -n "${BOSH_NS}/secrets_s3_broker_admin_password")
                SQS_BROKER_PASS=$(credhub get -q -n "${BOSH_NS}/secrets_sqs_broker_admin_password")
                UAA_ADMIN_CLIENT_SECRET=$(credhub get -q -n "${BOSH_NS}/uaa_admin_client_secret")
                UAA_CLIENTS_PAAS_ADMIN_SECRET=$(credhub get -q -n "${BOSH_NS}/uaa_clients_paas_admin_secret")
                UAA_CLIENTS_PAAS_AUDITOR_SECRET=$(credhub get -q -n "${BOSH_NS}/secrets_uaa_clients_paas_auditor_secret")
                UAA_CLIENTS_PAAS_PROMETHEUS_ENDPOINTS_SECRET=$(credhub get -q -n "${BOSH_NS}/secrets_uaa_clients_paas_prometheus_endpoints_secret")
                SECRETS_TEST_USER_PASSWORD=$(credhub get -q -n "${BOSH_NS}/secrets_test_user_password")
                CUSTOM_BROKER_ACCEPTANCE_PROMETHEUS_PASSWORD=$(credhub get -q -n "${BOSH_NS}/custom_broker_acceptance_prometheus_password")


                echo 'Setting secrets'
                TEAM_NS="/concourse/main"
                PIPELINE_NS="${TEAM_NS}/create-cloudfoundry"
                credhub set --name="${TEAM_NS}/cf_admin" --type value --value "${CF_ADMIN}"
                credhub set --name="${TEAM_NS}/cf_pass" --type password --password "${CF_PASS}"
                credhub set --name="${PIPELINE_NS}/cf_client_secret" --type password --password "${CF_CLIENT_SECRET}"

                credhub set --name="${PIPELINE_NS}/paas_accounts_password" --type password --password "${PAAS_ACCOUNTS_PASSWORD}"
                credhub set --name="${TEAM_NS}/api_endpoint" --type value --value "${API_ENDPOINT}"
                credhub set --name="${PIPELINE_NS}/uaa_endpoint" --type value --value "${UAA_ENDPOINT}"

                credhub set --name="${PIPELINE_NS}/metrics_secret" --type password --password "${METRICS_SECRET}"
                credhub set --name="${PIPELINE_NS}/metrics_aws_access_key_id" --type password --password "${METRICS_AWS_ACCESS_KEY_ID}"
                credhub set --name="${PIPELINE_NS}/metrics_aws_secret_access_key" --type password --password "${METRICS_AWS_SECRET_ACCESS_KEY}"
                credhub set --name="${PIPELINE_NS}/paas_admin_aws_access_key_id" --type password --password "${PAAS_ADMIN_AWS_ACCESS_KEY_ID}"
                credhub set --name="${PIPELINE_NS}/paas_admin_aws_secret_access_key" --type password --password "${PAAS_ADMIN_AWS_SECRET_ACCESS_KEY}"
                credhub set --name="${PIPELINE_NS}/paas_admin_prometheus_password" --type password --password "${PAAS_ADMIN_PROMETHEUS_PASSWORD}"
                credhub set --name="${PIPELINE_NS}/paas_prometheus_endpoints_aws_access_key_id" --type password --password "${PAAS_PROMETHEUS_ENDPOINTS_AWS_ACCESS_KEY_ID}"
                credhub set --name="${PIPELINE_NS}/paas_prometheus_endpoints_aws_secret_access_key" --type password --password "${PAAS_PROMETHEUS_ENDPOINTS_AWS_SECRET_ACCESS_KEY}"
                credhub set --name="${PIPELINE_NS}/uaa_clients_cf_exporter_secret" --type password --password "${UAA_CLIENTS_CF_EXPORTER_SECRET}"
                credhub set --name="${PIPELINE_NS}/uaa_clients_firehose_exporter_secret" --type password --password "${UAA_CLIENTS_FIREHOSE_EXPORTER_SECRET}"
                credhub set --name="${PIPELINE_NS}/secrets_rds_broker_admin_password" --type password --password "${RDS_BROKER_PASS}"
                credhub set --name="${PIPELINE_NS}/secrets_cdn_broker_admin_password" --type password --password "${CDN_BROKER_PASS}"
                credhub set --name="${PIPELINE_NS}/secrets_aiven_broker_admin_password" --type password --password "${AIVEN_BROKER_PASS}"
                credhub set --name="${PIPELINE_NS}/secrets_elasticache_broker_admin_password" --type password --password "${ELASTICACHE_BROKER_PASS}"
                credhub set --name="${PIPELINE_NS}/secrets_s3_broker_admin_password" --type password --password "${S3_BROKER_PASS}"
                credhub set --name="${PIPELINE_NS}/secrets_sqs_broker_admin_password" --type password --password "${SQS_BROKER_PASS}"
                credhub set --name="${PIPELINE_NS}/uaa_admin_client_secret" --type password --password "${UAA_ADMIN_CLIENT_SECRET}"
                credhub set --name="${PIPELINE_NS}/uaa_clients_paas_admin_secret" --type password --password "${UAA_CLIENTS_PAAS_ADMIN_SECRET}"
                credhub set --name="${PIPELINE_NS}/uaa_clients_paas_auditor_secret" --type password --password "${UAA_CLIENTS_PAAS_AUDITOR_SECRET}"
                credhub set --name="${PIPELINE_NS}/uaa_clients_paas_prometheus_endpoints_secret" --type password --password "${UAA_CLIENTS_PAAS_PROMETHEUS_ENDPOINTS_SECRET}"
                credhub set --name="${PIPELINE_NS}/secrets_test_user_password" --type password --password "${SECRETS_TEST_USER_PASSWORD}"

                credhub set --name="${PIPELINE_NS}/custom_broker_acceptance_prometheus_password" --type password --password "${CUSTOM_BROKER_ACCEPTANCE_PROMETHEUS_PASSWORD}"

                echo 'Accessible secrets'
                credhub find --path "${TEAM_NS}"
      - *end-grafana-job-annotation

  - name: prometheus-deploy
    serial: true
    plan:
      - *add-grafana-job-annotation

      - in_parallel:
          - get: pipeline-trigger
            passed: ['cf-deploy']
            trigger: true
          - get: paas-cf
            passed: ['cf-deploy']
          - get: cf-tfstate
          - get: paas-yet-another-cloudwatch-exporter
          - get: paas-trusted-people

      - task: extract-terraform-outputs
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          outputs:
            - name: terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < cf-tfstate/cf.tfstate \
                  > terraform-outputs/cf.yml

      - task: generate-prometheus-manifest
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: terraform-outputs
          outputs:
            - name: prometheus-manifest
            - name: prometheus-manifest-pre-vars
          params:
            AWS_ACCOUNT: ((aws_account))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            DEPLOY_ENV: ((deploy_env))
            BOSH_URL: https://((bosh_fqdn)):25555
            ENABLE_ALERT_NOTIFICATIONS: ((ENABLE_ALERT_NOTIFICATIONS))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            ENV_SPECIFIC_BOSH_VARS_FILE: ((env_specific_bosh_vars_file))
            GRAFANA_AUTH_GOOGLE_CLIENT_ID: ((grafana_auth_google_client_id))
            GRAFANA_AUTH_GOOGLE_CLIENT_SECRET: ((grafana_auth_google_client_secret))
            UAA_CLIENTS_CF_EXPORTER_SECRET: ((uaa_clients_cf_exporter_secret))
            UAA_CLIENTS_FIREHOSE_EXPORTER_SECRET: ((uaa_clients_firehose_exporter_secret))
            BOSH_CA_CERT: ((bosh-ca-cert))
            BOSH_EXPORTER_PASSWORD: ((bosh-exporter-password))
            VCAP_PASSWORD: ((vcap-password))
          run:
            path: bash
            args:
              - -e
              - -u
              - -c
              - |
                BOSH_CA_CERT="$(awk -v ORS='\\n' '1' <(printenv BOSH_CA_CERT | tr -d '\r'))"
                export BOSH_CA_CERT

                ./paas-cf/manifests/prometheus/scripts/generate-manifest.sh \
                  > prometheus-manifest/prometheus-manifest.yml

                ./paas-cf/manifests/prometheus/scripts/generate-manifest.sh \
                  > prometheus-manifest-pre-vars/prometheus-manifest-pre-vars.yml

        on_success:
          put: prometheus-manifest-pre-vars
          params:
            file: prometheus-manifest-pre-vars/prometheus-manifest-pre-vars.yml

      - task: retrieve-config
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: terraform-outputs
          outputs:
            - name: config
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
          image_resource: *ruby-slim-image-resource
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

                cat << EOT > config/config.sh
                export YACE_AWS_ACCESS_KEY_ID=$($VAL_FROM_YAML terraform_outputs_yace_aws_access_key_id terraform-outputs/cf.yml)
                export YACE_AWS_SECRET_ACCESS_KEY=$($VAL_FROM_YAML terraform_outputs_yace_aws_secret_access_key terraform-outputs/cf.yml)
                EOT

      - task: prometheus-deploy
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: prometheus-manifest
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: ((bosh-ca-cert))
            BOSH_DEPLOYMENT: prometheus
            BOSH_CLIENT_SECRET: ((bosh-client-secret))
            BOSH_EXPORTER_PASSWORD: ((bosh-exporter-password))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                BOSH_CLIENT='admin'
                export BOSH_CLIENT

                bosh -n deploy --fix prometheus-manifest/prometheus-manifest.yml

      - task: copy-prometheus-secrets-to-concourse-credhub-ns
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            CREDHUB_CLIENT_ID: credhub-admin
            CREDHUB_CLIENT_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                echo 'Logging into Credhub'
                credhub api -s "$BOSH_ENVIRONMENT:8844/api"
                credhub login --client-name="${CREDHUB_CLIENT_ID}" --client-secret="${CREDHUB_CLIENT_SECRET}"

                echo 'Getting variables'
                GRAFANA_PASS=$(credhub get -q -n "/${DEPLOY_ENV}/prometheus/grafana_password")

                echo 'Setting secrets'
                credhub set --name=/concourse/main/create-cloudfoundry/grafana_password --type password --password "${GRAFANA_PASS}"

                echo 'Accessible secrets'
                credhub find --path /concourse/main/create-cloudfoundry

      - in_parallel:
        - task: deploy-cloudwatch-exporter
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *cf-cli-image-resource
            params:
              DEPLOY_ENV: ((deploy_env))
              AWS_REGION: ((aws_region))
              API_ENDPOINT: ((api_endpoint))
              CF_ADMIN: ((cf_admin))
              CF_PASS: ((cf_pass))
            inputs:
              - name: paas-cf
              - name: config
              - name: paas-yet-another-cloudwatch-exporter
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  . ./config/config.sh
                  cf api "${API_ENDPOINT}"
                  cf auth "${CF_ADMIN}" "${CF_PASS}"

                  cf target -o admin -s monitoring

                  spruce merge paas-cf/config/cloudwatch-exporter/config.yml > paas-yet-another-cloudwatch-exporter/src/config.yml

                  cd paas-yet-another-cloudwatch-exporter/src

                  cat << EOF > manifest.yml
                  ---
                  applications:
                    - name: cloudwatch-exporter
                      memory: 128M
                      disk_quota: 100M
                      instances: 1
                      buildpacks: [go_buildpack]
                      health-check-type: http
                      health-check-http-endpoint: /
                      stack: cflinuxfs3
                      services:
                        - logit-syslog-drain
                      env:
                        GOPACKAGENAME: github.com/alphagov/paas-yet-another-cloudwatch-exporter/src
                        AWS_ACCESS_KEY_ID: "${YACE_AWS_ACCESS_KEY_ID}"
                        AWS_SECRET_ACCESS_KEY: "${YACE_AWS_SECRET_ACCESS_KEY}"
                      command: "src -listen-address=0.0.0.0:\$PORT"
                  EOF

                  cf cancel-deployment cloudwatch-exporter || true
                  cf push --strategy=rolling cloudwatch-exporter

        - task: upload-grafana-dashboards
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *curl-ssl-image-resource
            params:
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              DEPLOY_ENV: ((deploy_env))
              SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
              GRAFANA_PASS: ((grafana_password))
            inputs:
              - name: paas-cf
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  AZ_COUNT=2
                  if [ "${SLIM_DEV_DEPLOYMENT}" = "true" ]; then
                    AZ_COUNT=1
                  fi

                  for f in "$(pwd)/paas-cf/manifests/prometheus/dashboards.d/"*.json; do
                    for az in $(seq 1 $AZ_COUNT); do
                      sed "s/__SYSTEM_DNS_ZONE_NAME__/${SYSTEM_DNS_ZONE_NAME}/g" "${f}" \
                      | sed "s/__DEPLOY_ENV__/${DEPLOY_ENV}/g" \
                      | curl "https://grafana-${az}.${SYSTEM_DNS_ZONE_NAME}/api/dashboards/db" \
                        --user "admin:$GRAFANA_PASS" \
                        --header 'Content-Type: application/json' \
                        --data "@-" \
                        --fail \
                        --include
                    done;
                  done

        - task: configure-grafana
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/configure-grafana.yml
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            GRAFANA_PASS: ((grafana_password))
            AWS_ACCOUNT: ((aws_account))

      - *end-grafana-job-annotation

  - name: app-autoscaler-deploy
    serial: true
    plan:
      - *add-grafana-job-annotation

      - in_parallel:
          - get: pipeline-trigger
            passed: ['cf-deploy']
            trigger: true
          - get: paas-cf
            passed: ['cf-deploy']
          - get: cf-tfstate

      - task: extract-terraform-outputs
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          outputs:
            - name: terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < cf-tfstate/cf.tfstate \
                  > terraform-outputs/cf.yml

      - task: generate-app-autoscaler-manifest
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: terraform-outputs
          outputs:
            - name: app-autoscaler-manifest
            - name: app-autoscaler-manifest-pre-vars
          params:
            AWS_ACCOUNT: ((aws_account))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            DEPLOY_ENV: ((deploy_env))
            BOSH_URL: https://((bosh_fqdn)):25555
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            BOSH_CA_CERT: ((bosh-ca-cert))
            VCAP_PASSWORD: ((vcap-password))
          run:
            path: bash
            args:
              - -e
              - -u
              - -c
              - |
                BOSH_CA_CERT="$(awk -v ORS='\\n' '1' <(printenv BOSH_CA_CERT | tr -d '\r'))"
                export BOSH_CA_CERT

                ./paas-cf/manifests/app-autoscaler/scripts/generate-manifest.sh \
                  > app-autoscaler-manifest/app-autoscaler-manifest.yml

                ./paas-cf/manifests/app-autoscaler/scripts/generate-manifest.sh \
                  > app-autoscaler-manifest-pre-vars/app-autoscaler-manifest-pre-vars.yml

        on_success:
          put: app-autoscaler-manifest-pre-vars
          params:
            file: app-autoscaler-manifest-pre-vars/app-autoscaler-manifest-pre-vars.yml

      - task: app-autoscaler-deploy
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: app-autoscaler-manifest
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: ((bosh-ca-cert))
            BOSH_DEPLOYMENT: app-autoscaler
            BOSH_CLIENT_SECRET: ((bosh-client-secret))
            BOSH_EXPORTER_PASSWORD: ((bosh-exporter-password))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                BOSH_CLIENT='admin'
                export BOSH_CLIENT

                bosh -n deploy --fix app-autoscaler-manifest/app-autoscaler-manifest.yml

      - task: copy-app-autoscaler-secrets-to-concourse-credhub-ns
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            CREDHUB_CLIENT_ID: credhub-admin
            CREDHUB_CLIENT_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                echo 'Logging into Credhub'
                credhub api -s "$BOSH_ENVIRONMENT:8844/api"
                credhub login --client-name="${CREDHUB_CLIENT_ID}" --client-secret="${CREDHUB_CLIENT_SECRET}"

                echo 'Getting variables'
                APP_AUTOSCALER_NS="/${DEPLOY_ENV}/app-autoscaler"
                APP_AUTOSCALER_SERVICE_BROKER_PASSWORD="$(credhub get -q -n "${APP_AUTOSCALER_NS}/autoscaler_service_broker_password")"

                echo 'Setting secrets'
                TEAM_NS="/concourse/main"
                PIPELINE_NS="${TEAM_NS}/create-cloudfoundry"
                credhub set --name="${PIPELINE_NS}/autoscaler_service_broker_password" --type password --password "${APP_AUTOSCALER_SERVICE_BROKER_PASSWORD}"

                echo 'Accessible secrets'
                credhub find --path "${TEAM_NS}"

      - task: register-app-autoscaler-service-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            DEPLOY_ENV: ((deploy_env))
            APP_AUTOSCALER_SERVICE_BROKER_USERNAME: autoscaler_service_broker_user
            APP_AUTOSCALER_SERVICE_BROKER_PASSWORD: ((autoscaler_service_broker_password))
            APP_AUTOSCALER_SERVICE_BROKER_URL: https://autoscalerservicebroker.((system_dns_zone_name))
          run:
            path: bash
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 'autoscaler\s'; then
                  cf update-service-broker autoscaler \
                    "${APP_AUTOSCALER_SERVICE_BROKER_USERNAME}" \
                    "${APP_AUTOSCALER_SERVICE_BROKER_PASSWORD}" \
                    "${APP_AUTOSCALER_SERVICE_BROKER_URL}"
                else
                  cf create-service-broker autoscaler \
                    "${APP_AUTOSCALER_SERVICE_BROKER_USERNAME}" \
                    "${APP_AUTOSCALER_SERVICE_BROKER_PASSWORD}" \
                    "${APP_AUTOSCALER_SERVICE_BROKER_URL}"
                fi

                cf enable-service-access autoscaler

      - task: deploy-app-autoscaler-cpu-usage
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            CF_CLIENT_SECRET: ((cf_client_secret))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"
                cf target -o admin -s healthchecks

                cd paas-cf/platform-tests/example-apps/app-autoscaler-cpu-usage

                if ! cf service scale-app-autoscaler-cpu-usage > /dev/null; then
                  cf create-service autoscaler autoscaler-free-plan scale-app-autoscaler-cpu-usage
                fi

                cf cancel-deployment app-autoscaler-cpu-usage || true
                cf push --strategy=rolling app-autoscaler-cpu-usage
                cf aasp app-autoscaler-cpu-usage policy.json

      - *end-grafana-job-annotation

  - name: post-deploy
    serial: true
    plan:
    - *add-grafana-job-annotation
    - in_parallel:
      - get: pipeline-trigger
        passed: ['cf-deploy']
        trigger: true
      - <<: *get-paas-cf
        passed: ['cf-deploy']
      - get: cf-manifest
        passed: ['generate-cf-config']
      - get: cf-tfstate
        passed: ['generate-cf-config']
      - get: paas-trusted-people

    - task: retrieve-config
      tags: [colocated-with-web]
      config: &post-deploy-config
        platform: linux
        inputs:
          - name: paas-cf
          - name: cf-manifest
          - name: cf-tfstate
        outputs:
          - name: config
        params:
          SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
        image_resource: *ruby-slim-image-resource
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

              ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                < cf-tfstate/cf.tfstate \
                > cf-terraform-outputs.yml

              cat << EOT > config/config.sh
              export UAA_ENDPOINT=$($VAL_FROM_YAML instance_groups.api.jobs.cloud_controller_ng.properties.uaa.url cf-manifest/cf-manifest.yml)
              export DOPPLER_ENDPOINT=$($VAL_FROM_YAML instance_groups.scheduler.jobs.tps.properties.capi.tps.traffic_controller_url cf-manifest/cf-manifest.yml)
              export RDS_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_rds_broker_elb_dns_name cf-terraform-outputs.yml)
              export CDN_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_cdn_broker_elb_dns_name cf-terraform-outputs.yml)
              export BROKER_IP_WHITELIST=$($VAL_FROM_YAML terraform_outputs_nat_public_ips_csv cf-terraform-outputs.yml)
              export ELASTICACHE_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_elasticache_broker_elb_dns_name cf-terraform-outputs.yml)
              export S3_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_s3_broker_elb_dns_name cf-terraform-outputs.yml)
              export SQS_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_sqs_broker_elb_dns_name cf-terraform-outputs.yml)
              export METRICS_AWS_ACCESS_KEY_ID=$($VAL_FROM_YAML terraform_outputs_metrics_exporter_aws_access_key_id cf-terraform-outputs.yml)
              export METRICS_AWS_SECRET_ACCESS_KEY=$($VAL_FROM_YAML terraform_outputs_metrics_exporter_aws_secret_access_key cf-terraform-outputs.yml)
              EOT

              ls -l config/*

    - in_parallel:
      - task: upload-buildpacks
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"
                ./paas-cf/concourse/scripts/parse_buildpacks_and_run_uploader.rb paas-cf/config/buildpacks.yml
      - task: create-orgs
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            LOGIT_ADDRESS: ((logit_syslog_address))
            LOGIT_PORT: ((logit_syslog_port))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf create-org admin
                cf set-quota admin medium

                cf create-space monitoring -o admin
                cf create-space service-brokers -o admin
                cf create-space healthchecks -o admin
                cf create-space billing -o admin
                cf create-space public -o admin
                cf create-space assets -o admin

                cf create-org govuk-paas
                cf set-quota govuk-paas medium
                cf create-space docs -o govuk-paas
                cf create-space tools -o govuk-paas

                cf target -o admin
                cf share-private-domain govuk-paas "((system_dns_zone_name))"

                # Reserve some domains so that tenants cannot create them to
                # mislead others
                cf target -o govuk-paas -s docs
                cf create-route "${APPS_DNS_ZONE_NAME}" --hostname www
                cf create-route "${APPS_DNS_ZONE_NAME}" --hostname api
                cf create-route "${APPS_DNS_ZONE_NAME}" --hostname status
                cf create-route "${APPS_DNS_ZONE_NAME}" --hostname '*'

                # Reserve the london app name so that we don't cause conflicts
                # when we roll out the London region.
                cf create-route "${APPS_DNS_ZONE_NAME}" --hostname london

                cf target -o admin -s public
                if ! cf service logit-syslog-drain > /dev/null; then
                  cf create-user-provided-service \
                    logit-syslog-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                else
                  cf update-user-provided-service \
                    logit-syslog-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                fi

      - task: register-rds-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            RDS_BROKER_PASS: ((secrets_rds_broker_admin_password))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 'rds-broker\s'; then
                  cf update-service-broker rds-broker rds-broker "${RDS_BROKER_PASS}" "https://${RDS_BROKER_SERVER}"
                else
                  cf create-service-broker rds-broker rds-broker "${RDS_BROKER_PASS}" "https://${RDS_BROKER_SERVER}"
                fi

                # Enable supported plans
                cat <<EOF | xargs -n1 cf enable-service-access mysql -b rds-broker -p
                tiny-unencrypted-5.7
                small-5.7
                small-ha-5.7
                medium-ha-5.7
                medium-5.7
                large-ha-5.7
                large-5.7
                xlarge-ha-5.7
                xlarge-5.7
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access mysql -b rds-broker -p
                tiny-unencrypted-5.7-high-iops
                small-5.7-high-iops
                small-ha-5.7-high-iops
                medium-ha-5.7-high-iops
                medium-5.7-high-iops
                large-ha-5.7-high-iops
                large-5.7-high-iops
                xlarge-ha-5.7-high-iops
                xlarge-5.7-high-iops
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access mysql -b rds-broker -p
                tiny-unencrypted-8.0
                small-8.0
                small-ha-8.0
                medium-ha-8.0
                medium-8.0
                large-ha-8.0
                large-8.0
                xlarge-ha-8.0
                xlarge-8.0
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access mysql -b rds-broker -p
                tiny-unencrypted-8.0-high-iops
                small-8.0-high-iops
                small-ha-8.0-high-iops
                medium-ha-8.0-high-iops
                medium-8.0-high-iops
                large-ha-8.0-high-iops
                large-8.0-high-iops
                xlarge-ha-8.0-high-iops
                xlarge-8.0-high-iops
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access postgres -b rds-broker -p
                tiny-unencrypted-9.5
                small-ha-9.5
                small-9.5
                medium-ha-9.5
                medium-9.5
                large-ha-9.5
                large-9.5
                xlarge-ha-9.5
                xlarge-9.5
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access postgres -b rds-broker -p
                tiny-unencrypted-10
                small-10
                small-ha-10
                medium-10
                medium-ha-10
                large-10
                large-ha-10
                xlarge-10
                xlarge-ha-10
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access postgres -b rds-broker -p
                tiny-unencrypted-10-high-iops
                small-10-high-iops
                small-ha-10-high-iops
                medium-10-high-iops
                medium-ha-10-high-iops
                large-10-high-iops
                large-ha-10-high-iops
                xlarge-10-high-iops
                xlarge-ha-10-high-iops
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access postgres -b rds-broker -p
                tiny-unencrypted-11
                small-11
                small-ha-11
                medium-11
                medium-ha-11
                large-11
                large-ha-11
                xlarge-11
                xlarge-ha-11
                EOF

                cat <<EOF | xargs -n1 cf enable-service-access postgres -b rds-broker -p
                tiny-unencrypted-11-high-iops
                small-11-high-iops
                small-ha-11-high-iops
                medium-11-high-iops
                medium-ha-11-high-iops
                large-11-high-iops
                large-ha-11-high-iops
                xlarge-11-high-iops
                xlarge-ha-11-high-iops
                EOF

                # Disable deprecated plans
                cat <<EOF | xargs -n1 cf disable-service-access mysql -p
                small-unencrypted-5.7
                small-ha-unencrypted-5.7
                medium-ha-unencrypted-5.7
                medium-unencrypted-5.7
                large-ha-unencrypted-5.7
                large-unencrypted-5.7
                xlarge-ha-unencrypted-5.7
                xlarge-unencrypted-5.7
                EOF

                cat <<EOF | xargs -n1 cf disable-service-access postgres -p
                small-ha-unencrypted-9.5
                small-unencrypted-9.5
                medium-ha-unencrypted-9.5
                medium-unencrypted-9.5
                large-ha-unencrypted-9.5
                large-unencrypted-9.5
                xlarge-ha-unencrypted-9.5
                xlarge-unencrypted-9.5
                EOF


      - task: register-cdn-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            CDN_BROKER_PASS: ((secrets_cdn_broker_admin_password))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 'cdn-broker\s'; then
                  cf update-service-broker cdn-broker cdn-broker "${CDN_BROKER_PASS}" "https://${CDN_BROKER_SERVER}"
                else
                  cf create-service-broker cdn-broker cdn-broker "${CDN_BROKER_PASS}" "https://${CDN_BROKER_SERVER}"
                fi
                cf enable-service-access cdn-route -b cdn-broker

      - task: register-s3-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            S3_BROKER_PASS: ((secrets_s3_broker_admin_password))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 's3-broker\s'; then
                  cf update-service-broker s3-broker s3-broker "${S3_BROKER_PASS}" "https://${S3_BROKER_SERVER}"
                else
                  cf create-service-broker s3-broker s3-broker "${S3_BROKER_PASS}" "https://${S3_BROKER_SERVER}"
                fi

                cf enable-service-access aws-s3-bucket -b s3-broker -p default

      - task: register-sqs-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            SQS_BROKER_PASS: ((secrets_sqs_broker_admin_password))
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 'sqs-broker\s'; then
                  cf update-service-broker sqs-broker sqs-broker "${SQS_BROKER_PASS}" "https://${SQS_BROKER_SERVER}"
                else
                  cf create-service-broker sqs-broker sqs-broker "${SQS_BROKER_PASS}" "https://${SQS_BROKER_SERVER}"
                fi


                ALLOWED_ORGS_CFG="./paas-cf/config/service-brokers/sqs/${DEPLOY_ENV}-config.json"
                if [ -f "${ALLOWED_ORGS_CFG}" ]; then
                  ALLOWED_ORGS="admin $(jq -r '.allowed_orgs[]' "${ALLOWED_ORGS_CFG}")"
                else
                  ALLOWED_ORGS="admin"
                fi

                for ORG in $ALLOWED_ORGS; do
                  cf enable-service-access aws-sqs-queue \
                    -b sqs-broker \
                    -p standard \
                    -o "${ORG}"
                  cf enable-service-access aws-sqs-queue \
                    -b sqs-broker \
                    -p fifo \
                    -o "${ORG}"
                done

      - task: register-csls-splunk-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            DEPLOY_ENV: ((deploy_env))
            CSLS_SPLUNK_BROKER_USERNAME: ((csls_splunk_broker_username))
            CSLS_SPLUNK_BROKER_PASSWORD: ((csls_splunk_broker_password))
            CSLS_SPLUNK_BROKER_URL: ((csls_splunk_broker_url))
          run:
            path: bash
            args:
              - -e
              - -u
              - -c
              - |
                # shellcheck disable=SC2039
                if [[ "${DEPLOY_ENV}" != prod* ]]; then
                  echo "CSLS Splunk broker is only deployed in production environments"
                  exit 0
                fi

                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 'splunk\s'; then
                  cf update-service-broker splunk "${CSLS_SPLUNK_BROKER_USERNAME}" "${CSLS_SPLUNK_BROKER_PASSWORD}" "${CSLS_SPLUNK_BROKER_URL}"
                else
                  cf create-service-broker splunk "${CSLS_SPLUNK_BROKER_USERNAME}" "${CSLS_SPLUNK_BROKER_PASSWORD}" "${CSLS_SPLUNK_BROKER_URL}"
                fi

                ALLOWED_ORGS=$(jq -r '.allowed_orgs[]' "./paas-cf/config/service-brokers/csls-splunk/${DEPLOY_ENV}-config.json")

                for ORG in $ALLOWED_ORGS; do
                  cf enable-service-access splunk \
                    -b splunk \
                    -o "${ORG}"
                done

      - task: set-security-groups-from-manifest
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: cf-manifest
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          image_resource: *cf-cli-image-resource
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                ./paas-cf/concourse/scripts/set_security_groups_from_manifest.rb cf-manifest/cf-manifest.yml

      - task: set-quotas-from-manifest
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: cf-manifest
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          image_resource: *cf-cli-image-resource
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                ./paas-cf/concourse/scripts/set_quotas_from_manifest.rb cf-manifest/cf-manifest.yml

      - task: enable-diego-docker-feature-flag
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: paas-cf
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          image_resource: *cf-cli-image-resource
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf enable-feature-flag diego_docker

      - task: enable-service-instance-sharing-feature-flag
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: paas-cf
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          image_resource: *cf-cli-image-resource
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf enable-feature-flag service_instance_sharing


      - task: ensure-internal-apps-domain-created
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: paas-cf
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          image_resource: *cf-cli-image-resource
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf domains | awk '$1=="apps.internal" && $2=="shared" { r=1 } END { exit r }'; then
                  cf curl /v2/shared_domains -d '{"name": "apps.internal", "internal": true}'
                fi

      - task: set-uaa-idp-email-domains
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
          params:
            LOGIN_URL: https://login.((system_dns_zone_name))
            UAA_URL: https://uaa.((system_dns_zone_name))
            UAA_ADMIN_CLIENT_SECRET: ((uaa_admin_client_secret))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                ./paas-cf/concourse/scripts/uaa_set_email_domains.sh '["*.*", "*.*.*", "*.*.*.*", "*.*.*.*.*", "*.*.*.*.*.*"]'

    - in_parallel:
      - task: deploy-simulated-load-application
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            TEST_HEAVY_LOAD: ((test_heavy_load))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                if [ "${TEST_HEAVY_LOAD:-}" != "true" ] ; then
                  echo Heavy load test has been disabled. Skipping...
                  exit 0
                fi

                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s healthchecks

                cd paas-cf/platform-tests/example-apps/healthcheck
                cf push simulated-load -i 180

                timeout=300
                deadline=$(($(date +%s) + timeout))

                checkInstances() {
                  instances=$(cf app simulated-load | awk '/instances: / { print $2 }')
                  RUNNING=$(echo "${instances}" | awk -F / '{ print $1 }')
                  EXPECTED=$(echo "${instances}" | awk -F / '{ print $2 }')

                  if [ "${RUNNING}" -lt "${EXPECTED}" ]; then
                    return "1";
                  fi

                  return "0";
                }

                while [ "$(checkInstances && echo $?)" -eq "1" ]; do
                  sleep 5
                  echo "Retrying $((timeout - (deadline - $(date +%s))))s..."

                  if [ "$(date +%s)" -gt "${deadline}" ] ; then
                    echo "We're expecting ${EXPECTED} number of instance(s) to run."
                    echo "Only ${RUNNING} instance(s) running..."

                    exit 1
                  fi
                done

                echo Done!

      - task: sync-admin-users
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-uaac-image-resource
          inputs:
            - name: paas-cf
            - name: cf-manifest
            - name: paas-trusted-people
          params:
            UAA_API_URL: https://uaa.((system_dns_zone_name))
            UAA_ADMIN_CLIENT_SECRET: ((uaa_admin_client_secret))
            USERS_CONFIG_PATH: paas-trusted-people/users.yml
            ENV_TARGET: ((aws_account))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                apk add --quiet --no-progress --no-cache g++ musl-dev make
                uaac target "${UAA_API_URL}"
                uaac token client get admin -s "${UAA_ADMIN_CLIENT_SECRET}"
                CF_TOKEN="bearer $(uaac contexts | awk '$1 ~ /access_token/ {print $2}')"
                export CF_TOKEN
                (cd paas-cf && bundle --quiet)
                paas-cf/tools/user_management/main.rb

      - task: deploy-healthcheck
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            DISABLE_HEALTHCHECK_DB: ((disable_healthcheck_db))
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          inputs:
            - name: paas-cf
          outputs:
            - name: deployed-healthcheck
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s healthchecks

                BUILD_ROOT=$(pwd)
                cd paas-cf/platform-tests/example-apps/healthcheck

                if  [ "${DISABLE_HEALTHCHECK_DB:-}" != "true" ] ; then

                  if ! cf service healthcheck-db > /dev/null; then
                    cf create-service postgres tiny-unencrypted-9.5 healthcheck-db
                    while ! cf service healthcheck-db | grep -q 'create succeeded'; do
                      echo "Waiting for creation of service to complete..."
                      sleep 30
                    done
                  fi

                  ruby -ryaml -e '
                    manifest = YAML.load_file("manifest.yml")
                    manifest["applications"].each { |app| app["services"] = ["healthcheck-db"] }
                    File.write("manifest.yml", manifest.to_yaml)
                  '
                fi

                ruby -ryaml -e "
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each do |app|
                    app['routes'] = [
                      { 'route' => 'healthcheck.${APPS_DNS_ZONE_NAME}' }
                    ]
                  end
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf cancel-deployment healthcheck || true
                cf push --strategy=rolling healthcheck

                cd "${BUILD_ROOT}"
                cd paas-cf/platform-tests/example-apps/healthcheck-pinger
                cf cancel-deployment healthcheck-pinger || true
                cf push --strategy=rolling healthcheck-pinger

                cd "${BUILD_ROOT}"
                cd paas-cf/platform-tests/example-apps/healthcheck-ponger
                cf cancel-deployment healthcheck-ponger || true
                cf push --strategy=rolling healthcheck-ponger

                cf add-network-policy \
                  healthcheck-pinger healthcheck-ponger \
                  --protocol tcp --port 8080

                cd "${BUILD_ROOT}"
                echo "yes" > deployed-healthcheck/healthcheck-deployed
        on_success:
          put: deployed-healthcheck
          params:
            file: deployed-healthcheck/healthcheck-deployed

      - do:
        - task: remove-paas-log-cache-adapter
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *cf-cli-image-resource
            inputs:
              - name: paas-cf
            params:
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              API_ENDPOINT: ((api_endpoint))
              CF_ADMIN: ((cf_admin))
              CF_PASS: ((cf_pass))
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  cf api "${API_ENDPOINT}"
                  cf auth "${CF_ADMIN}" "${CF_PASS}"
                  cf target -o admin -s monitoring

                  cf delete paas-log-cache-adapter -r -f

      - do:
        - task: rotate-cc-db-encryption-keys
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: ((bosh-ca-cert))
              BOSH_DEPLOYMENT: ((deploy_env))
              BOSH_CLIENT_SECRET: ((bosh-client-secret))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  BOSH_CLIENT='admin'
                  export BOSH_CLIENT

                  bosh run-errand rotate-cc-database-key --when-changed

    - in_parallel:
      - task: register-elasticache-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: config
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            ELASTICACHE_BROKER_PASS: ((secrets_elasticache_broker_admin_password))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep 'elasticache-broker\s'; then
                  cf update-service-broker elasticache-broker elasticache-broker "${ELASTICACHE_BROKER_PASS}" "https://${ELASTICACHE_BROKER_SERVER}"
                else
                  cf create-service-broker elasticache-broker elasticache-broker "${ELASTICACHE_BROKER_PASS}" "https://${ELASTICACHE_BROKER_SERVER}"
                fi
                cf enable-service-access redis -b elasticache-broker

      - task: remove-unused-iam-access-keys
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *awscli-image-resource
          inputs:
            - name: cf-tfstate
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                delete_unused_keys() {
                  terraform_outputs_key=$1
                  username=$2
                  VERSION=$(jq -r ".version" cf-tfstate/cf.tfstate)

                  if [ "$VERSION" -gt 3 ]; then
                    jq_path=".outputs.${terraform_outputs_key}.value"
                  else
                    jq_path=".modules[].outputs.${terraform_outputs_key}.value"
                  fi

                  ACCESS_KEY_ID=$(jq -r "$jq_path" cf-tfstate/cf.tfstate)
                  if [ -z "$ACCESS_KEY_ID" ]; then
                    echo "could not find $terraform_outputs_key in terraform outputs"
                    exit 1
                  fi

                  UNUSED_ACCESS_KEYS=$(\
                    aws iam list-access-keys --user-name "$username" \
                    --query "AccessKeyMetadata[?AccessKeyId!=\`${ACCESS_KEY_ID}\`].AccessKeyId" \
                    --output text \
                  )
                  if [ -z "$UNUSED_ACCESS_KEYS" ]; then
                    echo "no access keys to revoke"
                  else
                    for key in $UNUSED_ACCESS_KEYS; do
                      echo "deleting key $key for user $username"
                      aws iam delete-access-key --user-name "$username" --access-key-id "$key"
                    done
                  fi
                }

                delete_unused_keys ses_smtp_aws_access_key_id "ses-smtp-${DEPLOY_ENV}"
                delete_unused_keys metrics_exporter_aws_access_key_id "metrics-exporter-${DEPLOY_ENV}"
                delete_unused_keys yace_aws_access_key_id "yace-${DEPLOY_ENV}"
    - *end-grafana-job-annotation

  - name: smoke-tests
    serial_groups: [smoke-tests]
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: &smoke-tests-resource-passed
              - post-deploy
              - app-autoscaler-deploy
              - prometheus-deploy
              - app-availability-tests
              - internal-app-availability-tests
              - api-availability-tests
            trigger: true
          - get: cf-smoke-tests-release
          - <<: *get-paas-cf
            passed: *smoke-tests-resource-passed
          - get: cf-manifest
            passed: ['post-deploy']

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: smoketest-user
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: smoke-tests-config
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: smoke_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))
            TEST_USER_PASSWORD: ((secrets_test_user_password))

        - task: smoke-tests-run
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/smoke-tests-run.yml
          ensure:
            task: upload-test-artifacts
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/delete_admin.yml
          timeout: 5m
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
      - *end-grafana-job-annotation

  - name: acceptance-tests
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: *smoke-tests-resource-passed
            trigger: true
          - get: cf-acceptance-tests
          - <<: *get-paas-cf
            passed: *smoke-tests-resource-passed
          - get: cf-manifest
            passed: ['post-deploy']

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_cf_acceptance_tests))
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - do:
          - task: generate-test-config
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/generate-test-config.yml
            params:
              TEST_PROPERTIES: acceptance_tests
              APP_DOMAIN: ((apps_dns_zone_name))
              SYSTEM_DOMAIN: ((system_dns_zone_name))
              TEST_USER_PASSWORD: ((secrets_test_user_password))
          - task: run-tests
            tags: [colocated-with-web]
            config:
              platform: linux
              image_resource: *cf-acceptance-tests-image-resource
              params:
                DISABLE_CF_ACCEPTANCE_TESTS: ((disable_cf_acceptance_tests))
              inputs:
                - name: paas-cf
                - name: cf-acceptance-tests
                  path: src/github.com/cloudfoundry/cf-acceptance-tests
                - name: test-config
              outputs:
                - name: artifacts
                  path: /tmp/artifacts
              run:
                path: ./paas-cf/platform-tests/upstream/run_acceptance_tests.sh
            ensure:
              task: upload-test-artifacts
              tags: [colocated-with-web]
              file: paas-cf/concourse/tasks/upload-test-artifacts.yml
              params:
                TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))
          ensure:
            task: remove-temp-user
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/delete_admin.yml
            timeout: 5m
            params:
              DISABLE_ADMIN_USER_CREATION: ((disable_cf_acceptance_tests))
              API_ENDPOINT: ((api_endpoint))
              CF_ADMIN: ((cf_admin))
              CF_PASS: ((cf_pass))
      - *end-grafana-job-annotation

  - name: custom-acceptance-tests
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: *smoke-tests-resource-passed
            trigger: true
          - <<: *get-paas-cf
            passed: *smoke-tests-resource-passed
          - get: cf-manifest
            passed: ['post-deploy']
          - get: cf-acceptance-tests

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: custom-acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: generate-test-config
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: acceptance_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))
            NAME_PREFIX: ACC
            TEST_USER_PASSWORD: ((secrets_test_user_password))

        - in_parallel:
          - task: custom-acceptance-tests
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/custom-acceptance-tests-run.yml
            params:
              DISABLE_CUSTOM_ACCEPTANCE_TESTS: ((disable_custom_acceptance_tests))
              DEPLOY_ENV: ((deploy_env))
              AWS_REGION: ((aws_region))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            ensure:
              task: upload-test-artifacts
              tags: [colocated-with-web]
              file: paas-cf/concourse/tasks/upload-test-artifacts.yml
              params:
                TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

          - task: ensure-buildpacks-exist
            tags: [colocated-with-web]
            config:
              platform: linux
              image_resource: *cf-cli-image-resource
              inputs:
                - name: paas-cf
                - name: cf-manifest
              params:
                CF_ADMIN: admin
                SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
                CF_PASS: ((cf_pass))
              run:
                path: bash
                args:
                  - -c
                  - |
                    set -ueo pipefail

                    API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"

                    cf api "${API_ENDPOINT}"
                    cf auth "${CF_ADMIN}" "${CF_PASS}"

                    echo Expected buildpacks
                    expected="$(
                      < paas-cf/config/buildpacks.yml \
                      ruby -ryaml -e 'puts YAML.load(STDIN.read).fetch("buildpacks").map { |p| p["name"] + " " + p["stack"] + " " + p["filename"] }.sort'
                    )"
                    echo "$expected"

                    echo Actual buildpacks
                    actual="$(
                      cf curl /v3/buildpacks?per_page=100 \
                      | jq -r '.resources | map([.name, .stack, .filename] | join(" ")) | join("\n")' \
                      | sort
                    )"
                    echo "$actual"

                    echo Diff
                    diff <(echo "$actual") <(echo "$expected")
                    same=$?

                    if [ $same == 0 ]; then
                      echo Actual is the same as Expected
                    else
                      echo Actual differs from Expected
                      exit 1
                    fi

        ensure:
          task: remove-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/delete_admin.yml
          timeout: 5m
          params:
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
      - *end-grafana-job-annotation

  - name: custom-broker-acceptance-tests
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: *smoke-tests-resource-passed
            trigger: true
          - <<: *get-paas-cf
            passed: *smoke-tests-resource-passed
          - get: cf-manifest
            passed: ['post-deploy']
          - get: cf-acceptance-tests

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: custom-broker-acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: generate-test-config
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: acceptance_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))
            NAME_PREFIX: BACC
            TEST_USER_PASSWORD: ((secrets_test_user_password))

        - in_parallel:
          - task: broker-acceptance-tests
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/custom-broker-acceptance-tests-run.yml
            params:
              DISABLE_CUSTOM_ACCEPTANCE_TESTS: ((disable_custom_acceptance_tests))
              DEPLOY_ENV: ((deploy_env))
              AWS_REGION: ((aws_region))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            ensure:
              task: upload-test-artifacts
              tags: [colocated-with-web]
              file: paas-cf/concourse/tasks/upload-test-artifacts.yml
              params:
                TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/delete_admin.yml
          timeout: 5m
          params:
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
      - *end-grafana-job-annotation

  - name: bosh-tests
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: *smoke-tests-resource-passed
            trigger: true
          - <<: *get-paas-cf
            passed: *smoke-tests-resource-passed
          - get: cf-manifest
      - task: test-bosh-vms
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: cf-manifest
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: ((bosh-ca-cert))
            BOSH_DEPLOYMENT: ((deploy_env))
            BOSH_CLIENT_SECRET: ((bosh-client-secret))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                BOSH_CLIENT='admin'
                export BOSH_CLIENT

                bosh deployment
                bosh vms | tee vms.txt
                vms_not_running=$(grep '|' vms.txt | grep -cEv '(\-\-|VM|running)' || true)
                if [ "${vms_not_running}" -gt "0" ]; then
                  echo "Error: Number of not running VMs: ${vms_not_running}."
                  exit 1
                else
                  echo "Success: All VMs are up and running."
                fi

  - name: app-autoscaler-acceptance-tests
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
          - get: pipeline-trigger
            passed: *smoke-tests-resource-passed
            trigger: true
          - get: paas-cf
            passed: *smoke-tests-resource-passed
          - get: cf-manifest
            passed: ['post-deploy']

            # FIXME: when there is a release that supports CF CLI v7 we can use
            # the submodule in this repo again
          - get: app-autoscaler-release-git

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: app-autoscaler-acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: app-autoscaler-acceptance-tests
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/app-autoscaler-acceptance-tests-run.yml
          params:
            DISABLE_CUSTOM_ACCEPTANCE_TESTS: ((disable_custom_acceptance_tests))
            SYSTEM_DOMAIN: ((system_dns_zone_name))
            APPS_DOMAIN: ((apps_dns_zone_name))
          ensure:
            task: upload-test-artifacts
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/delete_admin.yml
          timeout: 5m
          params:
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))

      - *end-grafana-job-annotation

  - name: deploy-paas-auditor
    serial: true
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
        - get: paas-auditor
          trigger: true

        - <<: *get-paas-cf
          trigger: true
          passed: ['post-deploy']

      - task: deploy-paas-auditor
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            UAA_API_URL: https://uaa.((system_dns_zone_name))

            CF_CLIENT_ID: "paas-auditor"
            CF_CLIENT_SECRET: ((uaa_clients_paas_auditor_secret))
            CF_API_ADDRESS: https://api.((system_dns_zone_name))

            DEPLOY_ENV: ((deploy_env))
            SPLUNK_HEC_ENDPOINT_URL: https://http-inputs-gds.splunkcloud.com/services/collector
            SPLUNK_API_KEY: ((splunk_key))

            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          inputs:
            - name: paas-cf
            - name: paas-auditor
          run:
            path: bash
            dir: paas-auditor
            args:
              - -c
              - |
                set -ueo pipefail

                cf api "${CF_API_ADDRESS}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s billing

                if grep -q '^(prod\|prod-lon\|stg-lon)$' <<< "$DEPLOY_ENV"; then
                  plan="small-11"
                else
                  plan="tiny-unencrypted-11"
                fi

                if cf service auditor-db --guid; then
                  echo 'Database already exists, skipping creation...'
                else
                  cf create-service postgres "$plan" auditor-db
                fi

                while ! cf service auditor-db | grep -iqE 'status:\s+(create|update) succeeded'; do
                  echo "Waiting for create/update of service to complete..."
                  sleep 30
                done

                cf push paas-auditor -f manifest.yml \
                  --var cf_client_id="$CF_CLIENT_ID" \
                  --var cf_client_secret="$CF_CLIENT_SECRET" \
                  --var cf_api_address="$CF_API_ADDRESS" \
                  --var deploy_env="$DEPLOY_ENV" \
                  --var splunk_api_key="$SPLUNK_API_KEY" \
                  --var splunk_hec_endpoint_url="$SPLUNK_HEC_ENDPOINT_URL"
      - *end-grafana-job-annotation

  - name: deploy-paas-accounts
    serial: true
    plan:
      - *add-grafana-job-annotation
      - get: paas-accounts
        trigger: true

      - in_parallel:
        - <<: *get-paas-cf
          trigger: true
          passed: ['post-deploy']

      - task: deploy-paas-accounts
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            DEPLOY_ENV: ((deploy_env))
            BASIC_AUTH_PASSWORD: ((paas_accounts_password))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          inputs:
            - name: paas-cf
            - name: paas-accounts
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                DB_PLAN="tiny-unencrypted-9.5"

                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s billing

                if ! cf service accounts-db > /dev/null; then
                  cf create-service postgres "${DB_PLAN}" accounts-db
                  while ! cf service accounts-db | grep -iqE 'status:\s+create succeeded'; do
                    echo "Waiting for creation of service to complete..."
                    sleep 30
                  done
                fi

                (
                cd paas-accounts

                ruby -ryaml -e "
                  env = {
                    'BASIC_AUTH_USERNAME' => 'admin',
                    'BASIC_AUTH_PASSWORD' => '${BASIC_AUTH_PASSWORD}',
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] = {} unless app['env']
                    app['env'].merge!(env)
                    app['services'] = ['accounts-db']
                    app['routes'] = [
                      { 'route' => 'accounts.${SYSTEM_DNS_ZONE_NAME}' }
                    ]
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf cancel-deployment paas-accounts || true
                cf push --strategy=rolling paas-accounts
                )

                (
                echo "Adding username for admin user"

                USER_UUID=$(curl --silent --fail --header "Authorization: $(cf oauth-token)" "https://login.${SYSTEM_DNS_ZONE_NAME}/userinfo" | jq '.user_id' --raw-output)
                USERNAME=$(curl --silent --fail --header "Authorization: $(cf oauth-token)" "https://login.${SYSTEM_DNS_ZONE_NAME}/userinfo" | jq '.email' --raw-output)

                res=$(curl --silent --fail --include \
                  --request GET \
                  --user "admin:${BASIC_AUTH_PASSWORD}" \
                  "https://accounts.${SYSTEM_DNS_ZONE_NAME}/users/${USER_UUID}" || echo "no user")

                if [ "${res}" = "no user" ]; then
                  echo "Admin user not found"
                  curl --silent --fail --include \
                    --request POST \
                    --user "admin:${BASIC_AUTH_PASSWORD}" \
                    --header "Content-Type: application/json" \
                    --data "{\"user_uuid\":\"${USER_UUID}\",\"user_email\":null,\"username\":\"${USERNAME}\"}" \
                     "https://accounts.${SYSTEM_DNS_ZONE_NAME}/users"
                else
                  echo "Updating admin user's username"
                  curl --silent --fail --include \
                    --request PATCH \
                    --user "admin:${BASIC_AUTH_PASSWORD}" \
                    --header "Content-Type: application/json" \
                    --data "{\"user_uuid\":\"${USER_UUID}\",\"user_email\":null,\"username\":\"${USERNAME}\"}" \
                     "https://accounts.${SYSTEM_DNS_ZONE_NAME}/users/${USER_UUID}"
                fi

                echo "Uploading documents"
                cd paas-cf/config/accounts/documents

                for file in *.md; do

                  echo "Uploading $file"

                  body=$(ruby -rjson -e "puts ({content:File.read('$file')}).to_json")

                  curl --silent --fail --include \
                    --request PUT \
                    --user "admin:${BASIC_AUTH_PASSWORD}" \
                    --header "Content-Type: application/json" \
                    --data "$body" \
                    "https://accounts.${SYSTEM_DNS_ZONE_NAME}/documents/${file%.md}"

                done
                )
      - *end-grafana-job-annotation

  - name: deploy-paas-admin
    serial: true
    plan:
      - *add-grafana-job-annotation
      - get: paas-admin
        trigger: true

      - in_parallel:
        - <<: *get-paas-cf
          trigger: true
          passed: ['post-deploy']

        - get: cf-manifest
          passed: ['post-deploy']

      - task: build
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: node
              tag: lts-alpine
          inputs:
            - name: paas-admin
          outputs:
            - name: paas-admin-dist
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cd paas-admin
                npm install
                NODE_ENV=production npm run build

                cp -Ra . ../paas-admin-dist

      - task: render-manifest
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ghcr.io/alphagov/paas/spruce
              tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

          inputs:
            - name: paas-cf
            - name: paas-admin-dist
          outputs:
            - name: paas-admin-manifest
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            MAILCHIMP_API_KEY: ((mailchimp_api_key))
            NOTIFY_API_KEY: ((notify_api_key))
            NOTIFY_PWD_RESET_TEMPLATE_ID: d1b440c0-7c45-4c6a-a7cb-10feaa491e52
            NOTIFY_WELCOME_TEMPLATE_ID: 1859ce68-f133-4218-ac6e-a8ef32a41292
            AWS_REGION: ((aws_region))
            UAA_CLIENTS_PAAS_ADMIN_SECRET: ((uaa_clients_paas_admin_secret))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                cat <<EOF > paas-admin-env-and-routes.yml
                applications:
                - name: paas-admin
                  routes:
                  - route: "admin.${SYSTEM_DNS_ZONE_NAME}"
                  instances: 2
                  services:
                   - logit-syslog-drain
                  env:
                    OAUTH_CLIENT_ID: "paas-admin"
                    OAUTH_CLIENT_SECRET: ((uaa_clients_paas_admin_secret))
                    API_URL: "https://api.${SYSTEM_DNS_ZONE_NAME}"
                    BILLING_URL: "https://billing.${SYSTEM_DNS_ZONE_NAME}"
                    ACCOUNTS_URL: "https://accounts.${SYSTEM_DNS_ZONE_NAME}"
                    ACCOUNTS_SECRET: ((paas_accounts_password))
                    MAILCHIMP_API_KEY: "${MAILCHIMP_API_KEY}"
                    NOTIFY_API_KEY: "${NOTIFY_API_KEY}"
                    NOTIFY_PASSWORD_RESET_TEMPLATE_ID: "${NOTIFY_PWD_RESET_TEMPLATE_ID}"
                    NOTIFY_WELCOME_TEMPLATE_ID: "${NOTIFY_WELCOME_TEMPLATE_ID}"
                    SESSION_SECRET: (( concat "session-" "${UAA_CLIENTS_PAAS_ADMIN_SECRET}" ))
                    AWS_REGION: "$AWS_REGION"
                    MS_CLIENT_ID: ((microsoft_adminoidc_client_id))
                    MS_CLIENT_SECRET: ((microsoft_adminoidc_client_secret))
                    MS_TENANT_ID: ((microsoft_adminoidc_tenant_id))
                    GOOGLE_CLIENT_ID: ((google_paas_admin_client_id))
                    GOOGLE_CLIENT_SECRET: ((google_paas_admin_client_secret))
                    DOMAIN_NAME: "https://admin.${SYSTEM_DNS_ZONE_NAME}"
                    AWS_ACCESS_KEY_ID: ((paas_admin_aws_access_key_id))
                    AWS_SECRET_ACCESS_KEY: ((paas_admin_aws_secret_access_key))
                    PROMETHEUS_USERNAME: paas-admin
                    PROMETHEUS_PASSWORD: ((paas_admin_prometheus_password))
                    PROMETHEUS_ENDPOINT: "https://prometheus.${SYSTEM_DNS_ZONE_NAME}"
                    ZENDESK_API_TOKEN: ((zendesk_api_token))
                    ZENDESK_USERNAME: ((zendesk_username))
                EOF

                spruce merge \
                  paas-admin-dist/manifest.yml \
                  paas-admin-env-and-routes.yml \
                  | spruce merge --cherry-pick applications \
                    > paas-admin-manifest/manifest.yml

      - task: deploy
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: paas-admin-dist
            - name: paas-admin-manifest
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            CF_CLIENT_SECRET: ((cf_client_secret))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"
                cf target -o admin -s public

                cd paas-admin-dist

                cf cancel-deployment paas-admin || true
                cf push --strategy=rolling paas-admin -f ../paas-admin-manifest/manifest.yml

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: paas-admin-test-user
            DISABLE_ADMIN_USER_CREATION: false
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: acceptance-tests
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: node
                tag: lts-alpine
            params:
              DISABLE_CUSTOM_ACCEPTANCE_TESTS: ((disable_custom_acceptance_tests))
              DEPLOY_ENV: ((deploy_env))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              ACCOUNTS_PASSWORD: ((paas_accounts_password))
            inputs:
              - name: paas-cf
              - name: paas-admin
              - name: admin-creds
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  if [ "${DISABLE_CUSTOM_ACCEPTANCE_TESTS:-}" = "true" ]; then
                    echo 'Skipping because DISABLE_CUSTOM_ACCEPTANCE_TESTS is set'
                    exit 0
                  fi
                  cd paas-admin
                  npm install

                  ADMIN_USERNAME="$(cat ../admin-creds/username)" \
                  ADMIN_PASSWORD="$(cat ../admin-creds/password)" \
                  PAAS_ADMIN_BASE_URL="https://admin.${SYSTEM_DNS_ZONE_NAME}" \
                  CF_API_BASE_URL="https://api.${SYSTEM_DNS_ZONE_NAME}" \
                  ACCOUNTS_API_BASE_URL="https://accounts.${SYSTEM_DNS_ZONE_NAME}" \
                  ACCOUNTS_USERNAME="admin" \
                    npm run test:acceptance

        ensure:
          task: remove-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/delete_admin.yml
          timeout: 5m
          params:
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))

      - task: tag-repo
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/tag-repo.yml
        input_mapping:
          git-repo: paas-admin
        params:
          DEPLOY_ENV: ((deploy_env))
          GIT_EMAIL: the-multi-cloud-paas-team+deployer-ci@digital.cabinet-office.gov.uk
          GIT_REPO_SSH: git@github.com:alphagov/paas-admin.git
          GIT_SSH_PRIVATE_KEY: ((paas-admin-git-keys.private_key))
          GIT_SSH_PUBLIC_KEY: ((paas-admin-git-keys.public_key))
          GIT_USER: gov-paas-((deploy_env))

      - *end-grafana-job-annotation

  - name: deploy-paas-billing
    serial: true
    plan:
      - *add-grafana-job-annotation
      - get: paas-billing
        trigger: true

      - in_parallel:
        - <<: *get-paas-cf
          trigger: true
          passed: ['post-deploy']

      - task: deploy-paas-billing
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            AWS_REGION: ((aws_region))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            DEPLOY_ENV: ((deploy_env))
            CF_CLIENT_SECRET: ((cf_client_secret))
            LOGIT_ADDRESS: ((logit_syslog_address))
            LOGIT_PORT: ((logit_syslog_port))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          inputs:
            - name: paas-cf
            - name: paas-billing
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                BILLING_DB_PLAN="tiny-unencrypted-9.5"
                if [ "${DEPLOY_ENV}" = "stg-lon" ]; then
                  BILLING_DB_PLAN="medium-9.5"
                elif [ "${DEPLOY_ENV}" = "prod" ] || [ "${DEPLOY_ENV}" = "prod-lon" ]; then
                  BILLING_DB_PLAN="large-9.5"
                fi

                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s billing

                if ! cf service billing-db > /dev/null; then
                  cf create-service postgres "${BILLING_DB_PLAN}" billing-db
                  while ! cf service billing-db | grep -iqE 'status:\s+create succeeded'; do
                    echo "Waiting for creation of billing-db service to complete..."
                    sleep 30
                  done
                fi

                if ! cf service billing-logit-ssl-drain > /dev/null; then
                  cf create-user-provided-service \
                    billing-logit-ssl-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                else
                  cf update-user-provided-service \
                    billing-logit-ssl-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                fi

                cp "paas-cf/config/billing/output/${AWS_REGION}.json" paas-billing/config.json

                cd paas-billing

                ruby -ryaml -e "
                  env = {
                    'CF_CLIENT_ID' => 'paas-billing',
                    'CF_CLIENT_SECRET' => '${CF_CLIENT_SECRET}',
                    'CF_CLIENT_REDIRECT_URL' => 'https://billing.${SYSTEM_DNS_ZONE_NAME}/oauth/callback',
                    'CF_API_ADDRESS' => '${API_ENDPOINT}',
                    'DEPLOY_ENV' => '${DEPLOY_ENV}',
                  }

                  api = YAML.load_file('manifest-api.yml')
                  api['applications'].each { |app|
                    app['env'] = {} unless app['env']
                    app['env'] = app['env'].merge(env)
                    app['services'] = [
                      'billing-db',
                      'billing-logit-ssl-drain'
                    ]
                    app['routes'] = [
                      { 'route' => 'billing.${SYSTEM_DNS_ZONE_NAME}' }
                    ]
                    app['health-check-http-endpoint'] = '/'
                  }
                  File.write('manifest-api.yml', api.to_yaml)

                  collector = YAML.load_file('manifest-collector.yml')
                  collector['applications'].each { |app|
                    app['env'] = {} unless app['env']
                    app['env'] = app['env'].merge(env)
                    app['services'] = [
                      'billing-db',
                      'billing-logit-ssl-drain'
                    ]
                  }
                  File.write('manifest-collector.yml', collector.to_yaml)
                "

                cf cancel-deployment paas-billing-api || true
                cf push --strategy=rolling paas-billing-api -f manifest-api.yml

                cf cancel-deployment paas-billing-collector || true
                cf push --strategy=rolling paas-billing-collector -f manifest-collector.yml

                while ! cf service billing-logit-ssl-drain | grep -c 'create succeeded' | grep 2 > /dev/null; do
                  echo "Waiting for binding of billing-logit-ssl-drain service to billing apps to complete..."
                  sleep 10
                done

      - task: paas-billing-acceptance-tests
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-acceptance-tests-image-resource
          params:
            AWS_REGION: ((aws_region))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            DEPLOY_ENV: ((deploy_env))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          inputs:
            - name: paas-cf
            - name: paas-billing
              path: src/github.com/alphagov/paas-billing
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s billing

                export GOPATH="${PWD}"
                export BILLING_API_URL="https://billing.${SYSTEM_DNS_ZONE_NAME}"
                cd src/github.com/alphagov/paas-billing
                make acceptance

      - task: tag-repo
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/tag-repo.yml
        input_mapping:
          git-repo: paas-billing
        params:
          DEPLOY_ENV: ((deploy_env))
          GIT_EMAIL: the-multi-cloud-paas-team+deployer-ci@digital.cabinet-office.gov.uk
          GIT_REPO_SSH: git@github.com:alphagov/paas-billing.git
          GIT_SSH_PRIVATE_KEY: ((paas-billing-git-keys.private_key))
          GIT_SSH_PUBLIC_KEY: ((paas-billing-git-keys.public_key))
          GIT_USER: gov-paas-((deploy_env))

      - *end-grafana-job-annotation

  - name: deploy-paas-metrics
    serial: true
    plan:
      - *add-grafana-job-annotation
      - <<: *get-paas-cf
        trigger: true
        passed: ['post-deploy']

      - task: deploy
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            DEPLOY_ENV: ((deploy_env))
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            AWS_REGION: ((aws_region))

            AIVEN_API_TOKEN: ((aiven_api_token))
            AIVEN_PROJECT: paas-cf-((aws_account))

            UAA_ENDPOINT: ((uaa_endpoint))
            API_ENDPOINT: ((api_endpoint))

            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))

            METRICS_SECRET: ((metrics_secret))
            METRICS_AWS_ACCESS_KEY_ID: ((metrics_aws_access_key_id))
            METRICS_AWS_SECRET_ACCESS_KEY: ((metrics_aws_secret_access_key))

            LOGIT_ADDRESS: ((logit_syslog_address))
            LOGIT_PORT: ((logit_syslog_port))
            LOGIT_ELASTICSEARCH_URL: ((logit_elasticsearch_url))
            LOGIT_ELASTICSEARCH_API_KEY: ((logit_elasticsearch_api_key))
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s monitoring

                if ! cf service logit-syslog-drain > /dev/null; then
                  cf create-user-provided-service \
                    logit-syslog-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                else
                  cf update-user-provided-service \
                    logit-syslog-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                fi

                cd paas-cf/tools/metrics

                ruby -ryaml -e "
                  env = {
                    'CF_CLIENT_ID' => 'paas-metrics',
                    'CF_CLIENT_SECRET' => '${METRICS_SECRET}',
                    'CF_API_ADDRESS' => '${API_ENDPOINT}',
                    'UAA_ENDPOINT' => '${UAA_ENDPOINT}',
                    'DEPLOY_ENV' => '${DEPLOY_ENV}',
                    'ELB_ADDRESS' => 'https://healthcheck.${APPS_DNS_ZONE_NAME}/',
                    'BILLING_ENDPOINT' => 'https://billing.${SYSTEM_DNS_ZONE_NAME}',
                    'TLS_DOMAINS' => [
                      'healthcheck.${APPS_DNS_ZONE_NAME}',
                      'api.${SYSTEM_DNS_ZONE_NAME}',
                      'uaa.${SYSTEM_DNS_ZONE_NAME}',
                      '${APPS_DNS_ZONE_NAME}'
                    ].join(','),
                    'AWS_REGION' => '${AWS_REGION}',
                    'AWS_ACCESS_KEY_ID' => '${METRICS_AWS_ACCESS_KEY_ID}',
                    'AWS_SECRET_ACCESS_KEY' => '${METRICS_AWS_SECRET_ACCESS_KEY}',
                    'AIVEN_API_TOKEN' => '${AIVEN_API_TOKEN}',
                    'AIVEN_PROJECT' => '${AIVEN_PROJECT}',
                    'LOGIT_ELASTICSEARCH_URL' => '${LOGIT_ELASTICSEARCH_URL}',
                    'LOGIT_ELASTICSEARCH_API_KEY' => '${LOGIT_ELASTICSEARCH_API_KEY}'
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] = {} unless app['env']
                    app['env'].merge!(env)
                    app['routes'] = [
                      { 'route' => 'paas-metrics.${APPS_DNS_ZONE_NAME}' },
                    ]
                    app['services'] = ['logit-syslog-drain']
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf cancel-deployment paas-metrics || true
                cf push --strategy=rolling paas-metrics

      - task: acceptance-tests
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *golang-image-resource
          inputs:
            - name: paas-cf
          params:
            PAAS_METRICS_URL: https://paas-metrics.((apps_dns_zone_name))/metrics
          run:
            path: sh
            args:
              - -u
              - -e
              - -c
              - |
                go get github.com/onsi/ginkgo/ginkgo

                cd paas-cf/tools/metrics
                echo 'Waiting 2 minutes before running the acceptance tests'
                sleep 120
                ginkgo acceptance
      - *end-grafana-job-annotation

  - name: deploy-paas-prometheus-endpoints
    serial: true
    plan:
      - *add-grafana-job-annotation
      - in_parallel:
        - get: paas-prometheus-endpoints
          trigger: true

        - get: paas-cf
          trigger: true
          passed: ['post-deploy']

      - task: create-metrics-domain
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            CF_CLIENT_ID: "paas-prometheus-endpoints"
            CF_CLIENT_SECRET: ((uaa_clients_paas_prometheus_endpoints_secret))
            CF_API_ADDRESS: https://api.((system_dns_zone_name))

            DOMAIN_FOR_PROMETHEUS_ENDPOINTS: metrics.((system_dns_zone_name))

            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          run:
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail

                echo | cf login -a "${CF_API_ADDRESS}" -u "${CF_ADMIN}" -p "${CF_PASS}" -o admin -s monitoring

                if ! cf domains | grep "${DOMAIN_FOR_PROMETHEUS_ENDPOINTS}" > /dev/null; then
                  cf create-private-domain admin "${DOMAIN_FOR_PROMETHEUS_ENDPOINTS}"
                fi

      - task: deploy-paas-prometheus-endpoint-redis
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          params:
            CF_CLIENT_ID: "paas-prometheus-endpoints"
            CF_CLIENT_SECRET: ((uaa_clients_paas_prometheus_endpoints_secret))
            CF_API_ADDRESS: https://api.((system_dns_zone_name))

            DEPLOY_ENV: ((deploy_env))
            DOMAIN_FOR_PROMETHEUS_ENDPOINTS: metrics.((system_dns_zone_name))

            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))

            AWS_REGION: ((aws_region))
            AWS_ACCESS_KEY_ID: ((paas_prometheus_endpoints_aws_access_key_id))
            AWS_SECRET_ACCESS_KEY: ((paas_prometheus_endpoints_aws_secret_access_key))
          inputs:
            - name: paas-cf
            - name: paas-prometheus-endpoints
          run:
            path: bash
            dir: paas-prometheus-endpoints
            args:
              - -c
              - |
                set -ueo pipefail

                echo | cf login -a "${CF_API_ADDRESS}" -u "${CF_ADMIN}" -p "${CF_PASS}" -o admin -s monitoring

                cf cancel-deployment paas-prometheus-endpoint-redis || true
                cf push \
                  paas-prometheus-endpoint-redis \
                  --strategy=rolling \
                  -f manifest-redis.yml \
                  --var route="redis.${DOMAIN_FOR_PROMETHEUS_ENDPOINTS}" \
                  --var cf_client_id="$CF_CLIENT_ID" \
                  --var cf_client_secret="$CF_CLIENT_SECRET" \
                  --var cf_api_address="$CF_API_ADDRESS" \
                  --var deploy_env="$DEPLOY_ENV" \
                  --var aws_region="$AWS_REGION" \
                  --var aws_access_key_id="$AWS_ACCESS_KEY_ID" \
                  --var aws_secret_access_key="$AWS_SECRET_ACCESS_KEY"
                cf bind-service paas-prometheus-endpoint-redis logit-syslog-drain

      - *end-grafana-job-annotation

  - name: deploy-paas-aiven-broker
    serial: true
    plan:
      - *add-grafana-job-annotation

      - in_parallel:
          - get: paas-aiven-broker
            trigger: true

          - <<: *get-paas-cf
            trigger: true
            passed: ['post-deploy']

          - get: cf-tfstate
            passed: ['generate-cf-config']

          - get: cf-manifest
            passed: ['post-deploy']

          - get: cf-acceptance-tests

      - task: retrieve-config
        tags: [colocated-with-web]
        config: &post-deploy-config
          platform: linux
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          outputs:
            - name: config
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
          image_resource: *ruby-slim-image-resource
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

                ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < cf-tfstate/cf.tfstate \
                  > cf-terraform-outputs.yml

                cat << EOT > config/config.sh
                export BROKER_IP_WHITELIST=$($VAL_FROM_YAML terraform_outputs_nat_public_ips_csv cf-terraform-outputs.yml)
                EOT

                ls -l config/*

      - task: deploy-aiven-broker
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
            - name: paas-aiven-broker
            - name: config
          params:
            AIVEN_API_TOKEN: ((aiven_api_token))
            AIVEN_PROMETHEUS_ENDPOINT_ID: ((aiven_prometheus_endpoint_id))
            SERVICE_NAME_PREFIX: ((deploy_env))
            AIVEN_PROJECT: paas-cf-((aws_account))
            AIVEN_CLOUD: aws-((aws_region))
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
            AIVEN_BROKER_PASS: ((secrets_aiven_broker_admin_password))
            LOGIT_ADDRESS: ((logit_syslog_address))
            LOGIT_PORT: ((logit_syslog_port))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                cf target -o admin -s service-brokers

                cp ./paas-cf/config/service-brokers/aiven/config.json ./paas-aiven-broker/
                cd paas-aiven-broker/

                if ! cf service logit-syslog-drain > /dev/null; then
                  cf create-user-provided-service \
                    logit-syslog-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                else
                  cf update-user-provided-service \
                    logit-syslog-drain \
                    -l "syslog-tls://${LOGIT_ADDRESS}:${LOGIT_PORT}"
                fi

                ruby -ryaml -e "
                  env = {
                    'AIVEN_USERNAME' => 'aiven-broker',
                    'AIVEN_PASSWORD' => '$AIVEN_BROKER_PASS',
                    'AIVEN_API_TOKEN' => '$AIVEN_API_TOKEN',
                    'AIVEN_PROMETHEUS_ENDPOINT_ID' => '$AIVEN_PROMETHEUS_ENDPOINT_ID',
                    'SERVICE_NAME_PREFIX' => '$SERVICE_NAME_PREFIX',
                    'AIVEN_PROJECT' => '$AIVEN_PROJECT',
                    'AIVEN_CLOUD' => '$AIVEN_CLOUD',
                    'IP_WHITELIST' => '$BROKER_IP_WHITELIST',
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] ||= {}
                    app['env'].merge!(env)
                    app['routes'] = [
                      { 'route' => 'aiven-broker.${APPS_DNS_ZONE_NAME}' },
                    ]
                    app['services'] = ['logit-syslog-drain']
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf cancel-deployment aiven-broker || true
                cf push --strategy=rolling aiven-broker

                if cf service-brokers | grep 'aiven-broker\s'; then
                  cf update-service-broker aiven-broker aiven-broker "$AIVEN_BROKER_PASS" "https://aiven-broker.${APPS_DNS_ZONE_NAME}"
                else
                  cf create-service-broker aiven-broker aiven-broker "$AIVEN_BROKER_PASS" "https://aiven-broker.${APPS_DNS_ZONE_NAME}"
                fi

                cf enable-service-access elasticsearch -b aiven-broker

                cf enable-service-access influxdb -b aiven-broker

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: aiven-broker-acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: generate-test-config
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: acceptance_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))
            NAME_PREFIX: AIVENBACC
            TEST_USER_PASSWORD: ((secrets_test_user_password))

        - in_parallel:
          - task: aiven-broker-acceptance-tests
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/aiven-broker-acceptance-tests-run.yml
            params:
              DISABLE_CUSTOM_ACCEPTANCE_TESTS: ((disable_custom_acceptance_tests))
              DEPLOY_ENV: ((deploy_env))
              AWS_REGION: ((aws_region))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))

              PROMETHEUS_BASIC_AUTH_USERNAME: custom-broker-acceptance
              PROMETHEUS_BASIC_AUTH_PASSWORD: ((custom_broker_acceptance_prometheus_password))
            ensure:
              task: upload-test-artifacts
              tags: [colocated-with-web]
              file: paas-cf/concourse/tasks/upload-test-artifacts.yml
              params:
                TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/delete_admin.yml
          timeout: 5m
          params:
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))

      - task: tag-repo
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/tag-repo.yml
        input_mapping:
          git-repo: paas-aiven-broker
        params:
          DEPLOY_ENV: ((deploy_env))
          GIT_EMAIL: the-multi-cloud-paas-team+deployer-ci@digital.cabinet-office.gov.uk
          GIT_REPO_SSH: git@github.com:alphagov/paas-aiven-broker.git
          GIT_SSH_PRIVATE_KEY: ((paas-aiven-broker-git-keys.private_key))
          GIT_SSH_PUBLIC_KEY: ((paas-aiven-broker-git-keys.public_key))
          GIT_USER: gov-paas-((deploy_env))

      - *end-grafana-job-annotation

  - name: rotate-certs
    serial: true
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: ['smoke-tests', 'acceptance-tests', 'custom-acceptance-tests', 'custom-broker-acceptance-tests', 'bosh-tests']
            trigger: true
          - <<: *get-paas-cf
            passed: ['smoke-tests', 'acceptance-tests', 'custom-acceptance-tests', 'custom-broker-acceptance-tests', 'bosh-tests']
      - task: remove-transitional-flag-for-ca
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          params:
            CREDHUB_CLIENT: credhub-admin
            CREDHUB_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                credhub login
                ./paas-cf/concourse/scripts/ca-rotation-remove-transitional.rb

      - task: move-transitional-flag-for-ca
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          params:
            CREDHUB_CLIENT: credhub-admin
            CREDHUB_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
            EXPIRY_DAYS: ((ca_rotation_expiry_days))
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                credhub login
                ./paas-cf/concourse/scripts/ca-rotation-move-transitional.rb

      - task: set-transitional-flag-for-ca
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          params:
            CREDHUB_CLIENT: credhub-admin
            CREDHUB_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
            EXPIRY_DAYS: ((ca_rotation_expiry_days))
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                credhub login
                ./paas-cf/concourse/scripts/ca-rotation-set-transitional.rb

  - name: check-certificates-after-rotation
    build_logs_to_retain: 50
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: [rotate-certs]
            trigger: true
          - <<: *get-paas-cf
            passed: [rotate-certs]

      - task: check-certificates
        tags: [colocated-with-web]
        config: &check-certificates-config
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          params:
            CREDHUB_CLIENT: credhub-admin
            CREDHUB_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                credhub login
                ./paas-cf/concourse/scripts/check-certificates.rb 15

      - task: check-certificate-hierarchy
        tags: [colocated-with-web]
        config: &check-certificate-hierarchy-config
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          params:
            CREDHUB_CLIENT: credhub-admin
            CREDHUB_SECRET: ((bosh-credhub-admin))
            CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
            CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          inputs:
            - name: paas-cf
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                credhub login
                ./paas-cf/concourse/scripts/check-certificate-hierarchy.rb

  - name: tag-release
    plan:
      - in_parallel:
          - get: pipeline-trigger
            passed: [check-certificates-after-rotation]
            trigger: true
          - <<: *get-paas-cf
            passed: [check-certificates-after-rotation]
          - get: git-keys

      - put: release-version
        params: {bump: patch}

      - task: tag-release
        tags: [colocated-with-web]
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          params:
            aws_account: ((aws_account))
            deploy_env: ((deploy_env))
            OUTPUT_TAG_PREFIX: ((OUTPUT_TAG_PREFIX))
            INPUT_TAG_PREFIX: ((INPUT_TAG_PREFIX))
          inputs:
          - name: paas-cf
          - name: release-version
          - name: git-keys
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -z "${OUTPUT_TAG_PREFIX}" ]; then
                echo \$OUTPUT_TAG_PREFIX not set, skipping
                exit 0
              fi
              paas-cf/concourse/scripts/tag_release.sh \
                "${OUTPUT_TAG_PREFIX}" "${aws_account}" "${deploy_env}" "${INPUT_TAG_PREFIX}"

      - *end-grafana-overview-annotation

  - name: pipeline-unlock
    serial: true
    plan:
      - get: pipeline-trigger
        passed: ['tag-release']
        trigger: true
      - get: pipeline-pool
      - try:
          task: unlock-the-pipeline
          tags: [colocated-with-web]
          config:
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: 3.12
            platform: linux
            params:
              DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                   echo "Pipeline locking is disabled, this task will fail and this is OK."
                   exit 1
                fi
          on_success:
            put: pipeline-pool
            params:
              release: pipeline-pool

  - name: pipeline-check-lock
    plan:
      - get: pipeline-pool
      - task: print-pipeline-lock-state
        tags: [colocated-with-web]
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          inputs:
          - name: pipeline-pool
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -f "pipeline-pool/((pipeline_name))/claimed/lock" ]; then
                current_status_message="LOCKED"
              elif [ -f "pipeline-pool/((pipeline_name))/unclaimed/lock" ]; then
                current_status_message="UNLOCKED"
              else
                echo "Error: Cannot find lock in pool: pipeline-pool/((pipeline_name))/{un,}claimed/lock"
                exit 1
              fi

              cd pipeline-pool
              export GIT_PAGER="cat"
              git log -1 --pretty=format:"
              Lock status is: ${current_status_message}

              Last commit change:
               - %cr at %ci
               - %s
              "

  - name: pipeline-release-lock
    plan:
      - get: pipeline-pool
      - put: pipeline-pool
        params:
          release: pipeline-pool

  - name: rotate-cf-admin-password
    serial: true
    serial_groups: [smoke-tests]
    plan:
    - task: generate-cf-admin-password
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource: *gov-paas-bosh-cli-v2-image-resource
        outputs:
          - name: passwords
        params:
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              credhub login

              credhub generate -n "/${DEPLOY_ENV}/${DEPLOY_ENV}/cf_admin_password" -t password
              credhub get -q -n "/${DEPLOY_ENV}/${DEPLOY_ENV}/cf_admin_password" | tr -d '[:space:]' > passwords/cf-admin-password
              credhub get -q -n "/${DEPLOY_ENV}/${DEPLOY_ENV}/uaa_admin_client_secret" | tr -d '[:space:]' > passwords/uaa-secret
              credhub set -t password -n "/concourse/main/cf_pass" -w "$(cat passwords/cf-admin-password)"

    - task: update-cf-admin-password
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ghcr.io/alphagov/paas/cf-uaac
            tag: 90f9f534ed5a3887b9c5d55a20cca6561f7de6a4

        inputs:
          - name: passwords
        params:
          UAA_ENDPOINT: "https://uaa.((system_dns_zone_name))"
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              UAA_ADMIN_CLIENT_SECRET=$(cat passwords/uaa-secret)
              CF_ADMIN_PASSWORD=$(cat passwords/cf-admin-password)

              uaac target "${UAA_ENDPOINT}"
              uaac token client get admin -s "${UAA_ADMIN_CLIENT_SECRET}"
              uaac password set admin -p "${CF_ADMIN_PASSWORD}"

  - name: rotate-cloudfoundry-credentials
    serial: true
    serial_groups: [smoke-tests]
    plan:
    - in_parallel:
      - <<: *get-paas-cf
      - get: cf-tfstate

    - task: rotate-credentials
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource: *gov-paas-bosh-cli-v2-image-resource
        params:
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              BOSH_NS="/${DEPLOY_ENV}/${DEPLOY_ENV}"
              credhub login

              credhub generate -n "${BOSH_NS}/secrets_paas_accounts_admin_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_test_user_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_uaa_clients_login_secret" -t password
              credhub generate -n "${BOSH_NS}/secrets_uaa_clients_notifications_secret" -t password
              credhub generate -n "${BOSH_NS}/secrets_uaa_clients_paas_auditor_secret" -t password
              credhub generate -n "${BOSH_NS}/secrets_uaa_clients_paas_billing_secret" -t password
              credhub generate -n "${BOSH_NS}/secrets_uaa_clients_paas_metrics_secret" -t password
              credhub generate -n "${BOSH_NS}/secrets_uaa_clients_paas_prometheus_endpoints_secret" -t password
              credhub generate -n "${BOSH_NS}/uaa_clients_cf_exporter_secret" -t password
              credhub generate -n "${BOSH_NS}/uaa_clients_cf_smoke_tests_secret" -t password
              credhub generate -n "${BOSH_NS}/uaa_clients_firehose_exporter_secret" -t password

              credhub get -n "${BOSH_NS}/uaa_jwt_signing_key" -k private_key | sed '/^$/d' > old_key
              credhub get -n "${BOSH_NS}/uaa_jwt_signing_key" -k public_key | sed '/^$/d' > old_pub
              credhub set -n "${BOSH_NS}/uaa_jwt_signing_key_old" -t rsa -p old_key -u old_pub

              UAA_JWT_SIGNING_KEY_ID_OLD=$(credhub get -q -n "${BOSH_NS}/uaa_jwt_signing_key_id" | sed 's/\s//g' | tr -d '\n')
              credhub set --name="${BOSH_NS}/uaa_jwt_signing_key_id_old" -t password -w "${UAA_JWT_SIGNING_KEY_ID_OLD}"

              credhub generate -n "${BOSH_NS}/uaa_jwt_signing_key_id" -t password
              credhub generate -n "${BOSH_NS}/uaa_jwt_signing_key" -t rsa -k 2048

    - task: forget-access-keys
      tags: [colocated-with-web]
      file: paas-cf/concourse/tasks/forget-access-keys.yml
      params:
        AWS_DEFAULT_REGION: ((aws_region))
      ensure:
        put: cf-tfstate
        params:
          file: updated-tfstate/cf.tfstate

  - name: rotate-broker-credentials
    serial: true
    serial_groups: [smoke-tests]
    plan:
    - task: rotate-broker-credentials
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource: *gov-paas-bosh-cli-v2-image-resource
        params:
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              BOSH_NS="/${DEPLOY_ENV}/${DEPLOY_ENV}"
              credhub login

              credhub generate -n "${BOSH_NS}/secrets_rds_broker_admin_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_cdn_broker_admin_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_aiven_broker_admin_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_elasticache_broker_admin_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_s3_broker_admin_password" -t password
              credhub generate -n "${BOSH_NS}/secrets_sqs_broker_admin_password" -t password

              echo "Broker credentials will be updated on the next deployment pipeline run."
              echo "WARNING: Broker users will experience some downtime during the deploy. Our brokers do not support hot-swapping of credentials."

  - name: rotate-database-encryption-keys
    serial: true
    plan:
    - task: rotate-db-encryption-key
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource: *gov-paas-bosh-cli-v2-image-resource
        params:
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              BOSH_NS="/${DEPLOY_ENV}/${DEPLOY_ENV}"
              credhub login

              CC_DB_KEY_OLD=$(credhub get -q -n "${BOSH_NS}/cc_db_encryption_key" | sed 's/\s//g' | tr -d '\n')
              CC_DB_KEY_ID_OLD=$(credhub get -q -n "${BOSH_NS}/cc_db_encryption_key_id" | sed 's/\s//g' | tr -d '\n')
              UAA_ENCRYPTION_PASSPHRASE_OLD=$(credhub get -q -n "${BOSH_NS}/uaa_default_encryption_passphrase" | sed 's/\s//g' | tr -d '\n')
              UAA_ENCRYPTION_PASSPHRASE_ID_OLD=$(credhub get -q -n "${BOSH_NS}/uaa_default_encryption_passphrase_id" | sed 's/\s//g' | tr -d '\n')

              credhub set --name="${BOSH_NS}/cc_db_encryption_key_old" --type password --password "${CC_DB_KEY_OLD}"
              credhub set --name="${BOSH_NS}/cc_db_encryption_key_id_old" --type password --password "${CC_DB_KEY_ID_OLD}"
              credhub set --name="${BOSH_NS}/uaa_default_encryption_passphrase_old" --type password --password "${UAA_ENCRYPTION_PASSPHRASE_OLD}"
              credhub set --name="${BOSH_NS}/uaa_default_encryption_passphrase_id_old" --type password --password "${UAA_ENCRYPTION_PASSPHRASE_ID_OLD}"

              credhub generate -n "${BOSH_NS}/cc_db_encryption_key" -t password
              credhub generate -n "${BOSH_NS}/cc_db_encryption_key_id" -t password
              credhub generate -n "${BOSH_NS}/uaa_default_encryption_passphrase" -t password
              credhub generate -n "${BOSH_NS}/uaa_default_encryption_passphrase_id" -t password

  - name: rotate-prometheus-credentials
    serial: true
    plan:
    - task: rotate-credentials
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource: *gov-paas-bosh-cli-v2-image-resource
        params:
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              PROM_NS="/${DEPLOY_ENV}/prometheus"
              credhub login

              credhub generate -n "${PROM_NS}/prometheus_password" -t password
              credhub generate -n "${PROM_NS}/grafana_secret_key" -t password
              credhub generate -n "${PROM_NS}/grafana_password" -t password
              credhub generate -n "${PROM_NS}/alertmanager_password" -t password

  - name: expire-aws-keys
    serial: true
    plan:
    - in_parallel:
      - <<: *get-paas-cf
      - get: cf-tfstate
      - get: expire-aws-keys-timer
        trigger: true
    - task: forget-access-keys
      tags: [colocated-with-web]
      file: paas-cf/concourse/tasks/forget-access-keys.yml
      params:
        AWS_DEFAULT_REGION: ((aws_region))
      ensure:
        put: cf-tfstate
        params:
          file: updated-tfstate/cf.tfstate

  - name: set-smoke-test-creds
    serial: true
    plan:
    - task: set-smoke-test-creds
      tags: [colocated-with-web]
      config:
        platform: linux
        image_resource: *cf-cli-image-resource
        outputs:
          - name: new-smoke-test-config
        params:
          APP_DOMAIN: ((apps_dns_zone_name))
          SYSTEM_DOMAIN: ((system_dns_zone_name))
          STATE_BUCKET: ((state_bucket))
          API_ENDPOINT: ((api_endpoint))
          CF_ADMIN: ((cf_admin))
          CF_PASS: ((cf_pass))
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              NEW_SMOKE_TEST_PASSWORD=$(tr -cd '[:alpha:]0-9' < /dev/urandom | head -c32)
              TEST_CONFIG=new-smoke-test-config/smoke-test-config.json

              cat <<EOF > "${TEST_CONFIG}"
              {
                "api": "api.${SYSTEM_DOMAIN}",
                "apps_domain": "${APP_DOMAIN}",
                "user": "smoke-test",
                "password": "${NEW_SMOKE_TEST_PASSWORD}",
                "org": "continuous-smoke-test",
                "space": "continuous-smoke-test",
                "use_existing_org": true,
                "use_existing_space": true,
                "skip_ssl_validation": false,
                "artifacts_directory": "/tmp/artifacts",
                "suite_name": "CF_SMOKE_TESTS",
                "logging_app": "",
                "runtime_app": "",
                "ginkgo_opts": "",
                "backend": ""
              }
              EOF

              cf api "${API_ENDPOINT}"
              cf auth "${CF_ADMIN}" "${CF_PASS}"

              cf create-org continuous-smoke-test
              cf create-space continuous-smoke-test -o continuous-smoke-test

              TEST_PASSWORD="$(jq -r .password $TEST_CONFIG)"
              TEST_ORG="$(jq -r .org $TEST_CONFIG)"
              TEST_SPACE="$(jq -r .space $TEST_CONFIG)"
              TEST_USER="$(jq -r .user $TEST_CONFIG)"

              cf t -o "${TEST_ORG}" -s "${TEST_SPACE}"
              cf delete-user "${TEST_USER}" -f # create-user isn't idempotent :-(
              cf create-user "${TEST_USER}" "${TEST_PASSWORD}"
              cf set-space-role "${TEST_USER}" "${TEST_ORG}" "${TEST_SPACE}" SpaceManager

    - put: smoke-test-config
      params: { file: new-smoke-test-config/smoke-test-config.json }

  - name: generate-git-keys
    plan:
      - task: ssh-keygen
        tags: [colocated-with-web]
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          outputs:
          - name: generated-git-keys
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ssh-keygen -t rsa -b 4096 -f git-key -N ''
              tar -cvzf generated-git-keys/git-keys.tar.gz ./git-key ./git-key.pub
              cat ./git-key.pub
        on_success:
          put: git-keys
          params:
            file: generated-git-keys/git-keys.tar.gz

  - name: generate-paas-admin-git-keys
    plan:
      - <<: *get-paas-cf
      - task: generate-git-keys
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/generate-git-keys.yml
        params:
          DESTINATION: /concourse/main/paas-admin-git-keys
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))

  - name: generate-paas-aiven-broker-git-keys
    plan:
      - <<: *get-paas-cf
      - task: generate-git-keys
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/generate-git-keys.yml
        params:
          DESTINATION: /concourse/main/paas-aiven-broker-git-keys
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))

  - name: generate-paas-billing-git-keys
    plan:
      - <<: *get-paas-cf
      - task: generate-git-keys
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/generate-git-keys.yml
        params:
          DESTINATION: /concourse/main/paas-billing-git-keys
          CREDHUB_CLIENT: credhub-admin
          CREDHUB_SECRET: ((bosh-credhub-admin))
          CREDHUB_CA_CERT: ((bosh-credhub-ca-cert))
          CREDHUB_SERVER: "https://((bosh_fqdn)):8844/api"
          DEPLOY_ENV: ((deploy_env))

  - name: bump-major-version
    plan:
      - put: release-version
        params: {bump: major}

  - name: bump-minor-version
    plan:
      - put: release-version
        params: {bump: minor}

  - name: bump-patch-version
    plan:
      - put: release-version
        params: {bump: patch}

  - name: show-release-version
    plan:
      - get: release-version

      - task: show-release-version
        tags: [colocated-with-web]
        config:
          platform: linux
          inputs:
            - name: release-version
          run:
            path: cat
            args:
            - release-version/number

  - name: continuous-smoke-tests
    serial_groups: [smoke-tests]
    build_logs_to_retain: 10000
    plan:
      - in_parallel:
        - get: smoke-tests-timer
          trigger: true
        - get: deployed-healthcheck
        - get: cf-smoke-tests-release
        - <<: *get-paas-cf
          passed: ['pipeline-lock']
        - get: cf-manifest
          passed: ['post-deploy']

      - try:
          task: ping-cronitor-smoke-test-start
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/cronitor-monitor-ping-action.yml
          params:
            CRONITOR_SMOKE_TEST_MONITOR_CODE: ((cronitor_smoke_test_monitor_code))
            CRONITOR_MONITOR_PING_ENDPOINT: "run"
            DEPLOY_ENV: ((deploy_env))
            CCI_BUILD_NUMBER: $BUILD_NAME
            CRONITOR_PING_MESSAGE: "Continuous+smoke+tests+job+has+started"

      - task: assert-should-run
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
              tag: 3.12
          inputs:
            - name: deployed-healthcheck
          params:
            PERSISTENT_ENVIRONMENT: ((persistent_environment))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
              if [ "$HEALTHCHECK_DEPLOYED" = "no" ] && [ "$PERSISTENT_ENVIRONMENT" != "true" ]; then
                echo "Healthcheck is not deployed and this is not a persistent environment"
                echo "Skipping smoke tests"
                exit 1
              fi
      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: cont-smoketest-user
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: smoke-tests-config
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: smoke_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))
            TEST_USER_PASSWORD: ((secrets_test_user_password))

        - task: smoke-tests-run
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/smoke-tests-run.yml
          params:
            AWS_DEFAULT_REGION: ((aws_region))
            DEPLOY_ENV: ((deploy_env))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            ALERT_EMAIL_ADDRESS: ((ALERT_EMAIL_ADDRESS))
            EMAIL_ON_SMOKE_TEST_FAILURE: ((ENABLE_ALERT_NOTIFICATIONS))

          ensure:
            task: upload-test-artifacts
            tags: [colocated-with-web]
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          in_parallel:
            - task: remove-temp-user
              tags: [colocated-with-web]
              file: paas-cf/concourse/tasks/delete_admin.yml
              timeout: 5m
              params:
                API_ENDPOINT: ((api_endpoint))
                CF_ADMIN: ((cf_admin))
                CF_PASS: ((cf_pass))
    
    on_success:
      try:
        task: ping-cronitor-continuous-smoke-tests-completed
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/cronitor-monitor-ping-action.yml
        params:
          CRONITOR_SMOKE_TEST_MONITOR_CODE: ((cronitor_smoke_test_monitor_code))
          CRONITOR_MONITOR_PING_ENDPOINT: "complete"
          DEPLOY_ENV: ((deploy_env))
          CCI_BUILD_NUMBER: $BUILD_NAME
          CRONITOR_PING_MESSAGE: "Continuous+smoke+tests+job+has+completed+successfully"
          
    on_failure:
      try:
        task: ping-cronitor-continuous-smoke-tests-failed
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/cronitor-monitor-ping-action.yml
        params:
          CRONITOR_SMOKE_TEST_MONITOR_CODE: ((cronitor_smoke_test_monitor_code))
          CRONITOR_MONITOR_PING_ENDPOINT: "fail"
          DEPLOY_ENV: ((deploy_env))
          CCI_BUILD_NUMBER: $BUILD_NAME
          CRONITOR_PING_MESSAGE: "Continuous+smoke+tests+job+has+failed"

    on_abort:
      try:
        task: ping-cronitor-continuous-smoke-tests-aborted
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/cronitor-monitor-ping-action.yml
        params:
          CRONITOR_SMOKE_TEST_MONITOR_CODE: ((cronitor_smoke_test_monitor_code))
          CRONITOR_MONITOR_PING_ENDPOINT: "fail"
          DEPLOY_ENV: ((deploy_env))
          CCI_BUILD_NUMBER: $BUILD_NAME
          CRONITOR_PING_MESSAGE: "Continuous+smoke+tests+job+was+aborted"

    on_error:
      try:
        task: ping-cronitor-continuous-smoke-tests-errored
        tags: [colocated-with-web]
        file: paas-cf/concourse/tasks/cronitor-monitor-ping-action.yml
        params:
          CRONITOR_SMOKE_TEST_MONITOR_CODE: ((cronitor_smoke_test_monitor_code))
          CRONITOR_MONITOR_PING_ENDPOINT: "fail"
          DEPLOY_ENV: ((deploy_env))
          CCI_BUILD_NUMBER: $BUILD_NAME
          CRONITOR_PING_MESSAGE: "Continuous+smoke+tests+job+finished+with+errors"

  - name: continuous-billing-smoke-tests
    serial_groups: [smoke-tests]
    build_logs_to_retain: 10000
    plan:
      - in_parallel:
        - get: billing-smoke-tests-timer
          trigger: true
        - get: paas-billing
          passed: ['deploy-paas-billing']
        - <<: *get-paas-cf
          passed: ['pipeline-lock']
        - get: cf-manifest
          passed: ['post-deploy']

      - do:
        - task: create-temp-user
          tags: [colocated-with-web]
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: cont-billing-smoketest-user
            UAA_ADMIN_CLIENT_PASS: ((uaa_admin_client_secret))

        - task: run-billing-smoke-tests
          tags: [colocated-with-web]
          config:
            platform: linux
            image_resource: *cf-acceptance-tests-image-resource
            params:
              AWS_REGION: ((aws_region))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              DEPLOY_ENV: ((deploy_env))
            inputs:
              - name: paas-cf
              - name: paas-billing
                path: src/github.com/alphagov/paas-billing
              - name: admin-creds
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  cf api "https://api.${SYSTEM_DNS_ZONE_NAME}"
                  cf auth  "$(cat admin-creds/username)" "$(cat admin-creds/password)"

                  cf target -o admin -s billing

                  export GOPATH="${PWD}"
                  export BILLING_API_URL="https://billing.${SYSTEM_DNS_ZONE_NAME}"
                  cd src/github.com/alphagov/paas-billing
                  make acceptance

        ensure:
          in_parallel:
            - task: remove-temp-user
              tags: [colocated-with-web]
              file: paas-cf/concourse/tasks/delete_admin.yml
              timeout: 5m
              params:
                API_ENDPOINT: ((api_endpoint))
                CF_ADMIN: ((cf_admin))
                CF_PASS: ((cf_pass))

  - name: check-certificates
    build_logs_to_retain: 50
    plan:
      - in_parallel:
        - get: check-certificates-timer
          trigger: true
        - <<: *get-paas-cf

      - task: check-certificates
        tags: [colocated-with-web]
        config: *check-certificates-config

      - task: check-certificate-hierarchy
        tags: [colocated-with-web]
        config: *check-certificate-hierarchy-config

  - name: cleanup-deleted-cf-users
    serial: true
    plan:
      - in_parallel:
        - <<: *get-paas-cf

      - task: cleanup-deleted-cf-users
        tags: [colocated-with-web]
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: paas-cf
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            API_ENDPOINT: ((api_endpoint))
            CF_ADMIN: ((cf_admin))
            CF_PASS: ((cf_pass))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cf api "${API_ENDPOINT}"
              cf auth "${CF_USER}" "${CF_PASS}"

              ./paas-cf/scripts/cleanup-deleted-cf-users.sh --delete

  - name: healthcheck-check-state
    serial: true
    plan:
      - get: deployed-healthcheck

      - task: show-state
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          inputs:
            - name: deployed-healthcheck
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                echo 'healthcheck is currently set to'
                cat deployed-healthcheck/healthcheck-deployed

  - name: healthcheck-disable
    serial: true
    plan:
      - task: set-state
        config:
          platform: linux
          image_resource: *cf-cli-image-resource
          outputs:
            - name: deployed-healthcheck
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                echo 'setting healthcheck to no'
                echo "no" > deployed-healthcheck/healthcheck-deployed

      - put: deployed-healthcheck
        params:
          file: deployed-healthcheck/healthcheck-deployed
