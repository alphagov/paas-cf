---
groups:
  - name: all
    jobs:
      - pipeline-lock
      - pre-deploy
      - generate-secrets
      - app-availability-tests
      - api-availability-tests
      - cf-terraform
      - generate-cf-config
      - cf-deploy
      - post-deploy
      - smoke-tests
      - acceptance-tests
      - custom-acceptance-tests
      - bosh-tests
      - performance-tests
      - tag-release
      - pipeline-unlock
  - name: cloudfoundry
    jobs:
      - pre-deploy
      - generate-secrets
      - app-availability-tests
      - api-availability-tests
      - cf-terraform
      - generate-cf-config
      - cf-deploy
      - post-deploy
      - smoke-tests
      - acceptance-tests
      - custom-acceptance-tests
      - bosh-tests
      - performance-tests
      - tag-release
      - pipeline-unlock
  - name: operator
    jobs:
      - generate-git-keys
      - show-release-version
      - bump-minor-version
      - bump-major-version
      - bump-patch-version
      - pipeline-check-lock
      - pipeline-release-lock
  - name: tests
    jobs:
      - app-availability-tests
      - api-availability-tests
      - smoke-tests
      - acceptance-tests
      - custom-acceptance-tests
      - bosh-tests
      - performance-tests
  - name: health
    jobs:
      - continuous-smoke-tests
      - check-var-store-certs
  - name: credentials
    jobs:
      - rotate-cloudfoundry-credentials
      - clear-cloudfoundry-credentials
      - expire-aws-keys
      - rotate-cf-certs-cas
      - rotate-cf-certs-leafs
      - delete-old-cf-certs
resource_types:
- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource
    tag: fda60bf4c5f85e96c16f704e128e5ead9e84d30d

- name: semver-iam
  type: docker-image
  source:
    repository: governmentpaas/semver-resource
    tag: ecbdd201e122b44de99a40ac9f24407c1a43b9a2

resources:
  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: ((pipeline_trigger_file))

  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: ((branch_name))
      tag_filter: ((paas_cf_tag_filter))
      commit_verification_key_ids: ((gpg_ids))

  - name: graphite-nozzle
    type: git
    source:
      uri: https://github.com/alphagov/paas-graphite-nozzle
      branch: gds_master

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: vpc.tfstate

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: concourse.tfstate
      region_name: ((aws_region))

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh.tfstate

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-secrets.yml

  - name: bosh-CA-crt
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-CA.crt

  - name: ipsec-CA
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: ipsec-CA.tar.gz
      initial_version: "-"
      # This is an empty tar.gz file base64 encoded
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: id_rsa
      region_name: ((aws_region))
      initial_version: "-"

  - name: ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: id_rsa.pub
      region_name: ((aws_region))
      initial_version: "-"

  - name: git-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa
      region_name: ((aws_region))

  - name: cf-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: cf.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 3,
            "terraform_version": "0.11.1",
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {},
                    "depends_on": []
                }
            ]
        }

  - name: datadog-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: datadog.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 3,
            "terraform_version": "0.11.1",
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {},
                    "depends_on": []
                }
            ]
        }

  - name: cf-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-secrets.yml
      initial_version: "-"

  - name: cf-vars-store
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-vars-store.yml
      initial_version: "-"

  - name: cf-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-manifest.yml

  - name: cf-manifest-pre-vars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-manifest-pre-vars.yml

  - name: cloud-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cloud-config.yml

  - name: deployed-healthcheck
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: healthcheck-deployed
      initial_version: "-"
      initial_content_text: "no"

  - name: cf-acceptance-tests
    type: git
    source:
      #FIXME: We have forked the acceptance tests due to:
      # https://github.com/cloudfoundry/cf-acceptance-tests/pull/290
      # Remove this once we are using a version of the acceptance
      # tests that include the above fix.
      uri: https://github.com/alphagov/paas-cf-acceptance-tests/
      branch: cf1.28-allow-http-redirect

  - name: cf-smoke-tests
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf-smoke-tests
      branch: gds-cf-deployment-v1.28.0

  - name: git-keys
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: git-keys.tar.gz
      initial_version: "-"
      # This is an empty tar.gz file base64 encoded
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: release-version
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: release-version
      initial_version: 0.0.0

  - name: pipeline-pool
    type: pool
    source:
      uri: ((git_concourse_pool_clone_full_url_ssh))
      branch: master
      pool: ((pipeline_name))
      private_key: ((pipeline_lock_git_private_key))

  - name: smoke-tests-timer
    type: time
    source:
      interval: 5m

  - name: check-var-store-certs-timer
    type: time
    source:
      interval: 720h

  - name: expire-aws-keys-timer
    type: time
    source:
      interval: 720h

  - name: paas-compose-broker
    type: git
    source:
      uri: https://github.com/alphagov/paas-compose-broker
      tag_filter: v0.15.0

  - name: paas-compose-scraper
    type: git
    source:
      uri: https://github.com/alphagov/paas-compose-scraper
      tag_filter: v0.1.2

  - name: paas-billing
    type: git
    source:
      uri: https://github.com/alphagov/paas-billing
      tag_filter: v0.20.0

  - name: paas-admin
    type: git
    source:
      uri: https://github.com/alphagov/paas-admin
      # FIXME: Use tags once paas-admin has a automated pipeline to
      # test, release and tag the project.
      branch: master

jobs:
  - name: pipeline-lock
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          trigger: ((auto_deploy))
        - get: git-ssh-private-key
      - task: init-pipeline-pool
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/git-ssh
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
            - name: git-ssh-private-key
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                 echo "Pipeline locking is disabled, skipping..."
                 exit 0
              fi
              chmod 600 git-ssh-private-key/git_id_rsa
              git config --global push.default simple
              git config --global user.email "concourse@${DEPLOY_ENV}.${AWS_ACCOUNT}"
              git config --global user.name "Concourse server ${DEPLOY_ENV} in ${AWS_ACCOUNT}"

              ./paas-cf/concourse/scripts/create_pool_lock.sh \
                "((git_concourse_pool_clone_full_url_ssh))" \
                "$(pwd)/git-ssh-private-key/git_id_rsa" \
                "((pipeline_name))" lock

      - try:
          task: lock-the-pipeline
          config:
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: latest
            platform: linux
            params:
              DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                   echo "Pipeline locking is disabled, skipping..."
                   exit 0
                fi
                echo "About to lock. This job will fail and this is OK."
                exit 1
          on_failure:
            put: pipeline-pool
            params:
              claim: lock

      - task: self-update-pipeline
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            AWS_ACCOUNT: ((aws_account))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            PIPELINES_TO_UPDATE: ((pipeline_name))
            BOSH_AZ: ((bosh_az))
            SKIP_AWS_CREDENTIAL_VALIDATION: true
          run:
            path: ./paas-cf/concourse/scripts/self-update-pipeline.sh
      - put: pipeline-trigger
        params: {bump: patch}

  - name: generate-secrets
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: paas-cf
            passed: ['pipeline-lock']
          - get: pipeline-trigger
            passed: ['pipeline-lock']
            trigger: true
          - get: ipsec-CA
          - get: cf-secrets
          - get: ssh-private-key
          - get: ssh-public-key
      - aggregate:
        - task: generate-ipsec-CA
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/certstrap
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: paas-cf
              - name: ipsec-CA
                path: existing-ipsec-CA
            outputs:
              - name: generated-ipsec-CA
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if  [ -z "$(tar -tvzf existing-ipsec-CA/ipsec-CA.tar.gz)" ] ; then
                    certstrap init --years "10" --passphrase "" --common-name ipsec-CA
                    (cd out && tar -cvzf ../generated-ipsec-CA/ipsec-CA.tar.gz ipsec-CA.*)
                  else
                    echo "The CA cert already exists, skipping generation..."
                    cp existing-ipsec-CA/ipsec-CA.tar.gz generated-ipsec-CA/ipsec-CA.tar.gz
                    mkdir out
                    tar -xvzf generated-ipsec-CA/ipsec-CA.tar.gz -C out
                  fi
          on_success:
            put: ipsec-CA
            params:
              file: generated-ipsec-CA/ipsec-CA.tar.gz

        - task: generate-deployments-ssh-keypair
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/git-ssh
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: paas-cf
              - name: ssh-private-key
              - name: ssh-public-key
            outputs:
              - name: generated-ssh-private-key
              - name: generated-ssh-public-key
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if [ -s ssh-private-key/id_rsa ] ; then
                    echo "Deployments private key non-zero size, skipping generation..."
                    echo "Key uploads will fail and this is OK as no new keys have been generated."
                    exit 0
                  fi

                  echo "Generating new ssh key pair for deployments..."
                  ssh-keygen -t rsa -b 4096 -f id_rsa -N ''
                  cp id_rsa generated-ssh-private-key
                  cp id_rsa.pub generated-ssh-public-key
          on_success:
            try:
              aggregate:
                - put: ssh-private-key
                  params:
                    file: generated-ssh-private-key/id_rsa
                - put: ssh-public-key
                  params:
                    file: generated-ssh-public-key/id_rsa.pub

        - task: generate-cf-secrets
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: ruby
                tag: 2.2-slim
            inputs:
              - name: paas-cf
              - name: cf-secrets
                path: existing-cf-secrets
            outputs:
              - name: generated-cf-secrets
            run:
              path: sh
              args:
                - -c
                - -e
                - |
                  ./paas-cf/manifests/cf-manifest/scripts/generate-cf-secrets.rb \
                    --existing-secrets existing-cf-secrets/cf-secrets.yml \
                    > generated-cf-secrets/cf-secrets.yml
                  ls -l generated-cf-secrets
          on_success:
            put: cf-secrets
            params:
              file: generated-cf-secrets/cf-secrets.yml

  - name: pre-deploy
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - get: paas-cf
            passed: ['generate-secrets']
          - get: cf-secrets
            passed: ['generate-secrets']
      - task: wait-for-app-availability-tests
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: cf-secrets
            - name: deployed-healthcheck
            - name: pipeline-trigger
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CF_ADMIN: admin
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping wait-for-app-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                CF_PASS=$(awk '/uaa_admin_password/ {print $2}' cf-secrets/cf-secrets.yml | tr -d '"')
                API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"
                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)

                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" > /dev/null
                cf target -o admin -s healthchecks > /dev/null

                echo "Waiting for ~2mins for app-availability-tests job to start:"
                for _ in $(seq 24); do
                  if cf logs healthcheck --recent | grep -q "availability-test=${PIPELINE_TRIGGER_VERSION}"; then
                    echo "Request detected"
                    exit 0
                  fi
                  printf "."
                  sleep 5
                done

                echo "timeout waiting for app-availability-tests job to start"
                exit 1
      - task: wait-for-api-availability-tests
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: cf-secrets
            - name: deployed-healthcheck
            - name: pipeline-trigger
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping wait-for-api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"
                bucket=((state_bucket))

                echo "Waiting for ~2mins for api-availability-tests job to start by polling for ${bucket}/${JOB_FILE}"
                for _ in $(seq 24); do
                  if aws s3 ls "s3://${bucket}/${JOB_FILE}" ; then
                    echo "$JOB_FILE detected"
                    exit 0
                  fi
                  printf "."
                  sleep 5
                done

                echo "timeout waiting for api-availability-tests job to start"
                exit 1

  - name: app-availability-tests
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - get: paas-cf
            passed: ['generate-secrets']
      - task: run-tests
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-acceptance-tests
              tag: c599048c56cc1508314315552bd11f413fab1c78
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
          params:
            SKIP_SSL_VALIDATION: true
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_ATC_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_ATC_PASSWORD: ((concourse_atc_password))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping app-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                export CONCOURSE_ATC_URL
                CONCOURSE_ATC_URL=https://deployer.${SYSTEM_DNS_ZONE_NAME}
                export PIPELINE_TRIGGER_VERSION
                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)

                echo "Running app-availability-tests"
                ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/availability/app

  - name: api-availability-tests
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - get: cf-secrets
            passed: ['generate-secrets']
          - get: paas-cf
            passed: ['generate-secrets']
      - task: run-tests
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-acceptance-tests
              tag: c599048c56cc1508314315552bd11f413fab1c78
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
            - name: cf-secrets
          params:
            SKIP_SSL_VALIDATION: true
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_ATC_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_ATC_PASSWORD: ((concourse_atc_password))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi
                export CONCOURSE_ATC_URL="https://deployer.${SYSTEM_DNS_ZONE_NAME}"
                export CF_USER="admin"
                export CF_PASS
                CF_PASS=$(awk '/uaa_admin_password/ {print $2}' cf-secrets/cf-secrets.yml | tr -d '"')
                export PIPELINE_TRIGGER_VERSION
                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                export API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"

                cf login -a "${API_ENDPOINT}" -u "${CF_USER}" -p "${CF_PASS}" -o admin -s healthchecks

                JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"

                echo "Writing $JOB_FILE to S3 to signal job start"
                export DEBIAN_FRONTEND=noninteractive
                apt-get -qq update && apt-get install -y awscli > /dev/null
                bucket=((state_bucket))
                echo 'started' > ./jobstate
                aws s3 cp ./jobstate "s3://${bucket}/$JOB_FILE"
                trap 'aws s3 rm "s3://${bucket}/${JOB_FILE}"' EXIT

                echo "Running api-availability-tests"
                ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/availability/api

  - name: cf-terraform
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: paas-cf
            passed: ['pre-deploy']
          - get: pipeline-trigger
            passed: ['pre-deploy']
            trigger: true
          - get: vpc-tfstate
          - get: concourse-tfstate
          - get: cf-tfstate
          - get: cf-secrets
            passed: ['pre-deploy']

      - task: extract-terraform-variables
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: concourse-tfstate
            - name: cf-secrets
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < concourse-tfstate/concourse.tfstate > terraform-variables/concourse.tfvars.sh
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_yaml.rb \
                < cf-secrets/cf-secrets.yml > terraform-variables/cf-secrets.tfvars.sh

      - task: generate-peer-tfvars
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
            - name: paas-cf
          outputs:
            - name: vpc-peering-tfvars
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-cf/terraform/scripts/generate_vpc_peering_tfvars.rb "paas-cf/terraform/((aws_account)).vpc_peering.json" \
                > vpc-peering-tfvars/vpc-peers.tfvars

                cat vpc-peering-tfvars/vpc-peers.tfvars

      - task: terraform-apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: f810666094e6c65eeb183f9833b231aa24df6811
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-tfstate
            - name: vpc-peering-tfvars
          outputs:
            - name: updated-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_apps_dns_zone_name: ((apps_dns_zone_name))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/concourse.tfvars.sh
                . terraform-variables/cf-secrets.tfvars.sh

                cp cf-tfstate/cf.tfstate updated-tfstate/cf.tfstate
                terraform init paas-cf/terraform/cloudfoundry
                terraform apply \
                  -auto-approve=true \
                  -var-file="paas-cf/terraform/((aws_account)).tfvars" \
                  -var-file=vpc-peering-tfvars/vpc-peers.tfvars \
                  -state=updated-tfstate/cf.tfstate \
                  paas-cf/terraform/cloudfoundry
        ensure:
          put: cf-tfstate
          params:
            file: updated-tfstate/cf.tfstate

      # FIXME: Move this operation to Terraform when this feature is added:
      # https://github.com/terraform-providers/terraform-provider-aws/issues/113
      - task: add-aws-users-to-groups
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          params:
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              aws iam add-user-to-group --user-name "ses-smtp-${DEPLOY_ENV}" --group-name email-senders
              aws iam add-user-to-group --user-name "metrics-exporter-${DEPLOY_ENV}" --group-name metrics-exporters

      - task: extract-cf-terraform-outputs
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          outputs:
            - name: cf-terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                SCPATH="./paas-cf/concourse/scripts"
                SCFILE="extract_tf_vars_from_terraform_state.rb"
                $SCPATH/$SCFILE < cf-tfstate/cf.tfstate > cf-terraform-outputs/cf.tfstate.sh
                ls -l cf-terraform-outputs/cf.tfstate.sh

      - task: init-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/psql
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/cf-secrets.tfvars.sh
                . cf-terraform-outputs/cf.tfstate.sh

                paas-cf/manifests/cf-manifest/scripts/create-cf-dbs.sh

  - name: generate-cf-config
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['cf-terraform']
            trigger: true
          - get: paas-cf
            passed: ['cf-terraform']
          - get: ipsec-CA
          - get: cf-secrets
            passed: ['cf-terraform']
          - get: cf-vars-store
          - get: vpc-tfstate
          - get: concourse-tfstate
          - get: bosh-tfstate
          - get: cf-tfstate
            passed: ['cf-terraform']

      - aggregate:
        - task: extract-terraform-outputs
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: ruby
                tag: 2.2-slim
            inputs:
              - name: paas-cf
              - name: vpc-tfstate
              - name: bosh-tfstate
              - name: concourse-tfstate
              - name: cf-tfstate
            outputs:
              - name: terraform-outputs
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  for state in vpc bosh concourse cf; do
                    ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                      < ${state}-tfstate/${state}.tfstate \
                      > terraform-outputs/${state}.yml
                    ./paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                      < ${state}-tfstate/${state}.tfstate \
                      > terraform-outputs/${state}.tfvars.sh
                  done

        - task: generate-grafana-dashboards-opsfile
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/json-minify
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: paas-cf
            outputs:
              - name: grafana-dashboards-opsfile
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  CF_MANIFEST_DIR=./paas-cf/manifests/cf-manifest
                  ${CF_MANIFEST_DIR}/scripts/grafana-dashboards-opsfile.rb ${CF_MANIFEST_DIR}/grafana \
                    > grafana-dashboards-opsfile/grafana-dashboards-opsfile.yml

        - task: generate-peer-opsfile
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: ruby
                tag: 2.2-slim
            inputs:
              - name: paas-cf
            outputs:
              - name: vpc-peering-opsfile
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  ruby paas-cf/terraform/scripts/generate_vpc_peering_opsfile.rb "paas-cf/terraform/((aws_account)).vpc_peering.json" \
                  > vpc-peering-opsfile/vpc-peers.yml

                  cat vpc-peering-opsfile/vpc-peers.yml

        - task: generate-environment-variables
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: latest
            inputs:
              - name: paas-cf
            outputs:
              - name: environment-variables
            params:
              APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              DEPLOY_ENV: ((deploy_env))
              DATADOG_API_KEY: ((datadog_api_key))
              OAUTH_CLIENT_ID: ((oauth_client_id))
              OAUTH_CLIENT_SECRET: ((oauth_client_secret))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  cat <<EOF > environment-variables/environment-variables.yml
                  ---
                  system_domain: ${SYSTEM_DNS_ZONE_NAME}
                  app_domain: ${APPS_DNS_ZONE_NAME}
                  environment: ${DEPLOY_ENV}
                  datadog_api_key: ${DATADOG_API_KEY}
                  oauth_client_id: ${OAUTH_CLIENT_ID}
                  oauth_client_secret: ${OAUTH_CLIENT_SECRET}
                  EOF

      - do:
        - task: generate-cloud-config
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/bosh-cli-v2
                tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
            inputs:
              - name: paas-cf
              - name: terraform-outputs
              - name: cf-secrets
              - name: environment-variables
            outputs:
              - name: cloud-config
            params:
              CF_ENV_SPECIFIC_MANIFEST: paas-cf/manifests/cf-manifest/env-specific/((cf_env_specific_manifest))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  paas-cf/manifests/cf-manifest/scripts/generate-cloud-config.sh > cloud-config/cloud-config.yml

          on_success:
            put: cloud-config
            params:
              file: cloud-config/cloud-config.yml

        - task: generate-cf-manifest
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/bosh-cli-v2
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: cf-vars-store
              - name: paas-cf
              - name: ipsec-CA
              - name: terraform-outputs
              - name: cf-secrets
              - name: environment-variables
              - name: grafana-dashboards-opsfile
              - name: vpc-peering-opsfile
            outputs:
              - name: cf-manifest
              - name: cf-manifest-pre-vars
              - name: cf-vars-store-updated
            params:
              CF_ENV_SPECIFIC_MANIFEST: paas-cf/manifests/cf-manifest/env-specific/((cf_env_specific_manifest))
              ENABLE_DATADOG: ((enable_datadog))
              DISABLE_USER_CREATION: ((disable_user_creation))
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  tar -xzf ./ipsec-CA/ipsec-CA.tar.gz -C ./ipsec-CA
                  cp cf-vars-store/cf-vars-store.yml cf-vars-store-updated/
                  ./paas-cf/manifests/cf-manifest/scripts/generate-manifest.sh \
                    --var-errs \
                    --vars-store cf-vars-store-updated/cf-vars-store.yml \
                    > cf-manifest/cf-manifest.yml
                  ./paas-cf/manifests/cf-manifest/scripts/generate-manifest.sh \
                    > cf-manifest-pre-vars/cf-manifest-pre-vars.yml

          on_success:
            aggregate:
            - put: cf-manifest
              params:
                file: cf-manifest/cf-manifest.yml
            - put: cf-manifest-pre-vars
              params:
                file: cf-manifest-pre-vars/cf-manifest-pre-vars.yml
            - put: cf-vars-store
              params:
                file: cf-vars-store-updated/cf-vars-store.yml

  - name: cf-deploy
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-cf-config']
            trigger: true
          - get: paas-cf
            passed: ['generate-cf-config']
          - get: cloud-config
            passed: ['generate-cf-config']
          - get: cf-manifest
            passed: ['generate-cf-config']
          - get: cf-tfstate
            passed: ['generate-cf-config']
          - get: bosh-secrets
          - get: bosh-CA-crt

      - aggregate:
        - task: get-and-upload-stemcell
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/bosh-cli-v2
                tag: upgrade_bosh_cli_v2
            inputs:
              - name: bosh-secrets
              - name: paas-cf
              - name: cf-manifest
              - name: bosh-CA-crt
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
              BOSH_DEPLOYMENT: ((deploy_env))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

                  stemcell_index=0
                  while true; do
                    if ! $VAL_FROM_YAML "stemcells.${stemcell_index}" cf-manifest/cf-manifest.yml > /dev/null 2>&1; then
                      break
                    fi

                    STEMCELL_VERSION=$($VAL_FROM_YAML "stemcells.${stemcell_index}.version" cf-manifest/cf-manifest.yml)
                    STEMCELL_NAME=$($VAL_FROM_YAML "stemcells.${stemcell_index}.name" cf-manifest/cf-manifest.yml)

                    wget "https://bosh.io/d/stemcells/${STEMCELL_NAME}?v=${STEMCELL_VERSION}" -O stemcell.tgz
                    ./paas-cf/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                    bosh -n upload-stemcell stemcell.tgz

                    stemcell_index=$((stemcell_index + 1))
                  done

        - task: update-cloud-config
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/bosh-cli-v2
                tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
            inputs:
              - name: cloud-config
              - name: bosh-secrets
              - name: paas-cf
              - name: bosh-CA-crt
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
              BOSH_DEPLOYMENT: ((deploy_env))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  ./paas-cf/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                  bosh -n update-cloud-config cloud-config/cloud-config.yml

        - do:
          - task: extract-cf-terraform-outputs
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: ruby
                  tag: 2.2-slim
              inputs:
                - name: paas-cf
                - name: cf-tfstate
              outputs:
                - name: cf-terraform-outputs
              run:
                path: sh
                args:
                  - -e
                  - -c
                  - |
                    SCPATH="./paas-cf/concourse/scripts"
                    SCFILE="extract_tf_vars_from_terraform_state.rb"
                    $SCPATH/$SCFILE < cf-tfstate/cf.tfstate > cf-terraform-outputs/cf.tfstate.sh
                    ls -l cf-terraform-outputs/cf.tfstate.sh

          - try:
              task: disable-elasticsearch-shard-reallocation
              config:
                platform: linux
                image_resource:
                  type: docker-image
                  source:
                    repository: governmentpaas/curl-ssl
                    tag: 465642da06051a55630d39c899697b678f66a7f7
                inputs:
                - name: paas-cf
                - name: cf-terraform-outputs
                run:
                  path: sh
                  args:
                  - -e
                  - -c
                  - |
                    echo "This task will fail if you have no Elasticserch master and that is OK."
                    . cf-terraform-outputs/cf.tfstate.sh
                    export TF_VAR_logsearch_elastic_master_elb_dns_name
                    curl -s \
                      -X PUT \
                      -d '{"transient":{"cluster.routing.allocation.enable":"none"}}' \
                      "${TF_VAR_logsearch_elastic_master_elb_dns_name}:9200/_cluster/settings"

      - task: cf-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
            - name: paas-cf
            - name: cf-manifest
            - name: bosh-secrets
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                bosh -n deploy cf-manifest/cf-manifest.yml

      - task: enable-elasticsearch-shard-reallocation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/curl-ssl
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
          - name: paas-cf
          - name: cf-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . cf-terraform-outputs/cf.tfstate.sh
              export TF_VAR_logsearch_elastic_master_elb_dns_name

              curl -s \
                -X PUT \
                -d '{"transient":{"cluster.routing.allocation.enable":"all"}}' \
                "${TF_VAR_logsearch_elastic_master_elb_dns_name}:9200/_cluster/settings"

  - name: post-deploy
    serial: true
    plan:
    - aggregate:
      - get: pipeline-trigger
        passed: ['cf-deploy']
        trigger: true
      - get: paas-cf
        passed: ['cf-deploy']
      - get: cf-manifest
        passed: ['generate-cf-config']
      - get: cf-tfstate
        passed: ['generate-cf-config']
      - get: bosh-secrets
        passed: ['cf-deploy']
      - get: cf-secrets
        passed: ['generate-cf-config']
      - get: cf-vars-store
        passed: ['generate-cf-config']
      - get: bosh-CA-crt
      - get: graphite-nozzle
      - get: datadog-tfstate
      - get: paas-compose-broker
      - get: paas-compose-scraper
      - get: paas-billing
      - get: paas-admin

    - task: retrieve-config
      config:
        platform: linux
        inputs:
          - name: paas-cf
          - name: cf-secrets
          - name: cf-manifest
          - name: cf-tfstate
        outputs:
          - name: config
        params:
          SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: 2.2-slim
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

              ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                < cf-tfstate/cf.tfstate \
                > cf-terraform-outputs.yml

              cat << EOT > config/config.sh
              export CF_ADMIN=admin
              export CF_PASS=$($VAL_FROM_YAML secrets_uaa_admin_password cf-secrets/cf-secrets.yml)
              export FIREHOSE_USER=graphite-nozzle
              export FIREHOSE_PASS=$($VAL_FROM_YAML secrets_uaa_clients_firehose_password cf-secrets/cf-secrets.yml)
              export API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"
              export UAA_ENDPOINT=$($VAL_FROM_YAML instance_groups.api.jobs.cloud_controller_ng.properties.uaa.url cf-manifest/cf-manifest.yml)
              export DOPPLER_ENDPOINT=$($VAL_FROM_YAML instance_groups.scheduler.jobs.tps.properties.capi.tps.traffic_controller_url cf-manifest/cf-manifest.yml)
              export GRAPHITE_SERVER=$($VAL_FROM_YAML instance_groups.graphite.networks.cf.static_ips.0 cf-manifest/cf-manifest.yml)
              export RDS_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_rds_broker_elb_dns_name cf-terraform-outputs.yml)
              export RDS_BROKER_PASS=$($VAL_FROM_YAML secrets_rds_broker_admin_password cf-secrets/cf-secrets.yml)
              export CDN_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_cdn_broker_elb_dns_name cf-terraform-outputs.yml)
              export CDN_BROKER_PASS=$($VAL_FROM_YAML secrets_cdn_broker_admin_password cf-secrets/cf-secrets.yml)
              export COMPOSE_BROKER_PASS=$($VAL_FROM_YAML secrets_compose_broker_admin_password cf-secrets/cf-secrets.yml)
              export COMPOSE_BROKER_IP_WHITELIST=$($VAL_FROM_YAML terraform_outputs_nat_public_ips_csv cf-terraform-outputs.yml)
              export ELASTICACHE_BROKER_PASS=$($VAL_FROM_YAML secrets_elasticache_broker_admin_password cf-secrets/cf-secrets.yml)
              export ELASTICACHE_BROKER_SERVER=$($VAL_FROM_YAML terraform_outputs_elasticache_broker_elb_dns_name cf-terraform-outputs.yml)
              export METRICS_AWS_ACCESS_KEY_ID=$($VAL_FROM_YAML terraform_outputs_metrics_exporter_aws_access_key_id cf-terraform-outputs.yml)
              export METRICS_AWS_SECRET_ACCESS_KEY=$($VAL_FROM_YAML terraform_outputs_metrics_exporter_aws_secret_access_key cf-terraform-outputs.yml)
              EOT

              paas-cf/scripts/job_instances.rb cf-manifest/cf-manifest.yml \
                > config/job_instances.tfvars

              ls -l config/*

    - aggregate:
      - task: create-orgs
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
            - name: config
          params:
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"
                cf create-org admin
                cf set-quota admin medium

                cf create-space monitoring -o admin
                cf create-space service-brokers -o admin
                cf create-space healthchecks -o admin
                cf create-space billing -o admin
                cf create-space public -o admin
                cf create-space assets -o admin

                cf create-org govuk-paas
                cf create-space docs -o govuk-paas
                cf create-space tools -o govuk-paas
                cf target -o admin
                cf share-private-domain govuk-paas "((system_dns_zone_name))"

                # Reserve some domains so that tenants cannot create them to
                # mislead others
                cf target -o govuk-paas
                cf create-route docs "${APPS_DNS_ZONE_NAME}" --hostname www
                cf create-route docs "${APPS_DNS_ZONE_NAME}" --hostname api
                cf create-route docs "${APPS_DNS_ZONE_NAME}" --hostname status

      - task: register-rds-broker
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
            - name: config
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                if cf service-brokers | grep "rds-broker\s"; then
                  cf update-service-broker rds-broker rds-broker "${RDS_BROKER_PASS}" "https://${RDS_BROKER_SERVER}"
                else
                  cf create-service-broker rds-broker rds-broker "${RDS_BROKER_PASS}" "https://${RDS_BROKER_SERVER}"
                fi
                cf enable-service-access postgres
                cf enable-service-access mysql

      - task: register-cdn-broker
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
          inputs:
            - name: paas-cf
            - name: config
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf api "${API_ENDPOINT}"
                cf auth "${CF_ADMIN}" "${CF_PASS}"

                if cf service-brokers | grep "cdn-broker\s"; then
                  cf update-service-broker cdn-broker cdn-broker "${CDN_BROKER_PASS}" "https://${CDN_BROKER_SERVER}"
                else
                  cf create-service-broker cdn-broker cdn-broker "${CDN_BROKER_PASS}" "https://${CDN_BROKER_SERVER}"
                fi
                cf enable-service-access cdn-route

      - task: set-security-groups-from-manifest
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: config
            - name: cf-manifest
          params:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                ./paas-cf/concourse/scripts/set_security_groups_from_manifest.rb cf-manifest/cf-manifest.yml

      - task: set-quotas-from-manifest
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: config
            - name: cf-manifest
          params:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh

                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                ./paas-cf/concourse/scripts/set_quotas_from_manifest.rb cf-manifest/cf-manifest.yml

      - task: enable-diego_docker-feature-flag
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: config
          params:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh

                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                cf enable-feature-flag diego_docker

    - aggregate:
      - task: block-create-account-endpoints
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
            - name: config
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" \
                  -o admin -s assets

                cd paas-cf/platform-tests/example-apps/create-account-holding-page/
                cf push

                if ! cf domains | grep -q "login.((system_dns_zone_name))"; then
                  cf create-domain admin "login.((system_dns_zone_name))"
                fi
                if ! cf domains | grep -q "uaa.((system_dns_zone_name))"; then
                  cf create-domain admin "uaa.((system_dns_zone_name))"
                fi

                cf create-route assets "login.((system_dns_zone_name))" --path create_account
                cf create-route assets "login.((system_dns_zone_name))" --path create_account.do
                cf create-route assets "uaa.((system_dns_zone_name))" --path create_account
                cf create-route assets "uaa.((system_dns_zone_name))" --path create_account.do

                cf map-route create-account-holding-page "login.((system_dns_zone_name))" --path create_account
                cf map-route create-account-holding-page "login.((system_dns_zone_name))" --path create_account.do
                cf map-route create-account-holding-page "uaa.((system_dns_zone_name))" --path create_account
                cf map-route create-account-holding-page "uaa.((system_dns_zone_name))" --path create_account.do

      - task: deploy-compose-service-broker
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
            - name: paas-compose-broker
            - name: config
          params:
            COMPOSE_API_KEY: ((compose_api_key))
            DB_PREFIX: ((deploy_env))
            CLUSTER_NAME: "gds-eu-west1-c00"
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" \
                  -o admin -s service-brokers

                cp ./paas-cf/config/service-brokers/compose/catalog.json ./paas-compose-broker/
                cd paas-compose-broker/

                ruby -ryaml -e "
                  env = {
                    'LOG_LEVEL' => 'DEBUG',
                    'USERNAME' => 'compose-broker',
                    'PASSWORD' => '${COMPOSE_BROKER_PASS}',
                    'COMPOSE_API_KEY' => '${COMPOSE_API_KEY}',
                    'DB_PREFIX' => '${DB_PREFIX}',
                    'CLUSTER_NAME' => '${CLUSTER_NAME}',
                    'IP_WHITELIST' => '${COMPOSE_BROKER_IP_WHITELIST}',
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] ||= {}
                    app['env'].merge!(env)
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "
                cf blue-green-deploy compose-broker
                cf delete -f compose-broker-old

      - task: deploy-simulated-load-application
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          params:
            TEST_HEAVY_LOAD: ((test_heavy_load))
          inputs:
            - name: paas-cf
            - name: config
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                if [ "${TEST_HEAVY_LOAD:-}" != "true" ] ; then
                  echo Heavy load test has been disabled. Skipping...
                  exit 0
                fi

                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                cf target -o admin -s healthchecks

                cd paas-cf/platform-tests/example-apps/healthcheck
                cf push simulated-load -i 180

                timeout=300
                deadline=$(($(date +%s) + timeout))

                checkInstances() {
                  instances=$(cf app simulated-load | awk '/instances: / { print $2 }')
                  RUNNING=$(echo "${instances}" | awk -F / '{ print $1 }')
                  EXPECTED=$(echo "${instances}" | awk -F / '{ print $2 }')

                  if [ "${RUNNING}" -lt "${EXPECTED}" ]; then
                    return "1";
                  fi

                  return "0";
                }

                while [ "$(checkInstances && echo $?)" -eq "1" ]; do
                  sleep 5
                  echo "Retrying $((timeout - (deadline - $(date +%s))))s..."

                  if [ "$(date +%s)" -gt "${deadline}" ] ; then
                    echo "We're expecting ${EXPECTED} number of instance(s) to run."
                    echo "Only ${RUNNING} instance(s) running..."

                    exit 1
                  fi
                done

                echo Done!

      - task: sync-admin-users
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: "2.2"
          inputs:
            - name: paas-cf
            - name: config
            - name: cf-secrets
            - name: cf-manifest
          params:
            DISABLE_USER_CREATION: ((disable_user_creation))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ${DISABLE_USER_CREATION} && echo "WARNING: Admin user creation disabled in this environment!" && exit 0

                . ./config/config.sh

                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                export UAA_ADMIN_PASSWORD
                UAA_ADMIN_PASSWORD=$($VAL_FROM_YAML secrets_uaa_admin_password cf-secrets/cf-secrets.yml)
                cd paas-cf/scripts
                bundle
                bundle exec sync-admin-users.rb "${API_ENDPOINT}" ../config/admin_users.yml "((NEW_ACCOUNT_EMAIL_ADDRESS))"

      - task: deploy-graphite-nozzle
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: graphite-nozzle
            - name: config
          params:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                cf target -o admin -s monitoring

                cat <<EOF > graphite-nozzle.json
                [
                    {"protocol":"udp","destination":"${GRAPHITE_SERVER}","ports":"8125"}
                ]
                EOF
                cf create-security-group graphite-nozzle graphite-nozzle.json
                cf bind-security-group graphite-nozzle admin monitoring

                cd graphite-nozzle

                echo "web: graphite-nozzle" > Procfile

                cat <<EOF > manifest.yml
                ---
                applications:
                - name: graphite-nozzle
                  memory: 100M
                  instances: 1
                  no-route: true
                  health-check-type: none
                  buildpack: go_buildpack
                  env:
                    DOPPLER_ENDPOINT: "${DOPPLER_ENDPOINT}"
                    UAA_ENDPOINT: "${UAA_ENDPOINT}"
                    STATSD_ENDPOINT: "${GRAPHITE_SERVER}:8125"
                    FIREHOSE_USERNAME: "${FIREHOSE_USER}"
                    FIREHOSE_PASSWORD: "${FIREHOSE_PASS}"
                    SUBSCRIPTION_ID: "firehose"
                    STATSD_PREFIX: "cfstats."
                    SKIP_SSL_VALIDATION: "true"
                    PREFIX_JOB: "true"
                EOF

                ../paas-cf/concourse/scripts/cf_push_on_git_change.sh graphite-nozzle

      - task: deploy-healthcheck
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          params:
            DISABLE_HEALTHCHECK_DB: ((disable_healthcheck_db))
          inputs:
            - name: paas-cf
            - name: config
          outputs:
            - name: deployed-healthcheck
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                cf target -o admin -s healthchecks
                BUILD_ROOT=$(pwd)
                cd paas-cf/platform-tests/example-apps/healthcheck

                if  [ "${DISABLE_HEALTHCHECK_DB:-}" != "true" ] ; then
                  cf create-service postgres Free healthcheck-db
                  while ! cf service healthcheck-db | grep -q 'Status: create succeeded'; do
                    echo "Waiting for creation of service to complete..."
                    sleep 30
                  done

                  ruby -ryaml -e '
                    manifest = YAML.load_file("manifest.yml")
                    manifest["applications"].each { |app| app["services"] = ["healthcheck-db"] }
                    File.write("manifest.yml", manifest.to_yaml)
                  '
                fi

                cf blue-green-deploy healthcheck
                cf delete -f healthcheck-old

                cd "${BUILD_ROOT}"
                echo "yes" > deployed-healthcheck/healthcheck-deployed
        on_success:
          put: deployed-healthcheck
          params:
            file: deployed-healthcheck/healthcheck-deployed

      - task: deploy-paas-billing
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            COMPOSE_API_KEY: ((compose_api_key))
            DEPLOY_ENV: ((deploy_env))
          inputs:
            - name: paas-cf
            - name: paas-billing
            - name: config
            - name: cf-secrets
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                # TODO: Update the name once we change the plan names.
                BILLING_DB_PLAN="Free"
                if [ "${DEPLOY_ENV}" = "prod" ]; then
                  BILLING_DB_PLAN="M-dedicated-9.5"
                fi

                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                CF_CLIENT_SECRET=$($VAL_FROM_YAML secrets_uaa_clients_paas_billing_secret cf-secrets/cf-secrets.yml)

                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" -o admin -s billing

                if ! cf service billing-db > /dev/null; then
                  cf create-service postgres "${BILLING_DB_PLAN}" billing-db
                  while ! cf service billing-db | grep -q 'Status: create succeeded'; do
                    echo "Waiting for creation of service to complete..."
                    sleep 30
                  done
                fi

                cd paas-billing

                ruby -ryaml -e "
                  env = {
                    'CF_CLIENT_ID' => 'paas-billing',
                    'CF_CLIENT_SECRET' => '${CF_CLIENT_SECRET}',
                    'CF_CLIENT_REDIRECT_URL' => 'https://billing.${SYSTEM_DNS_ZONE_NAME}/oauth/callback',
                    'CF_API_ADDRESS' => '${API_ENDPOINT}',
                    'COMPOSE_API_KEY' => '${COMPOSE_API_KEY}',
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] = {} unless app['env']
                    app['env'].merge!(env)
                    app['services'] = ['billing-db']
                    app['routes'] = [
                      { 'route' => 'billing.${SYSTEM_DNS_ZONE_NAME}' }
                    ]
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf push paas-billing

      - task: deploy-paas-compose-scraper
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          params:
            ENABLE_DATADOG: ((enable_datadog))
            COMPOSE_BILLING_EMAIL: ((compose_billing_email))
            COMPOSE_BILLING_PASSWORD: ((compose_billing_password))
            DATADOG_API_KEY: ((datadog_api_key))
            DATADOG_APP_KEY: ((datadog_app_key))
            DEPLOY_ENV: ((deploy_env))
          inputs:
            - name: paas-cf
            - name: paas-compose-scraper
            - name: config
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                if [ "${ENABLE_DATADOG:-}" != "true" ] ; then
                  echo "ENABLE_DATADOG=${ENABLE_DATADOG} so skipping paas-compose-scraper deploy"
                  exit 0
                fi

                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" -o admin -s monitoring

                cd paas-compose-scraper/

                ruby -ryaml -e "
                  env = {
                    'COMPOSE_EMAIL' => '${COMPOSE_BILLING_EMAIL}',
                    'COMPOSE_PASSWORD' => '${COMPOSE_BILLING_PASSWORD}',
                    'COMPOSE_ACCOUNT_NAME' => 'gds',
                    'COMPOSE_CLUSTER_ID' => '5941cf9f859d2c0015000021',
                    'DATADOG_API_KEY' => '${DATADOG_API_KEY:-}',
                    'DATADOG_APP_KEY' => '${DATADOG_APP_KEY:-}',
                    'DATADOG_TAGS' => 'deployment:${DEPLOY_ENV}',
                    'CHECK_INTERVAL_SECONDS' => '300',
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] ||= {}
                    app['env'].merge!(env)
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf push paas-compose-scraper

      - do:
        - task: build-paas-admin
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: node
                tag: 8-alpine
            inputs:
              - name: paas-admin
            outputs:
              - name: paas-admin-dist
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  cd paas-admin
                  npm install
                  NODE_ENV=production npm run build

                  cp -Ra . ../paas-admin-dist

        - task: render-manifest-paas-admin
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/spruce
                tag: c735581beb174ecc95ca1a7b57eff444af3bf099
            inputs:
              - name: paas-admin-dist
              - name: cf-vars-store
            outputs:
              - name: paas-admin-manifest
            params:
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              NOTIFY_API_KEY: ((notify_api_key))
              NOTIFY_WELCOME_TEMPLATE_ID: 1859ce68-f133-4218-ac6e-a8ef32a41292
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  cat <<EOF > paas-admin-env-and-routes.yml
                  applications:
                  - name: paas-admin
                    routes:
                    - route: "admin.${SYSTEM_DNS_ZONE_NAME}"
                    env:
                      OAUTH_CLIENT_ID: "paas-admin"
                      OAUTH_CLIENT_SECRET: "(( grab uaa_clients_paas_admin_secret ))"
                      API_URL: "https://api.${SYSTEM_DNS_ZONE_NAME}"
                      BILLING_URL: "https://billing.${SYSTEM_DNS_ZONE_NAME}"
                      UAA_URL: "https://login.${SYSTEM_DNS_ZONE_NAME}"
                      NOTIFY_API_KEY: "${NOTIFY_API_KEY}"
                      NOTIFY_WELCOME_TEMPLATE_ID: "${NOTIFY_WELCOME_TEMPLATE_ID}"
                  EOF

                  spruce merge \
                    paas-admin-dist/manifest.yml \
                    paas-admin-env-and-routes.yml \
                    cf-vars-store/cf-vars-store.yml \
                    | spruce merge --cherry-pick applications \
                      > paas-admin-manifest/manifest.yml

        - task: deploy-paas-admin
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/cf-cli
                tag: b70af5321b8c80994add887c94827aa583f95541
            inputs:
              - name: paas-cf
              - name: paas-admin-dist
              - name: paas-admin-manifest
              - name: config
              - name: cf-secrets
            params:
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - -x
                - |
                  VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                  export CF_CLIENT_SECRET
                  CF_CLIENT_SECRET=$($VAL_FROM_YAML secrets_uaa_clients_paas_billing_secret cf-secrets/cf-secrets.yml)

                  . ./config/config.sh
                  cf api "${API_ENDPOINT}"
                  cf auth "${CF_ADMIN}" "${CF_PASS}"
                  cf target -o admin -s public

                  cd paas-admin-dist

                  cf zero-downtime-push paas-admin -f ../paas-admin-manifest/manifest.yml

      - task: run-bosh-cleanup
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
            - name: paas-cf
            - name: bosh-secrets
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                bosh -n clean-up --all

    - aggregate:
      - do:
        - task: register-compose-broker
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/cf-cli
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: paas-cf
              - name: config
            params:
              APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  . ./config/config.sh
                  echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                  if cf service-brokers | grep "compose-broker\s"; then
                    cf update-service-broker compose-broker compose-broker "$COMPOSE_BROKER_PASS" "https://compose-broker.${APPS_DNS_ZONE_NAME}"
                  else
                    cf create-service-broker compose-broker compose-broker "$COMPOSE_BROKER_PASS" "https://compose-broker.${APPS_DNS_ZONE_NAME}"
                  fi

        - task: register-elasticache-broker
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/cf-cli
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: paas-cf
              - name: config
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  . ./config/config.sh
                  echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}"

                  if cf service-brokers | grep "elasticache-broker\s"; then
                    cf update-service-broker elasticache-broker elasticache-broker "${ELASTICACHE_BROKER_PASS}" "https://${ELASTICACHE_BROKER_SERVER}"
                  else
                    cf create-service-broker elasticache-broker elasticache-broker "${ELASTICACHE_BROKER_PASS}" "https://${ELASTICACHE_BROKER_SERVER}"
                  fi
                  cf enable-service-access redis

      - task: update-kibana-timezone
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            DEPLOY_ENV: ((deploy_env))
          inputs:
          - name: paas-cf
          - name: cf-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              SCRIPT_DIR="./paas-cf/concourse/scripts"

              ruby "${SCRIPT_DIR}/extract_terraform_state_to_yaml.rb" \
                < cf-tfstate/cf.tfstate \
                > cf-tfstate.yaml

              export ES_HOST
              ES_HOST=$(ruby "${SCRIPT_DIR}/val_from_yaml.rb" terraform_outputs_logsearch_elastic_master_elb_dns_name cf-tfstate.yaml)
              export ES_PORT="9200"
              ruby "${SCRIPT_DIR}/kibana_set_utc.rb"

      - task: datadog-terraform-apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: f810666094e6c65eeb183f9833b231aa24df6811
          inputs:
            - name: datadog-tfstate
            - name: paas-cf
            - name: config
          outputs:
            - name: updated-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_datadog_api_key: ((datadog_api_key))
            TF_VAR_datadog_app_key: ((datadog_app_key))
            TF_VAR_aws_account: ((aws_account))
            ENABLE_DATADOG: ((enable_datadog))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                cp datadog-tfstate/datadog.tfstate updated-tfstate/datadog.tfstate
                terraform init paas-cf/terraform/datadog

                if [ -n "${TF_VAR_datadog_api_key}" ] && [ -n "${TF_VAR_datadog_app_key}" ] && [ "${ENABLE_DATADOG}" = "false" ]; then
                  echo "Datadog disabled but keys present, running check cleanup..."
                  terraform destroy -force \
                      -state=updated-tfstate/datadog.tfstate \
                      -var-file="paas-cf/terraform/${TF_VAR_aws_account}.tfvars" \
                      paas-cf/terraform/datadog
                  exit 0
                fi

                if [ "${ENABLE_DATADOG}" = "true" ]; then
                  terraform apply \
                    -auto-approve=true \
                    -var-file="paas-cf/terraform/((aws_account)).tfvars" \
                    -state=updated-tfstate/datadog.tfstate \
                    -var-file=config/job_instances.tfvars \
                    paas-cf/terraform/datadog
                else
                  echo "Datadog disabled, skipping terraform run..."
                  cp datadog-tfstate/datadog.tfstate updated-tfstate/datadog.tfstate
                fi
        ensure:
          put: datadog-tfstate
          params:
            file: updated-tfstate/datadog.tfstate

      - task: deploy-paas-metrics
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          params:
            ENABLE_DATADOG: ((enable_datadog))
            DATADOG_API_KEY: ((datadog_api_key))
            DATADOG_APP_KEY: ((datadog_app_key))
            DEPLOY_ENV: ((deploy_env))
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            AWS_REGION: ((aws_region))
          inputs:
            - name: paas-cf
            - name: config
            - name: cf-secrets
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                if  [ "${ENABLE_DATADOG:-}" != "true" ] ; then
                  echo "ENABLE_DATADOG=${ENABLE_DATADOG} so skipping paas-metrics deploy"
                  exit 0
                fi

                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                METRICS_SECRET=$($VAL_FROM_YAML secrets_uaa_clients_paas_metrics_secret cf-secrets/cf-secrets.yml)

                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" -o admin -s monitoring

                cd paas-cf/tools/metrics

                ruby -ryaml -e "
                  env = {
                    'CF_CLIENT_ID' => 'paas-metrics',
                    'CF_CLIENT_SECRET' => '${METRICS_SECRET}',
                    'CF_API_ADDRESS' => '${API_ENDPOINT}',
                    'CF_SKIP_SSL_VALIDATION' => 'true',
                    'DATADOG_API_KEY' => '${DATADOG_API_KEY:-}',
                    'DATADOG_APP_KEY' => '${DATADOG_APP_KEY:-}',
                    'DEPLOY_ENV' => '${DEPLOY_ENV}',
                    'ELB_ADDRESS' => 'https://healthcheck.${APPS_DNS_ZONE_NAME}/',
                    'TLS_DOMAINS' => [
                      'healthcheck.${APPS_DNS_ZONE_NAME}',
                      'api.${SYSTEM_DNS_ZONE_NAME}',
                      'uaa.${SYSTEM_DNS_ZONE_NAME}',
                      '${APPS_DNS_ZONE_NAME}'
                    ].join(','),
                    'AWS_REGION' => '${AWS_REGION}',
                    'AWS_ACCESS_KEY_ID' => '${METRICS_AWS_ACCESS_KEY_ID}',
                    'AWS_SECRET_ACCESS_KEY' => '${METRICS_AWS_SECRET_ACCESS_KEY}',
                  }
                  manifest = YAML.load_file('manifest.yml')
                  manifest['applications'].each { |app|
                    app['env'] = {} unless app['env']
                    app['env'].merge!(env)
                  }
                  File.write('manifest.yml', manifest.to_yaml)
                "

                cf push paas-metrics

      - task: deploy-paas-uaa-assets
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: paas-cf
            - name: config
            - name: cf-secrets
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                . ./config/config.sh
                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" -o admin -s assets

                cd paas-cf/tools/paas-uaa-assets

                cf blue-green-deploy paas-uaa-assets
                cf delete -f paas-uaa-assets-old

      - task: remove-unused-ses-smtp-access-keys
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: b2495d6ed07f680125d19aa7d1701da7efabb289
          inputs:
            - name: cf-tfstate
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                delete_unused_keys() {
                  terraform_outputs_key=$1
                  username=$2

                  jq_path=".modules[].outputs.${terraform_outputs_key}.value"
                  ACCESS_KEY_ID=$(jq -r "$jq_path" cf-tfstate/cf.tfstate)
                  if [ -z "$ACCESS_KEY_ID" ]; then
                    echo "could not find $terraform_outputs_key in terraform outputs"
                    exit 1
                  fi

                  UNUSED_ACCESS_KEYS=$(\
                    aws iam list-access-keys --user-name "$username" \
                    --query "AccessKeyMetadata[?AccessKeyId!=\`${ACCESS_KEY_ID}\`].AccessKeyId" \
                    --output text \
                  )
                  if [ -z "$UNUSED_ACCESS_KEYS" ]; then
                    echo "no access keys to revoke"
                  else
                    for key in $UNUSED_ACCESS_KEYS; do
                      echo "deleting key $key for user $username"
                      aws iam delete-access-key --user-name "$username" --access-key-id "$key"
                    done
                  fi
                }

                delete_unused_keys ses_smtp_aws_access_key_id "ses-smtp-${DEPLOY_ENV}"
                delete_unused_keys metrics_exporter_aws_access_key_id "metrics-exporter-${DEPLOY_ENV}"

  - name: smoke-tests
    serial_groups: [smoke-tests]
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
            trigger: true
          - get: cf-smoke-tests
          - get: paas-cf
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
          - get: cf-manifest
            passed: ['post-deploy']
          - get: cf-secrets
            passed: ['post-deploy']

      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: smoketest-user

        - task: smoke-tests-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: smoke_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: smoke-tests-run
          file: paas-cf/concourse/tasks/smoke-tests-run.yml
          ensure:
            task: upload-test-artifacts
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml

  - name: acceptance-tests
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
            trigger: true
          - get: cf-acceptance-tests
          - get: paas-cf
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
          - get: cf-manifest
            passed: ['post-deploy']
          - get: cf-secrets
            passed: ['post-deploy']

      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_cf_acceptance_tests))

        - task: generate-test-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: acceptance_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: run-tests
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/cf-acceptance-tests
                tag: c599048c56cc1508314315552bd11f413fab1c78
            params:
              DISABLE_CF_ACCEPTANCE_TESTS: ((disable_cf_acceptance_tests))
            inputs:
              - name: paas-cf
              - name: cf-acceptance-tests
                path: src/github.com/cloudfoundry/cf-acceptance-tests
              - name: test-config
            outputs:
              - name: artifacts
                path: /tmp/artifacts
            run:
              path: ./paas-cf/platform-tests/upstream/run_acceptance_tests.sh

          ensure:
            task: upload-test-artifacts
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml
          params:
            DISABLE_ADMIN_USER_CREATION: ((disable_cf_acceptance_tests))

  - name: custom-acceptance-tests
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
            trigger: true
          - get: paas-cf
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
          - get: cf-manifest
            passed: ['post-deploy']
          - get: cf-secrets
            passed: ['post-deploy']
          - get: cf-acceptance-tests

      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: custom-acceptance-test-user
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))

        - task: generate-test-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: acceptance_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: "Run custom acceptance tests"
          file: paas-cf/concourse/tasks/custom-acceptance-tests-run.yml
          params:
            DISABLE_CUSTOM_ACCEPTANCE_TESTS: ((disable_custom_acceptance_tests))
            DEPLOY_ENV: ((deploy_env))
            AWS_REGION: ((aws_region))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))

          ensure:
            task: upload-test-artifacts
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml
          params:
            DISABLE_ADMIN_USER_CREATION: ((disable_custom_acceptance_tests))

  - name: bosh-tests
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
            trigger: true
          - get: paas-cf
            passed: ['post-deploy','app-availability-tests','api-availability-tests']
          - get: cf-manifest
          - get: bosh-secrets
          - get: bosh-CA-crt
      - task: test-bosh-vms
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 777204b5c870fc7ebf0d2b7aa55fcccddfa29c4b
          inputs:
            - name: paas-cf
            - name: cf-manifest
            - name: bosh-secrets
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
                bosh deployment
                bosh vms | tee vms.txt
                vms_not_running=$(grep '|' vms.txt | grep -cEv "(\-\-|VM|running)" || true)
                if [ "${vms_not_running}" -gt "0" ]; then
                  echo "Error: Number of not running VMs: ${vms_not_running}."
                  exit 1
                else
                  echo "Success: All VMs are up and running."
                fi

  - name: performance-tests
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['smoke-tests', 'acceptance-tests', 'custom-acceptance-tests', 'bosh-tests']
            trigger: true
          - get: paas-cf
            passed: ['smoke-tests', 'acceptance-tests', 'custom-acceptance-tests', 'bosh-tests']
          - get: cf-manifest
            passed: ['smoke-tests', 'acceptance-tests', 'custom-acceptance-tests']
          - get: cf-secrets
            passed: ['smoke-tests', 'acceptance-tests', 'custom-acceptance-tests']

      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: performance-tests-user

        - task: generate-test-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: acceptance_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: run-tests
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/cf-acceptance-tests
                tag: c599048c56cc1508314315552bd11f413fab1c78
            inputs:
              - name: paas-cf
              - name: test-config
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  echo "Running tests"
                  export CONFIG
                  CONFIG="$(pwd)/test-config/config.json"
                  ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/performance/

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml

  - name: tag-release
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['performance-tests']
            trigger: true
          - get: paas-cf
            passed: ['performance-tests']
          - get: git-keys

      - put: release-version
        params: {bump: patch}

      - task: tag-release
        config:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/git-ssh
              tag: 465642da06051a55630d39c899697b678f66a7f7
          platform: linux
          params:
            aws_account: ((aws_account))
            deploy_env: ((deploy_env))
            TAG_PREFIX: ((TAG_PREFIX))
            TAG_FILTER: ((paas_cf_tag_filter))
          inputs:
          - name: paas-cf
          - name: release-version
          - name: git-keys
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -z "${TAG_PREFIX}" ]; then
                echo \$TAG_PREFIX not set, skipping
                exit 0
              fi
              paas-cf/concourse/scripts/tag_release.sh \
                "${TAG_PREFIX}" "${aws_account}" "${deploy_env}" "${TAG_FILTER}"

  - name: pipeline-unlock
    serial: true
    plan:
      - get: pipeline-trigger
        passed: ['tag-release']
        trigger: true
      - get: pipeline-pool
      - task: update-datadog
        config:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/git-ssh
              tag: 465642da06051a55630d39c899697b678f66a7f7
          platform: linux
          params:
            DATADOG_API_KEY: ((datadog_api_key))
            ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            ENABLE_DATADOG: ((enable_datadog))
            PIPELINE_NAME: ((pipeline_name))
          inputs:
          - name: pipeline-pool
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cd pipeline-pool
              current_time=$(date +%s)
              lock_time=$(git log -1  --pretty=format:'%ct')
              delta=$((current_time - lock_time))
              echo "Total pipeline time was: ${delta}s"

              if [ "${ENABLE_DATADOG}" = "true" ]; then
                curl  -X POST -H "Content-type: application/json" \
                  -d "{ \"series\" :
                         [{\"metric\":\"concourse.pipeline_time\",
                          \"points\":[[$current_time, ${delta}]],
                          \"type\":\"gauge\",
                          \"tags\":[
                            \"deploy_env:${ENV}\",
                            \"pipeline_name:${PIPELINE_NAME}\",
                            \"aws_account:${AWS_ACCOUNT}\"
                          ]}
                        ]
                    }" \
                  "https://app.datadoghq.com/api/v1/series?api_key=${DATADOG_API_KEY}"
              fi
      - try:
          task: unlock-the-pipeline
          config:
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: latest
            platform: linux
            params:
              DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                   echo "Pipeline locking is disabled, this task will fail and this is OK."
                   exit 1
                fi
          on_success:
            put: pipeline-pool
            params:
              release: pipeline-pool

  - name: pipeline-check-lock
    plan:
      - get: pipeline-pool
      - task: print-pipeline-lock-state
        config:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/git-ssh
              tag: 465642da06051a55630d39c899697b678f66a7f7
          platform: linux
          inputs:
          - name: pipeline-pool
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -f "pipeline-pool/((pipeline_name))/claimed/lock" ]; then
                current_status_message="LOCKED"
              elif [ -f "pipeline-pool/((pipeline_name))/unclaimed/lock" ]; then
                current_status_message="UNLOCKED"
              else
                echo "Error: Cannot find lock in pool: pipeline-pool/((pipeline_name))/{un,}claimed/lock"
                exit 1
              fi

              cd pipeline-pool
              export GIT_PAGER="cat"
              git log -1 --pretty=format:"
              Lock status is: ${current_status_message}

              Last commit change:
               - %cr at %ci
               - %s
              "

  - name: pipeline-release-lock
    plan:
      - get: pipeline-pool
      - put: pipeline-pool
        params:
          release: pipeline-pool

  - name: rotate-cloudfoundry-credentials
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-secrets
      - get: cf-manifest
      - get: cf-vars-store

    - task: rotate-jwt-secrets
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: 2.2-slim
        inputs:
          - name: paas-cf
          - name: cf-vars-store
        outputs:
          - name: updated-cf-vars-store
        run:
          path: sh
          args:
            - -e
            - -c
            - ./paas-cf/manifests/cf-manifest/scripts/rotate-jwt-keys.rb \
                < cf-vars-store/cf-vars-store.yml \
                > updated-cf-vars-store/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-vars-store/cf-vars-store.yml

    - task: update-uaa-admin-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/cf-uaac
            tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
        inputs:
          - name: paas-cf
          - name: cf-secrets
          - name: cf-manifest
        outputs:
          - name: rotated-cf-secrets
        params:
          UAA_ENDPOINT: "https://uaa.((system_dns_zone_name))"
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

              sed "s/^secrets_uaa_admin_password:.*$//" cf-secrets/cf-secrets.yml \
                > rotated-cf-secrets/cf-secrets-cleared.yml

              ./paas-cf/manifests/cf-manifest/scripts/generate-cf-secrets.rb \
                --existing-secrets rotated-cf-secrets/cf-secrets-cleared.yml \
                > rotated-cf-secrets/cf-secrets.yml

              UAA_ADMIN_CLIENT_SECRET=$($VAL_FROM_YAML secrets_uaa_admin_client_secret cf-secrets/cf-secrets.yml)
              UAA_ADMIN_PASSWORD=$($VAL_FROM_YAML secrets_uaa_admin_password rotated-cf-secrets/cf-secrets.yml)

              uaac target "${UAA_ENDPOINT}"
              uaac token client get admin -s "${UAA_ADMIN_CLIENT_SECRET}"
              uaac password set admin -p "${UAA_ADMIN_PASSWORD}"
      on_success:
        put: cf-secrets
        params:
          file: rotated-cf-secrets/cf-secrets.yml

  - name: clear-cloudfoundry-credentials
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
        passed: ['rotate-cloudfoundry-credentials']
      - get: cf-secrets
        passed: ['rotate-cloudfoundry-credentials']
        trigger: true
      - get: cf-tfstate

    - task: clear-passwords
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: 2.2-slim
        inputs:
          - name: paas-cf
          - name: cf-secrets
        outputs:
          - name: modified-cf-secrets
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-cf-secrets.rb < \
                cf-secrets/cf-secrets.yml > \
                modified-cf-secrets/cf-secrets.yml
      on_success:
        put: cf-secrets
        params:
          file: modified-cf-secrets/cf-secrets.yml

    - task: forget-access-keys
      file: paas-cf/concourse/tasks/forget-access-keys.yml
      params:
        AWS_DEFAULT_REGION: ((aws_region))
      ensure:
        put: cf-tfstate
        params:
          file: updated-tfstate/cf.tfstate

  - name: expire-aws-keys
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-tfstate
      - get: expire-aws-keys-timer
        trigger: true
    - task: forget-access-keys
      file: paas-cf/concourse/tasks/forget-access-keys.yml
      params:
        AWS_DEFAULT_REGION: ((aws_region))
      ensure:
        put: cf-tfstate
        params:
          file: updated-tfstate/cf.tfstate

  - name: rotate-cf-certs-cas
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-manifest-pre-vars
      - get: cf-vars-store
    - task: rotate-cf-certs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: 2.2-slim
        inputs:
          - name: paas-cf
          - name: cf-manifest-pre-vars
          - name: cf-vars-store
        outputs:
          - name: updated-cf-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-cf-certs.rb --ca \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --vars-store cf-vars-store/cf-vars-store.yml \
                > updated-cf-certs/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-certs/cf-vars-store.yml

  - name: rotate-cf-certs-leafs
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-manifest-pre-vars
      - get: cf-vars-store
    - task: rotate-cf-certs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: 2.2-slim
        inputs:
          - name: paas-cf
          - name: cf-manifest-pre-vars
          - name: cf-vars-store
        outputs:
          - name: updated-cf-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-cf-certs.rb --leaf \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --vars-store cf-vars-store/cf-vars-store.yml \
                > updated-cf-certs/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-certs/cf-vars-store.yml

  - name: delete-old-cf-certs
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-manifest-pre-vars
      - get: cf-vars-store
    - task: rotate-cf-certs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: 2.2-slim
        inputs:
          - name: paas-cf
          - name: cf-manifest-pre-vars
          - name: cf-vars-store
        outputs:
          - name: updated-cf-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-cf-certs.rb --delete \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --vars-store cf-vars-store/cf-vars-store.yml \
                > updated-cf-certs/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-certs/cf-vars-store.yml

  - name: generate-git-keys
    plan:
      - task: ssh-keygen
        config:
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/git-ssh
              tag: 465642da06051a55630d39c899697b678f66a7f7
          platform: linux
          outputs:
          - name: generated-git-keys
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ssh-keygen -t rsa -b 4096 -f git-key -N ''
              tar -cvzf generated-git-keys/git-keys.tar.gz ./git-key ./git-key.pub
              cat ./git-key.pub
        on_success:
          put: git-keys
          params:
            file: generated-git-keys/git-keys.tar.gz

  - name: bump-major-version
    plan:
      - put: release-version
        params: {bump: major}

  - name: bump-minor-version
    plan:
      - put: release-version
        params: {bump: minor}

  - name: bump-patch-version
    plan:
      - put: release-version
        params: {bump: patch}

  - name: show-release-version
    plan:
      - get: release-version

      - task: show-release-version
        config:
          platform: linux
          inputs:
            - name: release-version
          run:
            path: cat
            args:
            - release-version/number

  - name: continuous-smoke-tests
    serial_groups: [smoke-tests]
    build_logs_to_retain: 10000
    plan:
      - aggregate:
        - get: smoke-tests-timer
          trigger: true
        - get: deployed-healthcheck
        - get: cf-smoke-tests
        - get: paas-cf
          passed: ['post-deploy']
        - get: cf-manifest
          passed: ['post-deploy']
        - get: cf-secrets
          passed: ['post-deploy']

      - task: assert-should-run
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
              tag: latest
          inputs:
            - name: deployed-healthcheck
          params:
            PERSISTENT_ENVIRONMENT: ((persistent_environment))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
              if [ "$HEALTHCHECK_DEPLOYED" = "no" ] && [ "$PERSISTENT_ENVIRONMENT" != "true" ]; then
                echo "Healthcheck is not deployed and this is not a persistent environment"
                echo "Skipping smoke tests"
                exit 1
              fi
      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: cont-smoketest-user

        - task: smoke-tests-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: smoke_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: smoke-tests-run
          file: paas-cf/concourse/tasks/smoke-tests-run.yml
          on_failure:
            task: alert
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: governmentpaas/awscli
                  tag: b2495d6ed07f680125d19aa7d1701da7efabb289
              params:
                AWS_DEFAULT_REGION: ((aws_region))
                DEPLOY_ENV: ((deploy_env))
                SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
                ALERT_EMAIL_ADDRESS: ((ALERT_EMAIL_ADDRESS))
              inputs:
                - name: paas-cf
              run:
                path: sh
                args:
                - -e
                - -c
                - |
                  paas-cf/concourse/scripts/smoke_tests_email.sh \
                    "${DEPLOY_ENV}" "${SYSTEM_DNS_ZONE_NAME}" "${ALERT_EMAIL_ADDRESS}"
          ensure:
            task: upload-test-artifacts
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml

  - name: check-var-store-certs
    build_logs_to_retain: 50
    plan:
      - aggregate:
        - get: check-var-store-certs-timer
          trigger: true
        - get: paas-cf
          # passed: ['generate-cf-config']
        - get: cf-vars-store
          # passed: ['generate-cf-config']

      - task: check-var-store-certs
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.2-slim
          inputs:
            - name: paas-cf
            - name: cf-vars-store
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/check-vars-store-certificates.rb 30 < cf-vars-store/cf-vars-store.yml
        on_failure:
          task: alert
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/awscli
                tag: b2495d6ed07f680125d19aa7d1701da7efabb289
            params:
              AWS_DEFAULT_REGION: ((aws_region))
              DEPLOY_ENV: ((deploy_env))
              SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
              ALERT_EMAIL_ADDRESS: ((ALERT_EMAIL_ADDRESS))
            inputs:
              - name: paas-cf
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                paas-cf/concourse/scripts/check-vars-store-certificates-email.sh \
                  "${DEPLOY_ENV}" "${SYSTEM_DNS_ZONE_NAME}" "${ALERT_EMAIL_ADDRESS}"
